Release notes

version 5.33.1: 4/11/2015
	general:	fix errors when compiling the package with various compilers
    occ:        C++ fixes
	ocide:		don't colorize #if #else #endif blocks if colorizing is turned off
	ocide:		if an edit window is resized that has line numbers, redraw the line numbers
	ocide:		fix problem where #if #else #endif block processing could result in
				random lines becoming grey
    olink:      speed up linker
    olink:      optimize C++ programs for size
    rtl:        C++ fixes
    rtl:        fix scanf("%c", &c); it would look ahead one character which required that something be typed at 
                the console if processing the '\n' character at the end of a line.

version 5.32.1: 03/24/2015
    olink:      add the system library path to the front of the include path list, instead of replacing it
    ocide:      fix potential crash condition when switching projects
    ocide:      fix several compiler properties that would show as blanks when the IDE was reopened
    coff2ieee:  handle unique COMDATS like normal sections, and define their symbols
    rtl:        add __alloca_probe and friends; add security stuff to msvcrt.l

version 5.31.1: 03/21/2015
    occ:        if a multiply of two constants made it to the back end (e.g. when not optimizing), 
                code generation would be incorrect
    occ/occpr:  could crash if a return statement was incomplete, e.g. for 'return( }'
    occ:        using __cdecl on a function in an extern "C" block turned it into a C++ function
    olink:      default case sensitivity to TRUE
    coff2ieee:  automatically rename _WinMain@16 to WinMain to handle the difference in name mangling
    ocide:      took care of an allocation error that could cause project settings to change randomly
    ocide:      disable code completion inside strings
    ocide:      add an option to allow automatic variables to be bolded or italicized
    ocide:      cause a project to be rebuilt if files have been removed from it
    oimplib:    allow '@' to be inside names in the def file.   But not at the beginning...
    rtl:        global_unwind was in the data segment
    rtl:        add many C99 and C++ functions to msvcrt.l
    rtl:        added more imports from msvcrt.dll, kernel32.dll and user32.dll to allow linking with microsoft files

version 5.30.1: 3/12/2015
    rtl:        sscanf was broken for floating point numbers

version 5.29.1: 03/12/2015
    create new program 'coff2ieee' to convert msvc object files to ieee format
    occ/dlpe:   minimize import thunking to support the import format in microsoft object files
    olib/olink: debug information in a library was sometimes parsed incorrectly
    olink:      optimized library searches, much faster when parsing libraries now
    ocide:      add CTL-F1 to navigate to the help documentation for a windows function
    ocide:      add more colorization options
	ocide:		fix problem with sometimes crashing when selecting text backwards in the editor and deleting it
    rtl:        add minimal support for vs2010 object files

version 5.28.1: 02/25/2015
    occ:    fix memory allocation in register allocator to not grow without bounds
    occ:    increase macro buffer size to 128k - openjpeg.l used > 64K in an input sequence
    occ:    make anonymous type names random to support reuse of same declaration in same header file
    occ:    if specifying a file to compile that is in another directory, put the output files in the current directory
    occ:    debug info was broken

version 5.27.1: 2/21/2015
    occ:    add wildcard processing to command line
    occ:    allow arithmetic on 'void *' (treat as char *)
    occ:    c99:  if an index variable was defined in a for statement, it would not get optimized into a register
    occ:    variables referenced inside a sizeof() expression should not be marked as externs
    occ:    c language: allow structures without members (but they have size 0)
    occ:    allow empty initializers for structures and arrays
    ocide:      create the orange c projects directory if installing from ZIPPED executables file
    install:    fix so that OCIDE would work if installed from the ZIPPED executables file
    install:    add the appdata directory to the ZIPPED executables file 

version 5.26.1: 2/16/2015
    occ:    package now compiles 'lame' and 'x264' correctly
    occ:    allow linkage specifiers to be specified multiple times.
    occ:    autoincrement/decrement of floating point numbers did not work properly
    occ:    fixed minor bug in optimizer for floating point, introduced last version
    occ:    in c++ mode using a variable with an enumerated type as an array index didn't work
    occ:    fix problem with loop invariant code motion being too liberal
    occ:    fix problem with floating point comparisions that were not part of a control statement
    occ:    c99: allow variable length macro arguments list to be length zero
    occ:    replacing __VA_ARGS__ would terminate a replacement sequence
    occ:    inline functions with parameters of type 'array' crashed the compiler
    occ:    fix c99 designator syntax to compile properly
    occ:    fix c99 cast to structure initialization not to crash
    occ:    macro invocations that spanned lines could fail with an error
    occ:    fix pointer aliasing code to deal with multiplies by zero making it through from the front end
    occ:    relax the requirement that an index variable declared in a for statement be immediately initialized
    occ:    promotion of integer initializations to constant values won't occur unless the declaration is static storage class
    occ:    initializing an auto variable of structured type didn't erase the uninitialized portions of the structure
    occ:    put a limit on the size of functions that may be inlined.
    occ:    fix problem in constant propagation: size of constant could change, disrupting function calls
    occ:    c *= a * b would convert the rhs to the type of c before doing the *= (sometimes resulting in truncation)
    occ:    when the compiler invoked the linker, files on the command line specified with .\ 
            (e.g. .\test.c) wouldn't be passed to the linker properly
    ocide:  fix crash when trying to add an array element to the watch window (example: argv[0])
    clibs:  add InitializeCriticalSectionAndSpinCount
    clibs:  update printf of floating point numbers to make it faster
    clibs:  fix definition of S_ISREG & friends to make it more friendly

version 5.25.1: 2/10/2015
    occ:    some floating point optimizations - moves without involving FPU, reordering
    occ:    reduced register pressure during calls embedded in expressions
    occ:    minor loop optimization - register was getting copied to another register
    occ:    allow floating point parsing to parse constants with very large mantissas
    occ:    allow taking the address of an assignment, preincrement, or predecrement expression
    clibs:  sanitize C language headers for use with C++
    clibs:  speed up an very slow atof

version 5.24.1:  2/2/2015
    ocide:  'make' of a project wouldn't work unless a full make had been done first.
    ocl:    wouldn't run on DOS properly
    dlpe:   wouldn't find dpmist32.bin

version 5.23.1: 1/25/2015
    ocide: new feature: project auto dependencies and calculate build order
    ocide: update documentation/pictures to latest gui and add project auto dependencies
    ocide: when a file was edited, old dependencies weren't being removed.
            This could cause compilation where none was needed when the old dependency was modified
    ocide: dependencies weren't being calculated properly, when they were on the include
            path rather than in the project.
    ocide: when adding an existing file, immediately scan it for dependencies
    ocide: when changing project properties (e.g. the include path) recalculate the project
            dependencies
    ocide: remove 'exit process' dialog from debugger, show exit status in information window
            'exit process' is still in the 'run without debug' view.
    ocide: on the right-click from the edit window 'add to watch',
            pop up the add watch dialog if the word under the cursor isn't a known variable
    ocide: gray out the 'remove from watch' item if you didn't click on an item 
            that could be removed
    ocide: change text of a button from 'build all' to 'make' in the toolbar.
    ocide: resource files with non-standard control names couldn't be reloaded after save
    ocide: some resource file comments disappearing
    ocide: don't allow workarea to be reloaded while debugging
    ocide: when 'remove all bookmarks' is pressed, prompt to see if that is the intended activity
    ocide: fix crash when trying to rename a project in the workarea window
    ocide: fix crash while loading resource file
    ocide: fix crash when loading invalid work area from command line
    ocide: opening the debug/memory window could crash the IDE
    ocide: when using tabbed windows, don't switch back to nontabbed mode0
    ocide: generated makefile did not work with 'include' paths
    ocide: generated makefile can be saved in more locations than before
    occ:   prototyping a function, then prototyping it again inside another function body
           would fail with an error
    omake: quoting an existing file as a dependency results in the dependency not being resolved
    clibs: add more to win32 headers

version 5.22.1: 01/19/15
    general:    increase compatibility when building the tools with openwatcom
    ocide:  ungray 'make' and 'rebuild' and 'build active project' in menus
    ocide:  adjust right click version of 'make' and 'rebuild' to make the 
            selected project instead of making/building everything
    ocide:  fix 'generate make file' to work with non-relative paths and paths 
            with spaces in them
    ocide:  stepping over a function such as gets() that asks for console input 
            would leave the 'stop debugging' icon available, and if you pressed 
            it the IDE would lock up.
    ocide:  make '.l' files in projects a dependency of the project EXE to help 
            the make process work better
    ocide:  editor: only need to click once on the tabs at the top of the screen, 
            to change the file being viewed
    ocide:  editor: holding shift down and left-clicking will select lines from 
            the old cursor position to the new one.
    occ:    alloca and _alloca changed to __alloca in the compiler keyword list, 
            then defined again as a preprocessor define in 'malloc.h' to match GNU-C
    occ:    more work done on C++ STL compatibility (work in progress)
    omake:  exit if the dependency nesting is too deep, as it is likely due to recursive rules
    omake:  support quotes on rules and dependencies - the quotes are part of the name
    olink:  fix bug where a ".l" inside a file name (not at the end) would cause a crash
    olib:   fix bug where debug info of structures inside a library would cause 
            the link stage to fail
    olib:   fix bug where +- with fully specified paths could fail
    clibs:  make adjustments for having changed 'alloca' to a #define    
    documentation:  document predefined preprocessor definitions in various places

version 5.21.1: 01/14/15
    occ:    invariant code motion optimization fixed and put back in the code
    occ:    the constant '0 || 0' would not be evaluated at compile time and
            in some contexts would cause an error about needing a constant value
            (compiles lpng now)
    occ:    allow #defines to be utilized properly inside the quotes on #includes
    occ:    make some improvements that speed up the comparison part of generated loops
    olib:   fix 'replace' mode to add a file if it doesn't already exist
    ocide:  fix problems with building static libraries
    oasm:   update preprocessor
    orc:    update preprocessor
    clibs:  add InterlockedCompareExchange
    
version 5.20.1: 12/7/14
    general: use fflush() liberally throughout to speed disk access
    general: fix sources to compile with OPENWATCOM & MINGW compilers
    general: switch to #include <sstream> instead of #include <strstream> when 
             possible (e.g. except when utilizing OPENWATCOM)
    occ:    defining the same typedef inside of multiple functions resulted in 
            an error
    occ:    rewrite inlining code to make it work better
    occ:    basic support for C++ (no debugging, may have some bugs)
    occ:    fix problem where using debug information while specifying multiple 
            files on the command line would crash the compiler
    occ:    fix problem where browse information would take exponential time due 
            to excess list traversal
    occ:    "array[*index++] ++;"   would increment 'index' twice.
    occ:    don't expand inline functions when generating debug code
    occ:    typing "int a int b;" at the beginning of a function body
            wouldn't result in an error in C99/C11/C++ mode
    occ:    conversion of integers to pointers and vice versa in a function argument
            was allowed with a warning.   Now it is an error.
    occ:    add make dependency generation similar to gnu C
    occ:    fix all the bugs in the string merging algorithm
    ocide:  prettifying/ use default shell font throughout
    ocide:  default to Consolas font for edit windows on vista/7/8, use 
            bitstream mono font on XP.
    ocide:  fix a crash that could occur if you debug a file that was built in release mode
    ocide:  fix a crash that could occur when closing windows
    ocide:  fix a crash due to multiple threads doing a find simultaneously
    ocide:  fix crash that could occur sometime after removing the 'startup' project
    ocide:  fix crash that could occur when clicking the arrow in the title bar
            on for example the build window
    ocide:  fix crash that could occur when debugger's "stop running" button was pressed
    ocide:  fix crash that could occur sometime after doing a multi-file replace of text
    ocide:  fix random crash in BCC32 compile due to use of the dlawrence memory allocator
    ocide:  fix random crashes due to multiple threads utilizing the open window list
    ocide:  fix various problems with string resources
    ocide:  fix various problems with accelerator resources
    ocide:  fix various problems with menu resources
    ocide:  fix various problems with dialog/control resources
    ocide:  fix various problems with image editor
    ocide:  allow editing font-related meta data
    ocide:  fix problem when specifying the \0 at the end of a version resource string
    ocide:  fix problem parsing generated versioninfo structures
    ocide:  fix problem when changing a resource id from the property window
    dlpe/orc/ocide: fix problems where version information wouldn't be displayed 
            in OS file details window
    occ/ocide: allow looking at variables declared in for statements (c99)
    occ/ocide: allow looking at variables declared in 'static' functions 
    occ/ocide: improve debugging of control statements
    olink/ocide: fix debug type information
    ocide:  set debugger's 'stop on exception' to default to 'yes'
    ocide:  debugger: adjust the search for lines matching an address to use the next lower
            line if the PC isn't parked exactly on a line's first address.
    ocide:  if a symbol is not found in the statics of the current file or the globals
            do an unqualified search of all statics to see if it can be found anywhere
    ocide:  allow debugger to stop cleanly when program is still running
    ocide:  enable code completion again (it was broken during code cleanup)
    ocide:  don't close code completion window so gratuitously, but close if a 
            non-symbol character is typed
    ocide:  enable find-next immediately after opening ide
    ocide:  enable finds in files without an extension
    ocide:  editor:  in typeover mode, typing at end of line will insert 
            characters on line instead of typing over the end of line character
    ocide:  resolve disparaties between find and find in files
    ocide:  fix problems with context sensitive help not being right in some
            dialogs
    ocide:  fix problems with cancel buttons on the external tools dialogs not working
    ocide:  default new files to a format notepad can read properly
    ocide:  when selecting an error from the information window, the cursor
            might move to the wrong line if lines were inserted or deleted
    ocide:  fix backups of project and workspace files
    ogrep:  when the -d option was used with an explicit filename, ogrep would
            complain 'file not found' in any directory that didn't have the file
    orc:    allow specifying extended font parameters on the DIALOGEX FONT line            
    orc:    allow path specifications in file names
    oasm:   __db was considered same as 'db' and so forth...
    omake:  add support for common TREE builds
    clib:   fix _beginthreadex to return the thread id properly
    clibs:  add a #define for the more or less standard variable 'environ'
    clibs:  add a bunch of C++ templates and support functions
    clibs:  no longer distributing lscrtl.dll
    examples: fix xmlview example

version 5.0.10: 3/29/14
    misc:   various code cleanup and improvements suggested by Kirill Joss
    misc:   include dlea allocator in most C++ apps (borland compile only)  this helps speed it up
    occ:    inlining functions that took the address of parameters was broken
    occ:    fixed bug with optimizing of inlined functions generating incorrect code
    occ:    fix so that external references will show up in the output file when included with a C++ using directive
    occ:    fix bug where debug info of arrays was wrong
    occ:    fix basic types in debug information
    occ:    fix bug in register allocation that may speed up the compile
    occ:    fix problem with generating DOUBLE sized constants for negative FLOAT constants
    occ:    fix some error messages
    ogrep:  fix crash under some circumstances
    olib:   fix bug that caused libraries to be generated incorrectly, this will probably also speed up links
    olink:  fix bug where a debug info table that didn't exist was referenced
    ocide:  fix find dialog to not crash when invoked
    ocide:  after debugging, a build would not work (said file in relative format)
    ocide:  show types in watch window correctly
    clibs:  fix fputc and friends to match const correctness in headers
    clibs:  remove some shellapi stuff from the main windows headers
    build:  remove all references to PEPATCH
        
version 5.0.9: 12/1/2013
    ocide: fix problem where function prompt window would go away randomly
    ocide: handle parenthesis when in function prompt window
    ocide: save the text of find and replace more consistently
    ocide: fix code completion for structures with bit fields (it was recently broken)
    occ:   fix problem with two labels in a row generating errors
    occ:   fix crash with forward declared labels in inline assembler

version 5.0.8: 10/3/2013
    occ: fix problem where using a global's address but never its value in a function
         could crash the optimizer
    occ: fix C++ function-like operator to work
    occ: further work on constructors and destructors
    occ: fix bug where stack framing could be off on rare occasions
    occ: allow taking the address of a thread local variable
    occ: varname || 0 would be optimized to FALSE
    clibs: add coinitialize and friends back into windows.h


version 5.0.7: 06/19/2013

    occ: make __DATE__ work like asctime as per the spec
    occ: more preprocessor fixes ported from cc386
    occ: allow unsigneds in preprocessor expressions
    occ: fix #line directive, could overflow a buffer
    occ: improve parsing of floating point numbers
    occ: floating point improvements from Frank Uberto
    occ: when a function returning floating point was called without using
            its return value, the value would remain on the floating point stack.
    occ: fix inline functions with local vars that are of structured type
    occ: add __inline keyword
    occ: fix nested inlines, where the inlines have local variables
    omake: fixed command line switches to work again

version 5.0.6: 06/05/2013
    occ:    fixed type of __func__ to use const correctly
    occ:    fixed aliasing, wasn't handling parameters right...
    occ:    improved preprocessor, now compiles many tests from mcpp
    occ:    predefine _WIN32 again
    occ:    compiles itself properly again
    occ:    fix problems with pushing 16-bit values on stack
    infopad: fix funky array and page keys behavior

version 5.0.5: 06/04/2013

            fixes as per Franck Uberto
    occ:    improve handling of trigraphs and digraphs
    occ:    improve #define processing
    occ:    improve search order for #includes
    occ:    improve floating point handling
    occ:    ! (not operator) would sometimes cast the argument down, losing high order bits
    occ:    allow declaration of externs with incomplete type
    occ:    sped up compile of sqlite3
    occ:    sped up aliasing
    occ:    make -1.0 an intrinsic value
    orc:    &tools in general - searching complex paths could lead to lockup or crash
    ocpp:   make it friendly to avast, fix it to parse the correct configuration file
    clibs:  improve various functions, add various functions, improve various headers
    clibs:  use floating point emulation for floating point functions that convert a number to ASCII

version 5.0.4: 5/25/2013

    occ:    add support for #pragma pack syntax with keywords push and pop 
		(i.e. #pragma pack(push,1), #pragma pack(pop)
    occ:    static initialization of anonymous unions was broken
    clibs:  fix problems with asctime and ctime not working

version 5.0.3:
    ocide:  workaround for i.e. flagging help files as dangerous content
    ocide:  fix bug with debugger sometimes crashing

version 5.0.2:
    ocide: fix problems with help files, help/about

version 5.0.1:

    add OCIDE with RC Editor, many many bug fixes and some new features

version 4.2.1:
    occ:        fix '--(char *)myvar;' to work again
    occ:        sequences of the form:
                    void *a();
                    return (long long)a();
                resulted in bad code
    occ:        casting an integer constant to void * within a function argument
                resulted in a warning
    occ:        "#pragma rundown aa" would crash the compiler if aa was undefined
    olink:      fix bug where section alignments could be off
    rtl:        add threads.h & its functionality
    rtl:        add stdatomic.h & its functionality
    rtl:        add uchar.h & its functionality
    rtl:        add aligned_alloc
    rtl:        add at_quick_exit and quick_exit
    rtl:        increase maximum number of atexit functions to 100
    rtl:        add support for exclusive file access
    rtl:        fix problems with wsprintf and friends not producing legible output
    rtl:        updated wsprintf, wsscanf and friends to latest
    rtl:        changed byte order of fputwc (and thus all wide character output functions)
                to be little endian.
    rtl:        updated wcs versions of atoi and atof and friends to latest 

version 4.1.25:
    occ:    miscellaneous internal improvements
    occ:    improved how casts are parsed
    ocpp, orc, oasm:    fix '#if defined(MYDIR)'  when MYDIR is defined
    orc:    wasn't concatenating strings when they came one after the other
    orc:    fix NOT keyword to do a one's complement

version 4.1.24:
    occ:  in C99 mode, __VA_ARGS__ not handled properly
    occ:  fix "int a = b + c; int j = sizeof(double[a]);" to work in C99 mode...
    occ:  allow (void)myStructVar to work
    occ:  improve the accepted sequencing of storage class specifiers, type 
            qualifiers, and types in declaration
    occ:  allow declarations like "extern int aa[]" within a function body
    occ:  miscellaneous internal improvements...
    olink: if the same symbol is used in multiple libraries, don't generate an
            error
    rtl:    fix problems with _splitpath and _makepath
    rtl:    fix more problems with truncating various unsigned types in sprintf.c and sscanf.c
    rtl:    lscrtl.dll wouldn't be linked to properly
    rtl:    when compiling for system RTL DLLs, use the old prototype for
            swprintf and friends

version 4.1.23:
    occ:  fix sizeof(("my string")) where the extra parenthesis caused a wrong
            value to be returned

version 4.1.22:
    occ/olink:  workaround for FREEDOS: write a version of SYSTEM() that does not
                use the freedos command processor to allow spawns to work
    occ:  things like the following generated errors due to a preprocessor bug
            #include <limits.h>
            #define UL (unsigned long)
            int a = ULONG_MAX;
    occ:    CONSTANT-VALUE optimizations were broken for long-long types
    rtl:    fix bug in _sscanf that made it max out at half the requested int size
version 4.1.21:
	occ:	'signed int' is a valid type specification
	occ:	add '#pragma warning'
	occ:	allow prototypes such as the following:	void MyFunc(struct aa []);
	occ:	fix problem with sizeof("string") returning the size of a pointer
	occ:	add unordered floating point comparisons
	
	rtl:	fix problems with snprintf not working to the standard, exception
			when buffer was exactly the right size
	rtl:	add code-page related windows functions (e.g. widechartomultibyte)
	rtl:	update WIN32 headers SHELLAPI and WINERROR, add headers SHLOBJ and friends	
	rtl:	add imports for msimg32.dll

version 4.1.20:
	occ:	fix problems with crashing when boolean operations were combined with long longs
	occ:	promote unsigned constants to unsigned long long if necessary
	occ:	fix crash in register allocator
	occ:	'const long long aa = 4;' for example, the optimization to constant resulted
			in truncation to int.
	occ:	fix crash when calculating offsets for const struct members
	occ:	improve speed of parsing floating point numbers, useful for big arrays
			of floating point values

	rtl:	change 'DLLEntryPoint' to 'DllMain'
	rtl:	make wide character versions of some win32 header structures
	rtl:	add win32 spooler defines and win32 common dialog errors
	rtl:	remove DLLCANUNLOADNOW and DLLGETCLASSNAME references from the import library
	rtl:	restore ftime.c
	rtl:	improve string handling on command line
	rtl:	allow NULL to be passed as first argument to sprintf and friends
	rtl:	week number in strftime was wrong first and last week of year
	rtl:	fix minor bug in threading support
	rtl:	fix %.0f and %.0g to work properly in printf format strings
	rtl:	add _wcsicmp, _wcsnicmp
	rtl:	add vsnwprintf _vsnwprintf snwprintf _snwprintf
	rtl:	fix return value of 'div' function

version 4.1.19:

	OCC:	fix problem with nested anonymous unions: wasn't supported
	OCC:	fix recursion problem int the optimizer that could lead to a crash 
			for some source files
	OCC:	modify preprocessor to handle recursion and tokenizing properly
	OCC:	make 'i64' and 'ui64' suffixes on numbers case-insensitive
	OCC:	fixed 'whereis' example
	RTL:	fix _splitpath to allow null for arguments
	RTL:	added delay(), sound(), nosound(), and int386() without underscores
	RTL:	fix stack allocation code for large stacks, could crash the program 
			if the allocated amount of space was an even multiple of the page size.
version 4.1.18:
	OCC:	preprocessing stringizer sometimes got confused by quotes
	RTL:	add mousewheel support to WIN32 headers
	RTL:	fix stdout & friends with CRTDLL.DLL
	RTL:	fix sprintf & family, there was a space between a negative sign and its number

version 4.1.17:
	OCC:	fix the macro preprocessor to handle a wider variety of standard cases
	OCC/DLPE/RTL: revert the import behavior, needed to be allowed to link to C-style
			functions without fully prototyping everything...
	ORC:	further improve internationalization
	ORC:	fix broken string table and language resource handling
			(neither case should need a resource id)
	RTL:	change definition of ffs();
	RTL/DOS: fix CTRL-C and CTRL-BREAK to not crash

version 4.1.16
	OCC:	macro arguments were getting substituted twice
	OCC:	loop invariant calculations could move floating point expressions,
			which doesn't work well on the x86 because they aren't real registers
	OCC:	local definitions of a structure that is cyclical would cause a crash
	OCC:	bad structure declarations such as this would crash the compiler:
			struct nn
			{
				struct nn *p, // note the comma
				int a;
			};
	OASM:	allow '%%' style labels
	OCL:	used ONASM in compile-via-assembly mode instead make it use OASM
	ORC:	fix bug: if you get a non-ansi character into the RC file, ORC 
			wouldn't handle it correctly
	ORC:	treat BEGIN the same as '{' and END the same as '}'
	ORC:	allow C-style escape sequence inside strings
	RTL:	fgets was going one character past the end of the supplied buffer...
	RTL:	fix custcntl.h to have A and W structure names
	RTL:	fix definition of wsprintf
	RTL:	fix wildargsw, needed hInstance.
	RTL:	fix dll startup routines, was crashing when dll created by the tools loaded
	RTL:	fix fputc, if it happened at the end of a buffer it wouldn't flush the buffer
			but would instead overrun memory...	
	RTL:	exit routines not being called, e.g. automatic end-of-program
			behaviors such as files being flushed when not explicitly closed 
			would not occur
	RTL:	rewrote printf & family to handle "%s" using arbitrarily large strings...
	RTL:	fixed MSDOS debugger

version 4.1.15
	OCC:	support signed zero
	RTL:	fix a bug where flushing a file in text read mode could result in a seek
			to the wrong file position
	RTL:	fix integer to ascii functions to use lower case letters for hex, only
			do negative signs in base 10, buffer overflow problems.
	RTL:	add ffs() and 'strings.h' and related functions
	RTL:	fix definition of size_t in sys\types.h
	RTL:	fix isctrl('\0') to return true
	RTL:	fix isspace('\t') to return false
	RTL:	treat buffered strings as binary...
	RTL:	miscelleneous updates to floating point display handling, including 
			improved handling of nans and signed zero

version 4.1.14
	OCC - fix problem where registers used for long long calculations could
			sometimes collide
	OCC - fix new problem where sometimes function calls would cause the compiler to crash
	OCC - fix new problem where local statics could collide, resulting in
			a redefinition error, when they were previously declared external
	OCC	- reorder commutative expressions to generate better code, needed especially
			to reduce the number of floating point registers in use simultaneously
version 4.1.12
	rtl:	fix WIN32 header bug that caused CCIDE to not work reliably

version 4.1.11
	OCC - remove import record from ASM file, when DLL name not specified
	OCC - fix problems with statements such as:
			typedef void AA(int b);
			AA ss,*tt;
			ss(4);
			tt(4);

			the typedef wasn't processed right and it resulted in errors
	OCC - add __int8, __int16, __int32
	OCC, DLPE, RTL: adjust for optimized imports
	RTL	-	work with RTL DLLs

version 4.1.10
	OCC	- problem with declaring things like void (*printf)(...) in a structure 
			would cause a redefined identifier error
	OCC - problem with assigning to the first member of a structure, when the member
			was a pointer, would crash the compiler
			
version 4.1.9
	OCC	- there was a problem with sign extensions in statements such as p+=c 
			where p is a pointer and c is a character value - the sign extension
			would be done after multiplying by the size of a pointer leading to
			overflow

version 4.1.8
	OCC - 4.1.7 broke some programs with infinite loops
	OCC - fix problem where strength reduction could be incorrectly applied
			when induction variables of nested loops were multiplied together
	OCC - fix problem with division: sequences such as:

			a = t %60
			t = t / 60
			b = t % 60
			t = t / 60

			would incorrectly generate code for:

			a = t % 60
			t = t / 60 / 60
			b = t % 60
			t = t / 60 / 60

			because of bugs in dealing with the x86 IDIV instruction

version 4.17
	OCC	- comment out some test code that is no longer needed
	OCC - fix problems with functions returning a structured value

version 4.16
	OCC	- fix problem that broke the runtime library
	OCC	- fix problems with statically initialized bit fields
	OCC - deal with zero-length anonymous bit fields properly
	OCC	- more speedups
	OCC	- deal with several crash conditions
	OCC - deal with some incorrect code generation problems
	OCC - fix some floating point problems

version 4.15
	OASM -  fix problems with constants, structures, and improve code gen for move immediate to reg
	OCC	- 	speed up compilations, fix bugs, add a branch optimization
	OMAKE -	fix bugs
	ORC	-	allow integer values for resource types, e.g. for manifests

	distributing source starting with this version

version 4.1.4
	OASM -  some floating point instructions involving memory access were generated incorrectly
	OCC	-	floating point - use memory access more often
	OCC -   floating point - change div by a constant into mul by a constant
	OCC -   loops - generate code at the top of the loop to test the loop condition
			instead of branching to the bottom of the loop
			(while and for loops) and optimize such code away when possible.
	OCC -   worked on constant propagation code, was not folding assignments
	OCL	-	use OASM instead of ONASM
	OMAKE - fix problem where VPATH would not be considered if a file did not exist
	OMAKE - fix 'F' and 'D' suffixes on special macros, for example $@F and $@D

version 4.1.3
	OCC - fix two crash conditions in code generator
	OCC - some algorithmic rewrites to get an order of magnitude speed improvement
			on large bulky functions.
	OCC - fix problem with register allocator, on very complex programs register
			usage could sometimes overlap when it shouldn't
	OCC - fix problem in static initialization when fixed point constants are 
			stored as floating point constants:  size of the storage did not match
			size when the value was loaded
	OCC - fix peephole optimization problem that caused code to disappear
	OCC - fix floating point global optimization to adjust properly for x86 FP unit
	OCC - fix register allocation/peephole optimization in the presence of infinite loops
	OCC - add the functionality to use two-character character constants
	OCC - fix packing of unions to work according to the windows standard...
	OCC - fix problems with cascaded shift operations
	OCC - fix problems with aliasing in the presence of assignments of structures
	OMAKE - dependencies were correctly qualified off VPATH, but when they showed up
			in a command the VPATH path was missing
	OMAKE - enable searching for implicit rules when explicit rules exist for dependencies
			but there are no commands
	ORC - add LOADONCALL parsing (doesn't do anything)
	ORC - scan for bitmap files etc... on the include path
	RTL - utime.h is now in *both* include and include\sys for portability
	RTL - add VOS__ constants to windows.h
	RTL - toolchain and generated programs would crash if an environment variable was greater than 1024 bytes long
	RTL - fix console mode of stdin to allow echoed line input on windows 7
	RTL - fix getch() and friends - were broken because of the compiler union packing issue
	RTL - rename winversion.h to winver.h

Version 4.1.2
	OASM - was generating an error when a large number was used as
		a byte operand to a math instruction but it was in-range for a signed value.
	OCC - feature addition - OCC will look in its home directory for olink.exe
	OCC - prototype warnings - only warn once, remove superfluous warnings
	OCC - /O switch would add a .o extension to an executable and use it as an object file
		which resulted in duplicate modules being passed to the linker and linker errors.
		fix the /O switch to only register the exe name.
	OCC - if a continuation character '\' was used in strings, and it was followed
		by a // style comment within the string, this generated parser errors.
	OCC - was filling out the entire BSS with zeros, which resulted in very 
		large object files when there is a lot of static uninitialized data
	OCC - when compile fails, delete the output file
    OCC - correct code gen/register allocation/peephole optimization bugs
	OLINK - documentation changed to use correct target names for windows targets
	RTL - when the following was done in the source prior to including files:

		#define size_t int

		then there was a collision between string.h and memory.h

