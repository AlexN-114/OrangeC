;Software License Agreement (BSD License)
;
;Copyright (c) 1997-2008, David Lindauer, (LADSoft).
;All rights reserved.
;
;Redistribution and use of this software in source and binary forms, with or without modification, are
;permitted provided that the following conditions are met:
;
;* Redistributions of source code must retain the above
;  copyright notice, this list of conditions and the
;  following disclaimer.
;
;* Redistributions in binary form must reproduce the above
;  copyright notice, this list of conditions and the
;  following disclaimer in the documentation and/or other
;  materials provided with the distribution.
;
;* Neither the name of LADSoft nor the names of its
;  contributors may be used to endorse or promote products
;  derived from this software without specific prior
;  written permission of LADSoft.
;
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
;WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
;ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
;ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	AM_NONE    EQU  0		;no mode, like [44h], or no arg, like CLI
	AM_REG	   EQU  1		;register, like AX
	AM_BASED   EQU  2		;based, as in [bx+label]
	AM_MEM	   EQU  3		;memory, as in byte ptr [44h], or label
	AM_IMM	   EQU  4		;immediate, as in mov ax,5
	AM_SEGOFFS  EQU  5		;seg:ofs, as in es:[44h]
	AM_CR	 EQU  6		;control register used
	AM_DR	 EQU  7		;debug register used
	AM_TR	 EQU  8		;test register used
	AM_FPREG  EQU  9		;floating point register used
	AM_SEG	 EQU  10		;segment, maybe as in mov ax,cs
  AM_MMX  EQU  11   ; MMX register used
;These equates apply to areg1 and areg2. areg1 is a simple index register,
;like [bx+nnn], areg2 is for two cases: 1) two index registers used, as
;in [bx+si+nnn], and 2) scaled registers, like [ebx+eax*4+nnn]
;  In case 2), the scale applied to areg2 is in ascale

	isEAX	equ	0	;reference to this register in areg1,2
	isECX	equ	1
	isEDX	equ	2
	isEBX	equ	3
	isESP	equ	4
	isEBP	equ	5
	isESI	equ	6
	isEDI	equ	7
	TIMES1	equ	1
	TIMES2	equ	2
	TIMES4	equ	4
	TIMES8	equ	8
	NOSIZE		equ	0
	BYTESIZE	equ	1
	WORDSIZE	equ	2
	DWORDSIZE	equ	4
  PBYTESIZE equ 5
	FWORDSIZE	equ	6
	QWORDSIZE	equ	8
	TBYTESIZE	equ	10
	BYTEMODE	equ	1
	WORDMODE	equ	2
	DWORDMODE	equ	4
struc asmop
	.addrx	resd	1	;address of offset (or seg for segmented jump)
	.addrx2	resd	1	;offset for segmented jump if addrx is segment
	.mode	resb	1	;AM flag showing addressing mode

	.areg1	resb	1	;base register
	.areg2	resb	1	;index register (pertains to scale)

	.ascale	resw	1	;scale of areg2
	.asize	resb	1	;size of memory/register 1 EQU byte, 10-tbyte, etc
	.msize	resb	1	;addressing mode size 2 EQU 16-bit, 4 EQU 32-bit
endstruc

ASMOPSIZE	EQU 15
TRUE	equ	1


;These next flags get put in the mode field


;These values are stored in RepPfxBitmap, and indicate which one of these
;prefixes was identified

AF_REP	 EQU  1
AF_REPNE  EQU  2
AF_REPE   EQU  4
AF_LOCK   EQU  8

;These are keyed to offsets of segment overrides (or 66h,67h overrides)
;in the string of possible override strings.  They work in reverse, so
;that AS is the first two chars of the string, OS is next, then GS etc.

AS_ES  EQU  	01h
AS_CS  EQU  	02h
AS_SS  EQU  	04h
AS_DS  EQU  	08h
AS_FS  EQU  	10h
AS_GS  EQU  	20h
AS_OPSIZE  EQU    0c0h
AS_ADDRSIZE  EQU   300h
AS_OPSIZESET  EQU  40h
AS_OPSIZETEST  EQU  80h
AS_ADDRSIZESET  EQU  100h
AS_ADDRSIZETEST  EQU  200h
