1.1.1. Introduction

	This gives the usage of the IEEE695 object files, as used by the LADSoft tools.
	This is an ASCII rendition of IEEE695, but extends the functionality of the standard.

	Note that most numbers used in the file format are HEX-ASCII.  But some numbers,
	such as dates and the CO record identifiers, are decimal.

2.1.1. Brief guide to linker format

	Each line in the relocatable object file starts with a two-letter command 
	and ends with a '.'.  Symbols with periods in them may be embedded in the 
	text so the location of the ending period is context-sensitive.  Control characters
	such as CR/LF can be used for readability and are generally assumed by the linker to
	occur after each '.' character.  Checksums are kept as running additions of the 
	ascii value of the characters, excluding any control characters that may be embedded.

2.2.1 Variable types

	IEEE695 defines the following types of variables.  In each case the '#' indicates
	an index that is associated with the variable.
	
	I#		public variable index #
	N#		local variable index # (ladsoft tools assume this is FILE global)
	X#		external variable index #
	
	In addition IEEE695 defines a variable that can be used to index into a relocatable
	section:
	
	R#		relocatable section index #
	
	The IEEE695 spec also defines:
	
	L#		the low limit of a section.  This is the address at which the section is
			relocated to and is only valid of an absolute object file is output.
	P		the current value of the program counter.  This is only valid in the LR
			records.  It is derived from the low limit of the section and the data 
			previously encountered in the sections LD and LR records.
	
	The ladsoft tools also define the following extra variable types:
	
	A#		an auto (stacked) variable
	E#		a variable in a register
	Y#		a segment value

2.2.2 Expressions

	In some cases such as in fixups/LR Records, an expression is used to specify an
	address or offset.  An expression is a comma-delimited sequence of constants, 
	the operators '+','-'.'*','/', and internal variables.  The elements of an expression
	are in postfix, that is the expression:
	
		R23,8,+
	
	indicates a location that is 8 bytes beyond the beginning of section 23.  An
	expression such as:
	
		P,424,+
	
	can be used to generate pc-relative offsets.

2.2.3 strings

	when a string such as a name or comment text is placed into the output file,
	it is preceded by a two-digit hexadecimal number that gives the length of the string.
	This implicitly limits strings and variable names to 255 characters.

	For example to create a public variable with the name 'apple' one could do the following:

	NI3,05apple.

3.1.1 Linker record definitions

3.2.1 Module control

3.2.2 MBtranslator,filename.
	beginning-of-module record.  Gives name of translation program (e.g. LADSoft C compiler) 
	and name of module being translated.

3.2.3 ME.
	end-of-module record

3.2.4 DTYYYYMMDDHHMMSS.
	date and time the object module was generated.

3.2.5 ADBPMAU,MAUS,ENDIAN.
	the AD command gives information about the processor architecture.

	bpmau is the bits per architectural unit and is 8 on byte-based systems.
	MAUS is the largest size of an integer or address in the architectural unit,
	e.g. either 2 or 4 for 68xxx depending on processor type and compiler settings.  
	Endian is either 'L' for little endian or 'M' for big endian.

3.2.6 CSXX.
	Checksum record.

	checksums can be placed anywhere.  When a checksum record is encountered
	the two hex digits after it give the sum, base 128, of all non-control characters
	after the '.' of the last checksum record (or start of file) 
	and up to and including the 'S' of the current checksum record.

3.2.7 ASG,expr.
	defines the start address of a program.  This can be an absolute number for
	non-relocatable files, or a standard IEEE expression for relocatable files.

3.3.1 Sections

3.3.2 ST#,attributes,name.
	section declaration

	defines a section #, gives it various attributes and a name.  Sections with
	the same name are usually combined by the linker, as qualified by the attributes
	and any other rules the linker uses to figure out how sections should be combined.
	basic attributes are separated by ',' and are as follows:

	'A': an absolute section not subject to relocation, an ASL record must be 
		present in the input file telling exactly where the section is located.
	'B': reserved to indicate sections made up of bits, e.g. for processors like the
		 C167 or 8051.
	'C': A common section.  Two common sections with the same name are overlayed
		 on each other at link time.  Non-common sections normally follow one another.
	'E': Two sections with the same name must have exactly the same contents and
		 attributes when 'E' is present in the attribute list
	'M': if there are two sections with the same name, take the largest one.
	'R': readonly (ROM) section
	'S': a non-common section (assumed without C or M or E)
	'U': unique section.  No other section can have the same name
	'W': readwrite (RAM) section
	'E': executable section
	'Z': section to be zeroed out, generally data will not be provided with the SB,LR,LD records
		 and the runtime system will use the size of the section to initialize it.
		 (e.g. C non initialized variables)

	in addition there are qualifiers about ordering sections with the same name.

	'N': 'now' order sections with this attribute first
	(no qualifier): order sections with this attribute next
	'P': 'postpone' order sections with this attribute last


3.3.3 SA#,alignment.
	defines the alignment for a section.
                
3.3.4 ASS#,size.
	defines the size of a section.

3.3.5 ASL#,location.
	defines the absolute location of a section.  Only present if the section has
	the 'A' attribute.

3.4.1 Section data

3.4.2 SB#.
	Section begin.  Data loaded after this with LD and LR records
	will go in the section this indicates, sequentially in the order the following
	LD and LR records indicate.  No load address is specified in the LD and LR
	records; the offset is implied from the section base and preceding records
	in this section.

3.4.3 LDxxxxxxxxxxxxxxxxxxxxxxxx.
	pure data that doesn't have to be fixed up.  This is a hex dump of arbitrary
	length, but it is recommended that each record not be larger than 64 charaters 
	(32 bytes) for readability.

3.4.4 LR(expr,size).
	fixup record.  the expression can be any valid expression referencing symbols or
	section relative addresses, and generally calculates a relocated address.  It
	could also be a constant, however, normally constants are going to be embedded
	directly in the LD statements.

	the size gives the size in MAUs of the expression when it is resolved to an
	absolute format.

3.5.1 Variable declarations

	The ensuing sections indicate how to declare variables.

3.5.2 N$#,name.
	creates a variable of type $ with index #, and assigns the programmer's name to it
	'$' can be any valid variable type:

        'A' auto
		'E' register
		'I' public
		'N' local
		'X' external

3.5.3 AS$#,expr.
	This assigns the location for a variable, using for example a section relative
	expression.
	'$' is again one of the valid variable types.

	note the translator can only assign the address of 'I' and 'N' variables.

3.5.3 AT$#,T%.
	Defines the type of a variable.  The type index '%' must either be a built-in 
	type, or a type that has been declared previously with the ATT# command.
	'$' is again one of the valid variable types.
	'%' is the type to assign.

3.6.1 COMMENT records

	The IEEE695 standard defines comment style records with the intent of using
	them for some type of human-readable text that can be embedded in the object file
	for example to use by tools which read the object file.

	the LADSoft tools reserve most comment records for the tools themselves.  The
	comment record index is used to specify an alternate function that has
	meaning only to the tools, for example link pass separator.

	Comment record indexes are in decimal.  Note that the body of a comment record
	is considered to be a string, and thus needs a two character hexadecimal length
	prefixed to it.

	This section outlines the comment records in use.

3.6.2 Comment records 1-99

	A general comment.  For example:  "CO1,16this is a cool program."

3.6.3 Pass separators

	There are three pass separators in this format.  The given text for each separator
	can either be left blank or arbitrarily chosen; separation is done based on index.

	"CO100,09some text."
		the make pass separator.  Make programs will quit processing after this.
		(optional)
	"CO101,09some text."
		the link pass separator.  All declarations are done; two pass linkers can
		expect only data beyond this point.
	"CO102,09some text."
		the browse info separator.  Linker does not need any info after this for
		relocation. (optional)

3.6.4 Windows DLL support

	export symbol.
		CO200,$$type,name,qualifer.
			where the $$ is the length of the string up to the '.;
				  type = O or N for Ordinal or by Name
				  name = the name of the symbol being exported
				  qualifier is either the ordinal or the exported name.
	import symbol.
		C0201,O,$$name,ordinal,dllname.
				for by ordinal imports
		C0201,N,$$name,externalname,dllname.
				for by name imports.

3.6.5 source file information

	CO300,$$index,name,time.
			where $$ is the length of the following up to the '.'
                  index is the source or header file index we are assigning,
				  name is the name of the file
				  time is the time the file was last modified in YYYYMMDDHHMMSS format.

3.6.6 debug information
	comment records with index 400-405 are for debug records, and appear intermixed
	with the LD and LR records.  More information is found in the debug information
	section.

3.6.7 browse information
	CO500,$$recordata.

	This is the browse information record, and is further defined in the section on
	browse information.

4.1.1 Debug info

	For debugging, a program is assumed to have program global variables, 
	file global variables, functions, blocks within functions, and local variables
	within blocks.  For global variables, some basic debug information can be extracted
	e.g. from the NI,ASI and NN,ASN and the AT$# declarations given above.

	in addition to declaring types, the debug information has to give locations
	at which local variables are 'live'.  This debug information is interspersed with the
	LD and LR recors for a section to define the layout of local data.  It is
	handled with COMMENT-style records.

	Note that all type and debug information is not specified well by the IEEE695
	spec and this information is heavily tools specific.

4.1.2 derived types
	ATT#,T%,type expression.
	
	gives the definition of a derived type.  # is the type index assigned by the
	translator, which must be >= 1024.  % index some type constructor such as 
	a structure or union designator.

	the type expression depends on the constructor used for the type, but is typically
	a base type, or a list of other types.

	type information is in the file header with other information about variables.

	the type indexes for derived types are as follows:

	0: undefined
	1: pointer
		ATT$,T1,sz,T#.
		$ is the translator-defined type of the pointer.
		# is the base type index
	2: function
		ATT$,T2,TR,#,argument list.
		'$' is the translator defined type of the function
		'R' is the type index of the return value
		'#' is a hexadecimal value giving the linkage:
			0 = unadorned label (assembler)
			1 = C style function call
			2 = stdcall style function call
			3 = pascall style function call
			4 = C++ object method
			5 = C++ object method (static) same as C style

		the argument list is a comma-delimited list of T#, which gives the types of the parameters

		When an argument list is present, it will be interpreted according to implied
		rules about alignment of arguments.  These rules are architecture-dependent,
		but for a 32-bit architecture the data will be a multiple of four bytes.
		in the case of integers it will be implicitly cast to (DWORD) and aligned
		as such according to the little/big endianness of the processor as assigned in the
		AD record.

		if the linkage is C++ object, the first argument will be the this pointer
	
	3: bit field
		ATT$,T3,sz,TB,bitno,bits.
		'$' is the translator-defined type
        TB is the base type the field is in
        bitno is the bit offset (counting from the right)
        bits is the number of bits

	4: structure
		ATT$,T4,sz,list of names and base types.
		'$' is the translator-defined type
		the list of base types has comma-delimited elements as follows:

		T#,name,offset

		where # is the base type
			  name is the name of the field
			  offset is the offset from the beginning of the data for the structure

		the last element may be a reference to a 'field' record to continue the 
		list of elements in which case it doesn't need a name and offset.
	5: union
		ATT$,T5,sz,list of base types.
		see the definition of the structure type.
		offset will normally be 0.
	6: array
		ATT$,T6,sz,TB,TI,base,top.
		'$' is the translator-defined type
		TB is the type of the elements in the array
		TI is the type of the indexes of the array (usually T42 for C languages)
		base is the hexadecimal rendition of the low limit to the array index
		top is the hexadecimal rendition of the high limit to the array index (inclusive)
		
		multiple array records can be cascaded together to make a multi-dimensional array.
		in this case the first record will be the left-hand index in the declaration
		(assuming C-style declarations)
    7: vla:
        ATT$,T7,sz,TB,T1. // same as array except debug derives the base and top from the VLA table

	8: enumeration
		ATT$,T8,sz,TB,list of name, value pairs
		see the definition of the structure type.
		offset will be the index of the enumerated value.
	9: field list continuator
		ATT$,T9,list of base types.
		see the definition of the structure type.
		this can be used to continue a list of structure, union, or enumerated
		members.
    10: alias for another type
        ATT$,TA,T#.
        where $ = the new type, # = the old type.
4.1.3 Base types

	a variety of base types are pre-defined for debugger interoperabilty; other
	types are built by combining the type constructors with these base types and
	with other types the translator defines.

	the type indexes for the base types are as follows:

	32: void
	33: pointer to void
	34: boolean
	35: bit

	40: char
	41: short
	42: int
	43: long
	44: long long
	45: wchar_t
	46: char16_t   
	47: char32_t   

	48: unsigned char
	49: unsigned short
	50: unsigned int
	51: unsigned long
	52: unsigned long long

	56: pointer to char
	57: pointer to short
	58: pointer to int
	59: pointer to long
	60: pointer to long long
	61: pointer to wchar_t
	62: pointer to char16_t   
	63: pointer to char32_t   

	64: pointer to unsigned char
	65: pointer to unsigned short
	66: pointer to unsigned int
	67: pointer to unsigned long
	68: pointer to unsigned long long

	72: float
	73: double
	74: long double

	80: float (imaginary)
	81: double (imaginary)
	82: long double (imaginary)

	88: float (complex)
	89: double (complex)
	90: long double (complex)

	96: pointer to float
	97: pointer to double
	98: pointer to long double

	104: pointer to float (imaginary)
	105: pointer to double (imaginary)
	106: pointer to long double (imaginary)

	112: pointer to float (complex)
	113: pointer to double (complex)
	114: pointer to long double (complex)

	the following are defined by the translator as needed, with an ATT record.

	1024: beginning of translator-assigned types

4.2.1 Local variables
	The following records are used to determine placement and scope of local variables.

	CO400,A#. or CO400,E#.
		beginning of a variable scope.  # is the variable index.
	CO401,index,line.
		code for a source file line begins here.  Index references the CO300 record.
	CO402.
		block is beginning here.
	CO403.
		block is ending here.  Variables introduced within the block should be discarded
	CO404,I#. or CO404, N#.
		function is starting here.
	CO405,I#. or CO405, N#.
		function is ending here.  Discard function-scoped variables.

5.1.1 Browse info

	Browse info gives a cross-reference of symbols to file/line number pairs.
	It can be generated by the translator, or tacked on after the fact.  A separate
	browse file translator takes the information for the files in a program and
	generates a browse file database.

	500:  browse information record.
		CO500,subtype,qualifiers,file index,linenumber,name.

		The browse info record depends on the subtype.
		Valid subtypes are:

		0: This is for preprocessor definitions like #defines.
		1: variable:  this is some type of program variable.
		2: file start: this is a file start
		3: function start: this is a function start
		4: function end: this is the end of a function
		5: block start: this is the start of a block
		6: block end: this is the end of a block

		qualifiers are used for variable and function names:

		0: program global
		1: file global
		2: external
		3: local variable
		4: prototype
        5: type

		the file index references a CO300 record.
		the line number references the line within the given file.

6.1.1 librarian support

	librarian support is subject to change.  This is the current design.

6.1.2 LBfilename.  
		beginning of library
		flags TBD, probably a case insensitive flag and 

6.1.3 LAattributes.
		attributes is a 16 bit hex number.

		bit 0 = case-insensitive library

6.1.4 DTYYYYMMDDHHMMSS.  
		date library was generated

6.1.5 CO600,name.
		module name for streamed module.
6.1.6 CO601,text.
		general comment the librarian wants to place in the library

6.1.7 object modules in library
	for each module in the library, the module is streamed directly into the library
	file unmodified.  Just prior to the module will be a CO600 record which
	gives the name of the library.
	sequence of MB...xxx...ME object modules streamed into library

6.1.8 LSname,offset.
		A list of these records will appear at the end of the library to cross-reference
		the name with the offset in the library file at which the MB...xxx...ME sequence
		occurs for the related module
6.1.9 LE.
		end of library.

7.1.1 File layout used by tools.

	in the file layout, CS records are completely optional.  The CS record layout
	below indicates how my tools use them.

	MB record
	AD record
	DT record
	CO300 record for the main source file (optional)
	CS record
	CO300 records for any included files (optional)
	CO100 end of MAKE pass (optional)
	CS record
	ST/SA/ASS/ASL records for each defined section
		SA records optional: missing record implies value of 1
		ASS records should be present
		ASL records should only exist for sections with the 'A' attribute
	CS record
	ATT records (optional)
	CS record
	NI/ASI/ATI records for publics (ATI optional)
	NX/ATX records for externals
	NN/ASN/ATN records for locals (ATN optional)
	NA/ASA/ATA records for autos (ATA optional)
	NE/ASE/ATE records for externals (ATE optional)
	CO201 records for imports (optional)
	CO200 records for exports (optional)
	ASG record for start address (optional)
	CS record
	CO101 link pass separator
	SB/LR/LD/CO4xx records  
		SB is not present for sections with the 'Z' attribute
		LR records are not required but should be present if the linker is to
			relocate the segment.
		either an LD or LR record must be present if an SB record is
		C04xx records are always optional
	CS record
	CO102 browse pass separator (optional)
	CO500 records for browse information (optional)
	CS record
	ME record

