#include "InstructionParser.h"
#include "x64Operand.h"
#include "x64Parser.h"

InstructionParser *InstructionParser::GetInstance()
{
	return static_cast<InstructionParser *>(new x64Parser());
}
Coding x64Parser::stateCoding_eot[] = { { Coding::eot } };
Coding x64Parser::stateCoding1_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding1_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding2_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding2_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding3_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding4_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding4_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding5_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding5_2[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding6_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding7_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding *x64Parser::StateFunc1()
{
	if (stateVars[0]!=16)
	{
		return stateCoding1_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding1_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc2()
{
	if (stateVars[0]!=32)
	{
		return stateCoding2_1;
	}
	if (stateVars[0]==32)
	{
		return stateCoding2_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc3()
{
	if (true)
	{
		return stateCoding3_1;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc4()
{
	if (stateVars[0]!=16)
	{
		return stateCoding4_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding4_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc5()
{
	if (stateVars[0]!=16)
	{
		return stateCoding5_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding5_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc6()
{
	if (true)
	{
		return stateCoding6_1;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc7()
{
	if (true)
	{
		return stateCoding7_1;
	}
	return stateCoding_eot;
}
x64Parser::StateFuncDispatchType x64Parser::stateFuncs[] = {
	&x64Parser::StateFunc1,
	&x64Parser::StateFunc2,
	&x64Parser::StateFunc3,
	&x64Parser::StateFunc4,
	&x64Parser::StateFunc5,
	&x64Parser::StateFunc6,
	&x64Parser::StateFunc7,
};
bool x64Parser::Number1(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 1, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number2(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 1, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number3(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 6, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number4(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number5(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number6(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number7(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(0, 0, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number8(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==32)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number9(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==32)
	{
		rv = ParseNumber(0, 0, 64, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number10(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(1, 1, 8, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number11(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(-1, 1, 8, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number12(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number13(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(-2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number14(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number15(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(-2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number16(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]!=16)
	{
		rv = ParseNumber(4, 1, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number17(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 1, 0);
	if (!rv)
		rv = SetNumber(tokenPos, 2, 1);
	if (!rv)
		rv = SetNumber(tokenPos, 4, 2);
	if (!rv)
		rv = SetNumber(tokenPos, 8, 3);
	return rv;
}
bool x64Parser::Number18(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 0, 0);
	return rv;
}
bool x64Parser::Number19(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 1, 1);
	return rv;
}
x64Parser::NumberDispatchType x64Parser::numberFuncs[] = {
	&x64Parser::Number1,
	&x64Parser::Number2,
	&x64Parser::Number3,
	&x64Parser::Number4,
	&x64Parser::Number5,
	&x64Parser::Number6,
	&x64Parser::Number7,
	&x64Parser::Number8,
	&x64Parser::Number9,
	&x64Parser::Number10,
	&x64Parser::Number11,
	&x64Parser::Number12,
	&x64Parser::Number13,
	&x64Parser::Number14,
	&x64Parser::Number15,
	&x64Parser::Number16,
	&x64Parser::Number17,
	&x64Parser::Number18,
	&x64Parser::Number19,
};

unsigned char x64Parser::RegClassData1[] = {255, 15, 0, 0, };
unsigned char x64Parser::RegClassData2[] = {127, 0, 0, 0, };
unsigned char x64Parser::RegClassData3[] = {190, 15, 0, 0, };
unsigned char x64Parser::RegClassData4[] = {63, 4, 0, 0, };
unsigned char x64Parser::RegClassData5[] = {4, 16, 0, 0, };
unsigned char x64Parser::RegClassData6[] = {8, 96, 0, 0, };
unsigned char x64Parser::RegClassData7[] = {16, 128, 1, 0, };
unsigned char x64Parser::RegClassData8[] = {32, 0, 6, 0, };
unsigned char x64Parser::RegClassData9[] = {128, 0, 24, 0, };
unsigned char x64Parser::RegClassData10[] = {0, 0, 96, 0, };
unsigned char x64Parser::RegClassData11[] = {0, 0, 128, 1, };

unsigned char x64Parser::registerData13[] = {0, 0, 0, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData6[] = {136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData9[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData20[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, 0, };
unsigned char x64Parser::registerData21[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, };
unsigned char x64Parser::registerData19[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, 0, 0, };
unsigned char x64Parser::registerData1[] = {255, 255, 255, 255, 15, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData4[] = {2, 4, 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData15[] = {0, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData7[] = {136, 16, 33, 66, 4, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData10[] = {16, 33, 66, 132, 8, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData3[] = {33, 66, 132, 8, 17, 17, 17, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData12[] = {0, 0, 0, 120, 0, 0, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData5[] = {68, 136, 16, 33, 34, 34, 34, 34, 2, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData8[] = {136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData11[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData2[] = {35, 70, 140, 24, 17, 17, 17, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData17[] = {0, 0, 0, 0, 0, 0, 0, 0, 144, 36, 73, 2, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData16[] = {0, 0, 0, 0, 0, 0, 0, 0, 240, 255, 255, 15, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData18[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 3, 0, 0, 0, 0, };
unsigned char x64Parser::registerData14[] = {0, 0, 0, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData22[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, };

unsigned char *x64Parser::registerDataIndirect[] = {
	registerData1,
	registerData2,
	registerData3,
	registerData4,
	registerData5,
	registerData6,
	registerData7,
	registerData8,
	registerData9,
	registerData10,
	registerData11,
	registerData12,
	registerData13,
	registerData14,
	registerData15,
	registerData16,
	registerData17,
	registerData18,
	registerData19,
	registerData20,
	registerData21,
	registerData22,
};

int x64Parser::registerValues[][9] = {
	{ 0, 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, 8, 0, -1, -1, -1, },
	{ 1, 0, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 0, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 0, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 0, 4, 0, 8, 2, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, 8, 0, -1, -1, -1, },
	{ 1, 1, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 1, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 1, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 1, 4, 0, 8, 2, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, 8, 0, -1, -1, -1, },
	{ 1, 2, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 2, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 2, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 2, 4, 0, 8, 2, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, 0, 0, -1, -1, },
	{ 0, 3, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 0, 8, 0, -1, -1, -1, },
	{ 1, 3, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 3, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 3, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 3, 4, 0, 8, 2, -1, -1, -1, },
	{ 0, 4, 0, 2, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 8, 0, -1, -1, -1, },
	{ 1, 4, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 4, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 4, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 4, 4, 0, 8, 2, -1, -1, -1, },
	{ 0, 5, 0, 2, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, 0, 1, -1, -1, },
	{ 0, 5, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 8, 0, -1, -1, -1, },
	{ 1, 5, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 5, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 5, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 5, 4, 0, 8, 2, -1, -1, -1, },
	{ 0, 6, 0, 2, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, 0, -1, 0, -1, },
	{ 0, 6, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, 8, 0, -1, -1, -1, },
	{ 1, 6, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 6, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 6, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 6, 4, 0, 8, 2, -1, -1, -1, },
	{ 0, 7, 0, 2, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, 0, -1, 1, -1, },
	{ 0, 7, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, 8, 0, -1, -1, -1, },
	{ 1, 7, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 7, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 7, 4, 0, 0, 2, -1, -1, -1, },
	{ 1, 7, 4, 0, 8, 2, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 0, 4, 0, 0, 2, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 1, 4, 0, 0, 2, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 2, 4, 0, 0, 2, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 3, 4, 0, 0, 2, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 4, 4, 0, 0, 2, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 5, 4, 0, 0, 2, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 6, 4, 0, 0, 2, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 7, 4, 0, 0, 2, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, 38, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, 46, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, 54, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, 62, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, 100, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, 101, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, -1, },
};

void x64Parser::Init()
{
	memset(&stateVars, 0, sizeof(stateVars));
	stateVars[0] = 16;
	tokenTable[""] = 0;
	tokenTable["*"] = 5;
	tokenTable["+"] = 4;
	tokenTable[","] = 8;
	tokenTable[":"] = 3;
	tokenTable["["] = 1;
	tokenTable["]"] = 2;
	tokenTable["byte"] = 12;
	tokenTable["dword"] = 10;
	tokenTable["far"] = 16;
	tokenTable["near"] = 15;
	tokenTable["qword"] = 11;
	tokenTable["rip"] = 6;
	tokenTable["short"] = 14;
	tokenTable["tword"] = 13;
	tokenTable["word"] = 9;
	tokenTable["al"] = 1000;
	tokenTable["ah"] = 1001;
	tokenTable["ax"] = 1002;
	tokenTable["eax"] = 1003;
	tokenTable["rax"] = 1004;
	tokenTable["r8b"] = 1005;
	tokenTable["r8w"] = 1006;
	tokenTable["r8d"] = 1007;
	tokenTable["r8"] = 1008;
	tokenTable["cl"] = 1009;
	tokenTable["ch"] = 1010;
	tokenTable["cx"] = 1011;
	tokenTable["ecx"] = 1012;
	tokenTable["rcx"] = 1013;
	tokenTable["r9b"] = 1014;
	tokenTable["r9w"] = 1015;
	tokenTable["r9d"] = 1016;
	tokenTable["r9"] = 1017;
	tokenTable["dl"] = 1018;
	tokenTable["dh"] = 1019;
	tokenTable["dx"] = 1020;
	tokenTable["edx"] = 1021;
	tokenTable["rdx"] = 1022;
	tokenTable["r10b"] = 1023;
	tokenTable["r10w"] = 1024;
	tokenTable["r10d"] = 1025;
	tokenTable["r10"] = 1026;
	tokenTable["bl"] = 1027;
	tokenTable["bh"] = 1028;
	tokenTable["bx"] = 1029;
	tokenTable["ebx"] = 1030;
	tokenTable["rbx"] = 1031;
	tokenTable["r11b"] = 1032;
	tokenTable["r11w"] = 1033;
	tokenTable["r11d"] = 1034;
	tokenTable["r11"] = 1035;
	tokenTable["spl"] = 1036;
	tokenTable["sp"] = 1037;
	tokenTable["esp"] = 1038;
	tokenTable["rsp"] = 1039;
	tokenTable["r12b"] = 1040;
	tokenTable["r12w"] = 1041;
	tokenTable["r12d"] = 1042;
	tokenTable["r12"] = 1043;
	tokenTable["bpl"] = 1044;
	tokenTable["bp"] = 1045;
	tokenTable["ebp"] = 1046;
	tokenTable["rbp"] = 1047;
	tokenTable["r13b"] = 1048;
	tokenTable["r13w"] = 1049;
	tokenTable["r13d"] = 1050;
	tokenTable["r13"] = 1051;
	tokenTable["sil"] = 1052;
	tokenTable["si"] = 1053;
	tokenTable["esi"] = 1054;
	tokenTable["rsi"] = 1055;
	tokenTable["r14b"] = 1056;
	tokenTable["r14w"] = 1057;
	tokenTable["r14d"] = 1058;
	tokenTable["r14"] = 1059;
	tokenTable["dil"] = 1060;
	tokenTable["di"] = 1061;
	tokenTable["edi"] = 1062;
	tokenTable["rdi"] = 1063;
	tokenTable["r15b"] = 1064;
	tokenTable["r15w"] = 1065;
	tokenTable["r15d"] = 1066;
	tokenTable["r15"] = 1067;
	tokenTable["mm0"] = 1068;
	tokenTable["xmm0"] = 1069;
	tokenTable["xmm8"] = 1070;
	tokenTable["mm1"] = 1071;
	tokenTable["xmm1"] = 1072;
	tokenTable["xmm9"] = 1073;
	tokenTable["mm2"] = 1074;
	tokenTable["xmm2"] = 1075;
	tokenTable["xmm10"] = 1076;
	tokenTable["mm3"] = 1077;
	tokenTable["xmm3"] = 1078;
	tokenTable["xmm11"] = 1079;
	tokenTable["mm4"] = 1080;
	tokenTable["xmm4"] = 1081;
	tokenTable["xmm12"] = 1082;
	tokenTable["mm5"] = 1083;
	tokenTable["xmm5"] = 1084;
	tokenTable["xmm13"] = 1085;
	tokenTable["mm6"] = 1086;
	tokenTable["xmm6"] = 1087;
	tokenTable["xmm14"] = 1088;
	tokenTable["mm7"] = 1089;
	tokenTable["xmm7"] = 1090;
	tokenTable["xmm15"] = 1091;
	tokenTable["es"] = 1092;
	tokenTable["cs"] = 1093;
	tokenTable["ss"] = 1094;
	tokenTable["ds"] = 1095;
	tokenTable["fs"] = 1096;
	tokenTable["gs"] = 1097;
	tokenTable["st0"] = 1098;
	tokenTable["st1"] = 1099;
	tokenTable["st2"] = 1100;
	tokenTable["st3"] = 1101;
	tokenTable["st4"] = 1102;
	tokenTable["st5"] = 1103;
	tokenTable["st6"] = 1104;
	tokenTable["st7"] = 1105;
	tokenTable["cr0"] = 1106;
	tokenTable["cr1"] = 1107;
	tokenTable["cr2"] = 1108;
	tokenTable["cr3"] = 1109;
	tokenTable["cr4"] = 1110;
	tokenTable["cr5"] = 1111;
	tokenTable["cr6"] = 1112;
	tokenTable["cr7"] = 1113;
	tokenTable["dr0"] = 1114;
	tokenTable["dr1"] = 1115;
	tokenTable["dr2"] = 1116;
	tokenTable["dr3"] = 1117;
	tokenTable["dr4"] = 1118;
	tokenTable["dr5"] = 1119;
	tokenTable["dr6"] = 1120;
	tokenTable["dr7"] = 1121;
	tokenTable["tr0"] = 1122;
	tokenTable["tr1"] = 1123;
	tokenTable["tr2"] = 1124;
	tokenTable["tr3"] = 1125;
	tokenTable["tr4"] = 1126;
	tokenTable["tr5"] = 1127;
	tokenTable["tr6"] = 1128;
	tokenTable["tr7"] = 1129;
	opcodeTable["aaa"] = 32;
	opcodeTable["aad"] = 33;
	opcodeTable["aam"] = 34;
	opcodeTable["aas"] = 35;
	opcodeTable["adc"] = 36;
	opcodeTable["add"] = 37;
	opcodeTable["and"] = 38;
	opcodeTable["arpl"] = 39;
	opcodeTable["bound"] = 40;
	opcodeTable["bsf"] = 41;
	opcodeTable["bsr"] = 42;
	opcodeTable["bswap"] = 43;
	opcodeTable["bt"] = 44;
	opcodeTable["btc"] = 45;
	opcodeTable["btr"] = 46;
	opcodeTable["bts"] = 47;
	opcodeTable["call"] = 48;
	opcodeTable["cbw"] = 49;
	opcodeTable["cdq"] = 50;
	opcodeTable["cdqe"] = 51;
	opcodeTable["clc"] = 52;
	opcodeTable["cld"] = 53;
	opcodeTable["cli"] = 54;
	opcodeTable["clts"] = 55;
	opcodeTable["cmc"] = 56;
	opcodeTable["cmova"] = 57;
	opcodeTable["cmovae"] = 58;
	opcodeTable["cmovb"] = 59;
	opcodeTable["cmovbe"] = 60;
	opcodeTable["cmovc"] = 61;
	opcodeTable["cmove"] = 62;
	opcodeTable["cmovg"] = 63;
	opcodeTable["cmovge"] = 64;
	opcodeTable["cmovl"] = 65;
	opcodeTable["cmovle"] = 66;
	opcodeTable["cmovna"] = 67;
	opcodeTable["cmovnae"] = 68;
	opcodeTable["cmovnb"] = 69;
	opcodeTable["cmovnbe"] = 70;
	opcodeTable["cmovnc"] = 71;
	opcodeTable["cmovne"] = 72;
	opcodeTable["cmovng"] = 73;
	opcodeTable["cmovnge"] = 74;
	opcodeTable["cmovnl"] = 75;
	opcodeTable["cmovnle"] = 76;
	opcodeTable["cmovno"] = 77;
	opcodeTable["cmovnp"] = 78;
	opcodeTable["cmovns"] = 79;
	opcodeTable["cmovnz"] = 80;
	opcodeTable["cmovo"] = 81;
	opcodeTable["cmovp"] = 82;
	opcodeTable["cmovpe"] = 83;
	opcodeTable["cmovpo"] = 84;
	opcodeTable["cmovs"] = 85;
	opcodeTable["cmovz"] = 86;
	opcodeTable["cmp"] = 87;
	opcodeTable["cmps"] = 88;
	opcodeTable["cmpsb"] = 89;
	opcodeTable["cmpsw"] = 90;
	opcodeTable["cmpsd"] = 91;
	opcodeTable["cmpsq"] = 92;
	opcodeTable["cmpxchg"] = 93;
	opcodeTable["cmpxchg8b"] = 94;
	opcodeTable["cmpxchg16b"] = 95;
	opcodeTable["cpuid"] = 96;
	opcodeTable["cqo"] = 97;
	opcodeTable["cwd"] = 98;
	opcodeTable["cwde"] = 99;
	opcodeTable["daa"] = 100;
	opcodeTable["das"] = 101;
	opcodeTable["dec"] = 102;
	opcodeTable["div"] = 103;
	opcodeTable["enter"] = 104;
	opcodeTable["esc"] = 105;
	opcodeTable["f2xm1"] = 106;
	opcodeTable["fabs"] = 107;
	opcodeTable["fadd"] = 108;
	opcodeTable["faddp"] = 109;
	opcodeTable["fbld"] = 110;
	opcodeTable["fbstp"] = 111;
	opcodeTable["fchs"] = 112;
	opcodeTable["fclex"] = 113;
	opcodeTable["fnclex"] = 114;
	opcodeTable["fcmovb"] = 115;
	opcodeTable["fcmovbe"] = 116;
	opcodeTable["fcmove"] = 117;
	opcodeTable["fcmovnb"] = 118;
	opcodeTable["fcmovnbe"] = 119;
	opcodeTable["fcmovne"] = 120;
	opcodeTable["fcmovnu"] = 121;
	opcodeTable["fcmovu"] = 122;
	opcodeTable["fcom"] = 123;
	opcodeTable["fcom2"] = 124;
	opcodeTable["fcomi"] = 125;
	opcodeTable["fcomip"] = 126;
	opcodeTable["fcomp"] = 127;
	opcodeTable["fcomp3"] = 128;
	opcodeTable["fcomp5"] = 129;
	opcodeTable["fcompp"] = 130;
	opcodeTable["fcos"] = 131;
	opcodeTable["fdecstp"] = 132;
	opcodeTable["fdisi"] = 133;
	opcodeTable["fdiv"] = 134;
	opcodeTable["fdivp"] = 135;
	opcodeTable["fdivr"] = 136;
	opcodeTable["fdivrp"] = 137;
	opcodeTable["feni"] = 138;
	opcodeTable["ffree"] = 139;
	opcodeTable["ffreep"] = 140;
	opcodeTable["fiadd"] = 141;
	opcodeTable["ficom"] = 142;
	opcodeTable["ficomp"] = 143;
	opcodeTable["fidiv"] = 144;
	opcodeTable["fidivr"] = 145;
	opcodeTable["fild"] = 146;
	opcodeTable["fimul"] = 147;
	opcodeTable["fincstp"] = 148;
	opcodeTable["finit"] = 149;
	opcodeTable["fninit"] = 150;
	opcodeTable["fist"] = 151;
	opcodeTable["fistp"] = 152;
	opcodeTable["fisub"] = 153;
	opcodeTable["fisubr"] = 154;
	opcodeTable["fld"] = 155;
	opcodeTable["fld1"] = 156;
	opcodeTable["fldcw"] = 157;
	opcodeTable["fldenv"] = 158;
	opcodeTable["fldl2e"] = 159;
	opcodeTable["fldl2t"] = 160;
	opcodeTable["fldlg2"] = 161;
	opcodeTable["fldln2"] = 162;
	opcodeTable["fldpi"] = 163;
	opcodeTable["fldz"] = 164;
	opcodeTable["fmul"] = 165;
	opcodeTable["fmulp"] = 166;
	opcodeTable["fnop"] = 167;
	opcodeTable["fnsave"] = 168;
	opcodeTable["fpatan"] = 169;
	opcodeTable["fprem"] = 170;
	opcodeTable["fprem1"] = 171;
	opcodeTable["fptan"] = 172;
	opcodeTable["frndint"] = 173;
	opcodeTable["frstor"] = 174;
	opcodeTable["fsave"] = 175;
	opcodeTable["fscale"] = 176;
	opcodeTable["fsetpm"] = 177;
	opcodeTable["fsin"] = 178;
	opcodeTable["fsincos"] = 179;
	opcodeTable["fsqrt"] = 180;
	opcodeTable["fst"] = 181;
	opcodeTable["fstcw"] = 182;
	opcodeTable["fnstcw"] = 183;
	opcodeTable["fstenv"] = 184;
	opcodeTable["fnstenv"] = 185;
	opcodeTable["fstp"] = 186;
	opcodeTable["fstp1"] = 187;
	opcodeTable["fstp8"] = 188;
	opcodeTable["fstp9"] = 189;
	opcodeTable["fstsw"] = 190;
	opcodeTable["fnstsw"] = 191;
	opcodeTable["fsub"] = 192;
	opcodeTable["fsubp"] = 193;
	opcodeTable["fsubr"] = 194;
	opcodeTable["fsubrp"] = 195;
	opcodeTable["ftst"] = 196;
	opcodeTable["fucom"] = 197;
	opcodeTable["fucomi"] = 198;
	opcodeTable["fucomip"] = 199;
	opcodeTable["fucomp"] = 200;
	opcodeTable["fucompp"] = 201;
	opcodeTable["fwait"] = 202;
	opcodeTable["fxam"] = 203;
	opcodeTable["fxch"] = 204;
	opcodeTable["fxch4"] = 205;
	opcodeTable["fxch7"] = 206;
	opcodeTable["fxrstor"] = 207;
	opcodeTable["fxsave"] = 208;
	opcodeTable["fxtract"] = 209;
	opcodeTable["fyl2x"] = 210;
	opcodeTable["fyl2xp1"] = 211;
	opcodeTable["hlt"] = 212;
	opcodeTable["ibts"] = 213;
	opcodeTable["icebp"] = 214;
	opcodeTable["idiv"] = 215;
	opcodeTable["imul"] = 216;
	opcodeTable["in"] = 217;
	opcodeTable["ins"] = 218;
	opcodeTable["insb"] = 219;
	opcodeTable["insw"] = 220;
	opcodeTable["insd"] = 221;
	opcodeTable["inc"] = 222;
	opcodeTable["int"] = 223;
	opcodeTable["int1"] = 224;
	opcodeTable["int3"] = 225;
	opcodeTable["into"] = 226;
	opcodeTable["invd"] = 227;
	opcodeTable["invlpg"] = 228;
	opcodeTable["iret"] = 229;
	opcodeTable["iretw"] = 230;
	opcodeTable["iretd"] = 231;
	opcodeTable["ja"] = 232;
	opcodeTable["jae"] = 233;
	opcodeTable["jb"] = 234;
	opcodeTable["jbe"] = 235;
	opcodeTable["jc"] = 236;
	opcodeTable["jcxz"] = 237;
	opcodeTable["jecxz"] = 238;
	opcodeTable["je"] = 239;
	opcodeTable["jg"] = 240;
	opcodeTable["jge"] = 241;
	opcodeTable["jl"] = 242;
	opcodeTable["jle"] = 243;
	opcodeTable["jmp"] = 244;
	opcodeTable["jna"] = 245;
	opcodeTable["jnae"] = 246;
	opcodeTable["jnb"] = 247;
	opcodeTable["jnbe"] = 248;
	opcodeTable["jnc"] = 249;
	opcodeTable["jne"] = 250;
	opcodeTable["jng"] = 251;
	opcodeTable["jnge"] = 252;
	opcodeTable["jnl"] = 253;
	opcodeTable["jnle"] = 254;
	opcodeTable["jno"] = 255;
	opcodeTable["jnp"] = 256;
	opcodeTable["jns"] = 257;
	opcodeTable["jnz"] = 258;
	opcodeTable["jo"] = 259;
	opcodeTable["jp"] = 260;
	opcodeTable["jpe"] = 261;
	opcodeTable["jpo"] = 262;
	opcodeTable["js"] = 263;
	opcodeTable["jz"] = 264;
	opcodeTable["lahf"] = 265;
	opcodeTable["lar"] = 266;
	opcodeTable["lds"] = 267;
	opcodeTable["lea"] = 268;
	opcodeTable["leave"] = 269;
	opcodeTable["les"] = 270;
	opcodeTable["lfence"] = 271;
	opcodeTable["lfs"] = 272;
	opcodeTable["lgdt"] = 273;
	opcodeTable["lgs"] = 274;
	opcodeTable["lidt"] = 275;
	opcodeTable["lmsw"] = 276;
	opcodeTable["lods"] = 277;
	opcodeTable["lodsb"] = 278;
	opcodeTable["lodsw"] = 279;
	opcodeTable["lodsd"] = 280;
	opcodeTable["lodsq"] = 281;
	opcodeTable["loop"] = 282;
	opcodeTable["loope"] = 283;
	opcodeTable["loopne"] = 284;
	opcodeTable["loopnz"] = 285;
	opcodeTable["loopz"] = 286;
	opcodeTable["lsl"] = 287;
	opcodeTable["lss"] = 288;
	opcodeTable["ltr"] = 289;
	opcodeTable["mov"] = 290;
	opcodeTable["movs"] = 291;
	opcodeTable["movbe"] = 292;
	opcodeTable["movsb"] = 293;
	opcodeTable["movsw"] = 294;
	opcodeTable["movsd"] = 295;
	opcodeTable["movsq"] = 296;
	opcodeTable["movsx"] = 297;
	opcodeTable["movzx"] = 298;
	opcodeTable["movsxd"] = 299;
	opcodeTable["mul"] = 300;
	opcodeTable["neg"] = 301;
	opcodeTable["nop"] = 302;
	opcodeTable["not"] = 303;
	opcodeTable["or"] = 304;
	opcodeTable["out"] = 305;
	opcodeTable["outs"] = 306;
	opcodeTable["outsb"] = 307;
	opcodeTable["outsw"] = 308;
	opcodeTable["outsd"] = 309;
	opcodeTable["pop"] = 310;
	opcodeTable["popa"] = 311;
	opcodeTable["popaw"] = 312;
	opcodeTable["popad"] = 313;
	opcodeTable["popcnt"] = 314;
	opcodeTable["popf"] = 315;
	opcodeTable["popfw"] = 316;
	opcodeTable["popfd"] = 317;
	opcodeTable["popfq"] = 318;
	opcodeTable["prefetchnta"] = 319;
	opcodeTable["prefetcht0"] = 320;
	opcodeTable["prefetcht1"] = 321;
	opcodeTable["prefetcht2"] = 322;
	opcodeTable["push"] = 323;
	opcodeTable["pusha"] = 324;
	opcodeTable["pushaw"] = 325;
	opcodeTable["pushad"] = 326;
	opcodeTable["pushf"] = 327;
	opcodeTable["pushfw"] = 328;
	opcodeTable["pushfd"] = 329;
	opcodeTable["pushfq"] = 330;
	opcodeTable["ret"] = 331;
	opcodeTable["retf"] = 332;
	opcodeTable["rol"] = 333;
	opcodeTable["ror"] = 334;
	opcodeTable["rsm"] = 335;
	opcodeTable["sahf"] = 336;
	opcodeTable["sal"] = 337;
	opcodeTable["sar"] = 338;
	opcodeTable["sbb"] = 339;
	opcodeTable["scas"] = 340;
	opcodeTable["scasb"] = 341;
	opcodeTable["scasw"] = 342;
	opcodeTable["scasd"] = 343;
	opcodeTable["scasq"] = 344;
	opcodeTable["seta"] = 345;
	opcodeTable["setae"] = 346;
	opcodeTable["setb"] = 347;
	opcodeTable["setbe"] = 348;
	opcodeTable["setc"] = 349;
	opcodeTable["sete"] = 350;
	opcodeTable["setg"] = 351;
	opcodeTable["setge"] = 352;
	opcodeTable["setl"] = 353;
	opcodeTable["setle"] = 354;
	opcodeTable["setna"] = 355;
	opcodeTable["setnae"] = 356;
	opcodeTable["setnb"] = 357;
	opcodeTable["setnbe"] = 358;
	opcodeTable["setnc"] = 359;
	opcodeTable["setne"] = 360;
	opcodeTable["setng"] = 361;
	opcodeTable["setnge"] = 362;
	opcodeTable["setnl"] = 363;
	opcodeTable["setnle"] = 364;
	opcodeTable["setno"] = 365;
	opcodeTable["setnp"] = 366;
	opcodeTable["setns"] = 367;
	opcodeTable["setnz"] = 368;
	opcodeTable["seto"] = 369;
	opcodeTable["setp"] = 370;
	opcodeTable["setpe"] = 371;
	opcodeTable["setpo"] = 372;
	opcodeTable["sets"] = 373;
	opcodeTable["setz"] = 374;
	opcodeTable["sfence"] = 375;
	opcodeTable["shl"] = 376;
	opcodeTable["shld"] = 377;
	opcodeTable["shr"] = 378;
	opcodeTable["shrd"] = 379;
	opcodeTable["sidt"] = 380;
	opcodeTable["sldt"] = 381;
	opcodeTable["smsw"] = 382;
	opcodeTable["stc"] = 383;
	opcodeTable["std"] = 384;
	opcodeTable["sti"] = 385;
	opcodeTable["stos"] = 386;
	opcodeTable["stosb"] = 387;
	opcodeTable["stosw"] = 388;
	opcodeTable["stosd"] = 389;
	opcodeTable["stosq"] = 390;
	opcodeTable["str"] = 391;
	opcodeTable["sub"] = 392;
	opcodeTable["syscall"] = 393;
	opcodeTable["sysenter"] = 394;
	opcodeTable["sysexit"] = 395;
	opcodeTable["sysret"] = 396;
	opcodeTable["test"] = 397;
	opcodeTable["ud2"] = 398;
	opcodeTable["verr"] = 399;
	opcodeTable["verw"] = 400;
	opcodeTable["wait"] = 401;
	opcodeTable["wbinvd"] = 402;
	opcodeTable["wrmsr"] = 403;
	opcodeTable["xadd"] = 404;
	opcodeTable["xbts"] = 405;
	opcodeTable["xchg"] = 406;
	opcodeTable["xlat"] = 407;
	opcodeTable["xlatb"] = 408;
	opcodeTable["xor"] = 409;
	opcodeTable["xrstor"] = 410;
	opcodeTable["xrstor64"] = 411;
	opcodeTable["xsave"] = 412;
	opcodeTable["xsave64"] = 413;
	opcodeTable["xsetbv"] = 414;
	opcodeTable["addpd"] = 415;
	opcodeTable["addps"] = 416;
	opcodeTable["addsd"] = 417;
	opcodeTable["addss"] = 418;
	opcodeTable["addsubpd"] = 419;
	opcodeTable["addsubps"] = 420;
	opcodeTable["andnpd"] = 421;
	opcodeTable["andnps"] = 422;
	opcodeTable["andpd"] = 423;
	opcodeTable["andps"] = 424;
	opcodeTable["blendpd"] = 425;
	opcodeTable["blendps"] = 426;
	opcodeTable["cmppd"] = 427;
	opcodeTable["cmpps"] = 428;
	opcodeTable["cvtdq2pd"] = 429;
	opcodeTable["cvtdq2ps"] = 430;
	opcodeTable["cvtpd2dq"] = 431;
	opcodeTable["cvtpd2pi"] = 432;
	opcodeTable["cvtpd2ps"] = 433;
	opcodeTable["cvtpi2pd"] = 434;
	opcodeTable["cvtpi2ps"] = 435;
	opcodeTable["cvtps2dq"] = 436;
	opcodeTable["cvtps2pd"] = 437;
	opcodeTable["cvtps2pi"] = 438;
	opcodeTable["cvtsd2si"] = 439;
	opcodeTable["cvtsd2ss"] = 440;
	opcodeTable["cvtsi2sd"] = 441;
	opcodeTable["cvtsi2ss"] = 442;
	opcodeTable["cvtss2sd"] = 443;
	opcodeTable["cvtss2si"] = 444;
	opcodeTable["cvttp2qdq"] = 445;
	opcodeTable["cvttp2qpi"] = 446;
	opcodeTable["cvttps2dq"] = 447;
	opcodeTable["cvttps2pi"] = 448;
	opcodeTable["cvttsd2si"] = 449;
	opcodeTable["cvttss2si"] = 450;
	opcodeTable["divpd"] = 451;
	opcodeTable["divps"] = 452;
	opcodeTable["divsd"] = 453;
	opcodeTable["divss"] = 454;
	opcodeTable["dppd"] = 455;
	opcodeTable["dpps"] = 456;
	opcodeTable["hsubpd"] = 457;
	opcodeTable["hsubps"] = 458;
	opcodeTable["insertps"] = 459;
	opcodeTable["lddqu"] = 460;
	opcodeTable["maskmovdqu"] = 461;
	opcodeTable["maskmovq"] = 462;
	opcodeTable["maxps"] = 463;
	opcodeTable["maxpd"] = 464;
	opcodeTable["maxps"] = 465;
	opcodeTable["maxsd"] = 466;
	opcodeTable["maxss"] = 467;
	opcodeTable["mfence"] = 468;
	opcodeTable["minpd"] = 469;
	opcodeTable["minps"] = 470;
	opcodeTable["minsd"] = 471;
	opcodeTable["minss"] = 472;
	opcodeTable["monitor"] = 473;
	opcodeTable["movapd"] = 474;
	opcodeTable["movaps"] = 475;
	opcodeTable["movd"] = 476;
	opcodeTable["movq"] = 477;
	opcodeTable["movddup"] = 478;
	opcodeTable["movdq2q"] = 479;
	opcodeTable["movdqa"] = 480;
	opcodeTable["movdqu"] = 481;
	opcodeTable["movhlps"] = 482;
	opcodeTable["movhpd"] = 483;
	opcodeTable["movhps"] = 484;
	opcodeTable["movlhps"] = 485;
	opcodeTable["movlpd"] = 486;
	opcodeTable["movlps"] = 487;
	opcodeTable["movmskpd"] = 488;
	opcodeTable["movmskps"] = 489;
	opcodeTable["movntdq"] = 490;
	opcodeTable["movnti"] = 491;
	opcodeTable["movntpd"] = 492;
	opcodeTable["movntpd"] = 493;
	opcodeTable["movntq"] = 494;
	opcodeTable["movq2dq"] = 495;
	opcodeTable["movshdup"] = 496;
	opcodeTable["movsldup"] = 497;
	opcodeTable["movss"] = 498;
	opcodeTable["movupd"] = 499;
	opcodeTable["movups"] = 500;
	opcodeTable["mpsadbw"] = 501;
	opcodeTable["mulpd"] = 502;
	opcodeTable["mulps"] = 503;
	opcodeTable["mulsd"] = 504;
	opcodeTable["mulss"] = 505;
	opcodeTable["orpd"] = 506;
	opcodeTable["orps"] = 507;
	opcodeTable["packssdw"] = 508;
	opcodeTable["packsswb"] = 509;
	opcodeTable["packusdw"] = 510;
	opcodeTable["paddb"] = 511;
	opcodeTable["paddd"] = 512;
	opcodeTable["paddq"] = 513;
	opcodeTable["paddsw"] = 514;
	opcodeTable["paddusb"] = 515;
	opcodeTable["paddusw"] = 516;
	opcodeTable["paddw"] = 517;
	opcodeTable["palignr"] = 518;
	opcodeTable["pand"] = 519;
	opcodeTable["pandn"] = 520;
	opcodeTable["pavgb"] = 521;
	opcodeTable["pavgw"] = 522;
	opcodeTable["pblendw"] = 523;
	opcodeTable["pcmpeqb"] = 524;
	opcodeTable["pcmpeqd"] = 525;
	opcodeTable["pcmpeqw"] = 526;
	opcodeTable["pcmpestri"] = 527;
	opcodeTable["pcmpestrm"] = 528;
	opcodeTable["pcmpgtb"] = 529;
	opcodeTable["pcmpgtd"] = 530;
	opcodeTable["pcmpgtw"] = 531;
	opcodeTable["pcmpestri"] = 532;
	opcodeTable["pcmpestrm"] = 533;
	opcodeTable["pextrb"] = 534;
	opcodeTable["pextrd"] = 535;
	opcodeTable["pextrq"] = 536;
	opcodeTable["pextrw"] = 537;
	opcodeTable["pinsrb"] = 538;
	opcodeTable["pinsrd"] = 539;
	opcodeTable["pinsrq"] = 540;
	opcodeTable["pinsrw"] = 541;
	opcodeTable["pmaddwd"] = 542;
	opcodeTable["pmaxsw"] = 543;
	opcodeTable["pmaxub"] = 544;
	opcodeTable["pminsw"] = 545;
	opcodeTable["pminub"] = 546;
	opcodeTable["pmovmskb"] = 547;
	opcodeTable["pmulhuw"] = 548;
	opcodeTable["pmulhw"] = 549;
	opcodeTable["pmullw"] = 550;
	opcodeTable["pmuludq"] = 551;
	opcodeTable["psadbw"] = 552;
	opcodeTable["pshufd"] = 553;
	opcodeTable["pshufhw"] = 554;
	opcodeTable["pshufhl"] = 555;
	opcodeTable["pshufw"] = 556;
	opcodeTable["pslld"] = 557;
	opcodeTable["pslldq"] = 558;
	opcodeTable["psllq"] = 559;
	opcodeTable["psllw"] = 560;
	opcodeTable["psrad"] = 561;
	opcodeTable["psraw"] = 562;
	opcodeTable["psrld"] = 563;
	opcodeTable["psrldq"] = 564;
	opcodeTable["psrlq"] = 565;
	opcodeTable["psrlw"] = 566;
	opcodeTable["psubb"] = 567;
	opcodeTable["psubd"] = 568;
	opcodeTable["psubq"] = 569;
	opcodeTable["psubsb"] = 570;
	opcodeTable["psubsw"] = 571;
	opcodeTable["psubusb"] = 572;
	opcodeTable["psubusw"] = 573;
	opcodeTable["punpckhbw"] = 574;
	opcodeTable["punpckhdq"] = 575;
	opcodeTable["punpckhqdq"] = 576;
	opcodeTable["punpckhwd"] = 577;
	opcodeTable["punpcklbw"] = 578;
	opcodeTable["punpckldq"] = 579;
	opcodeTable["punpcklqdq"] = 580;
	opcodeTable["punpcklwd"] = 581;
	opcodeTable["pxor"] = 582;
	opcodeTable["rcpps"] = 583;
	opcodeTable["rpcss"] = 584;
	opcodeTable["roundpd"] = 585;
	opcodeTable["roundps"] = 586;
	opcodeTable["roundsd"] = 587;
	opcodeTable["roundss"] = 588;
	opcodeTable["shufpd"] = 589;
	opcodeTable["shufps"] = 590;
	opcodeTable["sqrtps"] = 591;
	opcodeTable["sqrtss"] = 592;
	opcodeTable["subpd"] = 593;
	opcodeTable["subps"] = 594;
	opcodeTable["subsd"] = 595;
	opcodeTable["subss"] = 596;
	opcodeTable["unpckhpd"] = 597;
	opcodeTable["unpckhps"] = 598;
	opcodeTable["unpcklpd"] = 599;
	opcodeTable["unpcklps"] = 600;
	opcodeTable["xorpd"] = 601;
	opcodeTable["xorps"] = 602;
	opcodeTable["invept"] = 603;
	opcodeTable["invvpid"] = 604;
	opcodeTable["vmcall"] = 605;
	opcodeTable["vmclear"] = 606;
	opcodeTable["vmlaunch"] = 607;
	opcodeTable["vmptrld"] = 608;
	opcodeTable["vmptrst"] = 609;
	opcodeTable["vmread"] = 610;
	opcodeTable["vmresume"] = 611;
	opcodeTable["vmwrite"] = 612;
	opcodeTable["vmx0ff"] = 613;
	opcodeTable["vmxon"] = 614;
	prefixTable["a16"] = 0;
	prefixTable["a32"] = 1;
	prefixTable["lock"] = 2;
	prefixTable["o16"] = 3;
	prefixTable["o32"] = 4;
	prefixTable["rep"] = 5;
	prefixTable["repe"] = 6;
	prefixTable["repne"] = 7;
	prefixTable["repnz"] = 8;
	prefixTable["repz"] = 9;
}

void x64Parser::TokenFunc4(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 0;
}
x64Token x64Parser::tokenBranches3[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc4,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc9(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 1;
}
x64Token x64Parser::tokenBranches8[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc9,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc200(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 19;
}
x64Token x64Parser::tokenBranches199[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc200,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc346(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 34;
}
x64Token x64Parser::tokenBranches345[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc346,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc199(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc345(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches198[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc199, x64Parser::tokenBranches199 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc345, x64Parser::tokenBranches345 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc36(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 4;
}
x64Token x64Parser::tokenBranches35[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc36,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches198 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc137(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches136[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc137,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc283(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 28;
}
x64Token x64Parser::tokenBranches282[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc283,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc429(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 43;
}
x64Token x64Parser::tokenBranches428[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc429,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc35(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc136(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc282(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc428(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches34[] = {
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc35, x64Parser::tokenBranches35 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc136, x64Parser::tokenBranches136 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc282, x64Parser::tokenBranches282 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc428, x64Parser::tokenBranches428 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc97(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches33[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches34 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc97,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc227(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 22;
}
x64Token x64Parser::tokenBranches226[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc227,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc373(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 37;
}
x64Token x64Parser::tokenBranches372[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc373,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc226(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc372(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches225[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc226, x64Parser::tokenBranches226 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc372, x64Parser::tokenBranches372 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc57(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 7;
}
x64Token x64Parser::tokenBranches56[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc57,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches225 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc170(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 17;
}
x64Token x64Parser::tokenBranches169[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc170,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc316(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 32;
}
x64Token x64Parser::tokenBranches315[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc316,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc462(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 47;
}
x64Token x64Parser::tokenBranches461[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc462,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc56(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc169(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc315(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc461(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches55[] = {
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc56, x64Parser::tokenBranches56 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc169, x64Parser::tokenBranches169 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc315, x64Parser::tokenBranches315 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc461, x64Parser::tokenBranches461 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc120(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 17;
}
x64Token x64Parser::tokenBranches54[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches55 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc120,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc257(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 25;
}
x64Token x64Parser::tokenBranches256[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc257,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc403(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 40;
}
x64Token x64Parser::tokenBranches402[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc403,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc256(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc402(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches255[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc256, x64Parser::tokenBranches256 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc402, x64Parser::tokenBranches402 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc79(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 10;
}
x64Token x64Parser::tokenBranches78[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc79,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches255 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc606(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 57;
}
x64Token x64Parser::tokenBranches605[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc606,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc702(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 70;
}
x64Token x64Parser::tokenBranches701[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc702,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc826(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 84;
}
x64Token x64Parser::tokenBranches825[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc826,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1227(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1226[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1227,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1786(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 149;
}
x64Token x64Parser::tokenBranches1785[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1786,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2057(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches2056[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2057,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1226(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1785(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2056(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1225[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1226, x64Parser::tokenBranches1226 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1785, x64Parser::tokenBranches1785 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2056, x64Parser::tokenBranches2056 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1509(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1224[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1225 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1509,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1224(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1223[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1224, x64Parser::tokenBranches1224 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 125;
}
x64Token x64Parser::tokenBranches1235[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1795(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 150;
}
x64Token x64Parser::tokenBranches1794[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1795,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2066(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 169;
}
x64Token x64Parser::tokenBranches2065[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2066,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1235(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1794(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2065(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1234[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1235, x64Parser::tokenBranches1235 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1794, x64Parser::tokenBranches1794 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2065, x64Parser::tokenBranches2065 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1516(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 125;
}
x64Token x64Parser::tokenBranches1222[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1223 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1234 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1516,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc605(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc701(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc825(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1222(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches604[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc605, x64Parser::tokenBranches605 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc701, x64Parser::tokenBranches701 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc825, x64Parser::tokenBranches825 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1222, x64Parser::tokenBranches1222 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc506(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 57;
}
x64Token x64Parser::tokenBranches505[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc506,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches604 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc613(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 67;
}
x64Token x64Parser::tokenBranches612[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc613,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc709(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 71;
}
x64Token x64Parser::tokenBranches708[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc709,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc833(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 85;
}
x64Token x64Parser::tokenBranches832[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc833,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1207(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 123;
}
x64Token x64Parser::tokenBranches1206[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1207,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1766(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 147;
}
x64Token x64Parser::tokenBranches1765[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1766,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2037(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 167;
}
x64Token x64Parser::tokenBranches2036[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2037,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1206(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1765(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2036(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1205[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1206, x64Parser::tokenBranches1206 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1765, x64Parser::tokenBranches1765 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2036, x64Parser::tokenBranches2036 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1493(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 123;
}
x64Token x64Parser::tokenBranches1204[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1205 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1493,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1204(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1203[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1204, x64Parser::tokenBranches1204 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1216(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 124;
}
x64Token x64Parser::tokenBranches1215[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1216,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1775(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 148;
}
x64Token x64Parser::tokenBranches1774[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1775,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2046(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 168;
}
x64Token x64Parser::tokenBranches2045[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2046,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1215(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1774(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2045(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1214[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1215, x64Parser::tokenBranches1215 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1774, x64Parser::tokenBranches1774 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2045, x64Parser::tokenBranches2045 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1500(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 124;
}
x64Token x64Parser::tokenBranches1202[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1203 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1214 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1500,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1325(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 129;
}
x64Token x64Parser::tokenBranches1324[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1325,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1737(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 145;
}
x64Token x64Parser::tokenBranches1736[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1737,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2115(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 174;
}
x64Token x64Parser::tokenBranches2114[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2115,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1324(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1736(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2114(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1323[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1324, x64Parser::tokenBranches1324 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1736, x64Parser::tokenBranches1736 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2114, x64Parser::tokenBranches2114 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1555(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 129;
}
x64Token x64Parser::tokenBranches1322[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1323 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1555,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc612(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc708(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc832(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1202(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches611[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1322 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc612, x64Parser::tokenBranches612 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc708, x64Parser::tokenBranches708 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc832, x64Parser::tokenBranches832 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1202, x64Parser::tokenBranches1202 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc961(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 99;
}
x64Token x64Parser::tokenBranches960[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc961,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc960(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches959[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc960, x64Parser::tokenBranches960 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc952(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 98;
}
x64Token x64Parser::tokenBranches951[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc952,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches959 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc951(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches950[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc951, x64Parser::tokenBranches951 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc511(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 58;
}
x64Token x64Parser::tokenBranches510[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc511,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches611 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches950 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc653(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches652[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc653,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc777(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 76;
}
x64Token x64Parser::tokenBranches776[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc777,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc901(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 90;
}
x64Token x64Parser::tokenBranches900[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc901,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc652(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc776(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc900(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches651[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc652, x64Parser::tokenBranches652 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc776, x64Parser::tokenBranches776 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc900, x64Parser::tokenBranches900 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc538(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches537[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc538,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches651 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc644(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches643[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc644,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc768(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 75;
}
x64Token x64Parser::tokenBranches767[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc768,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc892(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 89;
}
x64Token x64Parser::tokenBranches891[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc892,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1406(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1405[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1406,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1938(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 161;
}
x64Token x64Parser::tokenBranches1937[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1938,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 181;
}
x64Token x64Parser::tokenBranches2235[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1405(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1937(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2235(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1404[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1405, x64Parser::tokenBranches1405 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1937, x64Parser::tokenBranches1937 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2235, x64Parser::tokenBranches2235 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1650(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1403[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1404 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1650,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1403(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1402[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1403, x64Parser::tokenBranches1403 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1415(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1414[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1415,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1947(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 158;
}
x64Token x64Parser::tokenBranches1946[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1947,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2245(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 182;
}
x64Token x64Parser::tokenBranches2244[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2245,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1414(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1946(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2244(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1413[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1414, x64Parser::tokenBranches1414 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1946, x64Parser::tokenBranches1946 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2244, x64Parser::tokenBranches2244 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1657(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1401[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1402 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1413 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1657,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc643(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc767(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc891(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1401(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches536[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches537 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc643, x64Parser::tokenBranches643 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc767, x64Parser::tokenBranches767 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc891, x64Parser::tokenBranches891 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1401, x64Parser::tokenBranches1401 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc526(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches525[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc526,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches536 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc565(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 64;
}
x64Token x64Parser::tokenBranches564[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc565,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1065(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 110;
}
x64Token x64Parser::tokenBranches1064[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1065,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1085(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches1084[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1085,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1084(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1083[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1084, x64Parser::tokenBranches1084 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1074(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1073[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1074,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1083 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1064(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1063[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1073 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1064, x64Parser::tokenBranches1064 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1056(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 109;
}
x64Token x64Parser::tokenBranches1055[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1056,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1063 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1055(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1054[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1055, x64Parser::tokenBranches1055 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1053[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1054 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc8(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc78(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc525(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc564(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1053(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches33 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches54 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches505 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches510 },
	{x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc8, x64Parser::tokenBranches8 },
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc78, x64Parser::tokenBranches78 },
	{x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc525, x64Parser::tokenBranches525 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc564, x64Parser::tokenBranches564 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1053, x64Parser::tokenBranches1053 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches7 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc14(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 2;
}
x64Token x64Parser::tokenBranches13[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc14,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc209(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 21;
}
x64Token x64Parser::tokenBranches208[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc209,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc355(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 36;
}
x64Token x64Parser::tokenBranches354[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc355,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc208(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc354(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches207[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc208, x64Parser::tokenBranches208 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc354, x64Parser::tokenBranches354 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc43(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 6;
}
x64Token x64Parser::tokenBranches42[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc43,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches207 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc144(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 14;
}
x64Token x64Parser::tokenBranches143[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc144,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc290(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 29;
}
x64Token x64Parser::tokenBranches289[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc290,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc436(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 44;
}
x64Token x64Parser::tokenBranches435[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc436,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc42(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc143(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc289(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc435(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches41[] = {
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc42, x64Parser::tokenBranches42 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc143, x64Parser::tokenBranches143 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc289, x64Parser::tokenBranches289 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc435, x64Parser::tokenBranches435 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc102(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 14;
}
x64Token x64Parser::tokenBranches40[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches41 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc102,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc218(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 20;
}
x64Token x64Parser::tokenBranches217[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc218,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc364(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 35;
}
x64Token x64Parser::tokenBranches363[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc364,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc217(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc363(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches216[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc217, x64Parser::tokenBranches217 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc363, x64Parser::tokenBranches363 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc50(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 5;
}
x64Token x64Parser::tokenBranches49[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc50,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches216 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc163(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches162[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc163,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc309(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 31;
}
x64Token x64Parser::tokenBranches308[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc309,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc455(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 46;
}
x64Token x64Parser::tokenBranches454[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc455,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc49(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc162(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc308(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc454(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches48[] = {
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc49, x64Parser::tokenBranches49 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc162, x64Parser::tokenBranches162 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc308, x64Parser::tokenBranches308 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc454, x64Parser::tokenBranches454 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc115(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches47[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches48 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc115,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc264(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 26;
}
x64Token x64Parser::tokenBranches263[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc264,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc410(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 41;
}
x64Token x64Parser::tokenBranches409[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc410,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc263(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc409(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches262[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc263, x64Parser::tokenBranches263 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc409, x64Parser::tokenBranches409 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc84(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 11;
}
x64Token x64Parser::tokenBranches83[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc84,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches262 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc592(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches591[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc592,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc716(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 68;
}
x64Token x64Parser::tokenBranches715[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc716,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc840(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 82;
}
x64Token x64Parser::tokenBranches839[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc840,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1267(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1266[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1267,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1826(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 143;
}
x64Token x64Parser::tokenBranches1825[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1826,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2097(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 172;
}
x64Token x64Parser::tokenBranches2096[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2097,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1266(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1825(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2096(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1265[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1266, x64Parser::tokenBranches1266 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1825, x64Parser::tokenBranches1825 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2096, x64Parser::tokenBranches2096 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1541(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1264[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1265 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1541,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1264(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1263[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1264, x64Parser::tokenBranches1264 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1835(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 144;
}
x64Token x64Parser::tokenBranches1834[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1835,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2106(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 173;
}
x64Token x64Parser::tokenBranches2105[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2106,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1275(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1834(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2105(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1274[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1275, x64Parser::tokenBranches1275 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1834, x64Parser::tokenBranches1834 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2105, x64Parser::tokenBranches2105 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1548(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1262[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1263 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1274 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1548,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc591(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc715(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc839(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1262(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches590[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc591, x64Parser::tokenBranches591 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc715, x64Parser::tokenBranches715 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc839, x64Parser::tokenBranches839 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1262, x64Parser::tokenBranches1262 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc516(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches515[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc516,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches590 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc599(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches598[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc599,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc723(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 69;
}
x64Token x64Parser::tokenBranches722[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc723,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc847(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 83;
}
x64Token x64Parser::tokenBranches846[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc847,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1247(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1246[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1247,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1806(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 141;
}
x64Token x64Parser::tokenBranches1805[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1806,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2077(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 170;
}
x64Token x64Parser::tokenBranches2076[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2077,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1246(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1805(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2076(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1245[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1246, x64Parser::tokenBranches1246 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1805, x64Parser::tokenBranches1805 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2076, x64Parser::tokenBranches2076 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1525(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1244[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1245 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1525,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1244(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1243[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1244, x64Parser::tokenBranches1244 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1256(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1255[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1256,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1815(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 142;
}
x64Token x64Parser::tokenBranches1814[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1815,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2086(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 171;
}
x64Token x64Parser::tokenBranches2085[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2086,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1255(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1814(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2085(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1254[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1255, x64Parser::tokenBranches1255 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1814, x64Parser::tokenBranches1814 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2085, x64Parser::tokenBranches2085 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1532(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1242[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1243 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1254 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1532,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1334(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1333[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1334,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1746(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 140;
}
x64Token x64Parser::tokenBranches1745[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1746,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2124(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 166;
}
x64Token x64Parser::tokenBranches2123[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2124,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1333(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1745(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2123(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1332[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1333, x64Parser::tokenBranches1333 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1745, x64Parser::tokenBranches1745 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2123, x64Parser::tokenBranches2123 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1562(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1331[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1332 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1562,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc598(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc722(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc846(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1242(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches597[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1331 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc598, x64Parser::tokenBranches598 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc722, x64Parser::tokenBranches722 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc846, x64Parser::tokenBranches846 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1242, x64Parser::tokenBranches1242 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc977(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches976[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc977,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc976(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches975[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc976, x64Parser::tokenBranches976 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc968(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches967[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc968,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches975 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc967(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches966[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc967, x64Parser::tokenBranches967 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc521(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches520[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc521,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches597 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches966 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc669(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 60;
}
x64Token x64Parser::tokenBranches668[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc669,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc793(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 79;
}
x64Token x64Parser::tokenBranches792[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc793,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc917(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches916[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc917,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc668(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc792(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc916(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches667[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc668, x64Parser::tokenBranches668 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc792, x64Parser::tokenBranches792 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc916, x64Parser::tokenBranches916 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc545(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 60;
}
x64Token x64Parser::tokenBranches544[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc545,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches667 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc660(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 59;
}
x64Token x64Parser::tokenBranches659[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc660,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc784(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 78;
}
x64Token x64Parser::tokenBranches783[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc784,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc908(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches907[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc908,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1426(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 136;
}
x64Token x64Parser::tokenBranches1425[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1426,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1958(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 162;
}
x64Token x64Parser::tokenBranches1957[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1958,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2256(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 185;
}
x64Token x64Parser::tokenBranches2255[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2256,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1425(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1957(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2255(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1424[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1425, x64Parser::tokenBranches1425 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1957, x64Parser::tokenBranches1957 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2255, x64Parser::tokenBranches2255 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1666(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 136;
}
x64Token x64Parser::tokenBranches1423[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1424 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1666,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1423(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1422[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1423, x64Parser::tokenBranches1423 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1435(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 137;
}
x64Token x64Parser::tokenBranches1434[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1435,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1967(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 163;
}
x64Token x64Parser::tokenBranches1966[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1967,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2265(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 186;
}
x64Token x64Parser::tokenBranches2264[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2265,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1434(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1966(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2264(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1433[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1434, x64Parser::tokenBranches1434 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1966, x64Parser::tokenBranches1966 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2264, x64Parser::tokenBranches2264 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1673(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 137;
}
x64Token x64Parser::tokenBranches1421[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1422 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1433 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1673,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc659(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc783(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc907(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1421(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches543[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches544 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc659, x64Parser::tokenBranches659 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc783, x64Parser::tokenBranches783 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc907, x64Parser::tokenBranches907 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1421, x64Parser::tokenBranches1421 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc531(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 59;
}
x64Token x64Parser::tokenBranches530[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc531,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches543 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc570(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 65;
}
x64Token x64Parser::tokenBranches569[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc570,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1101(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 112;
}
x64Token x64Parser::tokenBranches1100[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1101,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1121(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 114;
}
x64Token x64Parser::tokenBranches1120[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1121,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1120(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1119[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1120, x64Parser::tokenBranches1120 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1110(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1109[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1110,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1119 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1100(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1099[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1109 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1100, x64Parser::tokenBranches1100 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1092(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 111;
}
x64Token x64Parser::tokenBranches1091[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1092,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1099 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1091(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1090[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1091, x64Parser::tokenBranches1091 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1089[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1090 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc13(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc83(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc530(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc569(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1089(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches12[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches40 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches47 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches515 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches520 },
	{x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc13, x64Parser::tokenBranches13 },
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc83, x64Parser::tokenBranches83 },
	{x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc530, x64Parser::tokenBranches530 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc569, x64Parser::tokenBranches569 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1089, x64Parser::tokenBranches1089 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches11[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches12 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc19(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 3;
}
x64Token x64Parser::tokenBranches18[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc19,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 23;
}
x64Token x64Parser::tokenBranches235[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc382(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 38;
}
x64Token x64Parser::tokenBranches381[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc382,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc235(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc381(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches234[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc235, x64Parser::tokenBranches235 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc381, x64Parser::tokenBranches381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc64(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 8;
}
x64Token x64Parser::tokenBranches63[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc64,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches234 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc151(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 15;
}
x64Token x64Parser::tokenBranches150[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc151,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc297(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 30;
}
x64Token x64Parser::tokenBranches296[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc297,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc443(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 45;
}
x64Token x64Parser::tokenBranches442[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc443,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc63(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc150(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc296(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc442(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches62[] = {
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc63, x64Parser::tokenBranches63 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc150, x64Parser::tokenBranches150 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc296, x64Parser::tokenBranches296 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc442, x64Parser::tokenBranches442 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc107(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 15;
}
x64Token x64Parser::tokenBranches61[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches62 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc107,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc245(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 24;
}
x64Token x64Parser::tokenBranches244[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc245,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc391(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 39;
}
x64Token x64Parser::tokenBranches390[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc391,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc244(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc390(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches243[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc244, x64Parser::tokenBranches244 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc390, x64Parser::tokenBranches390 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc71(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 9;
}
x64Token x64Parser::tokenBranches70[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc71,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches243 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc177(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 18;
}
x64Token x64Parser::tokenBranches176[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc177,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc323(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 33;
}
x64Token x64Parser::tokenBranches322[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc323,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc469(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 48;
}
x64Token x64Parser::tokenBranches468[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc469,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc70(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc176(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc322(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc468(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches69[] = {
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc70, x64Parser::tokenBranches70 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc176, x64Parser::tokenBranches176 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc322, x64Parser::tokenBranches322 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc468, x64Parser::tokenBranches468 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc125(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 18;
}
x64Token x64Parser::tokenBranches68[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches69 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc125,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc271(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 27;
}
x64Token x64Parser::tokenBranches270[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc271,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc417(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 42;
}
x64Token x64Parser::tokenBranches416[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc417,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc270(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc416(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches269[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc270, x64Parser::tokenBranches270 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc416, x64Parser::tokenBranches416 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc89(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 12;
}
x64Token x64Parser::tokenBranches88[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc89,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches269 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc730(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 72;
}
x64Token x64Parser::tokenBranches729[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc730,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc854(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 86;
}
x64Token x64Parser::tokenBranches853[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc854,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1307(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 117;
}
x64Token x64Parser::tokenBranches1306[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1307,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1866(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 153;
}
x64Token x64Parser::tokenBranches1865[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1866,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2164(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 118;
}
x64Token x64Parser::tokenBranches2163[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2164,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1306(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1865(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2163(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1305[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1306, x64Parser::tokenBranches1306 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1865, x64Parser::tokenBranches1865 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2163, x64Parser::tokenBranches2163 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1594(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 117;
}
x64Token x64Parser::tokenBranches1304[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1305 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1594,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1304(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1303[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1304, x64Parser::tokenBranches1304 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1316(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 128;
}
x64Token x64Parser::tokenBranches1315[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1316,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1875(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 154;
}
x64Token x64Parser::tokenBranches1874[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1875,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2173(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 178;
}
x64Token x64Parser::tokenBranches2172[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2173,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1315(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1874(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2172(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1314[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1315, x64Parser::tokenBranches1315 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1874, x64Parser::tokenBranches1874 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2172, x64Parser::tokenBranches2172 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1601(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 128;
}
x64Token x64Parser::tokenBranches1302[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1303 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1314 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1601,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc729(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc853(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1302(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches728[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc729, x64Parser::tokenBranches729 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc853, x64Parser::tokenBranches853 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1302, x64Parser::tokenBranches1302 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc491(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 54;
}
x64Token x64Parser::tokenBranches490[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc491,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches728 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc737(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 73;
}
x64Token x64Parser::tokenBranches736[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc737,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc861(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 87;
}
x64Token x64Parser::tokenBranches860[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc861,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1287(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 126;
}
x64Token x64Parser::tokenBranches1286[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1287,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1846(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 151;
}
x64Token x64Parser::tokenBranches1845[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1846,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2144(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 176;
}
x64Token x64Parser::tokenBranches2143[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2144,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1286(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1845(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2143(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1285[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1286, x64Parser::tokenBranches1286 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1845, x64Parser::tokenBranches1845 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2143, x64Parser::tokenBranches2143 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1578(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 126;
}
x64Token x64Parser::tokenBranches1284[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1285 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1578,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1284(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1283[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1284, x64Parser::tokenBranches1284 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1296(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 127;
}
x64Token x64Parser::tokenBranches1295[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1296,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1855(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 152;
}
x64Token x64Parser::tokenBranches1854[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1855,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2153(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 177;
}
x64Token x64Parser::tokenBranches2152[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2153,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1295(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1854(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2152(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1294[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1295, x64Parser::tokenBranches1295 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1854, x64Parser::tokenBranches1854 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2152, x64Parser::tokenBranches2152 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1585(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 127;
}
x64Token x64Parser::tokenBranches1282[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1283 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1294 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1585,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1343(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 130;
}
x64Token x64Parser::tokenBranches1342[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1343,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1755(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 146;
}
x64Token x64Parser::tokenBranches1754[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1755,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2133(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 175;
}
x64Token x64Parser::tokenBranches2132[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2133,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1342(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1754(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2132(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1341[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1342, x64Parser::tokenBranches1342 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1754, x64Parser::tokenBranches1754 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2132, x64Parser::tokenBranches2132 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1569(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 130;
}
x64Token x64Parser::tokenBranches1340[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1341 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1569,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc736(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc860(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1282(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches735[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1340 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc736, x64Parser::tokenBranches736 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc860, x64Parser::tokenBranches860 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1282, x64Parser::tokenBranches1282 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc993(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 101;
}
x64Token x64Parser::tokenBranches992[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc993,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc992(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches991[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc992, x64Parser::tokenBranches992 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc984(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 100;
}
x64Token x64Parser::tokenBranches983[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc984,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches991 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc983(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches982[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc983, x64Parser::tokenBranches983 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc496(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 55;
}
x64Token x64Parser::tokenBranches495[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc496,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches735 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches982 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc637(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 56;
}
x64Token x64Parser::tokenBranches636[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc637,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc761(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 77;
}
x64Token x64Parser::tokenBranches760[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc761,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc885(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 91;
}
x64Token x64Parser::tokenBranches884[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc885,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1386(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 134;
}
x64Token x64Parser::tokenBranches1385[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1386,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1918(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 159;
}
x64Token x64Parser::tokenBranches1917[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1918,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2216(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 183;
}
x64Token x64Parser::tokenBranches2215[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2216,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1385(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1917(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2215(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1384[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1385, x64Parser::tokenBranches1385 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1917, x64Parser::tokenBranches1917 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2215, x64Parser::tokenBranches2215 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1634(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 134;
}
x64Token x64Parser::tokenBranches1383[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1384 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1634,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1383(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1382[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1383, x64Parser::tokenBranches1383 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1395(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 135;
}
x64Token x64Parser::tokenBranches1394[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1395,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1927(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 160;
}
x64Token x64Parser::tokenBranches1926[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1927,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2225(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 184;
}
x64Token x64Parser::tokenBranches2224[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2225,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1394(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1926(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2224(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1393[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1394, x64Parser::tokenBranches1394 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1926, x64Parser::tokenBranches1926 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2224, x64Parser::tokenBranches2224 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1641(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 135;
}
x64Token x64Parser::tokenBranches1381[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1382 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1393 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1641,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc636(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc760(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc884(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1381(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches635[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc636, x64Parser::tokenBranches636 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc760, x64Parser::tokenBranches760 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc884, x64Parser::tokenBranches884 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1381, x64Parser::tokenBranches1381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1021(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 104;
}
x64Token x64Parser::tokenBranches1020[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1021,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1020(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1019[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1020, x64Parser::tokenBranches1020 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1012(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 103;
}
x64Token x64Parser::tokenBranches1011[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1012,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1019 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1011(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1010[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1011, x64Parser::tokenBranches1011 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc501(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 56;
}
x64Token x64Parser::tokenBranches500[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc501,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches635 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1010 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc685(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 62;
}
x64Token x64Parser::tokenBranches684[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc685,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc809(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 81;
}
x64Token x64Parser::tokenBranches808[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc809,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc926(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches925[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc926,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc684(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc808(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc925(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches683[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc684, x64Parser::tokenBranches684 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc808, x64Parser::tokenBranches808 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc925, x64Parser::tokenBranches925 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc557(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 62;
}
x64Token x64Parser::tokenBranches556[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc557,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches683 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc676(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 61;
}
x64Token x64Parser::tokenBranches675[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc676,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc800(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 80;
}
x64Token x64Parser::tokenBranches799[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc800,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc933(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches932[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc933,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1446(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 138;
}
x64Token x64Parser::tokenBranches1445[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1446,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1978(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 164;
}
x64Token x64Parser::tokenBranches1977[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1978,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 187;
}
x64Token x64Parser::tokenBranches2275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1445(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1977(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2275(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1444[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1445, x64Parser::tokenBranches1445 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1977, x64Parser::tokenBranches1977 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2275, x64Parser::tokenBranches2275 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1682(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 138;
}
x64Token x64Parser::tokenBranches1443[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1444 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1682,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1443(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1442[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1443, x64Parser::tokenBranches1443 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1455(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 139;
}
x64Token x64Parser::tokenBranches1454[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1455,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1987(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 165;
}
x64Token x64Parser::tokenBranches1986[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1987,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2285(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 188;
}
x64Token x64Parser::tokenBranches2284[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2285,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1454(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1986(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2284(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1453[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1454, x64Parser::tokenBranches1454 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1986, x64Parser::tokenBranches1986 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2284, x64Parser::tokenBranches2284 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1689(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 139;
}
x64Token x64Parser::tokenBranches1441[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1442 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1453 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1689,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc675(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc799(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc932(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1441(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches555[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches556 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc675, x64Parser::tokenBranches675 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc799, x64Parser::tokenBranches799 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc932, x64Parser::tokenBranches932 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1441, x64Parser::tokenBranches1441 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc550(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 61;
}
x64Token x64Parser::tokenBranches549[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc550,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches555 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc575(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 66;
}
x64Token x64Parser::tokenBranches574[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc575,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1137(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 116;
}
x64Token x64Parser::tokenBranches1136[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1137,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1157(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 118;
}
x64Token x64Parser::tokenBranches1156[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1157,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1156(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1155[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1156, x64Parser::tokenBranches1156 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1146(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 117;
}
x64Token x64Parser::tokenBranches1145[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1146,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1155 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1136(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1135[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1145 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1136, x64Parser::tokenBranches1136 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1128(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 115;
}
x64Token x64Parser::tokenBranches1127[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1128,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1135 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1127(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1126[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1127, x64Parser::tokenBranches1127 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1125[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1126 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2382(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 193;
}
x64Token x64Parser::tokenBranches2381[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2382,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2473(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 208;
}
x64Token x64Parser::tokenBranches2472[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2473,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2565(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 222;
}
x64Token x64Parser::tokenBranches2564[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2565,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2866(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 246;
}
x64Token x64Parser::tokenBranches2865[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2866,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3242(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 282;
}
x64Token x64Parser::tokenBranches3241[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3242,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3454(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 247;
}
x64Token x64Parser::tokenBranches3453[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3454,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2865(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3241(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3453(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2864[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2865, x64Parser::tokenBranches2865 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3241, x64Parser::tokenBranches3241 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3453, x64Parser::tokenBranches3453 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3052(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 246;
}
x64Token x64Parser::tokenBranches2863[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2864 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3052,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2863(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2862[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2863, x64Parser::tokenBranches2863 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2875(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 259;
}
x64Token x64Parser::tokenBranches2874[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2875,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3251(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 283;
}
x64Token x64Parser::tokenBranches3250[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3251,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3463(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 305;
}
x64Token x64Parser::tokenBranches3462[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3463,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2874(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3250(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3462(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2873[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2874, x64Parser::tokenBranches2874 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3250, x64Parser::tokenBranches3250 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3462, x64Parser::tokenBranches3462 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3059(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 259;
}
x64Token x64Parser::tokenBranches2861[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2862 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2873 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3059,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2381(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2472(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2564(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2861(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2380[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2381, x64Parser::tokenBranches2381 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2472, x64Parser::tokenBranches2472 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2564, x64Parser::tokenBranches2564 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2861, x64Parser::tokenBranches2861 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2302(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 193;
}
x64Token x64Parser::tokenBranches2301[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2302,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2380 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2442(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 201;
}
x64Token x64Parser::tokenBranches2441[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2442,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2534(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 217;
}
x64Token x64Parser::tokenBranches2533[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2534,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2626(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 231;
}
x64Token x64Parser::tokenBranches2625[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2626,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2441(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2533(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2625(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2440[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2441, x64Parser::tokenBranches2441 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2533, x64Parser::tokenBranches2533 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2625, x64Parser::tokenBranches2625 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2342(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 201;
}
x64Token x64Parser::tokenBranches2341[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2342,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2440 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2480(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 209;
}
x64Token x64Parser::tokenBranches2479[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2480,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2572(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 223;
}
x64Token x64Parser::tokenBranches2571[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2572,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2886(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 260;
}
x64Token x64Parser::tokenBranches2885[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2886,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3262(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 284;
}
x64Token x64Parser::tokenBranches3261[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3262,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3474(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 306;
}
x64Token x64Parser::tokenBranches3473[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3474,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2885(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3261(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3473(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2884[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2885, x64Parser::tokenBranches2885 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3261, x64Parser::tokenBranches3261 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3473, x64Parser::tokenBranches3473 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3068(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 260;
}
x64Token x64Parser::tokenBranches2883[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2884 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3068,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2883(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2882[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2883, x64Parser::tokenBranches2883 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2895(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 261;
}
x64Token x64Parser::tokenBranches2894[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2895,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3271(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 285;
}
x64Token x64Parser::tokenBranches3270[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3271,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3483(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 307;
}
x64Token x64Parser::tokenBranches3482[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3483,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2894(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3270(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3482(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2893[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2894, x64Parser::tokenBranches2894 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3270, x64Parser::tokenBranches3270 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3482, x64Parser::tokenBranches3482 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3075(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 261;
}
x64Token x64Parser::tokenBranches2881[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2882 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2893 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3075,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2479(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2571(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2881(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2340[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2341 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2479, x64Parser::tokenBranches2479 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2571, x64Parser::tokenBranches2571 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2881, x64Parser::tokenBranches2881 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2388(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 194;
}
x64Token x64Parser::tokenBranches2387[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2388,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2307(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 194;
}
void x64Parser::TokenFunc2387(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2306[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2307,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2340 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2387, x64Parser::tokenBranches2387 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2395(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 195;
}
x64Token x64Parser::tokenBranches2394[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2395,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2487(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 210;
}
x64Token x64Parser::tokenBranches2486[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2487,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2579(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 224;
}
x64Token x64Parser::tokenBranches2578[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2579,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2778(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 250;
}
x64Token x64Parser::tokenBranches2777[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2778,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3154(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 272;
}
x64Token x64Parser::tokenBranches3153[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3154,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3366(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 296;
}
x64Token x64Parser::tokenBranches3365[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3366,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2777(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3153(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3365(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2776[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2777, x64Parser::tokenBranches2777 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3153, x64Parser::tokenBranches3153 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3365, x64Parser::tokenBranches3365 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2984(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 250;
}
x64Token x64Parser::tokenBranches2775[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2776 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2984,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2846(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 257;
}
x64Token x64Parser::tokenBranches2845[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2846,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3222(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 280;
}
x64Token x64Parser::tokenBranches3221[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3222,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3434(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 303;
}
x64Token x64Parser::tokenBranches3433[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3434,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2845(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3221(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3433(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2844[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2845, x64Parser::tokenBranches2845 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3221, x64Parser::tokenBranches3221 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3433, x64Parser::tokenBranches3433 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3036(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 257;
}
x64Token x64Parser::tokenBranches2843[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2844 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3036,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2843(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2842[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2843, x64Parser::tokenBranches2843 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2855(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 258;
}
x64Token x64Parser::tokenBranches2854[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2855,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3231(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 281;
}
x64Token x64Parser::tokenBranches3230[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3231,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3443(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 304;
}
x64Token x64Parser::tokenBranches3442[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3443,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2854(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3230(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3442(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2853[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2854, x64Parser::tokenBranches2854 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3230, x64Parser::tokenBranches3230 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3442, x64Parser::tokenBranches3442 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3043(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 258;
}
x64Token x64Parser::tokenBranches2841[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2842 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2853 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3043,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2394(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2486(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2578(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2841(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2393[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2775 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2394, x64Parser::tokenBranches2394 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2486, x64Parser::tokenBranches2486 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2578, x64Parser::tokenBranches2578 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2841, x64Parser::tokenBranches2841 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2663(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 236;
}
x64Token x64Parser::tokenBranches2662[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2663,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2662(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2661[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2662, x64Parser::tokenBranches2662 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2654(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 235;
}
x64Token x64Parser::tokenBranches2653[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2654,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2661 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2653(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2652[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2653, x64Parser::tokenBranches2653 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2312(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 195;
}
x64Token x64Parser::tokenBranches2311[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2312,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2393 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2652 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2426(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 196;
}
x64Token x64Parser::tokenBranches2425[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2426,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2518(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 215;
}
x64Token x64Parser::tokenBranches2517[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2518,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2610(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 229;
}
x64Token x64Parser::tokenBranches2609[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2610,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2787(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 251;
}
x64Token x64Parser::tokenBranches2786[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2787,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3163(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 273;
}
x64Token x64Parser::tokenBranches3162[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3163,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3375(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 297;
}
x64Token x64Parser::tokenBranches3374[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3375,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2786(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3162(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3374(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2785[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2786, x64Parser::tokenBranches2786 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3162, x64Parser::tokenBranches3162 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3374, x64Parser::tokenBranches3374 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2991(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 251;
}
x64Token x64Parser::tokenBranches2784[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2785 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2991,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2938(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 266;
}
x64Token x64Parser::tokenBranches2937[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2938,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3314(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 290;
}
x64Token x64Parser::tokenBranches3313[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3314,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3526(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 312;
}
x64Token x64Parser::tokenBranches3525[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3526,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2937(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3313(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3525(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2936[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2937, x64Parser::tokenBranches2937 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3313, x64Parser::tokenBranches3313 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3525, x64Parser::tokenBranches3525 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3108(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 266;
}
x64Token x64Parser::tokenBranches2935[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2936 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3108,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2935(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2934[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2935, x64Parser::tokenBranches2935 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2947(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 267;
}
x64Token x64Parser::tokenBranches2946[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2947,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3323(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 291;
}
x64Token x64Parser::tokenBranches3322[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3323,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3535(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 313;
}
x64Token x64Parser::tokenBranches3534[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3535,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2946(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3322(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3534(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2945[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2946, x64Parser::tokenBranches2946 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3322, x64Parser::tokenBranches3322 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3534, x64Parser::tokenBranches3534 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3115(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 267;
}
x64Token x64Parser::tokenBranches2933[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2934 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2945 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3115,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2425(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2517(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2609(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2933(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2424[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2784 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2425, x64Parser::tokenBranches2425 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2517, x64Parser::tokenBranches2517 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2609, x64Parser::tokenBranches2609 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2933, x64Parser::tokenBranches2933 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2691(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 239;
}
x64Token x64Parser::tokenBranches2690[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2691,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2690(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2689[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2690, x64Parser::tokenBranches2690 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2682(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 238;
}
x64Token x64Parser::tokenBranches2681[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2682,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2689 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2681(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2680[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2681, x64Parser::tokenBranches2681 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2317(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 196;
}
x64Token x64Parser::tokenBranches2316[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2317,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2424 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2680 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2451(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 202;
}
x64Token x64Parser::tokenBranches2450[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2451,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2543(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 218;
}
x64Token x64Parser::tokenBranches2542[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2543,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2635(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 232;
}
x64Token x64Parser::tokenBranches2634[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2635,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2450(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2542(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2634(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2449[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2450, x64Parser::tokenBranches2450 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2542, x64Parser::tokenBranches2542 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2634, x64Parser::tokenBranches2634 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2349(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 202;
}
x64Token x64Parser::tokenBranches2348[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2349,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2449 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2433(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 200;
}
x64Token x64Parser::tokenBranches2432[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2433,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2525(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 216;
}
x64Token x64Parser::tokenBranches2524[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2525,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2617(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 230;
}
x64Token x64Parser::tokenBranches2616[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2617,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2958(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 268;
}
x64Token x64Parser::tokenBranches2957[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2958,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3334(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 292;
}
x64Token x64Parser::tokenBranches3333[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3334,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3546(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 314;
}
x64Token x64Parser::tokenBranches3545[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3546,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2957(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3333(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3545(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2956[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2957, x64Parser::tokenBranches2957 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3333, x64Parser::tokenBranches3333 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3545, x64Parser::tokenBranches3545 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3124(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 268;
}
x64Token x64Parser::tokenBranches2955[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2956 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3124,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2955(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2954[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2955, x64Parser::tokenBranches2955 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2967(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 269;
}
x64Token x64Parser::tokenBranches2966[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2967,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3343(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 293;
}
x64Token x64Parser::tokenBranches3342[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3343,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3555(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 315;
}
x64Token x64Parser::tokenBranches3554[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3555,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2966(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3342(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3554(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2965[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2966, x64Parser::tokenBranches2966 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3342, x64Parser::tokenBranches3342 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3554, x64Parser::tokenBranches3554 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3131(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 269;
}
x64Token x64Parser::tokenBranches2953[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2954 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2965 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3131,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2432(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2524(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2616(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2953(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2347[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2348 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2432, x64Parser::tokenBranches2432 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2524, x64Parser::tokenBranches2524 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2616, x64Parser::tokenBranches2616 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2953, x64Parser::tokenBranches2953 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2335(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 200;
}
x64Token x64Parser::tokenBranches2334[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2335,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2347 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2361(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 204;
}
x64Token x64Parser::tokenBranches2360[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc2361,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2360(x64Operand &operand, int tokenPos)
{
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2359[] = {
	{x64Token::NUMBER, 15, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc2360, x64Parser::tokenBranches2360 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2358[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches2359 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2735(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 245;
}
x64Token x64Parser::tokenBranches2734[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2735,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2755(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 247;
}
x64Token x64Parser::tokenBranches2754[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2755,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2754(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2753[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2754, x64Parser::tokenBranches2754 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2744(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 246;
}
x64Token x64Parser::tokenBranches2743[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2744,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2753 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2734(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2733[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2743 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2734, x64Parser::tokenBranches2734 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2726(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 244;
}
x64Token x64Parser::tokenBranches2725[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2726,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2733 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2725(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2724[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2725, x64Parser::tokenBranches2725 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2723[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2724 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc18(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc88(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc549(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc574(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1125(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc2334(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc2723(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches17[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches61 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches68 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches490 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches495 },
	{x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches500 },
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2301 },
	{x64Token::REGISTER, 43, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2306 },
	{x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2311 },
	{x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2316 },
	{x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc18, x64Parser::tokenBranches18 },
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc88, x64Parser::tokenBranches88 },
	{x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc549, x64Parser::tokenBranches549 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc574, x64Parser::tokenBranches574 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1125, x64Parser::tokenBranches1125 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2334, x64Parser::tokenBranches2334 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches2358 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2723, x64Parser::tokenBranches2723 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches16[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches17 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc184(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 19;
}
x64Token x64Parser::tokenBranches183[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc184,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc330(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 34;
}
x64Token x64Parser::tokenBranches329[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc330,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc183(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc329(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches182[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc183, x64Parser::tokenBranches183 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc329, x64Parser::tokenBranches329 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc24(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 4;
}
x64Token x64Parser::tokenBranches23[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc24,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches182 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc130(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches129[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc130,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 28;
}
x64Token x64Parser::tokenBranches275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc422(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 43;
}
x64Token x64Parser::tokenBranches421[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc422,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc23(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc129(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc275(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc421(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches22[] = {
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc23, x64Parser::tokenBranches23 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc129, x64Parser::tokenBranches129 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc275, x64Parser::tokenBranches275 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc421, x64Parser::tokenBranches421 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc92(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches21[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches22 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc92,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc191(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 20;
}
x64Token x64Parser::tokenBranches190[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc191,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc337(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 35;
}
x64Token x64Parser::tokenBranches336[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc337,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc190(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc336(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches189[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc190, x64Parser::tokenBranches190 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc336, x64Parser::tokenBranches336 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc29(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 5;
}
x64Token x64Parser::tokenBranches28[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc29,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches189 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc156(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches155[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc156,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc302(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 31;
}
x64Token x64Parser::tokenBranches301[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc302,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc448(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 46;
}
x64Token x64Parser::tokenBranches447[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc448,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc28(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc155(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc301(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc447(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches27[] = {
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc28, x64Parser::tokenBranches28 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc155, x64Parser::tokenBranches155 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc301, x64Parser::tokenBranches301 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc447, x64Parser::tokenBranches447 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc110(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches26[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches27 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc110,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc250(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 25;
}
x64Token x64Parser::tokenBranches249[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc250,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc396(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 40;
}
x64Token x64Parser::tokenBranches395[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc396,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc249(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc395(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches248[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc249, x64Parser::tokenBranches249 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc395, x64Parser::tokenBranches395 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc74(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 10;
}
x64Token x64Parser::tokenBranches73[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc74,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches248 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc580(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches579[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc580,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc690(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 68;
}
x64Token x64Parser::tokenBranches689[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc690,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc814(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 82;
}
x64Token x64Parser::tokenBranches813[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc814,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1189(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1188[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1189,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1721(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 143;
}
x64Token x64Parser::tokenBranches1720[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1721,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2019(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches2018[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2019,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1188(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1720(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2018(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1187[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1188, x64Parser::tokenBranches1188 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1720, x64Parser::tokenBranches1720 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2018, x64Parser::tokenBranches2018 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1479(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1186[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1187 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1479,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1186(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1185[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1186, x64Parser::tokenBranches1186 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1196(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1195[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1196,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1728(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 144;
}
x64Token x64Parser::tokenBranches1727[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1728,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2026(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 169;
}
x64Token x64Parser::tokenBranches2025[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2026,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1195(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1727(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2025(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1194[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1195, x64Parser::tokenBranches1195 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1727, x64Parser::tokenBranches1727 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2025, x64Parser::tokenBranches2025 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1484(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1184[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1185 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1194 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1484,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc579(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc689(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc813(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1184(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches578[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc579, x64Parser::tokenBranches579 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc689, x64Parser::tokenBranches689 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc813, x64Parser::tokenBranches813 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1184, x64Parser::tokenBranches1184 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc472(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches471[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc472,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches578 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc585(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches584[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc585,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc695(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 69;
}
x64Token x64Parser::tokenBranches694[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc695,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc819(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 83;
}
x64Token x64Parser::tokenBranches818[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc819,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1164(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1163[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1164,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1696(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 140;
}
x64Token x64Parser::tokenBranches1695[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1696,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1994(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 166;
}
x64Token x64Parser::tokenBranches1993[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1994,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1163(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1695(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1993(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1162[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1163, x64Parser::tokenBranches1163 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1695, x64Parser::tokenBranches1695 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1993, x64Parser::tokenBranches1993 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1460(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1161[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1162 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1460,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1173(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1172[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1173,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1705(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 141;
}
x64Token x64Parser::tokenBranches1704[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1705,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2003(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 167;
}
x64Token x64Parser::tokenBranches2002[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2003,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1172(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1704(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2002(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1171[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1172, x64Parser::tokenBranches1172 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1704, x64Parser::tokenBranches1704 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2002, x64Parser::tokenBranches2002 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1467(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1170[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1171 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1467,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1170(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1169[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1170, x64Parser::tokenBranches1170 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1180(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1179[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1180,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1712(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 142;
}
x64Token x64Parser::tokenBranches1711[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1712,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2010(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 168;
}
x64Token x64Parser::tokenBranches2009[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2010,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1179(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1711(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2009(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1178[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1179, x64Parser::tokenBranches1179 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1711, x64Parser::tokenBranches1711 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2009, x64Parser::tokenBranches2009 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1472(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1168[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1169 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1178 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1472,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc584(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc694(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc818(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1168(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches583[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1161 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc584, x64Parser::tokenBranches584 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc694, x64Parser::tokenBranches694 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc818, x64Parser::tokenBranches818 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1168, x64Parser::tokenBranches1168 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc945(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches944[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc945,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc944(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches943[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc944, x64Parser::tokenBranches944 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc938(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches937[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc938,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches943 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc937(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches936[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc937, x64Parser::tokenBranches937 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc475(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches474[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc475,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches583 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches936 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc618(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches617[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc618,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc742(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 74;
}
x64Token x64Parser::tokenBranches741[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc742,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc866(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 88;
}
x64Token x64Parser::tokenBranches865[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc866,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1352(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1351[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1352,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1884(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 155;
}
x64Token x64Parser::tokenBranches1883[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1884,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2182(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 179;
}
x64Token x64Parser::tokenBranches2181[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2182,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1351(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1883(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2181(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1350[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1351, x64Parser::tokenBranches1351 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1883, x64Parser::tokenBranches1883 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2181, x64Parser::tokenBranches2181 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1608(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1349[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1350 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1608,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1349(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1348[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1349, x64Parser::tokenBranches1349 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1359(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 131;
}
x64Token x64Parser::tokenBranches1358[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1359,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1891(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 156;
}
x64Token x64Parser::tokenBranches1890[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1891,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2189(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 180;
}
x64Token x64Parser::tokenBranches2188[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2189,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1358(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1890(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2188(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1357[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1358, x64Parser::tokenBranches1358 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1890, x64Parser::tokenBranches1890 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2188, x64Parser::tokenBranches2188 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1613(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 131;
}
x64Token x64Parser::tokenBranches1347[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1348 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1357 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1613,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc617(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc741(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc865(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1347(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches616[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc617, x64Parser::tokenBranches617 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc741, x64Parser::tokenBranches741 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc865, x64Parser::tokenBranches865 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1347, x64Parser::tokenBranches1347 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1005(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches1004[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1005,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1004(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1003[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1004, x64Parser::tokenBranches1004 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc998(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 102;
}
x64Token x64Parser::tokenBranches997[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc998,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1003 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc997(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches996[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc997, x64Parser::tokenBranches997 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc478(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches477[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc478,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches616 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches996 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc630(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches629[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc630,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc754(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 76;
}
x64Token x64Parser::tokenBranches753[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc754,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc878(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 90;
}
x64Token x64Parser::tokenBranches877[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc878,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc629(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc753(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc877(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches628[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc629, x64Parser::tokenBranches629 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc753, x64Parser::tokenBranches753 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc877, x64Parser::tokenBranches877 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc486(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches485[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc486,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches628 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc623(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches622[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc623,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc747(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 75;
}
x64Token x64Parser::tokenBranches746[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc747,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc871(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 89;
}
x64Token x64Parser::tokenBranches870[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc871,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1368(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1367[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1368,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1900(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 157;
}
x64Token x64Parser::tokenBranches1899[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1900,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2198(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 181;
}
x64Token x64Parser::tokenBranches2197[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2198,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1367(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1899(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2197(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1366[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1367, x64Parser::tokenBranches1367 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1899, x64Parser::tokenBranches1899 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2197, x64Parser::tokenBranches2197 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1620(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1365[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1366 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1620,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1365(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1364[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1365, x64Parser::tokenBranches1365 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1375(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1374[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1375,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1907(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 158;
}
x64Token x64Parser::tokenBranches1906[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1907,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2205(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 182;
}
x64Token x64Parser::tokenBranches2204[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2205,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1374(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1906(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2204(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1373[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1374, x64Parser::tokenBranches1374 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1906, x64Parser::tokenBranches1906 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2204, x64Parser::tokenBranches2204 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1625(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1363[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1364 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1373 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1625,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc622(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc746(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc870(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1363(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches484[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches485 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc622, x64Parser::tokenBranches622 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc746, x64Parser::tokenBranches746 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc870, x64Parser::tokenBranches870 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1363, x64Parser::tokenBranches1363 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc481(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches480[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc481,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches484 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc560(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 63;
}
x64Token x64Parser::tokenBranches559[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc560,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1033(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 106;
}
x64Token x64Parser::tokenBranches1032[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1033,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1049(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches1048[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1049,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1048(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1047[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1048, x64Parser::tokenBranches1048 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1040(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1039[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1040,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1047 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1032(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1031[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1039 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1032, x64Parser::tokenBranches1032 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1026(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 105;
}
x64Token x64Parser::tokenBranches1025[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1026,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1031 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1025(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1024[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1025, x64Parser::tokenBranches1025 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1023[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1024 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2366(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 189;
}
x64Token x64Parser::tokenBranches2365[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2366,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2456(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 205;
}
x64Token x64Parser::tokenBranches2455[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2456,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2548(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 219;
}
x64Token x64Parser::tokenBranches2547[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2548,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2812(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 242;
}
x64Token x64Parser::tokenBranches2811[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2812,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3188(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 276;
}
x64Token x64Parser::tokenBranches3187[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3188,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3400(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 243;
}
x64Token x64Parser::tokenBranches3399[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3400,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2811(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3187(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3399(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2810[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2811, x64Parser::tokenBranches2811 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3187, x64Parser::tokenBranches3187 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3399, x64Parser::tokenBranches3399 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3010(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 242;
}
x64Token x64Parser::tokenBranches2809[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2810 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3010,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2809(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2808[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2809, x64Parser::tokenBranches2809 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2819(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 254;
}
x64Token x64Parser::tokenBranches2818[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2819,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3195(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 277;
}
x64Token x64Parser::tokenBranches3194[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3195,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3407(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 300;
}
x64Token x64Parser::tokenBranches3406[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3407,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2818(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3194(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3406(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2817[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2818, x64Parser::tokenBranches2818 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3194, x64Parser::tokenBranches3194 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3406, x64Parser::tokenBranches3406 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3015(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 254;
}
x64Token x64Parser::tokenBranches2807[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2808 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2817 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3015,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2365(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2455(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2547(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2807(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2364[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2365, x64Parser::tokenBranches2365 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2455, x64Parser::tokenBranches2455 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2547, x64Parser::tokenBranches2547 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2807, x64Parser::tokenBranches2807 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2288(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 189;
}
x64Token x64Parser::tokenBranches2287[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2288,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2364 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2412(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 198;
}
x64Token x64Parser::tokenBranches2411[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2412,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2504(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 213;
}
x64Token x64Parser::tokenBranches2503[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2504,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2596(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 227;
}
x64Token x64Parser::tokenBranches2595[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2596,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2411(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2503(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2595(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2410[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2411, x64Parser::tokenBranches2411 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2503, x64Parser::tokenBranches2503 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2595, x64Parser::tokenBranches2595 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2325(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 198;
}
x64Token x64Parser::tokenBranches2324[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2325,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2410 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2461(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 206;
}
x64Token x64Parser::tokenBranches2460[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2461,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2553(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 220;
}
x64Token x64Parser::tokenBranches2552[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2553,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2828(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 255;
}
x64Token x64Parser::tokenBranches2827[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2828,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3204(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 278;
}
x64Token x64Parser::tokenBranches3203[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3204,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3416(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 301;
}
x64Token x64Parser::tokenBranches3415[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3416,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2827(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3203(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3415(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2826[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2827, x64Parser::tokenBranches2827 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3203, x64Parser::tokenBranches3203 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3415, x64Parser::tokenBranches3415 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3022(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 255;
}
x64Token x64Parser::tokenBranches2825[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2826 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3022,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2825(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2824[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2825, x64Parser::tokenBranches2825 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2835(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 256;
}
x64Token x64Parser::tokenBranches2834[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2835,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3211(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 279;
}
x64Token x64Parser::tokenBranches3210[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3211,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3423(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 302;
}
x64Token x64Parser::tokenBranches3422[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3423,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2834(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3210(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3422(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2833[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2834, x64Parser::tokenBranches2834 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3210, x64Parser::tokenBranches3210 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3422, x64Parser::tokenBranches3422 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3027(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 256;
}
x64Token x64Parser::tokenBranches2823[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2824 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2833 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3027,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2460(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2552(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2823(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2323[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2324 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2460, x64Parser::tokenBranches2460 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2552, x64Parser::tokenBranches2552 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2823, x64Parser::tokenBranches2823 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2370(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 190;
}
x64Token x64Parser::tokenBranches2369[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2370,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2291(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 190;
}
void x64Parser::TokenFunc2369(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2290[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2291,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2323 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2369, x64Parser::tokenBranches2369 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2375(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 191;
}
x64Token x64Parser::tokenBranches2374[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2375,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2466(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 207;
}
x64Token x64Parser::tokenBranches2465[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2466,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2558(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 221;
}
x64Token x64Parser::tokenBranches2557[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2558,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2762(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 248;
}
x64Token x64Parser::tokenBranches2761[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2762,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3138(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 270;
}
x64Token x64Parser::tokenBranches3137[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3138,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3350(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 294;
}
x64Token x64Parser::tokenBranches3349[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3350,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2761(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3137(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3349(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2760[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2761, x64Parser::tokenBranches2761 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3137, x64Parser::tokenBranches3137 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3349, x64Parser::tokenBranches3349 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2972(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 248;
}
x64Token x64Parser::tokenBranches2759[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2760 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2972,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2796(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 252;
}
x64Token x64Parser::tokenBranches2795[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2796,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3172(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 274;
}
x64Token x64Parser::tokenBranches3171[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3172,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3384(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 298;
}
x64Token x64Parser::tokenBranches3383[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3384,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2795(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3171(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3383(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2794[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2795, x64Parser::tokenBranches2795 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3171, x64Parser::tokenBranches3171 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3383, x64Parser::tokenBranches3383 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2998(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 252;
}
x64Token x64Parser::tokenBranches2793[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2794 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2998,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2793(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2792[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2793, x64Parser::tokenBranches2793 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2803(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 253;
}
x64Token x64Parser::tokenBranches2802[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2803,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3179(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 275;
}
x64Token x64Parser::tokenBranches3178[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3179,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3391(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 299;
}
x64Token x64Parser::tokenBranches3390[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3391,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2802(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3178(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3390(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2801[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2802, x64Parser::tokenBranches2802 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3178, x64Parser::tokenBranches3178 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3390, x64Parser::tokenBranches3390 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3003(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 253;
}
x64Token x64Parser::tokenBranches2791[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2792 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2801 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3003,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2374(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2465(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2557(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2791(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2373[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2759 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2374, x64Parser::tokenBranches2374 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2465, x64Parser::tokenBranches2465 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2557, x64Parser::tokenBranches2557 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2791, x64Parser::tokenBranches2791 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2647(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 234;
}
x64Token x64Parser::tokenBranches2646[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2647,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2646(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2645[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2646, x64Parser::tokenBranches2646 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2640(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 233;
}
x64Token x64Parser::tokenBranches2639[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2640,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2645 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2639(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2638[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2639, x64Parser::tokenBranches2639 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2294(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 191;
}
x64Token x64Parser::tokenBranches2293[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2294,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2373 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2638 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2400(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 192;
}
x64Token x64Parser::tokenBranches2399[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2400,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2492(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 211;
}
x64Token x64Parser::tokenBranches2491[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2492,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2584(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 225;
}
x64Token x64Parser::tokenBranches2583[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2584,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2769(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 249;
}
x64Token x64Parser::tokenBranches2768[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2769,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3145(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 271;
}
x64Token x64Parser::tokenBranches3144[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3145,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3357(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 295;
}
x64Token x64Parser::tokenBranches3356[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3357,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2768(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3144(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3356(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2767[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2768, x64Parser::tokenBranches2768 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3144, x64Parser::tokenBranches3144 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3356, x64Parser::tokenBranches3356 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2977(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 249;
}
x64Token x64Parser::tokenBranches2766[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2767 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2977,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2904(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 262;
}
x64Token x64Parser::tokenBranches2903[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2904,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3280(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 286;
}
x64Token x64Parser::tokenBranches3279[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3280,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3492(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 308;
}
x64Token x64Parser::tokenBranches3491[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3492,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2903(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3279(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3491(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2902[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2903, x64Parser::tokenBranches2903 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3279, x64Parser::tokenBranches3279 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3491, x64Parser::tokenBranches3491 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3082(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 262;
}
x64Token x64Parser::tokenBranches2901[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2902 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3082,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2901(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2900[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2901, x64Parser::tokenBranches2901 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2911(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 263;
}
x64Token x64Parser::tokenBranches2910[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2911,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3287(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 287;
}
x64Token x64Parser::tokenBranches3286[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3287,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3499(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 309;
}
x64Token x64Parser::tokenBranches3498[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3499,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2910(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3286(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3498(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2909[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2910, x64Parser::tokenBranches2910 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3286, x64Parser::tokenBranches3286 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3498, x64Parser::tokenBranches3498 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3087(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 263;
}
x64Token x64Parser::tokenBranches2899[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2900 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2909 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3087,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2399(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2491(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2583(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2899(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2398[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2766 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2399, x64Parser::tokenBranches2399 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2491, x64Parser::tokenBranches2491 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2583, x64Parser::tokenBranches2583 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2899, x64Parser::tokenBranches2899 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2675(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 234;
}
x64Token x64Parser::tokenBranches2674[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2675,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2674(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2673[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2674, x64Parser::tokenBranches2674 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2668(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 237;
}
x64Token x64Parser::tokenBranches2667[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2668,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2673 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2667(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2666[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2667, x64Parser::tokenBranches2667 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2297(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 192;
}
x64Token x64Parser::tokenBranches2296[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2297,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2398 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2666 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2419(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 199;
}
x64Token x64Parser::tokenBranches2418[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2419,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2511(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 214;
}
x64Token x64Parser::tokenBranches2510[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2511,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2603(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 228;
}
x64Token x64Parser::tokenBranches2602[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2603,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2418(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2510(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2602(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2417[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2418, x64Parser::tokenBranches2418 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2510, x64Parser::tokenBranches2510 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2602, x64Parser::tokenBranches2602 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2330(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 199;
}
x64Token x64Parser::tokenBranches2329[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2330,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2417 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2405(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 197;
}
x64Token x64Parser::tokenBranches2404[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2405,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2497(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 212;
}
x64Token x64Parser::tokenBranches2496[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2497,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2589(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 226;
}
x64Token x64Parser::tokenBranches2588[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2589,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2920(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 264;
}
x64Token x64Parser::tokenBranches2919[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2920,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3296(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 288;
}
x64Token x64Parser::tokenBranches3295[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3296,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3508(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 310;
}
x64Token x64Parser::tokenBranches3507[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3508,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2919(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3295(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3507(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2918[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2919, x64Parser::tokenBranches2919 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3295, x64Parser::tokenBranches3295 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3507, x64Parser::tokenBranches3507 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3094(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 264;
}
x64Token x64Parser::tokenBranches2917[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2918 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3094,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2917(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2916[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2917, x64Parser::tokenBranches2917 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2927(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 265;
}
x64Token x64Parser::tokenBranches2926[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2927,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3303(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 289;
}
x64Token x64Parser::tokenBranches3302[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3303,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3515(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 311;
}
x64Token x64Parser::tokenBranches3514[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3515,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2926(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3302(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3514(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2925[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2926, x64Parser::tokenBranches2926 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3302, x64Parser::tokenBranches3302 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3514, x64Parser::tokenBranches3514 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3099(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 265;
}
x64Token x64Parser::tokenBranches2915[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2916 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2925 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3099,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2404(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2496(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2588(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2915(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2328[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2329 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2404, x64Parser::tokenBranches2404 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2496, x64Parser::tokenBranches2496 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2588, x64Parser::tokenBranches2588 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2915, x64Parser::tokenBranches2915 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2320(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 197;
}
x64Token x64Parser::tokenBranches2319[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2320,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2328 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2354(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 203;
}
x64Token x64Parser::tokenBranches2353[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc2354,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2353(x64Operand &operand, int tokenPos)
{
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2352[] = {
	{x64Token::NUMBER, 15, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc2353, x64Parser::tokenBranches2353 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2351[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches2352 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2703(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 241;
}
x64Token x64Parser::tokenBranches2702[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2703,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2719(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 243;
}
x64Token x64Parser::tokenBranches2718[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2719,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2718(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2717[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2718, x64Parser::tokenBranches2718 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2710(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 242;
}
x64Token x64Parser::tokenBranches2709[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2710,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2717 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2702(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2701[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2709 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2702, x64Parser::tokenBranches2702 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2696(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 240;
}
x64Token x64Parser::tokenBranches2695[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2696,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2701 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2695(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2694[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2695, x64Parser::tokenBranches2695 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2693[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2694 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc16(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc73(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc480(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc559(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1023(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc2319(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc2693(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2[] = {
	{x64Token::REGISTER, 95, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches6 },
	{x64Token::REGISTER, 94, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches11 },
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches21 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches26 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches471 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches474 },
	{x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches477 },
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2287 },
	{x64Token::REGISTER, 43, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2290 },
	{x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2293 },
	{x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2296 },
	{x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc3, x64Parser::tokenBranches3 },
	{x64Token::REGISTERCLASS, 17, 0, 0, x64Parser::RegClassData1, &x64Parser::TokenFunc16, x64Parser::tokenBranches16 },
	{x64Token::REGISTERCLASS, 14, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc73, x64Parser::tokenBranches73 },
	{x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc480, x64Parser::tokenBranches480 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc559, x64Parser::tokenBranches559 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1023, x64Parser::tokenBranches1023 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2319, x64Parser::tokenBranches2319 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches2351 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2693, x64Parser::tokenBranches2693 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3556(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 316;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3557(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3558(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 318;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3559(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 318;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3560(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 318;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3561(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 319;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3562(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 320;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1[] = {
	{x64Token::TOKEN, 1, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches2 },
	{x64Token::REGISTERCLASS, 18, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3556,  },
	{x64Token::REGISTERCLASS, 1, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3557,  },
	{x64Token::REGISTERCLASS, 4, 1, 0, x64Parser::RegClassData7, &x64Parser::TokenFunc3558,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, x64Parser::RegClassData8, &x64Parser::TokenFunc3559,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, x64Parser::RegClassData9, &x64Parser::TokenFunc3560,  },
	{x64Token::REGISTERCLASS, 16, 1, 0, x64Parser::RegClassData10, &x64Parser::TokenFunc3561,  },
	{x64Token::REGISTERCLASS, 15, 1, 0, x64Parser::RegClassData11, &x64Parser::TokenFunc3562,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3564(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 321;
}
x64Token x64Parser::tokenBranches3563[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3564,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3566(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 322;
}
x64Token x64Parser::tokenBranches3565[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3566,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3571_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3571_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3571_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3571_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3571(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3571_10;
	operand.values[11] = tokenCoding3571_11;
	operand.values[12] = tokenCoding3571_12;
	operand.values[13] = tokenCoding3571_13;
}
x64Token x64Parser::tokenBranches3570[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3571,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3569[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3570 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3568[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3569 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3575_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3575_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3575_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3575_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3575(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3575_10;
	operand.values[11] = tokenCoding3575_11;
	operand.values[12] = tokenCoding3575_12;
	operand.values[13] = tokenCoding3575_13;
}
x64Token x64Parser::tokenBranches3574[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3575,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3573[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3574 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3572[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3573 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3579_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3579_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3579_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3579_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3579(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3579_10;
	operand.values[11] = tokenCoding3579_11;
	operand.values[12] = tokenCoding3579_12;
	operand.values[13] = tokenCoding3579_13;
}
x64Token x64Parser::tokenBranches3578[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3579,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3577[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3578 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3576[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3577 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3568(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3572(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3576(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3567[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3568, x64Parser::tokenBranches3568 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3572, x64Parser::tokenBranches3572 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3576, x64Parser::tokenBranches3576 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3584_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3584_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3584_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3584_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3584(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3584_10;
	operand.values[11] = tokenCoding3584_11;
	operand.values[12] = tokenCoding3584_12;
	operand.values[13] = tokenCoding3584_13;
}
x64Token x64Parser::tokenBranches3583[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3584,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3582[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3583 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3581[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3582 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3588_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3588_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3588_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3588_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3588(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3588_10;
	operand.values[11] = tokenCoding3588_11;
	operand.values[12] = tokenCoding3588_12;
	operand.values[13] = tokenCoding3588_13;
}
x64Token x64Parser::tokenBranches3587[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3588,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3586[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3587 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3585[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3586 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3592_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3592_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3592_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3592_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3592(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3592_10;
	operand.values[11] = tokenCoding3592_11;
	operand.values[12] = tokenCoding3592_12;
	operand.values[13] = tokenCoding3592_13;
}
x64Token x64Parser::tokenBranches3591[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3592,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3590[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3591 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3589[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3590 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3581(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3585(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3589(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3580[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3581, x64Parser::tokenBranches3581 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3585, x64Parser::tokenBranches3585 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3589, x64Parser::tokenBranches3589 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3597(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 323;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3596[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3597,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3595[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3596 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3594[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3595 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3601(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 324;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3600[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3601,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3599[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3600 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3598[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3599 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3605(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 325;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3604[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3605,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3603[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3604 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3602[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3603 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3609(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 326;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3608[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3609,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3607[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3608 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3606[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3607 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3613_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3613_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3613_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3613_13[] = {
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3613(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3613_10;
	operand.values[11] = tokenCoding3613_11;
	operand.values[12] = tokenCoding3613_12;
	operand.values[13] = tokenCoding3613_13;
}
x64Token x64Parser::tokenBranches3612[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3613,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3611[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3612 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3610[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3611 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3617_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3617_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3617_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3617_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3617(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3617_10;
	operand.values[11] = tokenCoding3617_11;
	operand.values[12] = tokenCoding3617_12;
	operand.values[13] = tokenCoding3617_13;
}
x64Token x64Parser::tokenBranches3616[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3617,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3615[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3616 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3614[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3615 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3621_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3621_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3621_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3621_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3621(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3621_10;
	operand.values[11] = tokenCoding3621_11;
	operand.values[12] = tokenCoding3621_12;
	operand.values[13] = tokenCoding3621_13;
}
x64Token x64Parser::tokenBranches3620[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3621,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3619[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3620 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3618[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3619 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3625_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3625_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3625_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3625_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3625(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3625_10;
	operand.values[11] = tokenCoding3625_11;
	operand.values[12] = tokenCoding3625_12;
	operand.values[13] = tokenCoding3625_13;
}
x64Token x64Parser::tokenBranches3624[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3625,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3623[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3624 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3622[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3623 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3629_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3629_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3629_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3629_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3629(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3629_10;
	operand.values[11] = tokenCoding3629_11;
	operand.values[12] = tokenCoding3629_12;
	operand.values[13] = tokenCoding3629_13;
}
x64Token x64Parser::tokenBranches3628[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3629,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3627[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3628 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3626[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3627 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3633_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3633_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3633_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3633_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3633(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3633_10;
	operand.values[11] = tokenCoding3633_11;
	operand.values[12] = tokenCoding3633_12;
	operand.values[13] = tokenCoding3633_13;
}
x64Token x64Parser::tokenBranches3632[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3633,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3631[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3632 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3630[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3631 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3637_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3637_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3637_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3637_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3637(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3637_10;
	operand.values[11] = tokenCoding3637_11;
	operand.values[12] = tokenCoding3637_12;
	operand.values[13] = tokenCoding3637_13;
}
x64Token x64Parser::tokenBranches3636[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3637,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3635[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3636 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3634[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3635 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3642_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3642(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3642_13;
}
x64Token x64Parser::tokenBranches3641[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3642,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3640[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3641 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3639[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3640 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3638[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3639 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3647_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3647(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3647_13;
}
x64Token x64Parser::tokenBranches3646[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3647,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3652_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3652(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3652_13;
}
x64Token x64Parser::tokenBranches3651[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3652,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3645[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3646 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3651 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3644[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3645 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3643[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3644 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3657_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3657(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3657_13;
}
x64Token x64Parser::tokenBranches3656[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3657,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3662_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3662(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3662_13;
}
x64Token x64Parser::tokenBranches3661[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3662,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3655[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3656 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3661 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3654[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3655 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3653[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3654 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3667_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3667(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3667_13;
}
x64Token x64Parser::tokenBranches3666[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3667,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3672_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3672(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3672_13;
}
x64Token x64Parser::tokenBranches3671[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3672,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3665[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3666 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3671 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3664[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3665 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3663[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3664 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3676_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3676(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3676_13;
}
x64Token x64Parser::tokenBranches3675[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3676,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3674[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3675 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3673[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3674 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3680_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3680(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3680_13;
}
x64Token x64Parser::tokenBranches3679[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3680,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3684_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3684(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3684_13;
}
x64Token x64Parser::tokenBranches3683[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3684,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3678[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3679 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3683 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3677[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3678 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3688_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3688(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3688_13;
}
x64Token x64Parser::tokenBranches3687[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3688,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3692_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3692(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3692_13;
}
x64Token x64Parser::tokenBranches3691[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3692,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3686[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3687 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3691 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3685[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3686 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3696_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3696(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3696_13;
}
x64Token x64Parser::tokenBranches3695[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3696,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3700_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3700(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 333;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3700_13;
}
x64Token x64Parser::tokenBranches3699[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3700,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3694[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3695 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3699 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3693[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3694 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3610(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3614(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3618(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3622(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3593[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches3594 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3598 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3602 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3606 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc3610, x64Parser::tokenBranches3610 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3614, x64Parser::tokenBranches3614 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3618, x64Parser::tokenBranches3618 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3622, x64Parser::tokenBranches3622 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3626 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3630 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3634 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3638 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3643 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3653 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3663 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3673 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3677 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches3685 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches3693 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3706_13[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3706(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 334;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3706_13;
}
x64Token x64Parser::tokenBranches3705[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3706,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3720_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3720_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3720_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3720_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3720(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3720_10;
	operand.values[11] = tokenCoding3720_11;
	operand.values[12] = tokenCoding3720_12;
	operand.values[13] = tokenCoding3720_13;
}
x64Token x64Parser::tokenBranches3704[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3705 },
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3720,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3703[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3704 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3702[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3703 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3711_13[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3711(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 335;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3711_13;
}
x64Token x64Parser::tokenBranches3710[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3711,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3724_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3724_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3724_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3724_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3724(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3724_10;
	operand.values[11] = tokenCoding3724_11;
	operand.values[12] = tokenCoding3724_12;
	operand.values[13] = tokenCoding3724_13;
}
x64Token x64Parser::tokenBranches3709[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3710 },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3724,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3708[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3709 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3716_13[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3716(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 336;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3716_13;
}
x64Token x64Parser::tokenBranches3715[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3716,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3714[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3715 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3713[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3714 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3707[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3708 },
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3713 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3728_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3728_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3728_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3728_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3728(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3728_10;
	operand.values[11] = tokenCoding3728_11;
	operand.values[12] = tokenCoding3728_12;
	operand.values[13] = tokenCoding3728_13;
}
x64Token x64Parser::tokenBranches3727[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc3728,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3726[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3727 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3725[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3726 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3701[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3702 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3707 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3725 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3732_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3732(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3732_13;
}
x64Token x64Parser::tokenBranches3731[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3732,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3734_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3734(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3734_13;
}
x64Token x64Parser::tokenBranches3733[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3734,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3736_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3736(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3736_13;
}
x64Token x64Parser::tokenBranches3735[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3736,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3738_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3738(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3738_13;
}
x64Token x64Parser::tokenBranches3737[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3738,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3730_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3730(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3730_13;
}
x64Token x64Parser::tokenBranches3729[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3730,  },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3731 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3733 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3735 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3737 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3745_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3745_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3745_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3745(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3745_10;
	operand.values[11] = tokenCoding3745_11;
	operand.values[13] = tokenCoding3745_13;
}
x64Token x64Parser::tokenBranches3744[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3745,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3747_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3747_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3747_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3747(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3747_10;
	operand.values[11] = tokenCoding3747_11;
	operand.values[13] = tokenCoding3747_13;
}
x64Token x64Parser::tokenBranches3746[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3747,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3749_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3749_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3749_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3749(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3749_10;
	operand.values[11] = tokenCoding3749_11;
	operand.values[13] = tokenCoding3749_13;
}
x64Token x64Parser::tokenBranches3748[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3749,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3751_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3751_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3751_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3751(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3751_10;
	operand.values[11] = tokenCoding3751_11;
	operand.values[13] = tokenCoding3751_13;
}
x64Token x64Parser::tokenBranches3750[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3751,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3740_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3740_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3740_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3740(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3740_10;
	operand.values[11] = tokenCoding3740_11;
	operand.values[13] = tokenCoding3740_13;
}
Coding x64Parser::tokenCoding3741_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3741_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3741_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3741(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3741_10;
	operand.values[11] = tokenCoding3741_11;
	operand.values[13] = tokenCoding3741_13;
}
Coding x64Parser::tokenCoding3742_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3742_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3742_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3742(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3742_10;
	operand.values[11] = tokenCoding3742_11;
	operand.values[13] = tokenCoding3742_13;
}
Coding x64Parser::tokenCoding3743_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3743_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3743_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3743(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3743_10;
	operand.values[11] = tokenCoding3743_11;
	operand.values[13] = tokenCoding3743_13;
}
x64Token x64Parser::tokenBranches3739[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3740,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3741,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3742,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3743,  },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3744 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3746 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3748 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3750 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3755(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3754[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3755,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3753[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3754 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3758(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 338;
}
x64Token x64Parser::tokenBranches3757[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc3758,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3756[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3757 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3761_13[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3761(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3761_13;
}
x64Token x64Parser::tokenBranches3760[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3761,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3763_13[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3763(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3763_13;
}
x64Token x64Parser::tokenBranches3762[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3763,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3756(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 339;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3752[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3753 },
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3756, x64Parser::tokenBranches3756 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3760 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3762 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3767(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 316;
}
x64Token x64Parser::tokenBranches3766[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc3767,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3765[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3766 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3765(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 316;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3769(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
}
x64Token x64Parser::tokenBranches3764[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3765, x64Parser::tokenBranches3765 },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3769,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3772_13[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3772(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3772_13;
}
x64Token x64Parser::tokenBranches3771[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3772,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3774_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3774(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3774_13;
}
x64Token x64Parser::tokenBranches3773[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3774,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3770[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3771 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3773 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3776[] = {
	{x64Token::ADDRESSCLASS, 0, 1, 0, NULL, NULL,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3775[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3776 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3780(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 341;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3779[] = {
	{x64Token::NUMBER, 9, 1, 0, NULL,&x64Parser::TokenFunc3780,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3782(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 342;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3784(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 343;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3781[] = {
	{x64Token::NUMBER, 12, 1, 0, NULL,&x64Parser::TokenFunc3782,  },
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc3784,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3785(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 342;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3786(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 343;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3778[] = {
	{x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3779 },
	{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3781 },
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc3785,  },
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc3786,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3791_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3791_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3791_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3791_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3791(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3791_10;
	operand.values[11] = tokenCoding3791_11;
	operand.values[12] = tokenCoding3791_12;
	operand.values[13] = tokenCoding3791_13;
}
x64Token x64Parser::tokenBranches3790[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3791,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3789[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3790 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3788[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3789 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3795_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3795_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3795_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3795_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3795(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3795_10;
	operand.values[11] = tokenCoding3795_11;
	operand.values[12] = tokenCoding3795_12;
	operand.values[13] = tokenCoding3795_13;
}
x64Token x64Parser::tokenBranches3794[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3795,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3793[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3794 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3792[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3793 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3799_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3799_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3799_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3799_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3799(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3799_10;
	operand.values[11] = tokenCoding3799_11;
	operand.values[12] = tokenCoding3799_12;
	operand.values[13] = tokenCoding3799_13;
}
x64Token x64Parser::tokenBranches3798[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3799,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3797[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3798 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3796[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3797 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3788(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3792(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3796(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3787[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3788, x64Parser::tokenBranches3788 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3792, x64Parser::tokenBranches3792 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3796, x64Parser::tokenBranches3796 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3802_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3802_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3802(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3802_12;
	operand.values[13] = tokenCoding3802_13;
}
x64Token x64Parser::tokenBranches3801[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3802,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3800[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3801 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3816_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3816_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3816_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3816_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3816(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3816_10;
	operand.values[11] = tokenCoding3816_11;
	operand.values[12] = tokenCoding3816_12;
	operand.values[13] = tokenCoding3816_13;
}
x64Token x64Parser::tokenBranches3815[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3816,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3806_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3806_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3806_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3806_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3806(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3806_10;
	operand.values[11] = tokenCoding3806_11;
	operand.values[12] = tokenCoding3806_12;
	operand.values[13] = tokenCoding3806_13;
}
x64Token x64Parser::tokenBranches3805[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3806,  },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3815 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3804[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3805 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3820_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3820_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3820_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3820_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3820(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3820_10;
	operand.values[11] = tokenCoding3820_11;
	operand.values[12] = tokenCoding3820_12;
	operand.values[13] = tokenCoding3820_13;
}
x64Token x64Parser::tokenBranches3819[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3820,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3824_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3824_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3824_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3824_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3824(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3824_10;
	operand.values[11] = tokenCoding3824_11;
	operand.values[12] = tokenCoding3824_12;
	operand.values[13] = tokenCoding3824_13;
}
x64Token x64Parser::tokenBranches3823[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3824,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3809_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3809_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3809_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3809_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3809(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3809_10;
	operand.values[11] = tokenCoding3809_11;
	operand.values[12] = tokenCoding3809_12;
	operand.values[13] = tokenCoding3809_13;
}
Coding x64Parser::tokenCoding3812_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3812_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3812_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3812_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3812(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3812_10;
	operand.values[11] = tokenCoding3812_11;
	operand.values[12] = tokenCoding3812_12;
	operand.values[13] = tokenCoding3812_13;
}
x64Token x64Parser::tokenBranches3808[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3809,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3812,  },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3819 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3823 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3807[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3808 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3837_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3837_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3837_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3837_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3837(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3837_10;
	operand.values[11] = tokenCoding3837_11;
	operand.values[12] = tokenCoding3837_12;
	operand.values[13] = tokenCoding3837_13;
}
x64Token x64Parser::tokenBranches3836[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3837,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3841_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3841_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3841_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3841_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3841(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3841_10;
	operand.values[11] = tokenCoding3841_11;
	operand.values[12] = tokenCoding3841_12;
	operand.values[13] = tokenCoding3841_13;
}
x64Token x64Parser::tokenBranches3840[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3841,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3845_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3845_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3845_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3845_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3845(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3845_10;
	operand.values[11] = tokenCoding3845_11;
	operand.values[12] = tokenCoding3845_12;
	operand.values[13] = tokenCoding3845_13;
}
x64Token x64Parser::tokenBranches3844[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3845,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3827_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3827_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3827_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3827_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3827(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3827_10;
	operand.values[11] = tokenCoding3827_11;
	operand.values[12] = tokenCoding3827_12;
	operand.values[13] = tokenCoding3827_13;
}
Coding x64Parser::tokenCoding3830_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3830_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3830_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3830_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3830(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3830_10;
	operand.values[11] = tokenCoding3830_11;
	operand.values[12] = tokenCoding3830_12;
	operand.values[13] = tokenCoding3830_13;
}
Coding x64Parser::tokenCoding3833_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3833_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3833_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3833_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3833(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3833_10;
	operand.values[11] = tokenCoding3833_11;
	operand.values[12] = tokenCoding3833_12;
	operand.values[13] = tokenCoding3833_13;
}
x64Token x64Parser::tokenBranches3826[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3827,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3830,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3833,  },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3836 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3840 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3844 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3825[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3826 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3804(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3807(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3825(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3803[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3804, x64Parser::tokenBranches3804 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3807, x64Parser::tokenBranches3807 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3825, x64Parser::tokenBranches3825 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3849_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3849(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3849_13;
}
Coding x64Parser::tokenCoding3852_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3852(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3852_13;
}
Coding x64Parser::tokenCoding3855_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3855(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3855_13;
}
x64Token x64Parser::tokenBranches3848[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3849,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3852,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3855,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3847[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3848 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3860_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3860(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3860_13;
}
Coding x64Parser::tokenCoding3865_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3865(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3865_13;
}
x64Token x64Parser::tokenBranches3859[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3860,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3865,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3869_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3869(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3869_13;
}
x64Token x64Parser::tokenBranches3858[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3859 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3869,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3857[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3858 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3856[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3857 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3872_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3872(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3872_13;
}
Coding x64Parser::tokenCoding3875_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3875(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3875_13;
}
Coding x64Parser::tokenCoding3878_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3878(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3878_13;
}
x64Token x64Parser::tokenBranches3871[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3872,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3875,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3878,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3870[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3871 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3883_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3883(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3883_13;
}
Coding x64Parser::tokenCoding3888_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3888(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3888_13;
}
x64Token x64Parser::tokenBranches3882[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3883,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3888,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3892_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3892(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3892_13;
}
x64Token x64Parser::tokenBranches3881[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3882 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3892,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3880[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3881 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3879[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3880 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3899_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3899(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3899_13;
}
x64Token x64Parser::tokenBranches3898[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3899,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3895_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3895(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3895_13;
}
Coding x64Parser::tokenCoding3902_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3902(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3902_13;
}
x64Token x64Parser::tokenBranches3894[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3895,  },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3898 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3902,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3893[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3894 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3907_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3907(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3907_13;
}
Coding x64Parser::tokenCoding3912_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3912(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3912_13;
}
x64Token x64Parser::tokenBranches3906[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3907,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3912,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3916_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3916(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3916_13;
}
x64Token x64Parser::tokenBranches3905[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3906 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3916,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3904[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3905 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3903[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3904 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3923_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3923(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3923_13;
}
x64Token x64Parser::tokenBranches3922[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3923,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3919_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3919(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3919_13;
}
Coding x64Parser::tokenCoding3926_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3926(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3926_13;
}
x64Token x64Parser::tokenBranches3918[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3919,  },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3922 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3926,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3917[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3918 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3931_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3931(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3931_13;
}
Coding x64Parser::tokenCoding3936_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3936(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[13] = tokenCoding3936_13;
}
x64Token x64Parser::tokenBranches3930[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3931,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3936,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3940_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3940(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding3940_13;
}
x64Token x64Parser::tokenBranches3929[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3930 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3940,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3928[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3929 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3927[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3928 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3846[] = {
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3847 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3856 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3870 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3879 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches3893 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3903 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches3917 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3927 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3947_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3947_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3947_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3947_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3947(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3947_10;
	operand.values[11] = tokenCoding3947_11;
	operand.values[12] = tokenCoding3947_12;
	operand.values[13] = tokenCoding3947_13;
}
Coding x64Parser::tokenCoding3953_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3953_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3953_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3953_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3953(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3953_10;
	operand.values[11] = tokenCoding3953_11;
	operand.values[12] = tokenCoding3953_12;
	operand.values[13] = tokenCoding3953_13;
}
x64Token x64Parser::tokenBranches3946[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3947,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3953,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3945[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3946 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3945(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3944[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3945, x64Parser::tokenBranches3945 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3943[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3944 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3942[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3943 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3959_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3959_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3959_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3959_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3959(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3959_10;
	operand.values[11] = tokenCoding3959_11;
	operand.values[12] = tokenCoding3959_12;
	operand.values[13] = tokenCoding3959_13;
}
Coding x64Parser::tokenCoding3965_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3965_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3965_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3965_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3965(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3965_10;
	operand.values[11] = tokenCoding3965_11;
	operand.values[12] = tokenCoding3965_12;
	operand.values[13] = tokenCoding3965_13;
}
x64Token x64Parser::tokenBranches3958[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3959,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3965,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3957[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3958 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3957(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3956[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3957, x64Parser::tokenBranches3957 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3955[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3956 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3954[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3955 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3971_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3971_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3971_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3971_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3971(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3971_10;
	operand.values[11] = tokenCoding3971_11;
	operand.values[12] = tokenCoding3971_12;
	operand.values[13] = tokenCoding3971_13;
}
Coding x64Parser::tokenCoding3977_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3977_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3977_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3977_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3977(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3977_10;
	operand.values[11] = tokenCoding3977_11;
	operand.values[12] = tokenCoding3977_12;
	operand.values[13] = tokenCoding3977_13;
}
x64Token x64Parser::tokenBranches3970[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3971,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3977,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3969[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3970 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3969(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3968[] = {
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3969, x64Parser::tokenBranches3969 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3967[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3968 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3966[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3967 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3941[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3942 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3954 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3966 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3978[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL, NULL,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3983_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3983_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3983_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3983(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3983_10;
	operand.values[11] = tokenCoding3983_11;
	operand.values[12] = tokenCoding3983_12;
}
x64Token x64Parser::tokenBranches3982[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc3983,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3981[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3982 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3981(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3980[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc3981, x64Parser::tokenBranches3981 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3987_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3987_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3987_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3987_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3987(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3987_10;
	operand.values[11] = tokenCoding3987_11;
	operand.values[12] = tokenCoding3987_12;
	operand.values[13] = tokenCoding3987_13;
}
x64Token x64Parser::tokenBranches3986[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc3987,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3985[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3986 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3990_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3990_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3990_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3990_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3990(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3990_10;
	operand.values[11] = tokenCoding3990_11;
	operand.values[12] = tokenCoding3990_12;
	operand.values[13] = tokenCoding3990_13;
}
x64Token x64Parser::tokenBranches3989[] = {
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3990,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3988[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3989 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3985(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3984[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc3985, x64Parser::tokenBranches3985 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3988 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3994_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3994_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3994_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3994_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3994(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3994_10;
	operand.values[11] = tokenCoding3994_11;
	operand.values[12] = tokenCoding3994_12;
	operand.values[13] = tokenCoding3994_13;
}
x64Token x64Parser::tokenBranches3993[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc3994,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3992[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3993 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3997_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3997_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3997_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3997_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3997(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3997_10;
	operand.values[11] = tokenCoding3997_11;
	operand.values[12] = tokenCoding3997_12;
	operand.values[13] = tokenCoding3997_13;
}
x64Token x64Parser::tokenBranches3996[] = {
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3997,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3995[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3996 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3992(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3991[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc3992, x64Parser::tokenBranches3992 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3995 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4001_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4001_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4001_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4001_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4001(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4001_10;
	operand.values[11] = tokenCoding4001_11;
	operand.values[12] = tokenCoding4001_12;
	operand.values[13] = tokenCoding4001_13;
}
x64Token x64Parser::tokenBranches4000[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4001,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3999[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4000 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4004_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4004_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4004_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4004_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4004(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4004_10;
	operand.values[11] = tokenCoding4004_11;
	operand.values[12] = tokenCoding4004_12;
	operand.values[13] = tokenCoding4004_13;
}
x64Token x64Parser::tokenBranches4003[] = {
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc4004,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4002[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4003 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3999(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3998[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc3999, x64Parser::tokenBranches3999 },
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4002 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4008_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4008_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4008_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4008(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4008_10;
	operand.values[11] = tokenCoding4008_11;
	operand.values[12] = tokenCoding4008_12;
}
x64Token x64Parser::tokenBranches4007[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4008,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4006[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4007 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4006(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4005[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, NULL,&x64Parser::TokenFunc4006, x64Parser::tokenBranches4006 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4012_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4012_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4012_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4012(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4012_10;
	operand.values[11] = tokenCoding4012_11;
	operand.values[12] = tokenCoding4012_12;
}
x64Token x64Parser::tokenBranches4011[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4012,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4010[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4011 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4010(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4009[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc4010, x64Parser::tokenBranches4010 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4016_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4016_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4016_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4016(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4016_10;
	operand.values[11] = tokenCoding4016_11;
	operand.values[12] = tokenCoding4016_12;
}
x64Token x64Parser::tokenBranches4015[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4016,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4014[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4015 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4019_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4019_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4019_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4019(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4019_10;
	operand.values[11] = tokenCoding4019_11;
	operand.values[12] = tokenCoding4019_12;
}
x64Token x64Parser::tokenBranches4018[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4019,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4017[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4018 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4014(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc4017(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4013[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc4014, x64Parser::tokenBranches4014 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc4017, x64Parser::tokenBranches4017 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4024_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4024_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4024_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4024(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4024_10;
	operand.values[11] = tokenCoding4024_11;
	operand.values[12] = tokenCoding4024_12;
}
x64Token x64Parser::tokenBranches4023[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4024,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4028_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4028_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4028_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4028(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4028_10;
	operand.values[11] = tokenCoding4028_11;
	operand.values[12] = tokenCoding4028_12;
}
x64Token x64Parser::tokenBranches4027[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4028,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4022[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4023 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4027 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4021[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4022 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4021(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4020[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc4021, x64Parser::tokenBranches4021 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4032_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4032_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4032_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4032_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4032(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4032_10;
	operand.values[11] = tokenCoding4032_11;
	operand.values[19] = tokenCoding4032_19;
	operand.values[12] = tokenCoding4032_12;
}
x64Token x64Parser::tokenBranches4031[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4032,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4030[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4031 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4035_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4035_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4035_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4035_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4035(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4035_10;
	operand.values[11] = tokenCoding4035_11;
	operand.values[19] = tokenCoding4035_19;
	operand.values[12] = tokenCoding4035_12;
}
x64Token x64Parser::tokenBranches4034[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4035,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4033[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4034 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4030(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc4033(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4029[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, NULL,&x64Parser::TokenFunc4030, x64Parser::tokenBranches4030 },
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc4033, x64Parser::tokenBranches4033 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4041_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4041_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4041_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4041(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4041_10;
	operand.values[11] = tokenCoding4041_11;
	operand.values[12] = tokenCoding4041_12;
}
x64Token x64Parser::tokenBranches4040[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4041,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4039[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4040 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4038[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4039 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4037[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4038 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4037(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4036[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc4037, x64Parser::tokenBranches4037 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4045_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4045_12[] = {
	{ (Coding::Type)(Coding::indirect), 33, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4045_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4045(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[19] = tokenCoding4045_19;
	operand.values[12] = tokenCoding4045_12;
	operand.values[13] = tokenCoding4045_13;
}
Coding x64Parser::tokenCoding4051_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4051_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4051_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4051_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4051_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4051(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4051_10;
	operand.values[11] = tokenCoding4051_11;
	operand.values[19] = tokenCoding4051_19;
	operand.values[12] = tokenCoding4051_12;
	operand.values[13] = tokenCoding4051_13;
}
x64Token x64Parser::tokenBranches4044[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4045,  },
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4051,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4043[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4044 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4048_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4048_12[] = {
	{ (Coding::Type)(Coding::indirect), 33, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4048_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4048(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[19] = tokenCoding4048_19;
	operand.values[12] = tokenCoding4048_12;
	operand.values[13] = tokenCoding4048_13;
}
Coding x64Parser::tokenCoding4054_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4054_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4054_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4054_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4054_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 31, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4054(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4054_10;
	operand.values[11] = tokenCoding4054_11;
	operand.values[19] = tokenCoding4054_19;
	operand.values[12] = tokenCoding4054_12;
	operand.values[13] = tokenCoding4054_13;
}
x64Token x64Parser::tokenBranches4047[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4048,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4054,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4046[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4047 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4043(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc4046(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4042[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, NULL,&x64Parser::TokenFunc4043, x64Parser::tokenBranches4043 },
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc4046, x64Parser::tokenBranches4046 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4060_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4060_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4060_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4060(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4060_10;
	operand.values[11] = tokenCoding4060_11;
	operand.values[12] = tokenCoding4060_12;
}
x64Token x64Parser::tokenBranches4059[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4060,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4058[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4059 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4057[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4058 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4056[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4057 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4056(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4055[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc4056, x64Parser::tokenBranches4056 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4066_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4066_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4066_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4066(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4066_10;
	operand.values[11] = tokenCoding4066_11;
	operand.values[12] = tokenCoding4066_12;
}
x64Token x64Parser::tokenBranches4065[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4066,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4064[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4065 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4063[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4064 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4062[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4063 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4062(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4061[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, NULL,&x64Parser::TokenFunc4062, x64Parser::tokenBranches4062 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4077_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4077_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4077_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4077_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4077(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4077_10;
	operand.values[11] = tokenCoding4077_11;
	operand.values[12] = tokenCoding4077_12;
	operand.values[13] = tokenCoding4077_13;
}
x64Token x64Parser::tokenBranches4076[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4077,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4075[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4076 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4074[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4075 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4082_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4082_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4082_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4082(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 345;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4082_10;
	operand.values[11] = tokenCoding4082_11;
	operand.values[12] = tokenCoding4082_12;
}
Coding x64Parser::tokenCoding4083_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4083_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4083_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4083(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4083_10;
	operand.values[11] = tokenCoding4083_11;
	operand.values[12] = tokenCoding4083_12;
}
x64Token x64Parser::tokenBranches4081[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4082,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4083,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4092(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4091[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4092,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4096(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 348;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4095[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4096,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4090[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4091 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4095 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4089[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4090 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4103_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4103_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4103_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4103_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4103(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4103_10;
	operand.values[11] = tokenCoding4103_11;
	operand.values[12] = tokenCoding4103_12;
	operand.values[13] = tokenCoding4103_13;
}
x64Token x64Parser::tokenBranches4102[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc4103,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4105_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4105_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4105_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4105_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4105(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4105_10;
	operand.values[11] = tokenCoding4105_11;
	operand.values[12] = tokenCoding4105_12;
	operand.values[13] = tokenCoding4105_13;
}
x64Token x64Parser::tokenBranches4104[] = {
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4105,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4107_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4107_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4107_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4107_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4107(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4107_10;
	operand.values[11] = tokenCoding4107_11;
	operand.values[12] = tokenCoding4107_12;
	operand.values[13] = tokenCoding4107_13;
}
x64Token x64Parser::tokenBranches4106[] = {
	{x64Token::ADDRESSCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc4107,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4109(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 351;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4111(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 352;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4113_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4113_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4113(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4113_12;
	operand.values[13] = tokenCoding4113_13;
}
Coding x64Parser::tokenCoding4115_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4115_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4115(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4115_12;
	operand.values[13] = tokenCoding4115_13;
}
x64Token x64Parser::tokenBranches4108[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4109,  },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4111,  },
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc4113,  },
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4115,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4089(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::number;
	operand.values[1]->val = operands.size();
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4097(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 349;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4098(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 350;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4099_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4099_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4099_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4099_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4099(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4099_10;
	operand.values[11] = tokenCoding4099_11;
	operand.values[12] = tokenCoding4099_12;
	operand.values[13] = tokenCoding4099_13;
}
Coding x64Parser::tokenCoding4100_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4100_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4100_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4100_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4100(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4100_10;
	operand.values[11] = tokenCoding4100_11;
	operand.values[12] = tokenCoding4100_12;
	operand.values[13] = tokenCoding4100_13;
}
Coding x64Parser::tokenCoding4101_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4101_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4101_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4101_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4101(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4101_10;
	operand.values[11] = tokenCoding4101_11;
	operand.values[12] = tokenCoding4101_12;
	operand.values[13] = tokenCoding4101_13;
}
x64Token x64Parser::tokenBranches4088[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc4089, x64Parser::tokenBranches4089 },
	{x64Token::NUMBER, 13, 1, 0, NULL,&x64Parser::TokenFunc4097,  },
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc4098,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc4099,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4100,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4101,  },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4102 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4104 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4106 },
	{x64Token::TOKEN, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches4108 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4119(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 353;
}
x64Token x64Parser::tokenBranches4118[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4119,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4169(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 354;
}
x64Token x64Parser::tokenBranches4168[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4169,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4167[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4168 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4166[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4167 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4165[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4166 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4164[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4165 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4163[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4164 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4162[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4163 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4161[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4162 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4195(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 356;
}
x64Token x64Parser::tokenBranches4194[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4195,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4193[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4194 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4192[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4193 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4191[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4192 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4190[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4191 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4189[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4190 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4188[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4189 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4187[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4188 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4160[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4161 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4187 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4159[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4160 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4182(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 355;
}
x64Token x64Parser::tokenBranches4181[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4182,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4180[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4181 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4179[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4180 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4178[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4179 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4177[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4178 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4176[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4177 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4175[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4176 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4174[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4175 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4208(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 357;
}
x64Token x64Parser::tokenBranches4207[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4208,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4206[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4207 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4205[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4206 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4204[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4205 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4203[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4204 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4202[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4203 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4201[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4202 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4200[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4201 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4230(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 359;
}
x64Token x64Parser::tokenBranches4229[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4230,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4228[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4229 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4227[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4228 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4226[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4227 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4225[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4226 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4224[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4225 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4223[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4224 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4222[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4223 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4173[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4174 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4200 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4222 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4172[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4173 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4217(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 358;
}
x64Token x64Parser::tokenBranches4216[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4217,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4215[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4216 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4214[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4215 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4213[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4214 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4212[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4213 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4211[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4212 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4172(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4158[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4159 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4172, x64Parser::tokenBranches4172 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4211 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4157[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4158 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4243(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 360;
}
x64Token x64Parser::tokenBranches4242[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4243,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4241[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4242 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4240[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4241 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4239[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4240 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4238[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4239 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4237[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4238 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4236[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4237 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4235[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4236 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4269(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 362;
}
x64Token x64Parser::tokenBranches4268[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4269,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4267[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4268 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4266[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4267 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4265[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4266 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4264[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4265 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4263[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4264 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4262[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4263 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4261[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4262 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4234[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4235 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4261 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4233[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4234 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4256(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 361;
}
x64Token x64Parser::tokenBranches4255[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4256,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4254[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4255 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4253[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4254 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4252[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4253 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4251[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4252 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4250[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4251 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4249[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4250 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4248[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4249 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4282(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 363;
}
x64Token x64Parser::tokenBranches4281[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4282,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4280[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4281 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4279[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4280 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4278[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4279 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4277[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4278 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4276[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4277 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4275[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4276 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4274[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4275 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4302(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 365;
}
x64Token x64Parser::tokenBranches4301[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4302,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4300[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4301 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4299[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4300 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4298[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4299 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4297[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4298 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4296[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4297 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4247[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4248 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4274 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4296 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4246[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4247 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4291(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 364;
}
x64Token x64Parser::tokenBranches4290[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4291,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4289[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4290 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4288[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4289 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4287[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4288 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4286[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4287 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4285[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4286 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4246(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4232[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4233 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4246, x64Parser::tokenBranches4246 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4285 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4231[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4232 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4315(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 366;
}
x64Token x64Parser::tokenBranches4314[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4315,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4313[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4314 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4312[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4313 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4311[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4312 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4310[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4311 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4309[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4310 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4308[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4309 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4307[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4308 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4341(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 368;
}
x64Token x64Parser::tokenBranches4340[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4341,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4339[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4340 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4338[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4339 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4337[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4338 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4336[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4337 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4335[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4336 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4334[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4335 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4333[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4334 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4306[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4307 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4333 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4305[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4306 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4328(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 367;
}
x64Token x64Parser::tokenBranches4327[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4328,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4326[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4327 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4325[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4326 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4324[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4325 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4323[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4324 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4322[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4323 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4321[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4322 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4320[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4321 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4354(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 369;
}
x64Token x64Parser::tokenBranches4353[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4354,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4352[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4353 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4351[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4352 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4350[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4351 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4349[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4350 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4348[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4349 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4347[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4348 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4346[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4347 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4374(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 371;
}
x64Token x64Parser::tokenBranches4373[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4374,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4372[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4373 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4371[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4372 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4370[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4371 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4369[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4370 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4368[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4369 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4319[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4320 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4346 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4368 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4318[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4319 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4363(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 370;
}
x64Token x64Parser::tokenBranches4362[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4363,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4361[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4362 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4360[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4361 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4359[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4360 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4358[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4359 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4357[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4358 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4318(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4304[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4305 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4318, x64Parser::tokenBranches4318 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4357 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4303[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4304 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4387(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 372;
}
x64Token x64Parser::tokenBranches4386[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4387,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4385[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4386 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4384[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4385 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4383[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4384 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4382[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4383 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4381[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4382 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4380[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4381 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4379[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4380 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4378[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4379 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4377[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4378 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4400(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 373;
}
x64Token x64Parser::tokenBranches4399[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4400,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4398[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4399 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4397[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4398 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4396[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4397 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4395[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4396 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4394[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4395 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4393[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4394 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4392[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4393 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4420(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 375;
}
x64Token x64Parser::tokenBranches4419[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4420,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4418[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4419 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4417[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4418 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4416[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4417 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4415[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4416 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4414[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4415 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4391[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4392 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4414 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4390[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4391 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4409(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 374;
}
x64Token x64Parser::tokenBranches4408[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4409,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4407[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4408 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4406[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4407 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4405[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4406 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4404[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4405 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4403[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4404 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4390(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4376[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4377 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4390, x64Parser::tokenBranches4390 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4403 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4375[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4376 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4156[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4157 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4231 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4303 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4375 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4425(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 376;
}
x64Token x64Parser::tokenBranches4424[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4425,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4430_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4430_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4430_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4430(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4430_10;
	operand.values[11] = tokenCoding4430_11;
	operand.values[12] = tokenCoding4430_12;
}
x64Token x64Parser::tokenBranches4429[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4430,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4428[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4429 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4427[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4428 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4434_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4434_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4434_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4434(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4434_10;
	operand.values[11] = tokenCoding4434_11;
	operand.values[12] = tokenCoding4434_12;
}
x64Token x64Parser::tokenBranches4433[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4434,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4432[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4433 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4431[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4432 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4438_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4438_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4438_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4438(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4438_10;
	operand.values[11] = tokenCoding4438_11;
	operand.values[12] = tokenCoding4438_12;
}
x64Token x64Parser::tokenBranches4437[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4438,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4436[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4437 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4435[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches4436 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4442_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4442_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4442_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4442(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4442_10;
	operand.values[11] = tokenCoding4442_11;
	operand.values[12] = tokenCoding4442_12;
}
x64Token x64Parser::tokenBranches4441[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4442,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4440[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4441 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4439[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4440 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4426[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4427 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4431 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4435 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4439 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4444_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4444_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4444_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4444_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4444(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4444_10;
	operand.values[11] = tokenCoding4444_11;
	operand.values[12] = tokenCoding4444_12;
	operand.values[13] = tokenCoding4444_13;
}
x64Token x64Parser::tokenBranches4443[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4444,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4446_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4446_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4446_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4446_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4446(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4446_10;
	operand.values[11] = tokenCoding4446_11;
	operand.values[12] = tokenCoding4446_12;
	operand.values[13] = tokenCoding4446_13;
}
x64Token x64Parser::tokenBranches4445[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4446,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4449(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 353;
}
x64Token x64Parser::tokenBranches4448[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4449,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4461(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 377;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->unary = 0;
	operand.values[21]->binary = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4460[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4461,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4459[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4460 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4458[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4459 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4458(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4457[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc4458, x64Parser::tokenBranches4458 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4456[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4457 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4465_12[] = {
	{ (Coding::Type)(Coding::indirect), 16, -1, -1, 0, '&' }, 
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4465_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 27, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 16, -1, -1, 0, '>' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4465(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4465_12;
	operand.values[13] = tokenCoding4465_13;
}
x64Token x64Parser::tokenBranches4464[] = {
	{x64Token::ADDRESSCLASS, 0, 1, 0, NULL,&x64Parser::TokenFunc4465,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4463[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4464 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4463(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4462[] = {
	{x64Token::NUMBER, 2, 0, 0, NULL,&x64Parser::TokenFunc4463, x64Parser::tokenBranches4463 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4478(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4477[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4478,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4476[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4477 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4475[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4476 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4482(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4481[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4482,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4480[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4481 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4479[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4480 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4486(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4485[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4486,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4484[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4485 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4483[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4484 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4490(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4489[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4490,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4488[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4489 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4487[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4488 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4494(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4493[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4494,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4492[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4493 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4491[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4492 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4498(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4497[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4498,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4496[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4497 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4495[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4496 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4502(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4501[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4502,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4500[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4501 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4499[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4500 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4506(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4505[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4506,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4504[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4505 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4503[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4504 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4510(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4509[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4510,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4508[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4509 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4513_13[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4513(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding4513_13;
}
x64Token x64Parser::tokenBranches4512[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4513,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4515_13[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4515(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding4515_13;
}
x64Token x64Parser::tokenBranches4514[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4515,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4511(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4507[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4508 },
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4511,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4512 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4514 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4519(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4518[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4519,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4517[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4518 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4516[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4517 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4523(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4522[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4523,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4521[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4522 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4520[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4521 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4527(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4526[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4527,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4525[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4526 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4524[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4525 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4531_13[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4531(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding4531_13;
}
x64Token x64Parser::tokenBranches4530[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4531,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4533_13[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4533(x64Operand &operand, int tokenPos)
{
	operand.values[13] = tokenCoding4533_13;
}
x64Token x64Parser::tokenBranches4532[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4533,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4529(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4528[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4529,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4530 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4532 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4537(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4536[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4537,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4535[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4536 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4534[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4535 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4541(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4540[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4541,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4539[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4540 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4538[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4539 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4552_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4552_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4552(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4552_12;
	operand.values[13] = tokenCoding4552_13;
}
x64Token x64Parser::tokenBranches4551[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4552,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4554_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4554_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 223, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4554(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4554_12;
	operand.values[13] = tokenCoding4554_13;
}
x64Token x64Parser::tokenBranches4553[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4554,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4562_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4562_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4562(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4562_12;
	operand.values[13] = tokenCoding4562_13;
}
x64Token x64Parser::tokenBranches4561[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4562,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4560[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4561 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4570_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4570_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4570(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4570_12;
	operand.values[13] = tokenCoding4570_13;
}
x64Token x64Parser::tokenBranches4569[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4570,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4568[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4569 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4576_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4576_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4576(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4576_12;
	operand.values[13] = tokenCoding4576_13;
}
x64Token x64Parser::tokenBranches4575[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4576,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4578_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4578_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4578(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4578_12;
	operand.values[13] = tokenCoding4578_13;
}
x64Token x64Parser::tokenBranches4577[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4578,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4580_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4580_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 219, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4580(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4580_12;
	operand.values[13] = tokenCoding4580_13;
}
x64Token x64Parser::tokenBranches4579[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4580,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4574_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4574_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4574(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4574_12;
	operand.values[13] = tokenCoding4574_13;
}
x64Token x64Parser::tokenBranches4573[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4574,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4575 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4577 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4579 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4584_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4584_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4584(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4584_12;
	operand.values[13] = tokenCoding4584_13;
}
x64Token x64Parser::tokenBranches4583[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4584,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4582[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4583 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4586_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4586_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4586(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4586_12;
	operand.values[13] = tokenCoding4586_13;
}
x64Token x64Parser::tokenBranches4585[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4586,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4597_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4597_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4597(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4597_12;
	operand.values[13] = tokenCoding4597_13;
}
x64Token x64Parser::tokenBranches4596[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4597,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4604_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4604_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4604(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4604_12;
	operand.values[13] = tokenCoding4604_13;
}
x64Token x64Parser::tokenBranches4603[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4604,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4606_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4606_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4606(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4606_12;
	operand.values[13] = tokenCoding4606_13;
}
x64Token x64Parser::tokenBranches4605[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4606,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4615_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4615_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4615(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4615_12;
	operand.values[13] = tokenCoding4615_13;
}
x64Token x64Parser::tokenBranches4614[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4615,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4617_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4617_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4617(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4617_12;
	operand.values[13] = tokenCoding4617_13;
}
x64Token x64Parser::tokenBranches4616[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4617,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4613_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4613_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4613(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4613_12;
	operand.values[13] = tokenCoding4613_13;
}
x64Token x64Parser::tokenBranches4612[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4613,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4614 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4616 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4620_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4620_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4620(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4620_12;
	operand.values[13] = tokenCoding4620_13;
}
x64Token x64Parser::tokenBranches4619[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4620,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4618[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4619 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4623_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4623_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4623(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4623_12;
	operand.values[13] = tokenCoding4623_13;
}
x64Token x64Parser::tokenBranches4622[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4623,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4621[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4622 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4625_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4625_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4625(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4625_12;
	operand.values[13] = tokenCoding4625_13;
}
x64Token x64Parser::tokenBranches4624[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4625,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4627_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4627_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4627(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4627_12;
	operand.values[13] = tokenCoding4627_13;
}
x64Token x64Parser::tokenBranches4626[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4627,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4631_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4631_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4631(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4631_12;
	operand.values[13] = tokenCoding4631_13;
}
x64Token x64Parser::tokenBranches4630[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4631,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4633_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4633_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4633(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4633_12;
	operand.values[13] = tokenCoding4633_13;
}
x64Token x64Parser::tokenBranches4632[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4633,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4635_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4635_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 219, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4635(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4635_12;
	operand.values[13] = tokenCoding4635_13;
}
x64Token x64Parser::tokenBranches4634[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4635,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4629_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4629_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4629(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4629_12;
	operand.values[13] = tokenCoding4629_13;
}
x64Token x64Parser::tokenBranches4628[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4629,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4630 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4632 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4634 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4639(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
}
x64Token x64Parser::tokenBranches4638[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc4639,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4637[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4638 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4637(x64Operand &operand, int tokenPos)
{
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4636[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc4637, x64Parser::tokenBranches4637 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4643(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
}
x64Token x64Parser::tokenBranches4642[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc4643,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4641[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4642 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4641(x64Operand &operand, int tokenPos)
{
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4640[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc4641, x64Parser::tokenBranches4641 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4647(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
}
x64Token x64Parser::tokenBranches4646[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc4647,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4645[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4646 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4645(x64Operand &operand, int tokenPos)
{
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4644[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc4645, x64Parser::tokenBranches4645 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4650_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4650_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4650(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4650_12;
	operand.values[13] = tokenCoding4650_13;
}
x64Token x64Parser::tokenBranches4649[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4650,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4651(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 378;
}
x64Token x64Parser::tokenBranches4648[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4649 },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc4651,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4654_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4654_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4654(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4654_12;
	operand.values[13] = tokenCoding4654_13;
}
x64Token x64Parser::tokenBranches4653[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4654,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4655(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 379;
}
x64Token x64Parser::tokenBranches4652[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4653 },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc4655,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4665(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4664[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4665,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4663[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4664 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4662[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4663 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4669(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4668[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4669,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4667[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4668 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4666[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4667 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4678(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4677[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4678,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4676[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4677 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4675[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4676 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4682(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4681[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4682,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4680[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4681 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4679[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4680 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4684_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4684_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 174, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4684(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4684_12;
	operand.values[13] = tokenCoding4684_13;
}
x64Token x64Parser::tokenBranches4683[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4684,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4686_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4686_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 174, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4686(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4686_12;
	operand.values[13] = tokenCoding4686_13;
}
x64Token x64Parser::tokenBranches4685[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4686,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4698(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 380;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4697[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4698,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4725_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4725_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4725_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4725_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4725(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 386;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4725_10;
	operand.values[11] = tokenCoding4725_11;
	operand.values[12] = tokenCoding4725_12;
	operand.values[13] = tokenCoding4725_13;
}
x64Token x64Parser::tokenBranches4724[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4725,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4731_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4731_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4731_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4731_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4731(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4731_10;
	operand.values[11] = tokenCoding4731_11;
	operand.values[12] = tokenCoding4731_12;
	operand.values[13] = tokenCoding4731_13;
}
x64Token x64Parser::tokenBranches4723[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4724 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4731,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4722[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4723 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4702(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 381;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4722_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4722_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4722_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4722_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4722(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4722_10;
	operand.values[11] = tokenCoding4722_11;
	operand.values[12] = tokenCoding4722_12;
	operand.values[13] = tokenCoding4722_13;
}
x64Token x64Parser::tokenBranches4701[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4702,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4722, x64Parser::tokenBranches4722 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4696[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4697 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4701 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4695[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4696 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4706(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4705[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4706,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4742_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4742_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4742_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4742_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4742(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 386;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4742_10;
	operand.values[11] = tokenCoding4742_11;
	operand.values[12] = tokenCoding4742_12;
	operand.values[13] = tokenCoding4742_13;
}
x64Token x64Parser::tokenBranches4741[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4742,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4748_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4748_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4748_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4748_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4748(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4748_10;
	operand.values[11] = tokenCoding4748_11;
	operand.values[12] = tokenCoding4748_12;
	operand.values[13] = tokenCoding4748_13;
}
x64Token x64Parser::tokenBranches4740[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4741 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4748,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4739[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4740 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4710(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4739_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4739_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4739_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4739_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4739(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4739_10;
	operand.values[11] = tokenCoding4739_11;
	operand.values[12] = tokenCoding4739_12;
	operand.values[13] = tokenCoding4739_13;
}
x64Token x64Parser::tokenBranches4709[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4710,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4739, x64Parser::tokenBranches4739 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4704[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4705 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4709 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4703[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4704 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4714(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4713[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4714,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4759_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4759_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4759_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4759_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4759(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 386;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4759_10;
	operand.values[11] = tokenCoding4759_11;
	operand.values[12] = tokenCoding4759_12;
	operand.values[13] = tokenCoding4759_13;
}
x64Token x64Parser::tokenBranches4758[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4759,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4765_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4765_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4765_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4765_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4765(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4765_10;
	operand.values[11] = tokenCoding4765_11;
	operand.values[12] = tokenCoding4765_12;
	operand.values[13] = tokenCoding4765_13;
}
x64Token x64Parser::tokenBranches4757[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4758 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4765,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4756[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4757 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4718(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 385;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4756_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4756_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4756_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4756_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4756(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4756_10;
	operand.values[11] = tokenCoding4756_11;
	operand.values[12] = tokenCoding4756_12;
	operand.values[13] = tokenCoding4756_13;
}
x64Token x64Parser::tokenBranches4717[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4718,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4756, x64Parser::tokenBranches4756 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4712[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4713 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4717 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4711[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4712 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4695(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc4703(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc4711(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4694[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc4695, x64Parser::tokenBranches4695 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc4703, x64Parser::tokenBranches4703 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc4711, x64Parser::tokenBranches4711 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4774(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 390;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4773[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4774,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4789(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 394;
}
x64Token x64Parser::tokenBranches4772[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4773 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4789,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4771[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4772 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4778(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4777[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4778,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4792(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 395;
}
x64Token x64Parser::tokenBranches4776[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4777 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4792,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4775[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4776 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4782(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 392;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4781[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4782,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4795(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 396;
}
x64Token x64Parser::tokenBranches4780[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4781 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4795,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4779[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4780 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4786(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 393;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4785[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4786,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4798(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 397;
}
x64Token x64Parser::tokenBranches4784[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4785 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4798,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4783[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4784 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4770[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches4771 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4775 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4779 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4783 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4807(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 398;
}
x64Token x64Parser::tokenBranches4806[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4807,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4805[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4806 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4804[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4805 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4823(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 400;
}
x64Token x64Parser::tokenBranches4822[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4823,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4821[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4822 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4820[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4821 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4803[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4804 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4820 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4802[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4803 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4801[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4802 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4815(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 399;
}
x64Token x64Parser::tokenBranches4814[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4815,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4813[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4814 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4812[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4813 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4831(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 401;
}
x64Token x64Parser::tokenBranches4830[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4831,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4829[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4830 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4828[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4829 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4845(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 403;
}
x64Token x64Parser::tokenBranches4844[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4845,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4843[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4844 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4842[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4843 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4811[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4812 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4828 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4842 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4810[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4811 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4837(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 402;
}
x64Token x64Parser::tokenBranches4836[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4837,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4835[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4836 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4834[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4835 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4810(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4809[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4810, x64Parser::tokenBranches4810 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4834 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4800[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4801 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4809 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4853(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 404;
}
x64Token x64Parser::tokenBranches4852[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4853,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4851[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4852 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4850[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4851 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4869(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 406;
}
x64Token x64Parser::tokenBranches4868[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4869,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4867[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4868 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4866[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4867 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4849[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4850 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4866 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4848[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4849 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4847[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4848 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4861(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 405;
}
x64Token x64Parser::tokenBranches4860[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4861,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4859[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4860 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4858[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4859 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4877(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 407;
}
x64Token x64Parser::tokenBranches4876[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4877,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4875[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4876 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4874[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4875 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4891(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 409;
}
x64Token x64Parser::tokenBranches4890[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4891,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4889[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4890 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4888[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4889 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4857[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4858 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4874 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4888 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4856[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4857 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4883(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 408;
}
x64Token x64Parser::tokenBranches4882[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4883,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4881[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4882 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4880[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4881 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4856(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4855[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4856, x64Parser::tokenBranches4856 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4880 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4846[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4847 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4855 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4899(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 410;
}
x64Token x64Parser::tokenBranches4898[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4899,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4897[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4898 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4896[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4897 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4915(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 412;
}
x64Token x64Parser::tokenBranches4914[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4915,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4913[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4914 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4912[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4913 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4895[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4896 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4912 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4894[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4895 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4893[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4894 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4907(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 411;
}
x64Token x64Parser::tokenBranches4906[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4907,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4905[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4906 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4904[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4905 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4923(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 413;
}
x64Token x64Parser::tokenBranches4922[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4923,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4921[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4922 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4920[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4921 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4937(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 415;
}
x64Token x64Parser::tokenBranches4936[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4937,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4935[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4936 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4934[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4935 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4903[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4904 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4920 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4934 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4902[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4903 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4929(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 414;
}
x64Token x64Parser::tokenBranches4928[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4929,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4927[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4928 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4926[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4927 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4902(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4901[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4902, x64Parser::tokenBranches4902 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4926 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4892[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4893 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4901 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4799[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4800 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4846 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4892 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4944(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 416;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4943[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4944,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4942[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4943 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4950_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4950_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4950(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4950_12;
	operand.values[13] = tokenCoding4950_13;
}
x64Token x64Parser::tokenBranches4949[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4950,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4954(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 417;
}
x64Token x64Parser::tokenBranches4953[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4954,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4961(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 418;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4960[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc4961,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4963(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 419;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4962[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc4963,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4974(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 420;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4973[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4974,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4979(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 421;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4978[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4979,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4972[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4973 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4978 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4971[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4972 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4971(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::number;
	operand.values[1]->val = operands.size();
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4981(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 422;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4983(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 423;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4985_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4985_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4985(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4985_12;
	operand.values[13] = tokenCoding4985_13;
}
Coding x64Parser::tokenCoding4987_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4987_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4987(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4987_12;
	operand.values[13] = tokenCoding4987_13;
}
x64Token x64Parser::tokenBranches4970[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc4971, x64Parser::tokenBranches4971 },
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4981,  },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4983,  },
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc4985,  },
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4987,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4989(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 424;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4988[] = {
	{x64Token::NUMBER, 9, 1, 0, NULL,&x64Parser::TokenFunc4989,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4991(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 425;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4993(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 426;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4990[] = {
	{x64Token::NUMBER, 14, 1, 0, NULL,&x64Parser::TokenFunc4991,  },
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc4993,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5000_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5000_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5000(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding5000_12;
	operand.values[13] = tokenCoding5000_13;
}
x64Token x64Parser::tokenBranches4999[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc5000,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5002_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5002_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5002(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding5002_12;
	operand.values[13] = tokenCoding5002_13;
}
x64Token x64Parser::tokenBranches5001[] = {
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc5002,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4994(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 425;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4995(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 426;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4996_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4996_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4996_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4996_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4996(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4996_10;
	operand.values[11] = tokenCoding4996_11;
	operand.values[12] = tokenCoding4996_12;
	operand.values[13] = tokenCoding4996_13;
}
Coding x64Parser::tokenCoding4997_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4997_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4997_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4997_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4997(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4997_10;
	operand.values[11] = tokenCoding4997_11;
	operand.values[12] = tokenCoding4997_12;
	operand.values[13] = tokenCoding4997_13;
}
Coding x64Parser::tokenCoding4998_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4998_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4998_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4998_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 255, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4998(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4998_10;
	operand.values[11] = tokenCoding4998_11;
	operand.values[12] = tokenCoding4998_12;
	operand.values[13] = tokenCoding4998_13;
}
x64Token x64Parser::tokenBranches4969[] = {
	{x64Token::TOKEN, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches4970 },
	{x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4988 },
	{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches4990 },
	{x64Token::NUMBER, 13, 1, 0, NULL,&x64Parser::TokenFunc4994,  },
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc4995,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc4996,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4997,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4998,  },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4999 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5001 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5035_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5035_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5035(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding5035_12;
	operand.values[13] = tokenCoding5035_13;
}
x64Token x64Parser::tokenBranches5034[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc5035,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5042(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 427;
}
x64Token x64Parser::tokenBranches5041[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5042,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5054(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 429;
}
x64Token x64Parser::tokenBranches5053[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5054,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5040[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5041 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5053 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5039[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5040 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5048(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 428;
}
x64Token x64Parser::tokenBranches5047[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5048,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5060(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 430;
}
x64Token x64Parser::tokenBranches5059[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5060,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5070(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 432;
}
x64Token x64Parser::tokenBranches5069[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5070,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5046[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5047 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5059 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5069 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5045[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5046 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5064(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 431;
}
x64Token x64Parser::tokenBranches5063[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5064,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5045(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5038[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5039 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5045, x64Parser::tokenBranches5045 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5063 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5037[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5038 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5076(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 433;
}
x64Token x64Parser::tokenBranches5075[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5076,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5088(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 435;
}
x64Token x64Parser::tokenBranches5087[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5088,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5074[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5075 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5087 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5073[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5074 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5082(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 434;
}
x64Token x64Parser::tokenBranches5081[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5082,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5094(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 436;
}
x64Token x64Parser::tokenBranches5093[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5094,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5104(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 438;
}
x64Token x64Parser::tokenBranches5103[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5104,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5080[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5081 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5093 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5103 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5079[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5080 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5098(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 437;
}
x64Token x64Parser::tokenBranches5097[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5098,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5079(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5072[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5073 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5079, x64Parser::tokenBranches5079 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5097 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5071[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5072 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5110(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 439;
}
x64Token x64Parser::tokenBranches5109[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5110,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5122(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 441;
}
x64Token x64Parser::tokenBranches5121[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5122,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5108[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5109 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5121 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5107[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5108 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5116(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 440;
}
x64Token x64Parser::tokenBranches5115[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5116,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5128(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 442;
}
x64Token x64Parser::tokenBranches5127[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5128,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5138(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 444;
}
x64Token x64Parser::tokenBranches5137[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5138,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5114[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5115 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5127 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5137 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5113[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5114 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5132(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 443;
}
x64Token x64Parser::tokenBranches5131[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5132,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5113(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5106[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5107 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5113, x64Parser::tokenBranches5113 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5131 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5105[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5106 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5144(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 445;
}
x64Token x64Parser::tokenBranches5143[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5144,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5142[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5143 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5141[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5142 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5150(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 446;
}
x64Token x64Parser::tokenBranches5149[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5150,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5160(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 448;
}
x64Token x64Parser::tokenBranches5159[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5160,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5148[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5149 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5159 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5147[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5148 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5154(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 447;
}
x64Token x64Parser::tokenBranches5153[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5154,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5147(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5140[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5141 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5147, x64Parser::tokenBranches5147 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5153 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5139[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5140 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5036[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5037 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5071 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5105 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5139 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5165(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 449;
}
x64Token x64Parser::tokenBranches5164[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc5165,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5167(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 450;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5166[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5167,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5169(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 451;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5168[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5169,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5171(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 452;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5170[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5171,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5173(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 452;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5172[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5173,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5175(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 451;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5174[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5175,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5179_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5179_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5179(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding5179_12;
	operand.values[13] = tokenCoding5179_13;
}
Coding x64Parser::tokenCoding5180_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5180_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5180(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding5180_12;
	operand.values[13] = tokenCoding5180_13;
}
x64Token x64Parser::tokenBranches5178[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5179,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc5180,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5184_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 24, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5184_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 34, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5184(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding5184_12;
	operand.values[13] = tokenCoding5184_13;
}
x64Token x64Parser::tokenBranches5183[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5184,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5182[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5183 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5187_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 25, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5187_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 35, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5187(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding5187_12;
	operand.values[13] = tokenCoding5187_13;
}
x64Token x64Parser::tokenBranches5186[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5187,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5185[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5186 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5190_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5190_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 38, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5190(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding5190_12;
	operand.values[13] = tokenCoding5190_13;
}
x64Token x64Parser::tokenBranches5189[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5190,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5188[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5189 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5196(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 453;
}
x64Token x64Parser::tokenBranches5195[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5196,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5204(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 454;
}
x64Token x64Parser::tokenBranches5203[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5204,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5218(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 456;
}
x64Token x64Parser::tokenBranches5217[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5218,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5203(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5217(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5202[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5203, x64Parser::tokenBranches5203 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5217, x64Parser::tokenBranches5217 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5201[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5202 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5210(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 455;
}
x64Token x64Parser::tokenBranches5209[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5210,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5195(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5201(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5209(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5194[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5195, x64Parser::tokenBranches5195 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5201, x64Parser::tokenBranches5201 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5209, x64Parser::tokenBranches5209 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5193[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5194 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5192[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5193 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5191[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5192 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5224(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 457;
}
x64Token x64Parser::tokenBranches5223[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5224,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5232(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 458;
}
x64Token x64Parser::tokenBranches5231[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5232,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5246(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 460;
}
x64Token x64Parser::tokenBranches5245[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5246,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5231(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5245(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5230[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5231, x64Parser::tokenBranches5231 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5245, x64Parser::tokenBranches5245 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5229[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5230 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5238(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 459;
}
x64Token x64Parser::tokenBranches5237[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5238,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5223(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5229(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5237(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5222[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5223, x64Parser::tokenBranches5223 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5229, x64Parser::tokenBranches5229 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5237, x64Parser::tokenBranches5237 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5221[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5222 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5220[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5221 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5219[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5220 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5252(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 461;
}
x64Token x64Parser::tokenBranches5251[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5252,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5260(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 462;
}
x64Token x64Parser::tokenBranches5259[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5260,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5274(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 464;
}
x64Token x64Parser::tokenBranches5273[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5274,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5259(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5273(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5258[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5259, x64Parser::tokenBranches5259 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5273, x64Parser::tokenBranches5273 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5257[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5258 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5266(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 463;
}
x64Token x64Parser::tokenBranches5265[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5266,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5251(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5257(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5265(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5250[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5251, x64Parser::tokenBranches5251 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5257, x64Parser::tokenBranches5257 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5265, x64Parser::tokenBranches5265 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5249[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5250 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5248[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5249 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5247[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5248 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5280(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 465;
}
x64Token x64Parser::tokenBranches5279[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5280,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5288(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 466;
}
x64Token x64Parser::tokenBranches5287[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5288,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5302(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 468;
}
x64Token x64Parser::tokenBranches5301[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5302,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5287(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5301(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5286[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5287, x64Parser::tokenBranches5287 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5301, x64Parser::tokenBranches5301 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5285[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5286 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5294(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 467;
}
x64Token x64Parser::tokenBranches5293[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5294,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5279(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5285(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5293(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5278[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5279, x64Parser::tokenBranches5279 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5285, x64Parser::tokenBranches5285 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5293, x64Parser::tokenBranches5293 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5277[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5278 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5276[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5277 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5275[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5276 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5306(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 469;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5322_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5322_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5322_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5322_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 138, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5322(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5322_10;
	operand.values[11] = tokenCoding5322_11;
	operand.values[12] = tokenCoding5322_12;
	operand.values[13] = tokenCoding5322_13;
}
x64Token x64Parser::tokenBranches5305[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5306,  },
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc5322,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5304[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5305 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5303[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5304 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5310(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 470;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5326_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5326_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5326_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5326_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5326(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5326_10;
	operand.values[11] = tokenCoding5326_11;
	operand.values[12] = tokenCoding5326_12;
	operand.values[13] = tokenCoding5326_13;
}
x64Token x64Parser::tokenBranches5309[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5310,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5326,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5308[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5309 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5307[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5308 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5314(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 471;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5330_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5330_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5330_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5330_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5330(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5330_10;
	operand.values[11] = tokenCoding5330_11;
	operand.values[12] = tokenCoding5330_12;
	operand.values[13] = tokenCoding5330_13;
}
x64Token x64Parser::tokenBranches5313[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5314,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5330,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5312[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5313 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5311[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5312 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5318(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 472;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5334_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5334_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5334_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5334_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5334(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5334_10;
	operand.values[11] = tokenCoding5334_11;
	operand.values[12] = tokenCoding5334_12;
	operand.values[13] = tokenCoding5334_13;
}
x64Token x64Parser::tokenBranches5317[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5318,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5334,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5316[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5317 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5315[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5316 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5339_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5339_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5339(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5339_12;
	operand.values[13] = tokenCoding5339_13;
}
x64Token x64Parser::tokenBranches5338[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5339,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5337[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5338 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5336[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5337 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5335[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5336 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5344_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5344_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5344(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5344_12;
	operand.values[13] = tokenCoding5344_13;
}
x64Token x64Parser::tokenBranches5343[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5344,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5342[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5343 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5341[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5342 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5340[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5341 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5349_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5349_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5349(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5349_12;
	operand.values[13] = tokenCoding5349_13;
}
x64Token x64Parser::tokenBranches5348[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5349,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5347[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5348 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5346[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5347 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5345[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5346 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5354_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5354_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5354(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5354_12;
	operand.values[13] = tokenCoding5354_13;
}
x64Token x64Parser::tokenBranches5353[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5354,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5352[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5353 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5351[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5352 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5350[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5351 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5527_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5527_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5527(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5527_12;
	operand.values[13] = tokenCoding5527_13;
}
x64Token x64Parser::tokenBranches5526[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5527,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5357_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 24, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5357_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 32, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5357(x64Operand &operand, int tokenPos)
{
	operand.values[24] = new Coding[2];
	CleanupValues.push_back(operand.values[24]);
	operand.values[24]->type = Coding::reg;
	operand.values[24]->val = inputTokens[tokenPos]->val->ival;
	operand.values[24]->bits = 0;
	operand.values[24]->field = 0;
	operand.values[24]->unary = 0;
	operand.values[24]->binary = 0;
	operand.values[24][1].type = Coding::eot;
	operand.values[12] = tokenCoding5357_12;
	operand.values[13] = tokenCoding5357_13;
}
Coding x64Parser::tokenCoding5360_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 25, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5360_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5360(x64Operand &operand, int tokenPos)
{
	operand.values[25] = new Coding[2];
	CleanupValues.push_back(operand.values[25]);
	operand.values[25]->type = Coding::reg;
	operand.values[25]->val = inputTokens[tokenPos]->val->ival;
	operand.values[25]->bits = 0;
	operand.values[25]->field = 0;
	operand.values[25]->unary = 0;
	operand.values[25]->binary = 0;
	operand.values[25][1].type = Coding::eot;
	operand.values[12] = tokenCoding5360_12;
	operand.values[13] = tokenCoding5360_13;
}
Coding x64Parser::tokenCoding5363_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5363_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5363(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->unary = 0;
	operand.values[26]->binary = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[12] = tokenCoding5363_12;
	operand.values[13] = tokenCoding5363_13;
}
x64Token x64Parser::tokenBranches5356[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc5357,  },
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc5360,  },
	{x64Token::REGISTERCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5363,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5526 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5355[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5356 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5369(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 473;
}
x64Token x64Parser::tokenBranches5368[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5369,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5367[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5368 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5366[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5367 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5377(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 474;
}
x64Token x64Parser::tokenBranches5376[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5377,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5375[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5376 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5374[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5375 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5391(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 476;
}
x64Token x64Parser::tokenBranches5390[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5391,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5389[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5390 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5388[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5389 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5374(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5388(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5373[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5374, x64Parser::tokenBranches5374 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5388, x64Parser::tokenBranches5388 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5372[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5373 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5383(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 475;
}
x64Token x64Parser::tokenBranches5382[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5383,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5381[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5382 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5380[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5366(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5372(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5380(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5365[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5366, x64Parser::tokenBranches5366 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5372, x64Parser::tokenBranches5372 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5380, x64Parser::tokenBranches5380 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5479_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5479_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5479_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5479_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 136, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5479(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5479_10;
	operand.values[11] = tokenCoding5479_11;
	operand.values[12] = tokenCoding5479_12;
	operand.values[13] = tokenCoding5479_13;
}
x64Token x64Parser::tokenBranches5478[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5479,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5477[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5478 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5364[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5365 },
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5477 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5397(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 477;
}
x64Token x64Parser::tokenBranches5396[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5397,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5395[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5396 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5394[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5395 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5405(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 478;
}
x64Token x64Parser::tokenBranches5404[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5405,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5403[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5404 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5402[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5403 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5419(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 480;
}
x64Token x64Parser::tokenBranches5418[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5419,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5417[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5418 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5416[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5417 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5402(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5416(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5401[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5402, x64Parser::tokenBranches5402 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5416, x64Parser::tokenBranches5416 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5400[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5401 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5411(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 479;
}
x64Token x64Parser::tokenBranches5410[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5411,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5409[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5410 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5408[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5409 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5394(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5400(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5408(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5393[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5394, x64Parser::tokenBranches5394 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5400, x64Parser::tokenBranches5400 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5408, x64Parser::tokenBranches5408 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5483_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5483_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5483_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5483_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5483(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5483_10;
	operand.values[11] = tokenCoding5483_11;
	operand.values[12] = tokenCoding5483_12;
	operand.values[13] = tokenCoding5483_13;
}
Coding x64Parser::tokenCoding5507_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5507_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5507(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[12] = tokenCoding5507_12;
	operand.values[13] = tokenCoding5507_13;
}
x64Token x64Parser::tokenBranches5482[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5483,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5507,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5481[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5482 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5392[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5393 },
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5481 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5425(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 481;
}
x64Token x64Parser::tokenBranches5424[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5425,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5423[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5424 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5422[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5423 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5433(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 482;
}
x64Token x64Parser::tokenBranches5432[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5433,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5431[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5432 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5430[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5431 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5447(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 484;
}
x64Token x64Parser::tokenBranches5446[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5447,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5445[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5446 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5444[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5445 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5430(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5444(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5429[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5430, x64Parser::tokenBranches5430 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5444, x64Parser::tokenBranches5444 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5428[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5429 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5439(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 483;
}
x64Token x64Parser::tokenBranches5438[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5439,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5437[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5438 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5436[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5437 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5422(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5428(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5436(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5421[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5422, x64Parser::tokenBranches5422 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5428, x64Parser::tokenBranches5428 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5436, x64Parser::tokenBranches5436 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5487_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5487_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5487_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5487_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5487(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5487_10;
	operand.values[11] = tokenCoding5487_11;
	operand.values[12] = tokenCoding5487_12;
	operand.values[13] = tokenCoding5487_13;
}
x64Token x64Parser::tokenBranches5486[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5487,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5485[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5486 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5511_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5511_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5511(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[12] = tokenCoding5511_12;
	operand.values[13] = tokenCoding5511_13;
}
x64Token x64Parser::tokenBranches5510[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5511,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5509[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5510 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5515_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5515_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5515(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[12] = tokenCoding5515_12;
	operand.values[13] = tokenCoding5515_13;
}
x64Token x64Parser::tokenBranches5514[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5515,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5513[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5514 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5420[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5421 },
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5485 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches5509 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches5513 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5453(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 485;
}
x64Token x64Parser::tokenBranches5452[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5453,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5451[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5452 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5450[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5451 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5461(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 486;
}
x64Token x64Parser::tokenBranches5460[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5461,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5459[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5460 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5458[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5459 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5475(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 488;
}
x64Token x64Parser::tokenBranches5474[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5475,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5473[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5474 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5472[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5473 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5458(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5472(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5457[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5458, x64Parser::tokenBranches5458 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5472, x64Parser::tokenBranches5472 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5456[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5457 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5467(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 487;
}
x64Token x64Parser::tokenBranches5466[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5467,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5465[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5466 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5464[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5465 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5450(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5456(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5464(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5449[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5450, x64Parser::tokenBranches5450 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5456, x64Parser::tokenBranches5456 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5464, x64Parser::tokenBranches5464 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5491_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5491_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5491_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5491_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5491(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5491_10;
	operand.values[11] = tokenCoding5491_11;
	operand.values[12] = tokenCoding5491_12;
	operand.values[13] = tokenCoding5491_13;
}
x64Token x64Parser::tokenBranches5490[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc5491,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5489[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5490 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5448[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5449 },
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5489 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5495_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5495_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5495_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5495_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5495(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5495_10;
	operand.values[11] = tokenCoding5495_11;
	operand.values[12] = tokenCoding5495_12;
	operand.values[13] = tokenCoding5495_13;
}
x64Token x64Parser::tokenBranches5494[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5495,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5499_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5499_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5499(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding5499_12;
	operand.values[13] = tokenCoding5499_13;
}
Coding x64Parser::tokenCoding5503_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5503_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5503(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding5503_12;
	operand.values[13] = tokenCoding5503_13;
}
x64Token x64Parser::tokenBranches5498[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5499,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc5503,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5493[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5494 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5498 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5492[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5493 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5519_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5519_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5519(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5519_12;
	operand.values[13] = tokenCoding5519_13;
}
x64Token x64Parser::tokenBranches5518[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5519,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5517[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5518 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5516[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5517 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5523_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5523_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5523(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5523_12;
	operand.values[13] = tokenCoding5523_13;
}
x64Token x64Parser::tokenBranches5522[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5523,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5521[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5522 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5520[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5521 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5531_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5531_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5531(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5531_12;
	operand.values[13] = tokenCoding5531_13;
}
x64Token x64Parser::tokenBranches5530[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5531,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5529[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5530 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5528[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5529 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5182(x64Operand &operand, int tokenPos)
{
	operand.values[24] = new Coding[2];
	CleanupValues.push_back(operand.values[24]);
	operand.values[24]->type = Coding::reg;
	operand.values[24]->val = inputTokens[tokenPos]->val->ival;
	operand.values[24]->bits = 0;
	operand.values[24]->field = 0;
	operand.values[24]->unary = 0;
	operand.values[24]->binary = 0;
	operand.values[24][1].type = Coding::eot;
}
void x64Parser::TokenFunc5185(x64Operand &operand, int tokenPos)
{
	operand.values[25] = new Coding[2];
	CleanupValues.push_back(operand.values[25]);
	operand.values[25]->type = Coding::reg;
	operand.values[25]->val = inputTokens[tokenPos]->val->ival;
	operand.values[25]->bits = 0;
	operand.values[25]->field = 0;
	operand.values[25]->unary = 0;
	operand.values[25]->binary = 0;
	operand.values[25][1].type = Coding::eot;
}
void x64Parser::TokenFunc5188(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->unary = 0;
	operand.values[26]->binary = 0;
	operand.values[26][1].type = Coding::eot;
}
void x64Parser::TokenFunc5303(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5307(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5311(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5315(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5492(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5181[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5182, x64Parser::tokenBranches5182 },
	{x64Token::REGISTERCLASS, 20, 0, 0, NULL,&x64Parser::TokenFunc5185, x64Parser::tokenBranches5185 },
	{x64Token::REGISTERCLASS, 21, 0, 0, NULL,&x64Parser::TokenFunc5188, x64Parser::tokenBranches5188 },
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches5191 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5219 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5247 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5275 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc5303, x64Parser::tokenBranches5303 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc5307, x64Parser::tokenBranches5307 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc5311, x64Parser::tokenBranches5311 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc5315, x64Parser::tokenBranches5315 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5335 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5340 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5345 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5350 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches5355 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5364 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5392 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5420 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5448 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5492, x64Parser::tokenBranches5492 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches5516 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches5520 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches5528 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5545(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 489;
}
x64Token x64Parser::tokenBranches5544[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5545,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5543[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5544 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5542[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5543 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5558(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 490;
}
x64Token x64Parser::tokenBranches5557[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5558,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5556[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5557 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5555[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5556 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5555(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5541[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5542 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5555, x64Parser::tokenBranches5555 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5540[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5541 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5539[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5540 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5538[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5539 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5537[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5538 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5571(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 491;
}
x64Token x64Parser::tokenBranches5570[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5571,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5569[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5570 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5568[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5569 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5584(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 492;
}
x64Token x64Parser::tokenBranches5583[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5584,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5582[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5583 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5581[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5582 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5581(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5567[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5568 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5581, x64Parser::tokenBranches5581 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5566[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5567 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5565[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5566 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5564[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5565 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5563[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5564 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5536[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5537 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5563 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5535[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5536 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5534[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5535 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5593(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 493;
}
x64Token x64Parser::tokenBranches5592[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5593,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5604(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 494;
}
x64Token x64Parser::tokenBranches5603[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5604,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5602[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5603 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5601[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5602 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5601(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5591[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5592 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5601, x64Parser::tokenBranches5601 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5590[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5591 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5589[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5590 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5588[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5589 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5587[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5588 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5586[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5587 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5533[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5534 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5586 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5617(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 495;
}
x64Token x64Parser::tokenBranches5616[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5617,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5615[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5616 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5614[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5615 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5630(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 496;
}
x64Token x64Parser::tokenBranches5629[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5630,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5628[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5629 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5627[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5628 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5627(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5613[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5614 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5627, x64Parser::tokenBranches5627 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5612[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5613 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5611[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5612 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5610[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5611 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5609[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5610 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5643(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 497;
}
x64Token x64Parser::tokenBranches5642[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5643,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5641[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5642 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5640[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5641 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5656(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 498;
}
x64Token x64Parser::tokenBranches5655[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5656,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5654[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5655 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5653[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5654 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5653(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5639[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5640 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5653, x64Parser::tokenBranches5653 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5638[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5639 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5637[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5638 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5636[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5637 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5635[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5636 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5608[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5609 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5635 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5607[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5608 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5606[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5607 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5665(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 499;
}
x64Token x64Parser::tokenBranches5664[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5665,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5676(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 500;
}
x64Token x64Parser::tokenBranches5675[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5676,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5674[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5675 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5673[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5674 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5673(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5663[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5664 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5673, x64Parser::tokenBranches5673 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5662[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5663 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5661[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5662 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5660[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5661 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5659[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5660 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5658[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5659 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5605[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5606 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5658 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5689(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 501;
}
x64Token x64Parser::tokenBranches5688[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5689,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5687[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5688 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5686[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5687 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5702(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 502;
}
x64Token x64Parser::tokenBranches5701[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5702,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5700[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5701 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5699[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5700 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5699(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5685[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5686 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5699, x64Parser::tokenBranches5699 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5684[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5685 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5683[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5684 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5682[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5683 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5681[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5682 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5715(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 503;
}
x64Token x64Parser::tokenBranches5714[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5715,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5713[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5714 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5712[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5713 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5728(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 504;
}
x64Token x64Parser::tokenBranches5727[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5728,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5726[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5727 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5725[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5726 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5725(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5711[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5712 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5725, x64Parser::tokenBranches5725 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5710[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5711 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5709[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5710 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5708[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5709 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5707[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5708 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5680[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5681 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5707 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5679[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5680 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5678[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5679 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5737(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 505;
}
x64Token x64Parser::tokenBranches5736[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5737,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5748(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 506;
}
x64Token x64Parser::tokenBranches5747[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5748,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5746[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5747 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5745[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5746 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5745(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5735[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5736 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5745, x64Parser::tokenBranches5745 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5734[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5735 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5733[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5734 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5732[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5733 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5731[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5732 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5730[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5731 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5677[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5678 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5730 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5761(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 507;
}
x64Token x64Parser::tokenBranches5760[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5761,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5759[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5760 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5758[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5759 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5774(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 508;
}
x64Token x64Parser::tokenBranches5773[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5774,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5772[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5773 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5771[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5772 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5771(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5757[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5758 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5771, x64Parser::tokenBranches5771 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5756[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5757 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5755[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5756 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5754[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5755 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5753[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5754 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5752[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5753 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5751[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5752 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5750[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5751 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5783(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 507;
}
x64Token x64Parser::tokenBranches5782[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5783,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5794(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 508;
}
x64Token x64Parser::tokenBranches5793[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5794,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5792[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5793 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5791[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5792 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5791(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5781[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5782 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5791, x64Parser::tokenBranches5791 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5780[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5781 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5779[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5780 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5778[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5779 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5777[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5778 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5776[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5777 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5749[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5750 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5776 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5532[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5533 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5605 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5677 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5749 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5799_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5799_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5799_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5799_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5799(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5799_10;
	operand.values[11] = tokenCoding5799_11;
	operand.values[12] = tokenCoding5799_12;
	operand.values[13] = tokenCoding5799_13;
}
x64Token x64Parser::tokenBranches5798[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5799,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5797[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5798 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5796[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5797 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5803_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5803_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5803_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5803_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5803(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5803_10;
	operand.values[11] = tokenCoding5803_11;
	operand.values[12] = tokenCoding5803_12;
	operand.values[13] = tokenCoding5803_13;
}
x64Token x64Parser::tokenBranches5802[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5803,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5801[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5802 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5800[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5801 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5807_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5807_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5807_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5807_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5807(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5807_10;
	operand.values[11] = tokenCoding5807_11;
	operand.values[12] = tokenCoding5807_12;
	operand.values[13] = tokenCoding5807_13;
}
x64Token x64Parser::tokenBranches5806[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5807,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5805[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5806 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5804[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5805 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5811_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5811_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5811_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5811_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5811(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5811_10;
	operand.values[11] = tokenCoding5811_11;
	operand.values[12] = tokenCoding5811_12;
	operand.values[13] = tokenCoding5811_13;
}
x64Token x64Parser::tokenBranches5810[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5811,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5809[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5810 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5808[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5809 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5815_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5815_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5815_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5815_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5815(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5815_10;
	operand.values[11] = tokenCoding5815_11;
	operand.values[12] = tokenCoding5815_12;
	operand.values[13] = tokenCoding5815_13;
}
x64Token x64Parser::tokenBranches5814[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5815,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5813[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5814 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5812[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5813 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5819_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5819_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5819_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5819_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5819(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5819_10;
	operand.values[11] = tokenCoding5819_11;
	operand.values[12] = tokenCoding5819_12;
	operand.values[13] = tokenCoding5819_13;
}
x64Token x64Parser::tokenBranches5818[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc5819,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5817[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5818 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5816[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5817 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5796(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5800(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5804(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5795[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc5796, x64Parser::tokenBranches5796 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc5800, x64Parser::tokenBranches5800 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc5804, x64Parser::tokenBranches5804 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5808 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5812 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5816 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5825_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5825_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5825_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5825_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5825_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5825(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5825_10;
	operand.values[11] = tokenCoding5825_11;
	operand.values[19] = tokenCoding5825_19;
	operand.values[12] = tokenCoding5825_12;
	operand.values[13] = tokenCoding5825_13;
}
x64Token x64Parser::tokenBranches5824[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc5825,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5823[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5824 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5828_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5828_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5828_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5828_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5828_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5828(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5828_10;
	operand.values[11] = tokenCoding5828_11;
	operand.values[19] = tokenCoding5828_19;
	operand.values[12] = tokenCoding5828_12;
	operand.values[13] = tokenCoding5828_13;
}
x64Token x64Parser::tokenBranches5827[] = {
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc5828,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5826[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5827 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5823(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5822[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc5823, x64Parser::tokenBranches5823 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5826 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5830(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 509;
}
x64Token x64Parser::tokenBranches5829[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc5830,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5840_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5840_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5840_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5840_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5840(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5840_10;
	operand.values[11] = tokenCoding5840_11;
	operand.values[12] = tokenCoding5840_12;
	operand.values[13] = tokenCoding5840_13;
}
x64Token x64Parser::tokenBranches5839[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5840,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5836_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5836_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5836_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5836_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5836(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5836_10;
	operand.values[11] = tokenCoding5836_11;
	operand.values[12] = tokenCoding5836_12;
	operand.values[13] = tokenCoding5836_13;
}
x64Token x64Parser::tokenBranches5835[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5836,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5839 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5834[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5835 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5847_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5847_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5847_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5847_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5847(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5847_10;
	operand.values[11] = tokenCoding5847_11;
	operand.values[12] = tokenCoding5847_12;
	operand.values[13] = tokenCoding5847_13;
}
x64Token x64Parser::tokenBranches5846[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5847,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5843_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5843_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5843_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5843_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5843(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5843_10;
	operand.values[11] = tokenCoding5843_11;
	operand.values[12] = tokenCoding5843_12;
	operand.values[13] = tokenCoding5843_13;
}
x64Token x64Parser::tokenBranches5842[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5843,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5846 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5841[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5842 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5834(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5841(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5833[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc5834, x64Parser::tokenBranches5834 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc5841, x64Parser::tokenBranches5841 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5857(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 510;
}
x64Token x64Parser::tokenBranches5856[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5857,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5855[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5856 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5855(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5854[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc5855, x64Parser::tokenBranches5855 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5861(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 511;
}
x64Token x64Parser::tokenBranches5860[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5861,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5859[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5860 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5859(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5858[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc5859, x64Parser::tokenBranches5859 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5865(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 512;
}
x64Token x64Parser::tokenBranches5864[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5865,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5863[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5864 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5863(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5862[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc5863, x64Parser::tokenBranches5863 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5869(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 513;
}
x64Token x64Parser::tokenBranches5868[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5869,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5867[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5868 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5867(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5866[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc5867, x64Parser::tokenBranches5867 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5872(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 514;
}
void x64Parser::TokenFunc5875(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 515;
}
void x64Parser::TokenFunc5878(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 516;
}
void x64Parser::TokenFunc5881(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 517;
}
x64Token x64Parser::tokenBranches5871[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5872,  },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5875,  },
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5878,  },
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5881,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5870[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5871 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5853[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5854 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5858 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5862 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5866 },
	{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches5870 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5890(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 518;
}
x64Token x64Parser::tokenBranches5889[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5890,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5906(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 520;
}
x64Token x64Parser::tokenBranches5905[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5906,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5888[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5889 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5905 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5887[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5888 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5898(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 519;
}
x64Token x64Parser::tokenBranches5897[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5898,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5914(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 521;
}
x64Token x64Parser::tokenBranches5913[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5914,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5928(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 523;
}
x64Token x64Parser::tokenBranches5927[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5928,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5896[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5897 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5913 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5927 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5895[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5896 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5920(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 522;
}
x64Token x64Parser::tokenBranches5919[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5920,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5895(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5886[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5887 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5895, x64Parser::tokenBranches5895 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5919 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5885[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5886 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5936(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 524;
}
x64Token x64Parser::tokenBranches5935[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5936,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5952(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 526;
}
x64Token x64Parser::tokenBranches5951[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5952,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5934[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5935 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5951 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5933[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5934 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5944(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 525;
}
x64Token x64Parser::tokenBranches5943[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5944,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5960(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 527;
}
x64Token x64Parser::tokenBranches5959[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5960,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5974(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 529;
}
x64Token x64Parser::tokenBranches5973[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5974,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5942[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5943 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5959 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5973 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5941[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5942 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5966(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 528;
}
x64Token x64Parser::tokenBranches5965[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5966,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5941(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5932[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5933 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5941, x64Parser::tokenBranches5941 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5965 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5931[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5932 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5982(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 530;
}
x64Token x64Parser::tokenBranches5981[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5982,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5998(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 532;
}
x64Token x64Parser::tokenBranches5997[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5998,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5980[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5981 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5997 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5979[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5980 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5990(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 531;
}
x64Token x64Parser::tokenBranches5989[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5990,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6006(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 533;
}
x64Token x64Parser::tokenBranches6005[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6006,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6020(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 535;
}
x64Token x64Parser::tokenBranches6019[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6020,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5988[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5989 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6005 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6019 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5987[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5988 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6012(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 534;
}
x64Token x64Parser::tokenBranches6011[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6012,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5987(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5978[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5979 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5987, x64Parser::tokenBranches5987 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6011 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5977[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5978 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5884[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5885 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5931 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5977 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5883[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5884 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5882[] = {
	{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches5883 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6029_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6029_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6029(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding6029_12;
	operand.values[13] = tokenCoding6029_13;
}
x64Token x64Parser::tokenBranches6028[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6029,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6031_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6031_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6031(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding6031_12;
	operand.values[13] = tokenCoding6031_13;
}
x64Token x64Parser::tokenBranches6030[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6031,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6033_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6033_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6033(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding6033_12;
	operand.values[13] = tokenCoding6033_13;
}
x64Token x64Parser::tokenBranches6032[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6033,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6025(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 536;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6026(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 537;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6027(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 538;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6034(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 539;
}
void x64Parser::TokenFunc6035(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 540;
}
void x64Parser::TokenFunc6036(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 541;
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6024[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6025,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6026,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6027,  },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6028 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6030 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6032 },
	{x64Token::REGISTER, 96, 1, 0, NULL,&x64Parser::TokenFunc6034,  },
	{x64Token::REGISTER, 97, 1, 0, NULL,&x64Parser::TokenFunc6035,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6036,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6045(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 542;
}
x64Token x64Parser::tokenBranches6044[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6045,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6047_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6047_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6047_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6047_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6047_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6047_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6047(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6047_28;
	operand.values[10] = tokenCoding6047_10;
	operand.values[11] = tokenCoding6047_11;
	operand.values[29] = tokenCoding6047_29;
	operand.values[12] = tokenCoding6047_12;
	operand.values[13] = tokenCoding6047_13;
}
x64Token x64Parser::tokenBranches6046[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6047,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6049_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6049_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6049_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6049_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6049_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6049_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6049(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6049_28;
	operand.values[10] = tokenCoding6049_10;
	operand.values[11] = tokenCoding6049_11;
	operand.values[29] = tokenCoding6049_29;
	operand.values[12] = tokenCoding6049_12;
	operand.values[13] = tokenCoding6049_13;
}
x64Token x64Parser::tokenBranches6048[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6049,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6051_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6051_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6051_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6051_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6051_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6051_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6051(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6051_28;
	operand.values[10] = tokenCoding6051_10;
	operand.values[11] = tokenCoding6051_11;
	operand.values[29] = tokenCoding6051_29;
	operand.values[12] = tokenCoding6051_12;
	operand.values[13] = tokenCoding6051_13;
}
x64Token x64Parser::tokenBranches6050[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6051,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6053_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6053_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6053_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6053_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6053_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6053_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6053(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6053_28;
	operand.values[10] = tokenCoding6053_10;
	operand.values[11] = tokenCoding6053_11;
	operand.values[29] = tokenCoding6053_29;
	operand.values[12] = tokenCoding6053_12;
	operand.values[13] = tokenCoding6053_13;
}
x64Token x64Parser::tokenBranches6052[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6053,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6059(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 546;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6058[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc6059,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6064(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 547;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6070_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6070_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6070(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 551;
	operand.values[12] = tokenCoding6070_12;
	operand.values[13] = tokenCoding6070_13;
}
x64Token x64Parser::tokenBranches6063[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6064,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6070,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6066(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 548;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6072_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6072_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6072(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 552;
	operand.values[12] = tokenCoding6072_12;
	operand.values[13] = tokenCoding6072_13;
}
x64Token x64Parser::tokenBranches6065[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6066,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6072,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6068(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 550;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6074_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6074_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6074(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 552;
	operand.values[12] = tokenCoding6074_12;
	operand.values[13] = tokenCoding6074_13;
}
x64Token x64Parser::tokenBranches6067[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6068,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6074,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6055(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 543;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6056(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 544;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6057(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 545;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6060(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 547;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6061(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 548;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6062(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 549;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6075(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 553;
}
void x64Parser::TokenFunc6076(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 554;
}
void x64Parser::TokenFunc6077(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 555;
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6054[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6055,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6056,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6057,  },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6058 },
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6060,  },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc6061,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc6062,  },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6063 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6065 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6067 },
	{x64Token::REGISTER, 96, 1, 0, NULL,&x64Parser::TokenFunc6075,  },
	{x64Token::REGISTER, 97, 1, 0, NULL,&x64Parser::TokenFunc6076,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6077,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6086(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 556;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6087(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 557;
}
x64Token x64Parser::tokenBranches6085[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6086,  },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6087,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6089(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 558;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6090(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 559;
}
x64Token x64Parser::tokenBranches6088[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6089,  },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6090,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6104(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 560;
}
x64Token x64Parser::tokenBranches6103[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6104,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6116(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 562;
}
x64Token x64Parser::tokenBranches6115[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6116,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6102[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6103 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6115 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6101[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6102 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6100[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6101 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6110(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 561;
}
x64Token x64Parser::tokenBranches6109[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6110,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6122(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 563;
}
x64Token x64Parser::tokenBranches6121[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6122,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6132(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 565;
}
x64Token x64Parser::tokenBranches6131[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6132,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6108[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6109 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6121 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6131 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6107[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6108 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6126(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 564;
}
x64Token x64Parser::tokenBranches6125[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6126,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6107(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6106[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6107, x64Parser::tokenBranches6107 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6125 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6099[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6100 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6106 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6138(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 566;
}
x64Token x64Parser::tokenBranches6137[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6138,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6150(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 568;
}
x64Token x64Parser::tokenBranches6149[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6150,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6136[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6137 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6149 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6135[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6136 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6134[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6135 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6144(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 567;
}
x64Token x64Parser::tokenBranches6143[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6144,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6156(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 569;
}
x64Token x64Parser::tokenBranches6155[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6156,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6166(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 571;
}
x64Token x64Parser::tokenBranches6165[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6166,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6142[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6143 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6155 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6165 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6141[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6142 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6160(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 570;
}
x64Token x64Parser::tokenBranches6159[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6160,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6141(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6140[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6141, x64Parser::tokenBranches6141 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6159 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6133[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6134 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6140 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6172(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 572;
}
x64Token x64Parser::tokenBranches6171[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6172,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6184(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 574;
}
x64Token x64Parser::tokenBranches6183[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6184,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6170[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6171 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6183 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6169[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6170 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6168[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6169 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6178(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 573;
}
x64Token x64Parser::tokenBranches6177[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6178,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6190(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 575;
}
x64Token x64Parser::tokenBranches6189[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6190,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6200(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 577;
}
x64Token x64Parser::tokenBranches6199[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6200,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6176[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6177 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6189 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6199 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6175[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6176 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6194(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 576;
}
x64Token x64Parser::tokenBranches6193[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6194,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6175(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6174[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6175, x64Parser::tokenBranches6175 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6193 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6167[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6168 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6174 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6206(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 578;
}
x64Token x64Parser::tokenBranches6205[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6206,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6204[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6205 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6203[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6204 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6202[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6203 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6212(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 579;
}
x64Token x64Parser::tokenBranches6211[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6212,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6222(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 579;
}
x64Token x64Parser::tokenBranches6221[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6222,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6210[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6211 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6221 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6209[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6210 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6216(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 578;
}
x64Token x64Parser::tokenBranches6215[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6216,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6209(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6208[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6209, x64Parser::tokenBranches6209 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6215 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6201[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6202 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6208 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6098[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6099 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6133 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6167 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6201 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6227(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 580;
}
x64Token x64Parser::tokenBranches6226[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6227,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6266_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6266_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6266(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding6266_12;
	operand.values[13] = tokenCoding6266_13;
}
x64Token x64Parser::tokenBranches6265[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6266,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6276(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 581;
}
x64Token x64Parser::tokenBranches6275[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6288(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 583;
}
x64Token x64Parser::tokenBranches6287[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6288,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6274[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6275 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6287 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6273[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6274 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6272[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6273 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6282(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 582;
}
x64Token x64Parser::tokenBranches6281[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6282,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6294(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 584;
}
x64Token x64Parser::tokenBranches6293[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6294,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6304(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 586;
}
x64Token x64Parser::tokenBranches6303[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6304,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6280[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6281 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6293 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6303 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6279[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6280 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6298(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 585;
}
x64Token x64Parser::tokenBranches6297[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6298,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6279(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6278[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6279, x64Parser::tokenBranches6279 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6297 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6271[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6272 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6278 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6310(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 587;
}
x64Token x64Parser::tokenBranches6309[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6310,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6322(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 589;
}
x64Token x64Parser::tokenBranches6321[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6322,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6308[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6309 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6321 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6307[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6308 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6306[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6307 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6316(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 588;
}
x64Token x64Parser::tokenBranches6315[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6316,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6328(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 590;
}
x64Token x64Parser::tokenBranches6327[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6328,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6338(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 592;
}
x64Token x64Parser::tokenBranches6337[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6338,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6314[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6315 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6327 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6337 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6313[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6314 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6332(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 591;
}
x64Token x64Parser::tokenBranches6331[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6332,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6313(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6312[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6313, x64Parser::tokenBranches6313 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6331 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6305[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6306 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6312 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6344(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 593;
}
x64Token x64Parser::tokenBranches6343[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6344,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6356(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 595;
}
x64Token x64Parser::tokenBranches6355[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6356,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6342[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6343 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6355 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6341[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6342 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6340[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6341 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6350(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 594;
}
x64Token x64Parser::tokenBranches6349[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6350,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6362(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 596;
}
x64Token x64Parser::tokenBranches6361[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6362,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6372(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 598;
}
x64Token x64Parser::tokenBranches6371[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6372,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6348[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6349 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6361 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6371 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6347[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6348 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6366(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 597;
}
x64Token x64Parser::tokenBranches6365[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6366,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6347(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6346[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6347, x64Parser::tokenBranches6347 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6365 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6339[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6340 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6346 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6378(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 599;
}
x64Token x64Parser::tokenBranches6377[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6378,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6376[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6377 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6375[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6376 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6374[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6375 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6384(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 600;
}
x64Token x64Parser::tokenBranches6383[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6384,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6394(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 600;
}
x64Token x64Parser::tokenBranches6393[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6394,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6382[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6383 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6393 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6381[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6382 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6388(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 599;
}
x64Token x64Parser::tokenBranches6387[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6388,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6381(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6380[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6381, x64Parser::tokenBranches6381 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6387 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6373[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6374 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6380 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6270[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6271 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6305 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6339 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6373 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6399(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 601;
}
x64Token x64Parser::tokenBranches6398[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6399,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6401_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6401_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6401(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding6401_12;
	operand.values[13] = tokenCoding6401_13;
}
Coding x64Parser::tokenCoding6402_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6402_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6402(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding6402_12;
	operand.values[13] = tokenCoding6402_13;
}
x64Token x64Parser::tokenBranches6400[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6401,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6402,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6412(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 602;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6411[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6412,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6410[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6411 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6409[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6410 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6416(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 603;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6415[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6416,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6414[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6415 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6413[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6414 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6420(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 604;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6419[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6420,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6418[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6419 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6417[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6418 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6424(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 605;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6423[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6424,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6422[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6423 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6421[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6422 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6428_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6428_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6428_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6428_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6428(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6428_10;
	operand.values[11] = tokenCoding6428_11;
	operand.values[12] = tokenCoding6428_12;
	operand.values[13] = tokenCoding6428_13;
}
x64Token x64Parser::tokenBranches6427[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6428,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6426[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6427 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6425[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6426 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6432_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6432_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6432_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6432_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6432(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6432_10;
	operand.values[11] = tokenCoding6432_11;
	operand.values[12] = tokenCoding6432_12;
	operand.values[13] = tokenCoding6432_13;
}
x64Token x64Parser::tokenBranches6431[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6432,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6430[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6431 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6429[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6430 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6436_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6436_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6436_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6436_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6436(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6436_10;
	operand.values[11] = tokenCoding6436_11;
	operand.values[12] = tokenCoding6436_12;
	operand.values[13] = tokenCoding6436_13;
}
x64Token x64Parser::tokenBranches6435[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6436,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6434[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6435 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6433[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6434 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6440_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6440_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6440_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6440_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6440(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6440_10;
	operand.values[11] = tokenCoding6440_11;
	operand.values[12] = tokenCoding6440_12;
	operand.values[13] = tokenCoding6440_13;
}
x64Token x64Parser::tokenBranches6439[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6440,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6438[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6439 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6437[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6438 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6444_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6444_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6444_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6444_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6444(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6444_10;
	operand.values[11] = tokenCoding6444_11;
	operand.values[12] = tokenCoding6444_12;
	operand.values[13] = tokenCoding6444_13;
}
x64Token x64Parser::tokenBranches6443[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc6444,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6442[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6443 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6441[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6442 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6448_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6448_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6448_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6448_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6448(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6448_10;
	operand.values[11] = tokenCoding6448_11;
	operand.values[12] = tokenCoding6448_12;
	operand.values[13] = tokenCoding6448_13;
}
x64Token x64Parser::tokenBranches6447[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6448,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6446[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6447 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6445[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6446 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6452_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6452_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6452_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6452_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6452(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6452_10;
	operand.values[11] = tokenCoding6452_11;
	operand.values[12] = tokenCoding6452_12;
	operand.values[13] = tokenCoding6452_13;
}
x64Token x64Parser::tokenBranches6451[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6452,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6450[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6451 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6449[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6450 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6456_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6456_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6456_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6456_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6456(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6456_10;
	operand.values[11] = tokenCoding6456_11;
	operand.values[12] = tokenCoding6456_12;
	operand.values[13] = tokenCoding6456_13;
}
x64Token x64Parser::tokenBranches6455[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6456,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6454[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6455 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6453[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6454 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6459_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6459_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6459(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding6459_12;
	operand.values[13] = tokenCoding6459_13;
}
x64Token x64Parser::tokenBranches6458[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6459,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6457[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6458 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6462_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6462_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6462(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding6462_12;
	operand.values[13] = tokenCoding6462_13;
}
x64Token x64Parser::tokenBranches6461[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6462,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6460[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6461 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6465_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6465_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6465(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding6465_12;
	operand.values[13] = tokenCoding6465_13;
}
x64Token x64Parser::tokenBranches6464[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6465,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6463[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6464 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6468_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6468_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6468(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding6468_12;
	operand.values[13] = tokenCoding6468_13;
}
x64Token x64Parser::tokenBranches6467[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6468,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6466[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6467 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6472_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6472_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6472(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding6472_12;
	operand.values[13] = tokenCoding6472_13;
}
x64Token x64Parser::tokenBranches6471[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6472,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6470[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6471 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6469[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6470 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6476_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6476_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6476(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding6476_12;
	operand.values[13] = tokenCoding6476_13;
}
x64Token x64Parser::tokenBranches6475[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6476,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6474[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6475 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6473[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6474 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6480_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6480_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6480(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding6480_12;
	operand.values[13] = tokenCoding6480_13;
}
x64Token x64Parser::tokenBranches6479[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6480,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6478[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6479 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6477[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6478 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6484_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6484_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6484(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding6484_12;
	operand.values[13] = tokenCoding6484_13;
}
x64Token x64Parser::tokenBranches6483[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6484,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6482[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6483 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6481[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6482 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6441(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6445(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6449(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6453(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6408[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches6409 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6413 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6417 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6421 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6425 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6429 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6433 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6437 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc6441, x64Parser::tokenBranches6441 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc6445, x64Parser::tokenBranches6445 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc6449, x64Parser::tokenBranches6449 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc6453, x64Parser::tokenBranches6453 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6457 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches6460 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches6463 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches6466 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6469 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6473 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6477 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6481 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6487_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6487_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6487(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding6487_12;
	operand.values[13] = tokenCoding6487_13;
}
x64Token x64Parser::tokenBranches6486[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6487,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6489_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6489_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6489(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding6489_12;
	operand.values[13] = tokenCoding6489_13;
}
x64Token x64Parser::tokenBranches6488[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6489,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6497_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6497_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6497_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6497_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6497(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6497_10;
	operand.values[11] = tokenCoding6497_11;
	operand.values[12] = tokenCoding6497_12;
	operand.values[13] = tokenCoding6497_13;
}
x64Token x64Parser::tokenBranches6496[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6497,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6495[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6496 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6494[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6495 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6501_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6501_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6501_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6501_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6501(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6501_10;
	operand.values[11] = tokenCoding6501_11;
	operand.values[12] = tokenCoding6501_12;
	operand.values[13] = tokenCoding6501_13;
}
x64Token x64Parser::tokenBranches6500[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6501,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6499[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6500 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6498[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6499 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6505_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6505_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6505_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6505_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6505(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6505_10;
	operand.values[11] = tokenCoding6505_11;
	operand.values[12] = tokenCoding6505_12;
	operand.values[13] = tokenCoding6505_13;
}
x64Token x64Parser::tokenBranches6504[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6505,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6503[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6504 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6502[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6503 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6509_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6509_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6509_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6509_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6509(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6509_10;
	operand.values[11] = tokenCoding6509_11;
	operand.values[12] = tokenCoding6509_12;
	operand.values[13] = tokenCoding6509_13;
}
x64Token x64Parser::tokenBranches6508[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6509,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6507[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6508 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6506[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6507 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6493[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6494 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6498 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6502 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6506 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6514_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6514_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6514_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6514_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6514(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6514_10;
	operand.values[11] = tokenCoding6514_11;
	operand.values[12] = tokenCoding6514_12;
	operand.values[13] = tokenCoding6514_13;
}
x64Token x64Parser::tokenBranches6513[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6514,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6512[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6513 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6511[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6512 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6518_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6518_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6518_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6518_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6518(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6518_10;
	operand.values[11] = tokenCoding6518_11;
	operand.values[12] = tokenCoding6518_12;
	operand.values[13] = tokenCoding6518_13;
}
x64Token x64Parser::tokenBranches6517[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6518,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6516[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6517 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6515[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6516 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6511(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6515(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6510[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc6511, x64Parser::tokenBranches6511 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc6515, x64Parser::tokenBranches6515 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6522(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 606;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6521[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6522,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6520[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6521 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6525(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 607;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6524[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6525,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6523[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6524 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6528(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 608;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6527[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6528,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6526[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6527 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6545_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6545_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6545_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6545_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6545(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6545_10;
	operand.values[11] = tokenCoding6545_11;
	operand.values[12] = tokenCoding6545_12;
	operand.values[13] = tokenCoding6545_13;
}
x64Token x64Parser::tokenBranches6544[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6545,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6531(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 606;
}
x64Token x64Parser::tokenBranches6530[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc6531,  },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6544 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6529[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6530 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6549_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6549_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6549_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6549_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6549(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6549_10;
	operand.values[11] = tokenCoding6549_11;
	operand.values[12] = tokenCoding6549_12;
	operand.values[13] = tokenCoding6549_13;
}
x64Token x64Parser::tokenBranches6548[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6549,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6534(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 607;
}
x64Token x64Parser::tokenBranches6533[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc6534,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6548 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6532[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6533 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6553_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6553_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6553_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6553_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6553(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6553_10;
	operand.values[11] = tokenCoding6553_11;
	operand.values[12] = tokenCoding6553_12;
	operand.values[13] = tokenCoding6553_13;
}
x64Token x64Parser::tokenBranches6552[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6553,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6537(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 608;
}
x64Token x64Parser::tokenBranches6536[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc6537,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6552 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6535[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6536 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6541_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6541_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6541_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6541_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6541(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6541_10;
	operand.values[11] = tokenCoding6541_11;
	operand.values[12] = tokenCoding6541_12;
	operand.values[13] = tokenCoding6541_13;
}
x64Token x64Parser::tokenBranches6540[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc6541,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6539[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6540 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6538[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6539 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6557_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6557_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6557_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6557_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6557(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6557_10;
	operand.values[11] = tokenCoding6557_11;
	operand.values[12] = tokenCoding6557_12;
	operand.values[13] = tokenCoding6557_13;
}
x64Token x64Parser::tokenBranches6556[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6557,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6555[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6556 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6554[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6555 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6561_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6561_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6561_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6561_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6561(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6561_10;
	operand.values[11] = tokenCoding6561_11;
	operand.values[12] = tokenCoding6561_12;
	operand.values[13] = tokenCoding6561_13;
}
x64Token x64Parser::tokenBranches6560[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6561,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6559[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6560 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6558[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6559 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6565_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6565_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6565_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6565_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6565(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6565_10;
	operand.values[11] = tokenCoding6565_11;
	operand.values[12] = tokenCoding6565_12;
	operand.values[13] = tokenCoding6565_13;
}
x64Token x64Parser::tokenBranches6564[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6565,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6563[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6564 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6569_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6569_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6569_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6569_13[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6569(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6569_10;
	operand.values[11] = tokenCoding6569_11;
	operand.values[12] = tokenCoding6569_12;
	operand.values[13] = tokenCoding6569_13;
}
x64Token x64Parser::tokenBranches6568[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6569,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6567[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6568 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6562[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6563 },
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6567 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6529(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6532(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6535(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6538(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6519[] = {
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6520 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6523 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6526 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc6529, x64Parser::tokenBranches6529 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc6532, x64Parser::tokenBranches6532 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc6535, x64Parser::tokenBranches6535 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc6538, x64Parser::tokenBranches6538 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6554 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6558 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6562 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6576(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 609;
}
x64Token x64Parser::tokenBranches6575[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6576,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6588(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 611;
}
x64Token x64Parser::tokenBranches6587[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6588,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6600(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 613;
}
x64Token x64Parser::tokenBranches6599[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6600,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6574[] = {
	{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches6575 },
	{x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches6587 },
	{x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches6599 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6573[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6574 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6582(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 610;
}
x64Token x64Parser::tokenBranches6581[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6582,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6594(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 612;
}
x64Token x64Parser::tokenBranches6593[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6594,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6606(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 614;
}
x64Token x64Parser::tokenBranches6605[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6606,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6580[] = {
	{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches6581 },
	{x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches6593 },
	{x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches6605 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6579[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6580 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6579(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6572[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6573 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6579, x64Parser::tokenBranches6579 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6571[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6572 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6607(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 615;
}
x64Token x64Parser::tokenBranches6570[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6571 },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6607,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6611_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6611_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6611_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6611_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6611(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6611_10;
	operand.values[11] = tokenCoding6611_11;
	operand.values[12] = tokenCoding6611_12;
	operand.values[13] = tokenCoding6611_13;
}
x64Token x64Parser::tokenBranches6610[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6611,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6613_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6613_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6613_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6613_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6613(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6613_10;
	operand.values[11] = tokenCoding6613_11;
	operand.values[12] = tokenCoding6613_12;
	operand.values[13] = tokenCoding6613_13;
}
x64Token x64Parser::tokenBranches6612[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6613,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6615_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6615_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6615_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6615_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6615(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6615_10;
	operand.values[11] = tokenCoding6615_11;
	operand.values[12] = tokenCoding6615_12;
	operand.values[13] = tokenCoding6615_13;
}
x64Token x64Parser::tokenBranches6614[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6615,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6617_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6617_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6617_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6617_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6617(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6617_10;
	operand.values[11] = tokenCoding6617_11;
	operand.values[12] = tokenCoding6617_12;
	operand.values[13] = tokenCoding6617_13;
}
x64Token x64Parser::tokenBranches6616[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6617,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6668_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6668_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6668_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6668_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6668_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6668(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6668_10;
	operand.values[11] = tokenCoding6668_11;
	operand.values[19] = tokenCoding6668_19;
	operand.values[12] = tokenCoding6668_12;
	operand.values[13] = tokenCoding6668_13;
}
x64Token x64Parser::tokenBranches6667[] = {
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6668,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6666[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6667 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6665[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6666 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6672_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6672_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6672_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6672_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6672_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6672(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6672_10;
	operand.values[11] = tokenCoding6672_11;
	operand.values[19] = tokenCoding6672_19;
	operand.values[12] = tokenCoding6672_12;
	operand.values[13] = tokenCoding6672_13;
}
x64Token x64Parser::tokenBranches6671[] = {
	{x64Token::REGISTERCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6672,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6670[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6671 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6669[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6670 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6689_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6689_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6689_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6689_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6689_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6689(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6689_10;
	operand.values[11] = tokenCoding6689_11;
	operand.values[19] = tokenCoding6689_19;
	operand.values[12] = tokenCoding6689_12;
	operand.values[13] = tokenCoding6689_13;
}
x64Token x64Parser::tokenBranches6688[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6689,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6687[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6688 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6692_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6692_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6692_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6692_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6692_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6692(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6692_10;
	operand.values[11] = tokenCoding6692_11;
	operand.values[19] = tokenCoding6692_19;
	operand.values[12] = tokenCoding6692_12;
	operand.values[13] = tokenCoding6692_13;
}
x64Token x64Parser::tokenBranches6691[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6692,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6690[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6691 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6695_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6695_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6695_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6695_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6695_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6695(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6695_10;
	operand.values[11] = tokenCoding6695_11;
	operand.values[19] = tokenCoding6695_19;
	operand.values[12] = tokenCoding6695_12;
	operand.values[13] = tokenCoding6695_13;
}
Coding x64Parser::tokenCoding6698_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6698_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6698_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6698_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6698_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6698(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6698_10;
	operand.values[11] = tokenCoding6698_11;
	operand.values[19] = tokenCoding6698_19;
	operand.values[12] = tokenCoding6698_12;
	operand.values[13] = tokenCoding6698_13;
}
x64Token x64Parser::tokenBranches6694[] = {
	{x64Token::REGISTERCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6695,  },
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6698,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6693[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6694 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6687(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6690(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6686[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, NULL,&x64Parser::TokenFunc6687, x64Parser::tokenBranches6687 },
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6690, x64Parser::tokenBranches6690 },
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6693 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6702_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6702_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6702_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6702_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6702_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6702(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6702_10;
	operand.values[11] = tokenCoding6702_11;
	operand.values[19] = tokenCoding6702_19;
	operand.values[12] = tokenCoding6702_12;
	operand.values[13] = tokenCoding6702_13;
}
x64Token x64Parser::tokenBranches6701[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6702,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6700[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6701 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6705_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6705_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6705_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6705_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6705_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6705(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6705_10;
	operand.values[11] = tokenCoding6705_11;
	operand.values[19] = tokenCoding6705_19;
	operand.values[12] = tokenCoding6705_12;
	operand.values[13] = tokenCoding6705_13;
}
x64Token x64Parser::tokenBranches6704[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6705,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6703[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6704 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6708_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6708_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6708_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6708_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6708_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6708(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6708_10;
	operand.values[11] = tokenCoding6708_11;
	operand.values[19] = tokenCoding6708_19;
	operand.values[12] = tokenCoding6708_12;
	operand.values[13] = tokenCoding6708_13;
}
Coding x64Parser::tokenCoding6711_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6711_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6711_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6711_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6711_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6711(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6711_10;
	operand.values[11] = tokenCoding6711_11;
	operand.values[19] = tokenCoding6711_19;
	operand.values[12] = tokenCoding6711_12;
	operand.values[13] = tokenCoding6711_13;
}
x64Token x64Parser::tokenBranches6707[] = {
	{x64Token::REGISTERCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6708,  },
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6711,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6706[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6707 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6700(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6703(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6699[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, NULL,&x64Parser::TokenFunc6700, x64Parser::tokenBranches6700 },
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6703, x64Parser::tokenBranches6703 },
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6706 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6719_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6719_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6719_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6719_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6719_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6719(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::reg;
	operand.values[15]->val = inputTokens[tokenPos]->val->ival;
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operand.values[10] = tokenCoding6719_10;
	operand.values[11] = tokenCoding6719_11;
	operand.values[19] = tokenCoding6719_19;
	operand.values[12] = tokenCoding6719_12;
	operand.values[13] = tokenCoding6719_13;
}
x64Token x64Parser::tokenBranches6718[] = {
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6719,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6717[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6718 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6717(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6716[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6717, x64Parser::tokenBranches6717 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6725_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6725_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6725_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6725_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6725_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6725(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::reg;
	operand.values[15]->val = inputTokens[tokenPos]->val->ival;
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operand.values[10] = tokenCoding6725_10;
	operand.values[11] = tokenCoding6725_11;
	operand.values[19] = tokenCoding6725_19;
	operand.values[12] = tokenCoding6725_12;
	operand.values[13] = tokenCoding6725_13;
}
x64Token x64Parser::tokenBranches6724[] = {
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6725,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6723[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6724 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6723(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6722[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6723, x64Parser::tokenBranches6723 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6733_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6733_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6733_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6733_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6733_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6733(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6733_10;
	operand.values[11] = tokenCoding6733_11;
	operand.values[19] = tokenCoding6733_19;
	operand.values[12] = tokenCoding6733_12;
	operand.values[13] = tokenCoding6733_13;
}
x64Token x64Parser::tokenBranches6732[] = {
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6733,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6731[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6732 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6730[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6731 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6737_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6737_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6737_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6737(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6737_10;
	operand.values[11] = tokenCoding6737_11;
	operand.values[12] = tokenCoding6737_12;
}
Coding x64Parser::tokenCoding6740_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6740_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6740_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6740(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6740_10;
	operand.values[11] = tokenCoding6740_11;
	operand.values[12] = tokenCoding6740_12;
}
x64Token x64Parser::tokenBranches6736[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6737,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6740,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6735[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6736 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6734[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6735 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6744_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6744_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6744_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6744_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6744_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6744(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6744_10;
	operand.values[11] = tokenCoding6744_11;
	operand.values[19] = tokenCoding6744_19;
	operand.values[12] = tokenCoding6744_12;
	operand.values[13] = tokenCoding6744_13;
}
x64Token x64Parser::tokenBranches6743[] = {
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6744,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6742[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6743 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6741[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6742 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6748_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6748_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6748_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6748_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6748_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6748(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6748_10;
	operand.values[11] = tokenCoding6748_11;
	operand.values[19] = tokenCoding6748_19;
	operand.values[12] = tokenCoding6748_12;
	operand.values[13] = tokenCoding6748_13;
}
x64Token x64Parser::tokenBranches6747[] = {
	{x64Token::REGISTERCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6748,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6746[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6747 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6745[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6746 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6752_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6752_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6752_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6752_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6752_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6752(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6752_10;
	operand.values[11] = tokenCoding6752_11;
	operand.values[19] = tokenCoding6752_19;
	operand.values[12] = tokenCoding6752_12;
	operand.values[13] = tokenCoding6752_13;
}
x64Token x64Parser::tokenBranches6751[] = {
	{x64Token::REGISTERCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6752,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6750[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6751 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6749[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6750 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6756_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6756_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6756_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6756_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6756_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6756(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6756_10;
	operand.values[11] = tokenCoding6756_11;
	operand.values[19] = tokenCoding6756_19;
	operand.values[12] = tokenCoding6756_12;
	operand.values[13] = tokenCoding6756_13;
}
x64Token x64Parser::tokenBranches6755[] = {
	{x64Token::REGISTERCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6756,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6754[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6755 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6754(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6753[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6754, x64Parser::tokenBranches6754 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6784_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6784_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6784_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6784_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6784(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6784_10;
	operand.values[11] = tokenCoding6784_11;
	operand.values[19] = tokenCoding6784_19;
	operand.values[12] = tokenCoding6784_12;
}
x64Token x64Parser::tokenBranches6783[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6784,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6782[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6783 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6781[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6782 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6780[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6781 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6789_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6789_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6789_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6789_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6789(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6789_10;
	operand.values[11] = tokenCoding6789_11;
	operand.values[19] = tokenCoding6789_19;
	operand.values[12] = tokenCoding6789_12;
}
x64Token x64Parser::tokenBranches6788[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6789,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6787[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6788 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6786[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6787 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6785[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6786 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6780(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6785(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6779[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6780, x64Parser::tokenBranches6780 },
	{x64Token::REGISTERCLASS, 16, 0, 0, NULL,&x64Parser::TokenFunc6785, x64Parser::tokenBranches6785 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6810_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6810_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6810_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6810_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6810(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6810_10;
	operand.values[11] = tokenCoding6810_11;
	operand.values[19] = tokenCoding6810_19;
	operand.values[12] = tokenCoding6810_12;
}
x64Token x64Parser::tokenBranches6809[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6810,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6808[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6809 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6808(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6807[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6808, x64Parser::tokenBranches6808 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6806[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6807 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6805[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6806 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6816_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6816_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6816_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6816_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6816(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6816_10;
	operand.values[11] = tokenCoding6816_11;
	operand.values[19] = tokenCoding6816_19;
	operand.values[12] = tokenCoding6816_12;
}
x64Token x64Parser::tokenBranches6815[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6816,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6814[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6815 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6814(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6813[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6814, x64Parser::tokenBranches6814 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6812[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6813 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6811[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6812 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6822_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6822_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6822_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6822_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6822(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6822_10;
	operand.values[11] = tokenCoding6822_11;
	operand.values[19] = tokenCoding6822_19;
	operand.values[12] = tokenCoding6822_12;
}
x64Token x64Parser::tokenBranches6821[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6822,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6820[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6821 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6820(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6819[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6820, x64Parser::tokenBranches6820 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6818[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6819 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6817[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6818 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6828_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6828_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6828_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6828_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6828(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6828_10;
	operand.values[11] = tokenCoding6828_11;
	operand.values[19] = tokenCoding6828_19;
	operand.values[12] = tokenCoding6828_12;
}
x64Token x64Parser::tokenBranches6827[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6828,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6826[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6827 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6833_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6833_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6833_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6833_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6833(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6833_10;
	operand.values[11] = tokenCoding6833_11;
	operand.values[19] = tokenCoding6833_19;
	operand.values[12] = tokenCoding6833_12;
}
x64Token x64Parser::tokenBranches6832[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6833,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6831[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6832 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6825[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6826 },
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6831 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6824[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6825 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6838_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6838_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6838_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6838_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6838(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6838_10;
	operand.values[11] = tokenCoding6838_11;
	operand.values[19] = tokenCoding6838_19;
	operand.values[12] = tokenCoding6838_12;
}
x64Token x64Parser::tokenBranches6837[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6838,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6836[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6837 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6843_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6843_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6843_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6843_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6843(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6843_10;
	operand.values[11] = tokenCoding6843_11;
	operand.values[19] = tokenCoding6843_19;
	operand.values[12] = tokenCoding6843_12;
}
x64Token x64Parser::tokenBranches6842[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6843,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6841[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6842 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6835[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6836 },
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6841 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6834[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6835 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6824(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6834(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6823[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc6824, x64Parser::tokenBranches6824 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc6834, x64Parser::tokenBranches6834 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6849_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6849_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6849_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6849_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6849(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6849_10;
	operand.values[11] = tokenCoding6849_11;
	operand.values[19] = tokenCoding6849_19;
	operand.values[12] = tokenCoding6849_12;
}
x64Token x64Parser::tokenBranches6848[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6849,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6847[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6848 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6846[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6847 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6845[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6846 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6845(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6844[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6845, x64Parser::tokenBranches6845 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6855_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6855_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6855_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6855_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6855(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6855_10;
	operand.values[11] = tokenCoding6855_11;
	operand.values[19] = tokenCoding6855_19;
	operand.values[12] = tokenCoding6855_12;
}
x64Token x64Parser::tokenBranches6854[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6855,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6853[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6854 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6852[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6853 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6851[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6852 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6851(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6850[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6851, x64Parser::tokenBranches6851 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6861_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6861_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6861_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6861_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6861(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6861_10;
	operand.values[11] = tokenCoding6861_11;
	operand.values[19] = tokenCoding6861_19;
	operand.values[12] = tokenCoding6861_12;
}
x64Token x64Parser::tokenBranches6860[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6861,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6859[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6860 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6858[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6859 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6857[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6858 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6857(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6856[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6857, x64Parser::tokenBranches6857 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6867_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6867_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6867_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6867_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6867(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6867_10;
	operand.values[11] = tokenCoding6867_11;
	operand.values[19] = tokenCoding6867_19;
	operand.values[12] = tokenCoding6867_12;
}
x64Token x64Parser::tokenBranches6866[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6867,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6865[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6866 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6864[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6865 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6863[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6864 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6872_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6872_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6872_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6872_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6872(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6872_10;
	operand.values[11] = tokenCoding6872_11;
	operand.values[19] = tokenCoding6872_19;
	operand.values[12] = tokenCoding6872_12;
}
x64Token x64Parser::tokenBranches6871[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6872,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6870[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6871 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6869[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6870 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6868[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6869 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6863(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6868(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6862[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6863, x64Parser::tokenBranches6863 },
	{x64Token::REGISTERCLASS, 16, 0, 0, NULL,&x64Parser::TokenFunc6868, x64Parser::tokenBranches6868 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6881_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6881_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6881_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6881_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6881(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6881_10;
	operand.values[11] = tokenCoding6881_11;
	operand.values[19] = tokenCoding6881_19;
	operand.values[12] = tokenCoding6881_12;
}
Coding x64Parser::tokenCoding6887_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6887_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6887_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6887_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6887(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6887_10;
	operand.values[11] = tokenCoding6887_11;
	operand.values[19] = tokenCoding6887_19;
	operand.values[12] = tokenCoding6887_12;
}
x64Token x64Parser::tokenBranches6880[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6881,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6887,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6879[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6880 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6884_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6884_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6884_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6884_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6884(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6884_10;
	operand.values[11] = tokenCoding6884_11;
	operand.values[19] = tokenCoding6884_19;
	operand.values[12] = tokenCoding6884_12;
}
Coding x64Parser::tokenCoding6890_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6890_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6890_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6890_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6890(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6890_10;
	operand.values[11] = tokenCoding6890_11;
	operand.values[19] = tokenCoding6890_19;
	operand.values[12] = tokenCoding6890_12;
}
x64Token x64Parser::tokenBranches6883[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6884,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6890,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6882[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6883 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6879(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6882(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6878[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc6879, x64Parser::tokenBranches6879 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc6882, x64Parser::tokenBranches6882 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6904_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6904_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6904_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6904(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6904_10;
	operand.values[11] = tokenCoding6904_11;
	operand.values[12] = tokenCoding6904_12;
}
x64Token x64Parser::tokenBranches6903[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6904,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6902[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6903 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6901[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6902 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6900[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6901 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6900(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6899[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, NULL,&x64Parser::TokenFunc6900, x64Parser::tokenBranches6900 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6909_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6909(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding6909_12;
}
x64Token x64Parser::tokenBranches6908[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6909,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6907[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6908 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6907(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6906[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6907, x64Parser::tokenBranches6907 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6918_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6918(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding6918_12;
}
x64Token x64Parser::tokenBranches6917[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6918,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6916[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6917 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6916(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6915[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6916, x64Parser::tokenBranches6916 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6948_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6948_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6948_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6948(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6948_10;
	operand.values[11] = tokenCoding6948_11;
	operand.values[12] = tokenCoding6948_12;
}
x64Token x64Parser::tokenBranches6947[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6948,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6946[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6947 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6945[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6946 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6944[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6945 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6944(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6943[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6944, x64Parser::tokenBranches6944 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6954_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6954_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 4, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6954_12[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6954(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6954_10;
	operand.values[11] = tokenCoding6954_11;
	operand.values[12] = tokenCoding6954_12;
}
x64Token x64Parser::tokenBranches6953[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6954,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6952[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6953 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6951[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6952 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6950[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6951 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6950(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6949[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, NULL,&x64Parser::TokenFunc6950, x64Parser::tokenBranches6950 },
	{x64Token::EOT }
};
bool x64Parser::Opcode0(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3563, operand);
	return rv;
}
bool x64Parser::Opcode1(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3565, operand);
	return rv;
}
bool x64Parser::Opcode2(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3567, operand);
	return rv;
}
bool x64Parser::Opcode3(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3580, operand);
	return rv;
}
bool x64Parser::Opcode4(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3593, operand);
	return rv;
}
bool x64Parser::Opcode5(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3701, operand);
	return rv;
}
bool x64Parser::Opcode6(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3729, operand);
	return rv;
}
bool x64Parser::Opcode7(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3739, operand);
	return rv;
}
bool x64Parser::Opcode8(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3752, operand);
	return rv;
}
bool x64Parser::Opcode9(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3764, operand);
	return rv;
}
bool x64Parser::Opcode10(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3770, operand);
	return rv;
}
bool x64Parser::Opcode11(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3775, operand);
	return rv;
}
bool x64Parser::Opcode12(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3778, operand);
	return rv;
}
bool x64Parser::Opcode13(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3787, operand);
	return rv;
}
bool x64Parser::Opcode14(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3800, operand);
	return rv;
}
bool x64Parser::Opcode15(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3803, operand);
	return rv;
}
bool x64Parser::Opcode16(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3846, operand);
	return rv;
}
bool x64Parser::Opcode17(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3941, operand);
	return rv;
}
bool x64Parser::Opcode18(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3978, operand);
	return rv;
}
bool x64Parser::Opcode19(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3980, operand);
	return rv;
}
bool x64Parser::Opcode20(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3984, operand);
	return rv;
}
bool x64Parser::Opcode21(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3991, operand);
	return rv;
}
bool x64Parser::Opcode22(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3998, operand);
	return rv;
}
bool x64Parser::Opcode23(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4005, operand);
	return rv;
}
bool x64Parser::Opcode24(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4009, operand);
	return rv;
}
bool x64Parser::Opcode25(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4013, operand);
	return rv;
}
bool x64Parser::Opcode26(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4020, operand);
	return rv;
}
bool x64Parser::Opcode27(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4029, operand);
	return rv;
}
bool x64Parser::Opcode28(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4036, operand);
	return rv;
}
bool x64Parser::Opcode29(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4042, operand);
	return rv;
}
bool x64Parser::Opcode30(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4055, operand);
	return rv;
}
bool x64Parser::Opcode31(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4061, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings32_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 55, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode32(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings32_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings33_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 213, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode33(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings33_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings34_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode34(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings34_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings35_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 63, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode35(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings35_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings36_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings36_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings36_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 16, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode36(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings36_12;
	operand.values[30] = OpcodeCodings36_30;
	operand.values[31] = OpcodeCodings36_31;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings37_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings37_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings37_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode37(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings37_12;
	operand.values[30] = OpcodeCodings37_30;
	operand.values[31] = OpcodeCodings37_31;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings38_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings38_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings38_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 32, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode38(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings38_12;
	operand.values[30] = OpcodeCodings38_30;
	operand.values[31] = OpcodeCodings38_31;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode39(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4074, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings40_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode40(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings40_30;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings41_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 188, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode41(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings41_30;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings42_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 189, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode42(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings42_30;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
bool x64Parser::Opcode43(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4081, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings44_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings44_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings44_31[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode44(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings44_12;
	operand.values[30] = OpcodeCodings44_30;
	operand.values[31] = OpcodeCodings44_31;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings45_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings45_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings45_31[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 187, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode45(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings45_12;
	operand.values[30] = OpcodeCodings45_30;
	operand.values[31] = OpcodeCodings45_31;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings46_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings46_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings46_31[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 179, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode46(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings46_12;
	operand.values[30] = OpcodeCodings46_30;
	operand.values[31] = OpcodeCodings46_31;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings47_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings47_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings47_31[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode47(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings47_12;
	operand.values[30] = OpcodeCodings47_30;
	operand.values[31] = OpcodeCodings47_31;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
bool x64Parser::Opcode48(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4088, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings49_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode49(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings49_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings50_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode50(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings50_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode51(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4118, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings52_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode52(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings52_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings53_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode53(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings53_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings54_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode54(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings54_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings55_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode55(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings55_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings56_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 245, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode56(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings56_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings57_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode57(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings57_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings58_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode58(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings58_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings59_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode59(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings59_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings60_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode60(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings60_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings61_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode61(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings61_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings62_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode62(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings62_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings63_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode63(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings63_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings64_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode64(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings64_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings65_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode65(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings65_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings66_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode66(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings66_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings67_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode67(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings67_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings68_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode68(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings68_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings69_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode69(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings69_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings70_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode70(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings70_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings71_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode71(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings71_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings72_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode72(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings72_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings73_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode73(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings73_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings74_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode74(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings74_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings75_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode75(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings75_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings76_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode76(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings76_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings77_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode77(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings77_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings78_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode78(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings78_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings79_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode79(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings79_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings80_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode80(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings80_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings81_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode81(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings81_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings82_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode82(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings82_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings83_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode83(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings83_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings84_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode84(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings84_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings85_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode85(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings85_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings86_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode86(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings86_32;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings87_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings87_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 60, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings87_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 56, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode87(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings87_12;
	operand.values[30] = OpcodeCodings87_30;
	operand.values[31] = OpcodeCodings87_31;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode88(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4156, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings89_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode89(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings89_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings90_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode90(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings90_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings91_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode91(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings91_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode92(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4424, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings93_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 176, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode93(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings93_13;
	bool rv = ParseOperands(tokenBranches4426, operand);
	return rv;
}
bool x64Parser::Opcode94(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4443, operand);
	return rv;
}
bool x64Parser::Opcode95(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4445, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings96_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode96(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings96_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode97(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4448, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings98_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode98(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings98_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings99_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode99(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings99_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings100_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 39, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode100(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings100_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings101_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 47, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode101(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings101_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings102_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings102_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode102(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings102_12;
	operand.values[13] = OpcodeCodings102_13;
	bool rv;
	{
		rv = Opcode6(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings103_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode103(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings103_12;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
bool x64Parser::Opcode104(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4456, operand);
	return rv;
}
bool x64Parser::Opcode105(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4462, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings106_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode106(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings106_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings107_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode107(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings107_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings108_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings108_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings108_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode108(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings108_12;
	operand.values[33] = OpcodeCodings108_33;
	operand.values[30] = OpcodeCodings108_30;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings109_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings109_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode109(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings109_12;
	operand.values[13] = OpcodeCodings109_13;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings110_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings110_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode110(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings110_12;
	operand.values[13] = OpcodeCodings110_13;
	bool rv;
	{
		rv = Opcode11(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings111_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings111_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode111(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings111_12;
	operand.values[13] = OpcodeCodings111_13;
	bool rv;
	{
		rv = Opcode11(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings112_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode112(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings112_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings113_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode113(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings113_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings114_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode114(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings114_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings115_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings115_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode115(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings115_12;
	operand.values[30] = OpcodeCodings115_30;
	bool rv = ParseOperands(tokenBranches4475, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings116_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings116_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode116(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings116_12;
	operand.values[30] = OpcodeCodings116_30;
	bool rv = ParseOperands(tokenBranches4479, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings117_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings117_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode117(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings117_12;
	operand.values[30] = OpcodeCodings117_30;
	bool rv = ParseOperands(tokenBranches4483, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings118_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings118_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode118(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings118_12;
	operand.values[30] = OpcodeCodings118_30;
	bool rv = ParseOperands(tokenBranches4487, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings119_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings119_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode119(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings119_12;
	operand.values[30] = OpcodeCodings119_30;
	bool rv = ParseOperands(tokenBranches4491, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings120_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings120_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode120(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings120_12;
	operand.values[30] = OpcodeCodings120_30;
	bool rv = ParseOperands(tokenBranches4495, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings121_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings121_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode121(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings121_12;
	operand.values[30] = OpcodeCodings121_30;
	bool rv = ParseOperands(tokenBranches4499, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings122_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings122_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode122(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings122_12;
	operand.values[30] = OpcodeCodings122_30;
	bool rv = ParseOperands(tokenBranches4503, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings123_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings123_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode123(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings123_12;
	operand.values[30] = OpcodeCodings123_30;
	bool rv = ParseOperands(tokenBranches4507, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings124_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings124_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode124(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings124_12;
	operand.values[30] = OpcodeCodings124_30;
	bool rv = ParseOperands(tokenBranches4516, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings125_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings125_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode125(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings125_12;
	operand.values[30] = OpcodeCodings125_30;
	bool rv = ParseOperands(tokenBranches4520, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings126_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings126_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode126(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings126_12;
	operand.values[30] = OpcodeCodings126_30;
	bool rv = ParseOperands(tokenBranches4524, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings127_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings127_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode127(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings127_12;
	operand.values[30] = OpcodeCodings127_30;
	bool rv = ParseOperands(tokenBranches4528, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings128_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings128_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode128(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings128_12;
	operand.values[30] = OpcodeCodings128_30;
	bool rv = ParseOperands(tokenBranches4534, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings129_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings129_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode129(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings129_12;
	operand.values[30] = OpcodeCodings129_30;
	bool rv = ParseOperands(tokenBranches4538, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings130_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode130(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings130_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings131_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode131(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings131_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings132_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode132(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings132_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings133_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode133(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings133_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings134_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings134_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings134_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode134(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings134_12;
	operand.values[33] = OpcodeCodings134_33;
	operand.values[30] = OpcodeCodings134_30;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings135_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings135_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode135(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings135_12;
	operand.values[13] = OpcodeCodings135_13;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings136_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings136_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings136_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode136(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings136_12;
	operand.values[33] = OpcodeCodings136_33;
	operand.values[30] = OpcodeCodings136_30;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings137_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings137_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode137(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings137_12;
	operand.values[13] = OpcodeCodings137_13;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings138_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode138(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings138_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode139(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4551, operand);
	return rv;
}
bool x64Parser::Opcode140(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4553, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings141_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings141_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode141(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings141_12;
	operand.values[30] = OpcodeCodings141_30;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings142_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings142_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode142(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings142_12;
	operand.values[30] = OpcodeCodings142_30;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings143_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings143_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode143(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings143_12;
	operand.values[30] = OpcodeCodings143_30;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings144_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings144_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode144(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings144_12;
	operand.values[30] = OpcodeCodings144_30;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings145_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings145_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode145(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings145_12;
	operand.values[30] = OpcodeCodings145_30;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings146_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings146_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode146(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings146_12;
	operand.values[30] = OpcodeCodings146_30;
	bool rv = ParseOperands(tokenBranches4560, operand);
	if (!rv)
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings147_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings147_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode147(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings147_12;
	operand.values[30] = OpcodeCodings147_30;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings148_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode148(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings148_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings149_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode149(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings149_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings150_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode150(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings150_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings151_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings151_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode151(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings151_12;
	operand.values[30] = OpcodeCodings151_30;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings152_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings152_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode152(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings152_12;
	operand.values[30] = OpcodeCodings152_30;
	bool rv = ParseOperands(tokenBranches4568, operand);
	if (!rv)
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings153_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings153_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode153(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings153_12;
	operand.values[30] = OpcodeCodings153_30;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings154_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings154_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode154(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings154_12;
	operand.values[30] = OpcodeCodings154_30;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
bool x64Parser::Opcode155(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4573, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings156_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode156(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings156_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode157(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4582, operand);
	return rv;
}
bool x64Parser::Opcode158(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4585, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings159_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode159(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings159_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings160_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode160(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings160_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings161_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode161(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings161_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings162_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode162(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings162_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings163_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode163(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings163_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings164_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode164(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings164_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings165_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings165_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings165_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode165(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings165_12;
	operand.values[33] = OpcodeCodings165_33;
	operand.values[30] = OpcodeCodings165_30;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings166_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings166_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode166(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings166_12;
	operand.values[13] = OpcodeCodings166_13;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings167_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode167(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings167_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode168(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4596, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings169_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode169(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings169_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings170_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode170(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings170_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings171_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 245, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode171(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings171_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings172_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode172(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings172_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings173_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode173(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings173_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode174(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4603, operand);
	return rv;
}
bool x64Parser::Opcode175(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4605, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings176_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode176(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings176_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings177_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode177(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings177_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings178_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode178(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings178_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings179_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode179(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings179_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings180_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode180(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings180_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode181(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4612, operand);
	return rv;
}
bool x64Parser::Opcode182(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4618, operand);
	return rv;
}
bool x64Parser::Opcode183(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4621, operand);
	return rv;
}
bool x64Parser::Opcode184(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4624, operand);
	return rv;
}
bool x64Parser::Opcode185(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4626, operand);
	return rv;
}
bool x64Parser::Opcode186(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4628, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings187_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings187_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode187(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings187_12;
	operand.values[30] = OpcodeCodings187_30;
	bool rv = ParseOperands(tokenBranches4636, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings188_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings188_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode188(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings188_12;
	operand.values[30] = OpcodeCodings188_30;
	bool rv = ParseOperands(tokenBranches4640, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings189_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings189_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode189(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings189_12;
	operand.values[30] = OpcodeCodings189_30;
	bool rv = ParseOperands(tokenBranches4644, operand);
	return rv;
}
bool x64Parser::Opcode190(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4648, operand);
	return rv;
}
bool x64Parser::Opcode191(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4652, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings192_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings192_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings192_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode192(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings192_12;
	operand.values[33] = OpcodeCodings192_33;
	operand.values[30] = OpcodeCodings192_30;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings193_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings193_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode193(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings193_12;
	operand.values[13] = OpcodeCodings193_13;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings194_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings194_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings194_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode194(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings194_12;
	operand.values[33] = OpcodeCodings194_33;
	operand.values[30] = OpcodeCodings194_30;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings195_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings195_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode195(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings195_12;
	operand.values[13] = OpcodeCodings195_13;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings196_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode196(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings196_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings197_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings197_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode197(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings197_12;
	operand.values[13] = OpcodeCodings197_13;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings198_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings198_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode198(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings198_12;
	operand.values[30] = OpcodeCodings198_30;
	bool rv = ParseOperands(tokenBranches4662, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings199_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings199_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode199(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings199_12;
	operand.values[30] = OpcodeCodings199_30;
	bool rv = ParseOperands(tokenBranches4666, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings200_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings200_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode200(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings200_12;
	operand.values[13] = OpcodeCodings200_13;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings201_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode201(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings201_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings202_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode202(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings202_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings203_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode203(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings203_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings204_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings204_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode204(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings204_12;
	operand.values[13] = OpcodeCodings204_13;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings205_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings205_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode205(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings205_12;
	operand.values[30] = OpcodeCodings205_30;
	bool rv = ParseOperands(tokenBranches4675, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings206_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings206_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode206(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings206_12;
	operand.values[30] = OpcodeCodings206_30;
	bool rv = ParseOperands(tokenBranches4679, operand);
	return rv;
}
bool x64Parser::Opcode207(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4683, operand);
	return rv;
}
bool x64Parser::Opcode208(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4685, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings209_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode209(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings209_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings210_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode210(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings210_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings211_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode211(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings211_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings212_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode212(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings212_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings213_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode213(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings213_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings214_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode214(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings214_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings215_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode215(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings215_12;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings216_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode216(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings216_12;
	bool rv = ParseOperands(tokenBranches4694, operand);
	if (!rv)
	{
		rv = Opcode7(operand);
	}
	return rv;
}
bool x64Parser::Opcode217(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4770, operand);
	return rv;
}
bool x64Parser::Opcode218(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4799, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings219_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode219(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings219_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings220_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode220(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings220_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings221_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode221(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings221_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings222_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings222_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode222(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings222_12;
	operand.values[13] = OpcodeCodings222_13;
	bool rv;
	{
		rv = Opcode6(operand);
	}
	return rv;
}
bool x64Parser::Opcode223(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4942, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings224_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode224(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings224_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings225_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 204, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode225(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings225_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings226_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 206, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode226(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings226_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings227_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode227(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings227_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode228(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4949, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings229_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 207, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode229(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings229_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings230_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 207, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode230(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings230_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode231(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4953, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings232_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode232(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings232_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings233_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode233(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings233_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings234_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode234(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings234_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings235_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode235(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings235_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings236_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode236(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings236_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
bool x64Parser::Opcode237(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4960, operand);
	return rv;
}
bool x64Parser::Opcode238(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4962, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings239_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode239(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings239_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings240_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode240(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings240_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings241_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode241(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings241_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings242_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode242(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings242_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings243_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode243(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings243_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
bool x64Parser::Opcode244(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4969, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings245_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode245(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings245_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings246_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode246(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings246_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings247_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode247(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings247_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings248_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode248(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings248_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings249_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode249(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings249_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings250_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode250(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings250_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings251_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode251(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings251_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings252_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode252(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings252_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings253_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode253(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings253_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings254_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode254(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings254_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings255_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode255(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings255_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings256_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode256(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings256_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings257_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode257(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings257_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings258_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode258(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings258_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings259_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode259(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings259_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings260_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode260(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings260_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings261_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode261(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings261_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings262_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode262(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings262_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings263_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode263(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings263_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings264_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode264(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings264_32;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings265_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 159, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode265(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings265_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings266_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode266(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings266_30;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings267_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 197, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode267(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings267_30;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings268_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 141, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode268(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings268_30;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings269_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 201, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode269(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings269_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings270_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode270(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings270_30;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings271_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode271(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings271_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings272_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 180, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode272(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings272_30;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings273_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings273_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode273(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings273_12;
	operand.values[13] = OpcodeCodings273_13;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings274_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 181, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode274(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings274_30;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings275_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings275_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode275(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings275_12;
	operand.values[13] = OpcodeCodings275_13;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings276_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings276_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode276(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings276_12;
	operand.values[13] = OpcodeCodings276_13;
	bool rv = ParseOperands(tokenBranches5034, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
bool x64Parser::Opcode277(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5036, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings278_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode278(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings278_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings279_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode279(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings279_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings280_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode280(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings280_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode281(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5164, operand);
	return rv;
}
bool x64Parser::Opcode282(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5166, operand);
	return rv;
}
bool x64Parser::Opcode283(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5168, operand);
	return rv;
}
bool x64Parser::Opcode284(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5170, operand);
	return rv;
}
bool x64Parser::Opcode285(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5172, operand);
	return rv;
}
bool x64Parser::Opcode286(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5174, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings287_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode287(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings287_30;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings288_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 178, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode288(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings288_30;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings289_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings289_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode289(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings289_12;
	operand.values[13] = OpcodeCodings289_13;
	bool rv = ParseOperands(tokenBranches5178, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
bool x64Parser::Opcode290(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5181, operand);
	return rv;
}
bool x64Parser::Opcode291(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5532, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings292_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 56, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode292(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings292_30;
	bool rv = ParseOperands(tokenBranches5795, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings293_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode293(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings293_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings294_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode294(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings294_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode295(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5822, operand);
	return rv;
}
bool x64Parser::Opcode296(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5829, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings297_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 190, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode297(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings297_30;
	bool rv;
	{
		rv = Opcode15(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings298_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 182, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode298(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings298_30;
	bool rv;
	{
		rv = Opcode15(operand);
	}
	return rv;
}
bool x64Parser::Opcode299(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5833, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings300_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode300(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings300_12;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings301_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode301(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings301_12;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings302_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 144, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode302(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings302_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings303_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode303(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings303_12;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings304_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings304_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 12, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings304_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode304(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings304_12;
	operand.values[30] = OpcodeCodings304_30;
	operand.values[31] = OpcodeCodings304_31;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode305(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5853, operand);
	return rv;
}
bool x64Parser::Opcode306(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5882, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings307_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode307(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings307_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings308_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode308(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings308_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings309_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode309(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings309_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode310(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6024, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings311_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode311(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings311_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings312_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode312(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings312_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings313_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode313(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings313_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings314_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings314_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 184, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode314(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings314_19;
	operand.values[13] = OpcodeCodings314_13;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings315_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode315(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings315_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings316_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode316(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings316_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings317_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode317(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings317_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode318(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6044, operand);
	return rv;
}
bool x64Parser::Opcode319(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6046, operand);
	return rv;
}
bool x64Parser::Opcode320(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6048, operand);
	return rv;
}
bool x64Parser::Opcode321(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6050, operand);
	return rv;
}
bool x64Parser::Opcode322(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6052, operand);
	return rv;
}
bool x64Parser::Opcode323(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6054, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings324_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode324(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings324_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings325_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode325(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings325_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings326_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode326(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings326_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings327_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode327(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings327_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings328_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode328(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings328_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings329_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode329(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings329_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings330_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 156, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode330(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings330_13;
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode331(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6085, operand);
	return rv;
}
bool x64Parser::Opcode332(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6088, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings333_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode333(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings333_12;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings334_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode334(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings334_12;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings335_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode335(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings335_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings336_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 158, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode336(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings336_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings337_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode337(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings337_12;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings338_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode338(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings338_12;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings339_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings339_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 28, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings339_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 24, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode339(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings339_12;
	operand.values[30] = OpcodeCodings339_30;
	operand.values[31] = OpcodeCodings339_31;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode340(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6098, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings341_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode341(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings341_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings342_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode342(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings342_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings343_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode343(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings343_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode344(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6226, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings345_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode345(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings345_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings346_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode346(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings346_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings347_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode347(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings347_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings348_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode348(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings348_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings349_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode349(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings349_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings350_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode350(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings350_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings351_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode351(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings351_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings352_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode352(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings352_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings353_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode353(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings353_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings354_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode354(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings354_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings355_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode355(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings355_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings356_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode356(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings356_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings357_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode357(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings357_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings358_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode358(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings358_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings359_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode359(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings359_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings360_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode360(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings360_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings361_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode361(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings361_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings362_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode362(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings362_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings363_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode363(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings363_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings364_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode364(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings364_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings365_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode365(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings365_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings366_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode366(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings366_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings367_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode367(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings367_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings368_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode368(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings368_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings369_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode369(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings369_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings370_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode370(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings370_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings371_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode371(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings371_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings372_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode372(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings372_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings373_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode373(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings373_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings374_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode374(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings374_32;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings375_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode375(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings375_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings376_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode376(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings376_12;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings377_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 164, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode377(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings377_30;
	bool rv;
	{
		rv = Opcode17(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings378_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode378(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings378_12;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings379_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 172, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode379(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings379_30;
	bool rv;
	{
		rv = Opcode17(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings380_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings380_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode380(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings380_12;
	operand.values[13] = OpcodeCodings380_13;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings381_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings381_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode381(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings381_12;
	operand.values[13] = OpcodeCodings381_13;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings382_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings382_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode382(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings382_12;
	operand.values[13] = OpcodeCodings382_13;
	bool rv = ParseOperands(tokenBranches6265, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings383_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode383(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings383_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings384_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode384(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings384_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings385_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode385(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings385_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode386(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6270, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings387_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode387(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings387_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings388_13[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode388(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings388_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings389_13[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode389(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings389_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode390(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6398, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings391_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings391_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode391(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings391_12;
	operand.values[13] = OpcodeCodings391_13;
	bool rv = ParseOperands(tokenBranches6400, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings392_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings392_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings392_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 40, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode392(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings392_12;
	operand.values[30] = OpcodeCodings392_30;
	operand.values[31] = OpcodeCodings392_31;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings393_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode393(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings393_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings394_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode394(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings394_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings395_13[] = {
	{ (Coding::Type)(Coding::valSpecified), 53, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode395(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings395_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings396_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode396(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings396_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode397(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6408, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings398_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode398(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings398_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings399_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings399_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode399(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings399_12;
	operand.values[13] = OpcodeCodings399_13;
	bool rv = ParseOperands(tokenBranches6486, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings400_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings400_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode400(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings400_12;
	operand.values[13] = OpcodeCodings400_13;
	bool rv = ParseOperands(tokenBranches6488, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings401_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode401(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings401_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings402_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode402(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings402_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings403_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 48, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode403(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings403_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode404(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6493, operand);
	return rv;
}
bool x64Parser::Opcode405(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6510, operand);
	return rv;
}
bool x64Parser::Opcode406(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6519, operand);
	return rv;
}
bool x64Parser::Opcode407(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6570, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings408_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode408(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings408_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings409_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings409_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings409_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 48, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode409(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings409_12;
	operand.values[30] = OpcodeCodings409_30;
	operand.values[31] = OpcodeCodings409_31;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode410(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6610, operand);
	return rv;
}
bool x64Parser::Opcode411(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6612, operand);
	return rv;
}
bool x64Parser::Opcode412(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6614, operand);
	return rv;
}
bool x64Parser::Opcode413(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6616, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings414_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode414(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings414_13;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings415_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings415_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode415(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings415_19;
	operand.values[13] = OpcodeCodings415_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings416_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings416_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode416(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings416_19;
	operand.values[13] = OpcodeCodings416_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings417_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings417_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode417(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings417_19;
	operand.values[13] = OpcodeCodings417_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings418_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings418_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode418(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings418_19;
	operand.values[13] = OpcodeCodings418_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings419_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings419_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode419(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings419_19;
	operand.values[13] = OpcodeCodings419_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings420_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings420_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode420(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings420_19;
	operand.values[13] = OpcodeCodings420_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings421_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings421_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode421(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings421_19;
	operand.values[13] = OpcodeCodings421_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings422_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings422_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode422(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings422_19;
	operand.values[13] = OpcodeCodings422_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings423_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings423_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode423(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings423_19;
	operand.values[13] = OpcodeCodings423_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings424_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings424_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode424(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings424_19;
	operand.values[13] = OpcodeCodings424_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings425_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings425_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 13, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode425(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings425_19;
	operand.values[13] = OpcodeCodings425_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings426_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings426_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 13, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode426(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings426_19;
	operand.values[13] = OpcodeCodings426_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings427_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings427_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode427(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings427_19;
	operand.values[13] = OpcodeCodings427_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings428_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings428_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode428(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings428_19;
	operand.values[13] = OpcodeCodings428_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings429_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings429_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode429(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings429_19;
	operand.values[13] = OpcodeCodings429_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings430_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings430_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode430(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings430_19;
	operand.values[13] = OpcodeCodings430_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings431_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings431_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode431(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings431_19;
	operand.values[13] = OpcodeCodings431_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings432_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings432_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode432(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings432_19;
	operand.values[13] = OpcodeCodings432_13;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings433_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings433_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode433(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings433_19;
	operand.values[13] = OpcodeCodings433_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings434_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings434_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode434(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings434_19;
	operand.values[13] = OpcodeCodings434_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings435_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings435_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode435(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings435_19;
	operand.values[13] = OpcodeCodings435_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings436_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings436_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode436(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings436_19;
	operand.values[13] = OpcodeCodings436_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings437_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings437_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode437(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings437_19;
	operand.values[13] = OpcodeCodings437_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings438_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings438_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode438(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings438_19;
	operand.values[13] = OpcodeCodings438_13;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings439_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings439_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode439(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings439_19;
	operand.values[13] = OpcodeCodings439_13;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings440_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings440_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode440(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings440_19;
	operand.values[13] = OpcodeCodings440_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings441_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings441_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode441(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings441_19;
	operand.values[13] = OpcodeCodings441_13;
	bool rv;
	{
		rv = Opcode26(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings442_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings442_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode442(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings442_19;
	operand.values[13] = OpcodeCodings442_13;
	bool rv;
	{
		rv = Opcode26(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings443_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings443_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode443(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings443_19;
	operand.values[13] = OpcodeCodings443_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings444_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings444_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode444(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings444_19;
	operand.values[13] = OpcodeCodings444_13;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings445_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings445_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode445(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings445_19;
	operand.values[13] = OpcodeCodings445_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings446_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings446_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode446(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings446_19;
	operand.values[13] = OpcodeCodings446_13;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings447_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings447_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode447(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings447_19;
	operand.values[13] = OpcodeCodings447_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings448_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings448_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode448(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings448_19;
	operand.values[13] = OpcodeCodings448_13;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings449_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 242, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings449_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode449(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings449_19;
	operand.values[13] = OpcodeCodings449_13;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings450_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings450_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode450(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings450_19;
	operand.values[13] = OpcodeCodings450_13;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings451_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings451_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode451(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings451_19;
	operand.values[13] = OpcodeCodings451_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings452_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings452_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode452(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings452_19;
	operand.values[13] = OpcodeCodings452_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings453_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings453_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode453(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings453_19;
	operand.values[13] = OpcodeCodings453_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings454_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings454_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode454(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings454_19;
	operand.values[13] = OpcodeCodings454_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings455_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings455_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode455(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings455_19;
	operand.values[13] = OpcodeCodings455_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings456_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings456_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode456(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings456_19;
	operand.values[13] = OpcodeCodings456_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings457_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings457_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode457(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings457_19;
	operand.values[13] = OpcodeCodings457_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings458_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings458_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode458(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings458_19;
	operand.values[13] = OpcodeCodings458_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings459_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings459_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode459(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings459_19;
	operand.values[13] = OpcodeCodings459_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings460_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings460_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode460(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings460_19;
	operand.values[13] = OpcodeCodings460_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
bool x64Parser::Opcode461(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6665, operand);
	return rv;
}
bool x64Parser::Opcode462(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6669, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings463_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings463_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode463(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings463_19;
	operand.values[13] = OpcodeCodings463_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings464_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings464_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode464(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings464_19;
	operand.values[13] = OpcodeCodings464_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings465_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings465_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode465(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings465_19;
	operand.values[13] = OpcodeCodings465_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings466_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings466_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode466(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings466_19;
	operand.values[13] = OpcodeCodings466_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings467_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings467_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode467(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings467_19;
	operand.values[13] = OpcodeCodings467_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings468_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode468(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings468_13;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings469_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings469_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode469(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings469_19;
	operand.values[13] = OpcodeCodings469_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings470_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings470_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode470(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings470_19;
	operand.values[13] = OpcodeCodings470_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings471_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings471_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode471(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings471_19;
	operand.values[13] = OpcodeCodings471_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings472_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings472_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode472(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings472_19;
	operand.values[13] = OpcodeCodings472_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings473_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode473(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings473_13;
	bool rv = true;
	return rv;
}
Coding x64Parser::OpcodeCodings474_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings474_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode474(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings474_19;
	operand.values[30] = OpcodeCodings474_30;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings475_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings475_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode475(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings475_19;
	operand.values[30] = OpcodeCodings475_30;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
bool x64Parser::Opcode476(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6686, operand);
	return rv;
}
bool x64Parser::Opcode477(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6699, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings478_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings478_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode478(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings478_19;
	operand.values[13] = OpcodeCodings478_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings479_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings479_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode479(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings479_19;
	operand.values[13] = OpcodeCodings479_13;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings480_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings480_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode480(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings480_19;
	operand.values[13] = OpcodeCodings480_13;
	bool rv;
	{
		rv = Opcode21(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings481_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings481_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode481(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings481_19;
	operand.values[13] = OpcodeCodings481_13;
	bool rv;
	{
		rv = Opcode21(operand);
	}
	return rv;
}
bool x64Parser::Opcode482(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6716, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings483_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings483_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode483(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings483_19;
	operand.values[13] = OpcodeCodings483_13;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings484_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings484_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode484(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings484_19;
	operand.values[13] = OpcodeCodings484_13;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
bool x64Parser::Opcode485(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6722, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings486_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings486_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode486(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings486_19;
	operand.values[13] = OpcodeCodings486_13;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings487_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings487_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode487(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings487_19;
	operand.values[13] = OpcodeCodings487_13;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings488_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings488_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode488(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings488_19;
	operand.values[13] = OpcodeCodings488_13;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings489_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings489_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode489(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings489_19;
	operand.values[13] = OpcodeCodings489_13;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
bool x64Parser::Opcode490(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6730, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings491_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode491(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings491_13;
	bool rv = ParseOperands(tokenBranches6734, operand);
	return rv;
}
bool x64Parser::Opcode492(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6741, operand);
	return rv;
}
bool x64Parser::Opcode493(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6745, operand);
	return rv;
}
bool x64Parser::Opcode494(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6749, operand);
	return rv;
}
bool x64Parser::Opcode495(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6753, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings496_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings496_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode496(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings496_19;
	operand.values[13] = OpcodeCodings496_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings497_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings497_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode497(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings497_19;
	operand.values[13] = OpcodeCodings497_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings498_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings498_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode498(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings498_19;
	operand.values[30] = OpcodeCodings498_30;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings499_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings499_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode499(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings499_19;
	operand.values[30] = OpcodeCodings499_30;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings500_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings500_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode500(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings500_19;
	operand.values[30] = OpcodeCodings500_30;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings501_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings501_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 66, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode501(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings501_19;
	operand.values[13] = OpcodeCodings501_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings502_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings502_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode502(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings502_19;
	operand.values[13] = OpcodeCodings502_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings503_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings503_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode503(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings503_19;
	operand.values[13] = OpcodeCodings503_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings504_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings504_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode504(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings504_19;
	operand.values[13] = OpcodeCodings504_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings505_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings505_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode505(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings505_19;
	operand.values[13] = OpcodeCodings505_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings506_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings506_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode506(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings506_19;
	operand.values[13] = OpcodeCodings506_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings507_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings507_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode507(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings507_19;
	operand.values[13] = OpcodeCodings507_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings508_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode508(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings508_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings509_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode509(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings509_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings510_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode510(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings510_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings511_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode511(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings511_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings512_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode512(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings512_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings513_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode513(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings513_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings514_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode514(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings514_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings515_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode515(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings515_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings516_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode516(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings516_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings517_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode517(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings517_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings518_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode518(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings518_13;
	bool rv = ParseOperands(tokenBranches6779, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings519_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode519(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings519_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings520_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode520(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings520_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings521_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode521(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings521_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings522_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode522(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings522_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings523_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings523_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode523(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings523_19;
	operand.values[13] = OpcodeCodings523_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings524_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode524(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings524_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings525_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode525(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings525_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings526_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 213, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode526(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings526_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings527_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings527_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode527(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings527_19;
	operand.values[13] = OpcodeCodings527_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings528_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings528_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode528(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings528_19;
	operand.values[13] = OpcodeCodings528_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings529_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 100, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode529(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings529_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings530_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode530(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings530_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings531_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 101, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode531(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings531_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings532_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings532_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode532(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings532_19;
	operand.values[13] = OpcodeCodings532_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings533_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings533_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode533(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings533_19;
	operand.values[13] = OpcodeCodings533_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings534_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode534(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings534_13;
	bool rv = ParseOperands(tokenBranches6805, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings535_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode535(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings535_13;
	bool rv = ParseOperands(tokenBranches6811, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings536_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode536(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings536_13;
	bool rv = ParseOperands(tokenBranches6817, operand);
	return rv;
}
bool x64Parser::Opcode537(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6823, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings538_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode538(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings538_13;
	bool rv = ParseOperands(tokenBranches6844, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings539_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode539(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings539_13;
	bool rv = ParseOperands(tokenBranches6850, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings540_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode540(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings540_13;
	bool rv = ParseOperands(tokenBranches6856, operand);
	return rv;
}
bool x64Parser::Opcode541(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6862, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings542_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 245, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode542(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings542_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings543_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode543(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings543_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings544_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode544(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings544_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings545_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode545(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings545_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings546_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode546(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings546_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings547_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode547(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings547_13;
	bool rv = ParseOperands(tokenBranches6878, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings548_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode548(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings548_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings549_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 229, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode549(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings549_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings550_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 213, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode550(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings550_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings551_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode551(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings551_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings552_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode552(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings552_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings553_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings553_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode553(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings553_19;
	operand.values[13] = OpcodeCodings553_13;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings554_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings554_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode554(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings554_19;
	operand.values[13] = OpcodeCodings554_13;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings555_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings555_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode555(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings555_19;
	operand.values[13] = OpcodeCodings555_13;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings556_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings556_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode556(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings556_19;
	operand.values[13] = OpcodeCodings556_13;
	bool rv = ParseOperands(tokenBranches6899, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings557_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings557_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings557_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 242, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode557(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings557_33;
	operand.values[30] = OpcodeCodings557_30;
	operand.values[31] = OpcodeCodings557_31;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings558_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings558_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode558(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings558_19;
	operand.values[13] = OpcodeCodings558_13;
	bool rv = ParseOperands(tokenBranches6906, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings559_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings559_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings559_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode559(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings559_33;
	operand.values[30] = OpcodeCodings559_30;
	operand.values[31] = OpcodeCodings559_31;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings560_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings560_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 241, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings560_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode560(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings560_33;
	operand.values[34] = OpcodeCodings560_34;
	operand.values[30] = OpcodeCodings560_30;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings561_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings561_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 226, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings561_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode561(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings561_33;
	operand.values[34] = OpcodeCodings561_34;
	operand.values[30] = OpcodeCodings561_30;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings562_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings562_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 225, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings562_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode562(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings562_33;
	operand.values[34] = OpcodeCodings562_34;
	operand.values[30] = OpcodeCodings562_30;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings563_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings563_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 210, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings563_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode563(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings563_33;
	operand.values[34] = OpcodeCodings563_34;
	operand.values[30] = OpcodeCodings563_30;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings564_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings564_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode564(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings564_19;
	operand.values[13] = OpcodeCodings564_13;
	bool rv = ParseOperands(tokenBranches6915, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings565_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings565_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 211, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings565_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode565(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings565_33;
	operand.values[34] = OpcodeCodings565_34;
	operand.values[30] = OpcodeCodings565_30;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings566_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings566_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 209, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings566_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode566(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings566_33;
	operand.values[34] = OpcodeCodings566_34;
	operand.values[30] = OpcodeCodings566_30;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings567_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode567(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings567_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings568_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode568(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings568_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings569_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode569(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings569_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings570_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode570(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings570_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings571_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode571(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings571_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings572_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode572(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings572_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings573_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode573(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings573_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings574_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode574(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings574_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings575_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode575(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings575_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings576_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings576_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode576(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings576_19;
	operand.values[13] = OpcodeCodings576_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings577_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode577(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings577_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings578_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode578(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings578_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings579_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode579(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings579_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings580_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings580_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode580(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings580_19;
	operand.values[13] = OpcodeCodings580_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings581_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode581(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings581_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings582_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode582(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings582_13;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings583_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings583_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode583(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings583_19;
	operand.values[13] = OpcodeCodings583_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings584_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings584_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode584(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings584_19;
	operand.values[13] = OpcodeCodings584_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings585_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings585_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode585(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings585_19;
	operand.values[13] = OpcodeCodings585_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings586_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings586_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode586(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings586_19;
	operand.values[13] = OpcodeCodings586_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings587_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings587_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode587(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings587_19;
	operand.values[13] = OpcodeCodings587_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings588_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings588_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode588(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings588_19;
	operand.values[13] = OpcodeCodings588_13;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings589_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings589_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode589(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings589_19;
	operand.values[13] = OpcodeCodings589_13;
	bool rv = ParseOperands(tokenBranches6943, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings590_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings590_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode590(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings590_19;
	operand.values[13] = OpcodeCodings590_13;
	bool rv = ParseOperands(tokenBranches6949, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings591_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings591_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode591(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings591_19;
	operand.values[13] = OpcodeCodings591_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings592_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings592_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode592(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings592_19;
	operand.values[13] = OpcodeCodings592_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings593_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings593_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode593(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings593_19;
	operand.values[13] = OpcodeCodings593_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings594_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings594_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode594(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings594_19;
	operand.values[13] = OpcodeCodings594_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings595_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings595_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode595(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings595_19;
	operand.values[13] = OpcodeCodings595_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings596_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings596_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode596(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings596_19;
	operand.values[13] = OpcodeCodings596_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings597_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings597_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode597(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings597_19;
	operand.values[13] = OpcodeCodings597_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings598_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings598_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode598(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings598_19;
	operand.values[13] = OpcodeCodings598_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings599_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings599_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode599(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings599_19;
	operand.values[13] = OpcodeCodings599_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings600_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings600_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode600(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings600_19;
	operand.values[13] = OpcodeCodings600_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings601_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings601_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode601(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings601_19;
	operand.values[13] = OpcodeCodings601_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings602_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings602_13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode602(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings602_19;
	operand.values[13] = OpcodeCodings602_13;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
bool x64Parser::Opcode603(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode604(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode605(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode606(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode607(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode608(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode609(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode610(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode611(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode612(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode613(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode614(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
x64Parser::DispatchType x64Parser::DispatchTable[615] = {
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&x64Parser::Opcode32,
	&x64Parser::Opcode33,
	&x64Parser::Opcode34,
	&x64Parser::Opcode35,
	&x64Parser::Opcode36,
	&x64Parser::Opcode37,
	&x64Parser::Opcode38,
	&x64Parser::Opcode39,
	&x64Parser::Opcode40,
	&x64Parser::Opcode41,
	&x64Parser::Opcode42,
	&x64Parser::Opcode43,
	&x64Parser::Opcode44,
	&x64Parser::Opcode45,
	&x64Parser::Opcode46,
	&x64Parser::Opcode47,
	&x64Parser::Opcode48,
	&x64Parser::Opcode49,
	&x64Parser::Opcode50,
	&x64Parser::Opcode51,
	&x64Parser::Opcode52,
	&x64Parser::Opcode53,
	&x64Parser::Opcode54,
	&x64Parser::Opcode55,
	&x64Parser::Opcode56,
	&x64Parser::Opcode57,
	&x64Parser::Opcode58,
	&x64Parser::Opcode59,
	&x64Parser::Opcode60,
	&x64Parser::Opcode61,
	&x64Parser::Opcode62,
	&x64Parser::Opcode63,
	&x64Parser::Opcode64,
	&x64Parser::Opcode65,
	&x64Parser::Opcode66,
	&x64Parser::Opcode67,
	&x64Parser::Opcode68,
	&x64Parser::Opcode69,
	&x64Parser::Opcode70,
	&x64Parser::Opcode71,
	&x64Parser::Opcode72,
	&x64Parser::Opcode73,
	&x64Parser::Opcode74,
	&x64Parser::Opcode75,
	&x64Parser::Opcode76,
	&x64Parser::Opcode77,
	&x64Parser::Opcode78,
	&x64Parser::Opcode79,
	&x64Parser::Opcode80,
	&x64Parser::Opcode81,
	&x64Parser::Opcode82,
	&x64Parser::Opcode83,
	&x64Parser::Opcode84,
	&x64Parser::Opcode85,
	&x64Parser::Opcode86,
	&x64Parser::Opcode87,
	&x64Parser::Opcode88,
	&x64Parser::Opcode89,
	&x64Parser::Opcode90,
	&x64Parser::Opcode91,
	&x64Parser::Opcode92,
	&x64Parser::Opcode93,
	&x64Parser::Opcode94,
	&x64Parser::Opcode95,
	&x64Parser::Opcode96,
	&x64Parser::Opcode97,
	&x64Parser::Opcode98,
	&x64Parser::Opcode99,
	&x64Parser::Opcode100,
	&x64Parser::Opcode101,
	&x64Parser::Opcode102,
	&x64Parser::Opcode103,
	&x64Parser::Opcode104,
	&x64Parser::Opcode105,
	&x64Parser::Opcode106,
	&x64Parser::Opcode107,
	&x64Parser::Opcode108,
	&x64Parser::Opcode109,
	&x64Parser::Opcode110,
	&x64Parser::Opcode111,
	&x64Parser::Opcode112,
	&x64Parser::Opcode113,
	&x64Parser::Opcode114,
	&x64Parser::Opcode115,
	&x64Parser::Opcode116,
	&x64Parser::Opcode117,
	&x64Parser::Opcode118,
	&x64Parser::Opcode119,
	&x64Parser::Opcode120,
	&x64Parser::Opcode121,
	&x64Parser::Opcode122,
	&x64Parser::Opcode123,
	&x64Parser::Opcode124,
	&x64Parser::Opcode125,
	&x64Parser::Opcode126,
	&x64Parser::Opcode127,
	&x64Parser::Opcode128,
	&x64Parser::Opcode129,
	&x64Parser::Opcode130,
	&x64Parser::Opcode131,
	&x64Parser::Opcode132,
	&x64Parser::Opcode133,
	&x64Parser::Opcode134,
	&x64Parser::Opcode135,
	&x64Parser::Opcode136,
	&x64Parser::Opcode137,
	&x64Parser::Opcode138,
	&x64Parser::Opcode139,
	&x64Parser::Opcode140,
	&x64Parser::Opcode141,
	&x64Parser::Opcode142,
	&x64Parser::Opcode143,
	&x64Parser::Opcode144,
	&x64Parser::Opcode145,
	&x64Parser::Opcode146,
	&x64Parser::Opcode147,
	&x64Parser::Opcode148,
	&x64Parser::Opcode149,
	&x64Parser::Opcode150,
	&x64Parser::Opcode151,
	&x64Parser::Opcode152,
	&x64Parser::Opcode153,
	&x64Parser::Opcode154,
	&x64Parser::Opcode155,
	&x64Parser::Opcode156,
	&x64Parser::Opcode157,
	&x64Parser::Opcode158,
	&x64Parser::Opcode159,
	&x64Parser::Opcode160,
	&x64Parser::Opcode161,
	&x64Parser::Opcode162,
	&x64Parser::Opcode163,
	&x64Parser::Opcode164,
	&x64Parser::Opcode165,
	&x64Parser::Opcode166,
	&x64Parser::Opcode167,
	&x64Parser::Opcode168,
	&x64Parser::Opcode169,
	&x64Parser::Opcode170,
	&x64Parser::Opcode171,
	&x64Parser::Opcode172,
	&x64Parser::Opcode173,
	&x64Parser::Opcode174,
	&x64Parser::Opcode175,
	&x64Parser::Opcode176,
	&x64Parser::Opcode177,
	&x64Parser::Opcode178,
	&x64Parser::Opcode179,
	&x64Parser::Opcode180,
	&x64Parser::Opcode181,
	&x64Parser::Opcode182,
	&x64Parser::Opcode183,
	&x64Parser::Opcode184,
	&x64Parser::Opcode185,
	&x64Parser::Opcode186,
	&x64Parser::Opcode187,
	&x64Parser::Opcode188,
	&x64Parser::Opcode189,
	&x64Parser::Opcode190,
	&x64Parser::Opcode191,
	&x64Parser::Opcode192,
	&x64Parser::Opcode193,
	&x64Parser::Opcode194,
	&x64Parser::Opcode195,
	&x64Parser::Opcode196,
	&x64Parser::Opcode197,
	&x64Parser::Opcode198,
	&x64Parser::Opcode199,
	&x64Parser::Opcode200,
	&x64Parser::Opcode201,
	&x64Parser::Opcode202,
	&x64Parser::Opcode203,
	&x64Parser::Opcode204,
	&x64Parser::Opcode205,
	&x64Parser::Opcode206,
	&x64Parser::Opcode207,
	&x64Parser::Opcode208,
	&x64Parser::Opcode209,
	&x64Parser::Opcode210,
	&x64Parser::Opcode211,
	&x64Parser::Opcode212,
	&x64Parser::Opcode213,
	&x64Parser::Opcode214,
	&x64Parser::Opcode215,
	&x64Parser::Opcode216,
	&x64Parser::Opcode217,
	&x64Parser::Opcode218,
	&x64Parser::Opcode219,
	&x64Parser::Opcode220,
	&x64Parser::Opcode221,
	&x64Parser::Opcode222,
	&x64Parser::Opcode223,
	&x64Parser::Opcode224,
	&x64Parser::Opcode225,
	&x64Parser::Opcode226,
	&x64Parser::Opcode227,
	&x64Parser::Opcode228,
	&x64Parser::Opcode229,
	&x64Parser::Opcode230,
	&x64Parser::Opcode231,
	&x64Parser::Opcode232,
	&x64Parser::Opcode233,
	&x64Parser::Opcode234,
	&x64Parser::Opcode235,
	&x64Parser::Opcode236,
	&x64Parser::Opcode237,
	&x64Parser::Opcode238,
	&x64Parser::Opcode239,
	&x64Parser::Opcode240,
	&x64Parser::Opcode241,
	&x64Parser::Opcode242,
	&x64Parser::Opcode243,
	&x64Parser::Opcode244,
	&x64Parser::Opcode245,
	&x64Parser::Opcode246,
	&x64Parser::Opcode247,
	&x64Parser::Opcode248,
	&x64Parser::Opcode249,
	&x64Parser::Opcode250,
	&x64Parser::Opcode251,
	&x64Parser::Opcode252,
	&x64Parser::Opcode253,
	&x64Parser::Opcode254,
	&x64Parser::Opcode255,
	&x64Parser::Opcode256,
	&x64Parser::Opcode257,
	&x64Parser::Opcode258,
	&x64Parser::Opcode259,
	&x64Parser::Opcode260,
	&x64Parser::Opcode261,
	&x64Parser::Opcode262,
	&x64Parser::Opcode263,
	&x64Parser::Opcode264,
	&x64Parser::Opcode265,
	&x64Parser::Opcode266,
	&x64Parser::Opcode267,
	&x64Parser::Opcode268,
	&x64Parser::Opcode269,
	&x64Parser::Opcode270,
	&x64Parser::Opcode271,
	&x64Parser::Opcode272,
	&x64Parser::Opcode273,
	&x64Parser::Opcode274,
	&x64Parser::Opcode275,
	&x64Parser::Opcode276,
	&x64Parser::Opcode277,
	&x64Parser::Opcode278,
	&x64Parser::Opcode279,
	&x64Parser::Opcode280,
	&x64Parser::Opcode281,
	&x64Parser::Opcode282,
	&x64Parser::Opcode283,
	&x64Parser::Opcode284,
	&x64Parser::Opcode285,
	&x64Parser::Opcode286,
	&x64Parser::Opcode287,
	&x64Parser::Opcode288,
	&x64Parser::Opcode289,
	&x64Parser::Opcode290,
	&x64Parser::Opcode291,
	&x64Parser::Opcode292,
	&x64Parser::Opcode293,
	&x64Parser::Opcode294,
	&x64Parser::Opcode295,
	&x64Parser::Opcode296,
	&x64Parser::Opcode297,
	&x64Parser::Opcode298,
	&x64Parser::Opcode299,
	&x64Parser::Opcode300,
	&x64Parser::Opcode301,
	&x64Parser::Opcode302,
	&x64Parser::Opcode303,
	&x64Parser::Opcode304,
	&x64Parser::Opcode305,
	&x64Parser::Opcode306,
	&x64Parser::Opcode307,
	&x64Parser::Opcode308,
	&x64Parser::Opcode309,
	&x64Parser::Opcode310,
	&x64Parser::Opcode311,
	&x64Parser::Opcode312,
	&x64Parser::Opcode313,
	&x64Parser::Opcode314,
	&x64Parser::Opcode315,
	&x64Parser::Opcode316,
	&x64Parser::Opcode317,
	&x64Parser::Opcode318,
	&x64Parser::Opcode319,
	&x64Parser::Opcode320,
	&x64Parser::Opcode321,
	&x64Parser::Opcode322,
	&x64Parser::Opcode323,
	&x64Parser::Opcode324,
	&x64Parser::Opcode325,
	&x64Parser::Opcode326,
	&x64Parser::Opcode327,
	&x64Parser::Opcode328,
	&x64Parser::Opcode329,
	&x64Parser::Opcode330,
	&x64Parser::Opcode331,
	&x64Parser::Opcode332,
	&x64Parser::Opcode333,
	&x64Parser::Opcode334,
	&x64Parser::Opcode335,
	&x64Parser::Opcode336,
	&x64Parser::Opcode337,
	&x64Parser::Opcode338,
	&x64Parser::Opcode339,
	&x64Parser::Opcode340,
	&x64Parser::Opcode341,
	&x64Parser::Opcode342,
	&x64Parser::Opcode343,
	&x64Parser::Opcode344,
	&x64Parser::Opcode345,
	&x64Parser::Opcode346,
	&x64Parser::Opcode347,
	&x64Parser::Opcode348,
	&x64Parser::Opcode349,
	&x64Parser::Opcode350,
	&x64Parser::Opcode351,
	&x64Parser::Opcode352,
	&x64Parser::Opcode353,
	&x64Parser::Opcode354,
	&x64Parser::Opcode355,
	&x64Parser::Opcode356,
	&x64Parser::Opcode357,
	&x64Parser::Opcode358,
	&x64Parser::Opcode359,
	&x64Parser::Opcode360,
	&x64Parser::Opcode361,
	&x64Parser::Opcode362,
	&x64Parser::Opcode363,
	&x64Parser::Opcode364,
	&x64Parser::Opcode365,
	&x64Parser::Opcode366,
	&x64Parser::Opcode367,
	&x64Parser::Opcode368,
	&x64Parser::Opcode369,
	&x64Parser::Opcode370,
	&x64Parser::Opcode371,
	&x64Parser::Opcode372,
	&x64Parser::Opcode373,
	&x64Parser::Opcode374,
	&x64Parser::Opcode375,
	&x64Parser::Opcode376,
	&x64Parser::Opcode377,
	&x64Parser::Opcode378,
	&x64Parser::Opcode379,
	&x64Parser::Opcode380,
	&x64Parser::Opcode381,
	&x64Parser::Opcode382,
	&x64Parser::Opcode383,
	&x64Parser::Opcode384,
	&x64Parser::Opcode385,
	&x64Parser::Opcode386,
	&x64Parser::Opcode387,
	&x64Parser::Opcode388,
	&x64Parser::Opcode389,
	&x64Parser::Opcode390,
	&x64Parser::Opcode391,
	&x64Parser::Opcode392,
	&x64Parser::Opcode393,
	&x64Parser::Opcode394,
	&x64Parser::Opcode395,
	&x64Parser::Opcode396,
	&x64Parser::Opcode397,
	&x64Parser::Opcode398,
	&x64Parser::Opcode399,
	&x64Parser::Opcode400,
	&x64Parser::Opcode401,
	&x64Parser::Opcode402,
	&x64Parser::Opcode403,
	&x64Parser::Opcode404,
	&x64Parser::Opcode405,
	&x64Parser::Opcode406,
	&x64Parser::Opcode407,
	&x64Parser::Opcode408,
	&x64Parser::Opcode409,
	&x64Parser::Opcode410,
	&x64Parser::Opcode411,
	&x64Parser::Opcode412,
	&x64Parser::Opcode413,
	&x64Parser::Opcode414,
	&x64Parser::Opcode415,
	&x64Parser::Opcode416,
	&x64Parser::Opcode417,
	&x64Parser::Opcode418,
	&x64Parser::Opcode419,
	&x64Parser::Opcode420,
	&x64Parser::Opcode421,
	&x64Parser::Opcode422,
	&x64Parser::Opcode423,
	&x64Parser::Opcode424,
	&x64Parser::Opcode425,
	&x64Parser::Opcode426,
	&x64Parser::Opcode427,
	&x64Parser::Opcode428,
	&x64Parser::Opcode429,
	&x64Parser::Opcode430,
	&x64Parser::Opcode431,
	&x64Parser::Opcode432,
	&x64Parser::Opcode433,
	&x64Parser::Opcode434,
	&x64Parser::Opcode435,
	&x64Parser::Opcode436,
	&x64Parser::Opcode437,
	&x64Parser::Opcode438,
	&x64Parser::Opcode439,
	&x64Parser::Opcode440,
	&x64Parser::Opcode441,
	&x64Parser::Opcode442,
	&x64Parser::Opcode443,
	&x64Parser::Opcode444,
	&x64Parser::Opcode445,
	&x64Parser::Opcode446,
	&x64Parser::Opcode447,
	&x64Parser::Opcode448,
	&x64Parser::Opcode449,
	&x64Parser::Opcode450,
	&x64Parser::Opcode451,
	&x64Parser::Opcode452,
	&x64Parser::Opcode453,
	&x64Parser::Opcode454,
	&x64Parser::Opcode455,
	&x64Parser::Opcode456,
	&x64Parser::Opcode457,
	&x64Parser::Opcode458,
	&x64Parser::Opcode459,
	&x64Parser::Opcode460,
	&x64Parser::Opcode461,
	&x64Parser::Opcode462,
	&x64Parser::Opcode463,
	&x64Parser::Opcode464,
	&x64Parser::Opcode465,
	&x64Parser::Opcode466,
	&x64Parser::Opcode467,
	&x64Parser::Opcode468,
	&x64Parser::Opcode469,
	&x64Parser::Opcode470,
	&x64Parser::Opcode471,
	&x64Parser::Opcode472,
	&x64Parser::Opcode473,
	&x64Parser::Opcode474,
	&x64Parser::Opcode475,
	&x64Parser::Opcode476,
	&x64Parser::Opcode477,
	&x64Parser::Opcode478,
	&x64Parser::Opcode479,
	&x64Parser::Opcode480,
	&x64Parser::Opcode481,
	&x64Parser::Opcode482,
	&x64Parser::Opcode483,
	&x64Parser::Opcode484,
	&x64Parser::Opcode485,
	&x64Parser::Opcode486,
	&x64Parser::Opcode487,
	&x64Parser::Opcode488,
	&x64Parser::Opcode489,
	&x64Parser::Opcode490,
	&x64Parser::Opcode491,
	&x64Parser::Opcode492,
	&x64Parser::Opcode493,
	&x64Parser::Opcode494,
	&x64Parser::Opcode495,
	&x64Parser::Opcode496,
	&x64Parser::Opcode497,
	&x64Parser::Opcode498,
	&x64Parser::Opcode499,
	&x64Parser::Opcode500,
	&x64Parser::Opcode501,
	&x64Parser::Opcode502,
	&x64Parser::Opcode503,
	&x64Parser::Opcode504,
	&x64Parser::Opcode505,
	&x64Parser::Opcode506,
	&x64Parser::Opcode507,
	&x64Parser::Opcode508,
	&x64Parser::Opcode509,
	&x64Parser::Opcode510,
	&x64Parser::Opcode511,
	&x64Parser::Opcode512,
	&x64Parser::Opcode513,
	&x64Parser::Opcode514,
	&x64Parser::Opcode515,
	&x64Parser::Opcode516,
	&x64Parser::Opcode517,
	&x64Parser::Opcode518,
	&x64Parser::Opcode519,
	&x64Parser::Opcode520,
	&x64Parser::Opcode521,
	&x64Parser::Opcode522,
	&x64Parser::Opcode523,
	&x64Parser::Opcode524,
	&x64Parser::Opcode525,
	&x64Parser::Opcode526,
	&x64Parser::Opcode527,
	&x64Parser::Opcode528,
	&x64Parser::Opcode529,
	&x64Parser::Opcode530,
	&x64Parser::Opcode531,
	&x64Parser::Opcode532,
	&x64Parser::Opcode533,
	&x64Parser::Opcode534,
	&x64Parser::Opcode535,
	&x64Parser::Opcode536,
	&x64Parser::Opcode537,
	&x64Parser::Opcode538,
	&x64Parser::Opcode539,
	&x64Parser::Opcode540,
	&x64Parser::Opcode541,
	&x64Parser::Opcode542,
	&x64Parser::Opcode543,
	&x64Parser::Opcode544,
	&x64Parser::Opcode545,
	&x64Parser::Opcode546,
	&x64Parser::Opcode547,
	&x64Parser::Opcode548,
	&x64Parser::Opcode549,
	&x64Parser::Opcode550,
	&x64Parser::Opcode551,
	&x64Parser::Opcode552,
	&x64Parser::Opcode553,
	&x64Parser::Opcode554,
	&x64Parser::Opcode555,
	&x64Parser::Opcode556,
	&x64Parser::Opcode557,
	&x64Parser::Opcode558,
	&x64Parser::Opcode559,
	&x64Parser::Opcode560,
	&x64Parser::Opcode561,
	&x64Parser::Opcode562,
	&x64Parser::Opcode563,
	&x64Parser::Opcode564,
	&x64Parser::Opcode565,
	&x64Parser::Opcode566,
	&x64Parser::Opcode567,
	&x64Parser::Opcode568,
	&x64Parser::Opcode569,
	&x64Parser::Opcode570,
	&x64Parser::Opcode571,
	&x64Parser::Opcode572,
	&x64Parser::Opcode573,
	&x64Parser::Opcode574,
	&x64Parser::Opcode575,
	&x64Parser::Opcode576,
	&x64Parser::Opcode577,
	&x64Parser::Opcode578,
	&x64Parser::Opcode579,
	&x64Parser::Opcode580,
	&x64Parser::Opcode581,
	&x64Parser::Opcode582,
	&x64Parser::Opcode583,
	&x64Parser::Opcode584,
	&x64Parser::Opcode585,
	&x64Parser::Opcode586,
	&x64Parser::Opcode587,
	&x64Parser::Opcode588,
	&x64Parser::Opcode589,
	&x64Parser::Opcode590,
	&x64Parser::Opcode591,
	&x64Parser::Opcode592,
	&x64Parser::Opcode593,
	&x64Parser::Opcode594,
	&x64Parser::Opcode595,
	&x64Parser::Opcode596,
	&x64Parser::Opcode597,
	&x64Parser::Opcode598,
	&x64Parser::Opcode599,
	&x64Parser::Opcode600,
	&x64Parser::Opcode601,
	&x64Parser::Opcode602,
	&x64Parser::Opcode603,
	&x64Parser::Opcode604,
	&x64Parser::Opcode605,
	&x64Parser::Opcode606,
	&x64Parser::Opcode607,
	&x64Parser::Opcode608,
	&x64Parser::Opcode609,
	&x64Parser::Opcode610,
	&x64Parser::Opcode611,
	&x64Parser::Opcode612,
	&x64Parser::Opcode613,
	&x64Parser::Opcode614,
};
Coding x64Parser::Coding1[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding2[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding3[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding4[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding5[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding6[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding7[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding8[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding9[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding10[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding11[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 7, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding12[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 7, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 7, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding14[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding15[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding16[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding17[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding18[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding20[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding21[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding22[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding23[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding24[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding25[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding26[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 7, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding27[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 7, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding28[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 7, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding29[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding30[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding31[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding32[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding33[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding34[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding35[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding36[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding37[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding38[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding39[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding40[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding41[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 7, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding42[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 7, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding43[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 7, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding44[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding45[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding46[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding47[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding48[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding49[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding50[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding51[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding52[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding53[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding54[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding55[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding56[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding57[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding58[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding59[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding60[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding61[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding62[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding63[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding64[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding65[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding66[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding67[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding68[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding69[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding70[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding71[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding72[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding73[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding74[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding75[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding76[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding77[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding78[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding79[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding80[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding81[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding82[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding83[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding84[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding85[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding86[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding87[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding88[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding89[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding90[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding91[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding92[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding93[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding94[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding95[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding96[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding97[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding98[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding99[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding100[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding101[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding102[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding103[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding104[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding105[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding106[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 1056, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding107[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding108[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding109[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding110[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding111[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding112[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding113[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding114[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding115[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding116[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding117[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding118[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding119[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding120[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding121[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding122[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding123[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding124[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding125[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding126[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding127[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding128[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding129[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding130[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding131[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding132[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding133[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding134[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding135[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding136[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding137[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding138[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding139[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding140[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding141[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding142[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding143[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding144[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding145[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding146[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding147[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding148[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding149[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding150[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding151[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding152[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding153[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding154[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding155[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding156[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding157[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding158[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding159[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding160[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding161[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding162[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding163[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding164[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding165[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding166[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding167[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding168[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding169[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding170[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding171[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding172[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding173[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding174[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding175[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding176[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding177[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding178[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding179[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding180[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding181[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding182[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding183[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding184[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 1057, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding185[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding186[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding187[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding188[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding189[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding190[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding191[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding192[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding193[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding194[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding195[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding196[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding197[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding198[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding199[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding200[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding201[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding202[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding203[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding204[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding205[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding206[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding207[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding208[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding209[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding210[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding211[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding212[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding213[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding214[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding215[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding216[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding217[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding218[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding219[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding220[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding221[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding222[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding223[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding224[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding225[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding226[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding227[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding228[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding229[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding230[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding231[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding232[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding233[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding234[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding235[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding236[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding237[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding238[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding239[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding240[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding241[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 1056, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding242[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding243[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding244[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding245[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding246[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding247[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding248[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding249[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding250[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding251[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding252[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding253[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding254[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding255[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding256[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding257[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding258[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding259[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding260[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding261[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding262[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding263[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding264[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding265[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding266[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding267[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding268[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding269[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding270[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding271[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding272[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding273[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding274[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding275[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding276[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding277[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding278[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding279[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding280[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding281[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding282[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding283[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding284[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding285[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding286[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding287[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding288[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding289[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding290[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding291[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding292[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding293[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding294[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding295[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding296[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding297[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding298[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding299[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding300[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding301[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding302[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding303[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding304[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding305[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding306[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding307[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding308[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding309[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding310[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding311[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding312[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding313[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding314[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding315[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding316[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding317[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding318[] = {
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 9, -1, 0, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 9, -1, 3, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding319[] = {
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 9, -1, 0, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding320[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding321[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding322[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding323[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding324[] = {
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding325[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding326[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding327[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding328[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding329[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding330[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding331[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding332[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding333[] = {
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding334[] = {
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding335[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding336[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding337[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding338[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding339[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 33, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding340[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 33, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding341[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding342[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding343[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding344[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding345[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding346[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding347[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding348[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding349[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding350[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding351[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding352[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding353[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding354[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding355[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding356[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding357[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding358[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding359[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding360[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding361[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding362[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding363[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding364[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding365[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding366[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding367[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding368[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding369[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding370[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding371[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding372[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding373[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding374[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding375[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding376[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding377[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding378[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding379[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding380[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding381[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding382[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding383[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding384[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding385[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding386[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding387[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding388[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding389[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding390[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding391[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding392[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding393[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding394[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding395[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding396[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding397[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding398[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding399[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding400[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding401[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding402[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding403[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding404[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding405[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding406[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding407[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding408[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding409[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding410[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding411[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding412[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding413[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding414[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding415[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding416[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding417[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 205, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding418[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding419[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding420[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding421[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding422[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding423[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding424[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding425[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding426[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding427[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding428[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding429[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding430[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding431[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding432[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding433[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding434[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding435[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding436[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding437[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding438[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding439[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding440[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding441[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding442[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding443[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding444[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding445[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding446[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding447[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding448[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding449[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding450[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding451[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding452[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding453[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding454[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding455[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding456[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding457[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding458[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding459[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding460[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding461[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding462[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding463[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding464[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding465[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding466[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding467[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding468[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding469[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding470[] = {
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding471[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding472[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding473[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding474[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding475[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding476[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding477[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding478[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding479[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding480[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding481[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding482[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding483[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding484[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding485[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding486[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding487[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding488[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding489[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding490[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding491[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding492[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding493[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding494[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding495[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding496[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding497[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding498[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding499[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding500[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding501[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding502[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding503[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding504[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding505[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding506[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding507[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding508[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding509[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding510[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 165, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding511[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding512[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding513[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding514[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding515[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding516[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding517[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding518[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding519[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding520[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding521[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding522[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding523[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding524[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding525[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding526[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding527[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding528[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding529[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding530[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding531[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding532[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding533[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding534[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding535[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding536[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding537[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding538[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding539[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding540[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding541[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding542[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding543[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding544[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding545[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding546[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding547[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding548[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding549[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding550[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding551[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding552[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ Coding::eot },
};
Coding x64Parser::Coding553[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ Coding::eot },
};
Coding x64Parser::Coding554[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding555[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding556[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding557[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding558[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding559[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 202, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding560[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 203, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding561[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding562[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding563[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding564[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding565[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding566[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding567[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding568[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding569[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding570[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding571[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding572[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding573[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding574[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding575[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding576[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding577[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding578[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding579[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding580[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding581[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding582[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding583[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding584[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding585[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding586[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding587[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding588[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding589[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding590[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding591[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding592[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding593[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding594[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding595[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding596[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding597[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding598[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding599[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding600[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding601[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding602[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding603[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding604[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding605[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding606[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding607[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding608[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding609[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding610[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding611[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding612[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding613[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding614[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding615[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 8, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding616[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding * x64Parser::Codings[616] = {
	x64Parser::Coding1,
	x64Parser::Coding2,
	x64Parser::Coding3,
	x64Parser::Coding4,
	x64Parser::Coding5,
	x64Parser::Coding6,
	x64Parser::Coding7,
	x64Parser::Coding8,
	x64Parser::Coding9,
	x64Parser::Coding10,
	x64Parser::Coding11,
	x64Parser::Coding12,
	x64Parser::Coding13,
	x64Parser::Coding14,
	x64Parser::Coding15,
	x64Parser::Coding16,
	x64Parser::Coding17,
	x64Parser::Coding18,
	x64Parser::Coding19,
	x64Parser::Coding20,
	x64Parser::Coding21,
	x64Parser::Coding22,
	x64Parser::Coding23,
	x64Parser::Coding24,
	x64Parser::Coding25,
	x64Parser::Coding26,
	x64Parser::Coding27,
	x64Parser::Coding28,
	x64Parser::Coding29,
	x64Parser::Coding30,
	x64Parser::Coding31,
	x64Parser::Coding32,
	x64Parser::Coding33,
	x64Parser::Coding34,
	x64Parser::Coding35,
	x64Parser::Coding36,
	x64Parser::Coding37,
	x64Parser::Coding38,
	x64Parser::Coding39,
	x64Parser::Coding40,
	x64Parser::Coding41,
	x64Parser::Coding42,
	x64Parser::Coding43,
	x64Parser::Coding44,
	x64Parser::Coding45,
	x64Parser::Coding46,
	x64Parser::Coding47,
	x64Parser::Coding48,
	x64Parser::Coding49,
	x64Parser::Coding50,
	x64Parser::Coding51,
	x64Parser::Coding52,
	x64Parser::Coding53,
	x64Parser::Coding54,
	x64Parser::Coding55,
	x64Parser::Coding56,
	x64Parser::Coding57,
	x64Parser::Coding58,
	x64Parser::Coding59,
	x64Parser::Coding60,
	x64Parser::Coding61,
	x64Parser::Coding62,
	x64Parser::Coding63,
	x64Parser::Coding64,
	x64Parser::Coding65,
	x64Parser::Coding66,
	x64Parser::Coding67,
	x64Parser::Coding68,
	x64Parser::Coding69,
	x64Parser::Coding70,
	x64Parser::Coding71,
	x64Parser::Coding72,
	x64Parser::Coding73,
	x64Parser::Coding74,
	x64Parser::Coding75,
	x64Parser::Coding76,
	x64Parser::Coding77,
	x64Parser::Coding78,
	x64Parser::Coding79,
	x64Parser::Coding80,
	x64Parser::Coding81,
	x64Parser::Coding82,
	x64Parser::Coding83,
	x64Parser::Coding84,
	x64Parser::Coding85,
	x64Parser::Coding86,
	x64Parser::Coding87,
	x64Parser::Coding88,
	x64Parser::Coding89,
	x64Parser::Coding90,
	x64Parser::Coding91,
	x64Parser::Coding92,
	x64Parser::Coding93,
	x64Parser::Coding94,
	x64Parser::Coding95,
	x64Parser::Coding96,
	x64Parser::Coding97,
	x64Parser::Coding98,
	x64Parser::Coding99,
	x64Parser::Coding100,
	x64Parser::Coding101,
	x64Parser::Coding102,
	x64Parser::Coding103,
	x64Parser::Coding104,
	x64Parser::Coding105,
	x64Parser::Coding106,
	x64Parser::Coding107,
	x64Parser::Coding108,
	x64Parser::Coding109,
	x64Parser::Coding110,
	x64Parser::Coding111,
	x64Parser::Coding112,
	x64Parser::Coding113,
	x64Parser::Coding114,
	x64Parser::Coding115,
	x64Parser::Coding116,
	x64Parser::Coding117,
	x64Parser::Coding118,
	x64Parser::Coding119,
	x64Parser::Coding120,
	x64Parser::Coding121,
	x64Parser::Coding122,
	x64Parser::Coding123,
	x64Parser::Coding124,
	x64Parser::Coding125,
	x64Parser::Coding126,
	x64Parser::Coding127,
	x64Parser::Coding128,
	x64Parser::Coding129,
	x64Parser::Coding130,
	x64Parser::Coding131,
	x64Parser::Coding132,
	x64Parser::Coding133,
	x64Parser::Coding134,
	x64Parser::Coding135,
	x64Parser::Coding136,
	x64Parser::Coding137,
	x64Parser::Coding138,
	x64Parser::Coding139,
	x64Parser::Coding140,
	x64Parser::Coding141,
	x64Parser::Coding142,
	x64Parser::Coding143,
	x64Parser::Coding144,
	x64Parser::Coding145,
	x64Parser::Coding146,
	x64Parser::Coding147,
	x64Parser::Coding148,
	x64Parser::Coding149,
	x64Parser::Coding150,
	x64Parser::Coding151,
	x64Parser::Coding152,
	x64Parser::Coding153,
	x64Parser::Coding154,
	x64Parser::Coding155,
	x64Parser::Coding156,
	x64Parser::Coding157,
	x64Parser::Coding158,
	x64Parser::Coding159,
	x64Parser::Coding160,
	x64Parser::Coding161,
	x64Parser::Coding162,
	x64Parser::Coding163,
	x64Parser::Coding164,
	x64Parser::Coding165,
	x64Parser::Coding166,
	x64Parser::Coding167,
	x64Parser::Coding168,
	x64Parser::Coding169,
	x64Parser::Coding170,
	x64Parser::Coding171,
	x64Parser::Coding172,
	x64Parser::Coding173,
	x64Parser::Coding174,
	x64Parser::Coding175,
	x64Parser::Coding176,
	x64Parser::Coding177,
	x64Parser::Coding178,
	x64Parser::Coding179,
	x64Parser::Coding180,
	x64Parser::Coding181,
	x64Parser::Coding182,
	x64Parser::Coding183,
	x64Parser::Coding184,
	x64Parser::Coding185,
	x64Parser::Coding186,
	x64Parser::Coding187,
	x64Parser::Coding188,
	x64Parser::Coding189,
	x64Parser::Coding190,
	x64Parser::Coding191,
	x64Parser::Coding192,
	x64Parser::Coding193,
	x64Parser::Coding194,
	x64Parser::Coding195,
	x64Parser::Coding196,
	x64Parser::Coding197,
	x64Parser::Coding198,
	x64Parser::Coding199,
	x64Parser::Coding200,
	x64Parser::Coding201,
	x64Parser::Coding202,
	x64Parser::Coding203,
	x64Parser::Coding204,
	x64Parser::Coding205,
	x64Parser::Coding206,
	x64Parser::Coding207,
	x64Parser::Coding208,
	x64Parser::Coding209,
	x64Parser::Coding210,
	x64Parser::Coding211,
	x64Parser::Coding212,
	x64Parser::Coding213,
	x64Parser::Coding214,
	x64Parser::Coding215,
	x64Parser::Coding216,
	x64Parser::Coding217,
	x64Parser::Coding218,
	x64Parser::Coding219,
	x64Parser::Coding220,
	x64Parser::Coding221,
	x64Parser::Coding222,
	x64Parser::Coding223,
	x64Parser::Coding224,
	x64Parser::Coding225,
	x64Parser::Coding226,
	x64Parser::Coding227,
	x64Parser::Coding228,
	x64Parser::Coding229,
	x64Parser::Coding230,
	x64Parser::Coding231,
	x64Parser::Coding232,
	x64Parser::Coding233,
	x64Parser::Coding234,
	x64Parser::Coding235,
	x64Parser::Coding236,
	x64Parser::Coding237,
	x64Parser::Coding238,
	x64Parser::Coding239,
	x64Parser::Coding240,
	x64Parser::Coding241,
	x64Parser::Coding242,
	x64Parser::Coding243,
	x64Parser::Coding244,
	x64Parser::Coding245,
	x64Parser::Coding246,
	x64Parser::Coding247,
	x64Parser::Coding248,
	x64Parser::Coding249,
	x64Parser::Coding250,
	x64Parser::Coding251,
	x64Parser::Coding252,
	x64Parser::Coding253,
	x64Parser::Coding254,
	x64Parser::Coding255,
	x64Parser::Coding256,
	x64Parser::Coding257,
	x64Parser::Coding258,
	x64Parser::Coding259,
	x64Parser::Coding260,
	x64Parser::Coding261,
	x64Parser::Coding262,
	x64Parser::Coding263,
	x64Parser::Coding264,
	x64Parser::Coding265,
	x64Parser::Coding266,
	x64Parser::Coding267,
	x64Parser::Coding268,
	x64Parser::Coding269,
	x64Parser::Coding270,
	x64Parser::Coding271,
	x64Parser::Coding272,
	x64Parser::Coding273,
	x64Parser::Coding274,
	x64Parser::Coding275,
	x64Parser::Coding276,
	x64Parser::Coding277,
	x64Parser::Coding278,
	x64Parser::Coding279,
	x64Parser::Coding280,
	x64Parser::Coding281,
	x64Parser::Coding282,
	x64Parser::Coding283,
	x64Parser::Coding284,
	x64Parser::Coding285,
	x64Parser::Coding286,
	x64Parser::Coding287,
	x64Parser::Coding288,
	x64Parser::Coding289,
	x64Parser::Coding290,
	x64Parser::Coding291,
	x64Parser::Coding292,
	x64Parser::Coding293,
	x64Parser::Coding294,
	x64Parser::Coding295,
	x64Parser::Coding296,
	x64Parser::Coding297,
	x64Parser::Coding298,
	x64Parser::Coding299,
	x64Parser::Coding300,
	x64Parser::Coding301,
	x64Parser::Coding302,
	x64Parser::Coding303,
	x64Parser::Coding304,
	x64Parser::Coding305,
	x64Parser::Coding306,
	x64Parser::Coding307,
	x64Parser::Coding308,
	x64Parser::Coding309,
	x64Parser::Coding310,
	x64Parser::Coding311,
	x64Parser::Coding312,
	x64Parser::Coding313,
	x64Parser::Coding314,
	x64Parser::Coding315,
	x64Parser::Coding316,
	x64Parser::Coding317,
	x64Parser::Coding318,
	x64Parser::Coding319,
	x64Parser::Coding320,
	x64Parser::Coding321,
	x64Parser::Coding322,
	x64Parser::Coding323,
	x64Parser::Coding324,
	x64Parser::Coding325,
	x64Parser::Coding326,
	x64Parser::Coding327,
	x64Parser::Coding328,
	x64Parser::Coding329,
	x64Parser::Coding330,
	x64Parser::Coding331,
	x64Parser::Coding332,
	x64Parser::Coding333,
	x64Parser::Coding334,
	x64Parser::Coding335,
	x64Parser::Coding336,
	x64Parser::Coding337,
	x64Parser::Coding338,
	x64Parser::Coding339,
	x64Parser::Coding340,
	x64Parser::Coding341,
	x64Parser::Coding342,
	x64Parser::Coding343,
	x64Parser::Coding344,
	x64Parser::Coding345,
	x64Parser::Coding346,
	x64Parser::Coding347,
	x64Parser::Coding348,
	x64Parser::Coding349,
	x64Parser::Coding350,
	x64Parser::Coding351,
	x64Parser::Coding352,
	x64Parser::Coding353,
	x64Parser::Coding354,
	x64Parser::Coding355,
	x64Parser::Coding356,
	x64Parser::Coding357,
	x64Parser::Coding358,
	x64Parser::Coding359,
	x64Parser::Coding360,
	x64Parser::Coding361,
	x64Parser::Coding362,
	x64Parser::Coding363,
	x64Parser::Coding364,
	x64Parser::Coding365,
	x64Parser::Coding366,
	x64Parser::Coding367,
	x64Parser::Coding368,
	x64Parser::Coding369,
	x64Parser::Coding370,
	x64Parser::Coding371,
	x64Parser::Coding372,
	x64Parser::Coding373,
	x64Parser::Coding374,
	x64Parser::Coding375,
	x64Parser::Coding376,
	x64Parser::Coding377,
	x64Parser::Coding378,
	x64Parser::Coding379,
	x64Parser::Coding380,
	x64Parser::Coding381,
	x64Parser::Coding382,
	x64Parser::Coding383,
	x64Parser::Coding384,
	x64Parser::Coding385,
	x64Parser::Coding386,
	x64Parser::Coding387,
	x64Parser::Coding388,
	x64Parser::Coding389,
	x64Parser::Coding390,
	x64Parser::Coding391,
	x64Parser::Coding392,
	x64Parser::Coding393,
	x64Parser::Coding394,
	x64Parser::Coding395,
	x64Parser::Coding396,
	x64Parser::Coding397,
	x64Parser::Coding398,
	x64Parser::Coding399,
	x64Parser::Coding400,
	x64Parser::Coding401,
	x64Parser::Coding402,
	x64Parser::Coding403,
	x64Parser::Coding404,
	x64Parser::Coding405,
	x64Parser::Coding406,
	x64Parser::Coding407,
	x64Parser::Coding408,
	x64Parser::Coding409,
	x64Parser::Coding410,
	x64Parser::Coding411,
	x64Parser::Coding412,
	x64Parser::Coding413,
	x64Parser::Coding414,
	x64Parser::Coding415,
	x64Parser::Coding416,
	x64Parser::Coding417,
	x64Parser::Coding418,
	x64Parser::Coding419,
	x64Parser::Coding420,
	x64Parser::Coding421,
	x64Parser::Coding422,
	x64Parser::Coding423,
	x64Parser::Coding424,
	x64Parser::Coding425,
	x64Parser::Coding426,
	x64Parser::Coding427,
	x64Parser::Coding428,
	x64Parser::Coding429,
	x64Parser::Coding430,
	x64Parser::Coding431,
	x64Parser::Coding432,
	x64Parser::Coding433,
	x64Parser::Coding434,
	x64Parser::Coding435,
	x64Parser::Coding436,
	x64Parser::Coding437,
	x64Parser::Coding438,
	x64Parser::Coding439,
	x64Parser::Coding440,
	x64Parser::Coding441,
	x64Parser::Coding442,
	x64Parser::Coding443,
	x64Parser::Coding444,
	x64Parser::Coding445,
	x64Parser::Coding446,
	x64Parser::Coding447,
	x64Parser::Coding448,
	x64Parser::Coding449,
	x64Parser::Coding450,
	x64Parser::Coding451,
	x64Parser::Coding452,
	x64Parser::Coding453,
	x64Parser::Coding454,
	x64Parser::Coding455,
	x64Parser::Coding456,
	x64Parser::Coding457,
	x64Parser::Coding458,
	x64Parser::Coding459,
	x64Parser::Coding460,
	x64Parser::Coding461,
	x64Parser::Coding462,
	x64Parser::Coding463,
	x64Parser::Coding464,
	x64Parser::Coding465,
	x64Parser::Coding466,
	x64Parser::Coding467,
	x64Parser::Coding468,
	x64Parser::Coding469,
	x64Parser::Coding470,
	x64Parser::Coding471,
	x64Parser::Coding472,
	x64Parser::Coding473,
	x64Parser::Coding474,
	x64Parser::Coding475,
	x64Parser::Coding476,
	x64Parser::Coding477,
	x64Parser::Coding478,
	x64Parser::Coding479,
	x64Parser::Coding480,
	x64Parser::Coding481,
	x64Parser::Coding482,
	x64Parser::Coding483,
	x64Parser::Coding484,
	x64Parser::Coding485,
	x64Parser::Coding486,
	x64Parser::Coding487,
	x64Parser::Coding488,
	x64Parser::Coding489,
	x64Parser::Coding490,
	x64Parser::Coding491,
	x64Parser::Coding492,
	x64Parser::Coding493,
	x64Parser::Coding494,
	x64Parser::Coding495,
	x64Parser::Coding496,
	x64Parser::Coding497,
	x64Parser::Coding498,
	x64Parser::Coding499,
	x64Parser::Coding500,
	x64Parser::Coding501,
	x64Parser::Coding502,
	x64Parser::Coding503,
	x64Parser::Coding504,
	x64Parser::Coding505,
	x64Parser::Coding506,
	x64Parser::Coding507,
	x64Parser::Coding508,
	x64Parser::Coding509,
	x64Parser::Coding510,
	x64Parser::Coding511,
	x64Parser::Coding512,
	x64Parser::Coding513,
	x64Parser::Coding514,
	x64Parser::Coding515,
	x64Parser::Coding516,
	x64Parser::Coding517,
	x64Parser::Coding518,
	x64Parser::Coding519,
	x64Parser::Coding520,
	x64Parser::Coding521,
	x64Parser::Coding522,
	x64Parser::Coding523,
	x64Parser::Coding524,
	x64Parser::Coding525,
	x64Parser::Coding526,
	x64Parser::Coding527,
	x64Parser::Coding528,
	x64Parser::Coding529,
	x64Parser::Coding530,
	x64Parser::Coding531,
	x64Parser::Coding532,
	x64Parser::Coding533,
	x64Parser::Coding534,
	x64Parser::Coding535,
	x64Parser::Coding536,
	x64Parser::Coding537,
	x64Parser::Coding538,
	x64Parser::Coding539,
	x64Parser::Coding540,
	x64Parser::Coding541,
	x64Parser::Coding542,
	x64Parser::Coding543,
	x64Parser::Coding544,
	x64Parser::Coding545,
	x64Parser::Coding546,
	x64Parser::Coding547,
	x64Parser::Coding548,
	x64Parser::Coding549,
	x64Parser::Coding550,
	x64Parser::Coding551,
	x64Parser::Coding552,
	x64Parser::Coding553,
	x64Parser::Coding554,
	x64Parser::Coding555,
	x64Parser::Coding556,
	x64Parser::Coding557,
	x64Parser::Coding558,
	x64Parser::Coding559,
	x64Parser::Coding560,
	x64Parser::Coding561,
	x64Parser::Coding562,
	x64Parser::Coding563,
	x64Parser::Coding564,
	x64Parser::Coding565,
	x64Parser::Coding566,
	x64Parser::Coding567,
	x64Parser::Coding568,
	x64Parser::Coding569,
	x64Parser::Coding570,
	x64Parser::Coding571,
	x64Parser::Coding572,
	x64Parser::Coding573,
	x64Parser::Coding574,
	x64Parser::Coding575,
	x64Parser::Coding576,
	x64Parser::Coding577,
	x64Parser::Coding578,
	x64Parser::Coding579,
	x64Parser::Coding580,
	x64Parser::Coding581,
	x64Parser::Coding582,
	x64Parser::Coding583,
	x64Parser::Coding584,
	x64Parser::Coding585,
	x64Parser::Coding586,
	x64Parser::Coding587,
	x64Parser::Coding588,
	x64Parser::Coding589,
	x64Parser::Coding590,
	x64Parser::Coding591,
	x64Parser::Coding592,
	x64Parser::Coding593,
	x64Parser::Coding594,
	x64Parser::Coding595,
	x64Parser::Coding596,
	x64Parser::Coding597,
	x64Parser::Coding598,
	x64Parser::Coding599,
	x64Parser::Coding600,
	x64Parser::Coding601,
	x64Parser::Coding602,
	x64Parser::Coding603,
	x64Parser::Coding604,
	x64Parser::Coding605,
	x64Parser::Coding606,
	x64Parser::Coding607,
	x64Parser::Coding608,
	x64Parser::Coding609,
	x64Parser::Coding610,
	x64Parser::Coding611,
	x64Parser::Coding612,
	x64Parser::Coding613,
	x64Parser::Coding614,
	x64Parser::Coding615,
	x64Parser::Coding616,
};
Coding x64Parser::prefixCoding1[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding2[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding3[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding4[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding5[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding6[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding7[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding8[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding9[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding10[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding *x64Parser::prefixCodings[] = {
	x64Parser::prefixCoding1,
	x64Parser::prefixCoding2,
	x64Parser::prefixCoding3,
	x64Parser::prefixCoding4,
	x64Parser::prefixCoding5,
	x64Parser::prefixCoding6,
	x64Parser::prefixCoding7,
	x64Parser::prefixCoding8,
	x64Parser::prefixCoding9,
	x64Parser::prefixCoding10,
};
bool x64Parser::MatchesToken(int token, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::TOKEN && inputTokens[tokenPos]->val->ival == token;
}
	bool x64Parser::MatchesRegister(int reg, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER && inputTokens[tokenPos]->val->ival == reg;
}
	bool x64Parser::MatchesRegisterClass(int cclass, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER && (registerDataIndirect[cclass][inputTokens[tokenPos]->val->ival >> 3] & (1 << (inputTokens[tokenPos]->val->ival & 7)));
}
bool x64Parser::ParseAddresses(x64Operand &operand, int addrClass, int &tokenPos)
{
	int level = 0;
	bool rv = false;
	x64Token *t = tokenBranches1;
	while (t->type != x64Token::EOT)
	{
		bool matches = false;
		if (t->addrClass[addrClass >> 3] & (1 << (addrClass & 7)))
		{
			switch (t->type)
			{
				case x64Token::EMPTY:
					matches = true;
					break;
				case x64Token::TOKEN:
					matches = MatchesToken(t->id, tokenPos);
					break;
				case x64Token::REGISTER:
					matches = MatchesRegister(t->id, tokenPos);
					break;
				case x64Token::REGISTERCLASS:
					matches = MatchesRegisterClass(t->id, tokenPos);
					break;
				case x64Token::NUMBER:
					if (tokenPos < inputTokens.size())
						matches = (this->*numberFuncs[t->id])(tokenPos);
					break;
				default:
					matches = false;
					break;
			}
		}
		if (!matches)
		{
			if (t->level > level)
			{
				t = t->next;
				continue;
			}
		}
		else
			level = t->level;
		if (matches)
		{
			if (t->tokenFunc)
				(this->*(t->tokenFunc))(operand, tokenPos);
			if (t->eos && (tokenPos == inputTokens.size()-1 || !t->next))
			{
				rv = true;
				break;
			}
			t = t->next;
			tokenPos++;
		}
		else
		{
			t++;
		}
	}
	return rv;
}

bool x64Parser::ParseOperands2(x64Token *tokenList, x64Operand &operand, int tokenPos, int level)
{
	bool rv = false;
	x64Token *t = tokenList;
	while (t && t->type != x64Token::EOT)
	{
		bool matches = false;
		int last = tokenPos;
		switch (t->type)
		{
			case x64Token::EMPTY:
				matches = true;
				break;
			case x64Token::TOKEN:
				matches = MatchesToken(t->id, tokenPos);
				break;
			case x64Token::REGISTER:
				matches = MatchesRegister(t->id, tokenPos);
				break;
			case x64Token::REGISTERCLASS:
				matches = MatchesRegisterClass(t->id,tokenPos);
				break;
			case x64Token::ADDRESSCLASS:
				matches = ParseAddresses(operand, t->id, tokenPos);
				break;
			case x64Token::NUMBER:
				if (tokenPos < inputTokens.size())
					matches = (this->*numberFuncs[t->id])(tokenPos);
				break;
			default:
				matches = false;
				break;
		}
		if (!matches)
		{
			if (t->level > level)
			{
				if (ParseOperands2(t->next, operand, tokenPos, t->level))
				{
					rv = true;
					break;
				}
			}
		}
		else
		{
			if (t->tokenFunc)
				(this->*(t->tokenFunc))(operand, last);
			if (t->eos && (!t->next || tokenPos == inputTokens.size()-1))
			{
				if (tokenPos >= (int)(inputTokens.size()-1))
					eol = true;
				rv = true;
				break;
			}
			if (tokenPos < inputTokens.size() && ParseOperands2(t->next, operand, tokenPos+1, t->level))
			{
				rv = true;
				break;
			}
		}
		tokenPos = last;
		t++;
	}
	return rv;
}

bool x64Parser::ParseOperands(x64Token *tokenList, x64Operand &operand)
{
	return ParseOperands2(tokenList, operand, 0, 0);
}

bool x64Parser::ProcessCoding(x64Operand &operand, Coding *coding, int field, int bits, int* arr, char* bitcounts, char *func, int &index)
{
	int acc = 0, binary = 0;
	while (coding->type != Coding::eot)
	{
		if (coding->type & Coding::bitSpecified)
			bits = coding->bits;
		if (coding->type & Coding::valSpecified)
		{
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = coding->val;
		}
		else if (coding->type & Coding::reg)
		{
			int n = coding->val;
			if (field != -1)
				n = registerValues[n][field];
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = n;
		}
		else if (coding->type & Coding::stateFunc)
		{
			Coding *c = (this->*stateFuncs[coding->val])();
			int index1 = index;
			if (!ProcessCoding(operand, c, coding->field, bits, arr, bitcounts, func, index))
				return false;
			if (index != index1 && coding->binary)
				func[index - 1] = coding->binary;
		}
		else if (coding->type & Coding::stateVar)
		{
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = stateVars[coding->val];
		}
		else if (coding->type & Coding::number)
		{
			int n = coding->val;
			auto it = operands.begin();
			for (int i = 0; i < n; i++)
			{
				++it;
			}
			(*it)->used = true;
			n = 0;
			for (int i = 0; i < index; i++)
				if (!func[i])
					n += bitcounts[i];
			(*it)->pos = n;
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = (*it)->node->ival;
		}
		else if (coding->type & Coding::native)
		{
			if (operand.addressCoding == -1)
				return false;
			int index1 = index;
			if (!ProcessCoding(operand, Codings[operand.addressCoding], coding->field, bits, arr, bitcounts, func, index))
				return false;
			if (index != index1 && coding->binary)
				func[index - 1] = coding->binary;
		}
		else if (coding->type & Coding::indirect)
		{
			if (!operand.values[coding->val])
			{
				if (!(coding->type & Coding::optional))
				{
					return false;
				}
			}
			else
			{
				int index1 = index;
				if (!ProcessCoding(operand, operand.values[coding->val], coding->field, bits, arr, bitcounts, func, index))
					return false;
				if (index != index1 && coding->binary)
					func[index - 1] = coding->binary;
			}
		}
		else if (coding->type & Coding::illegal)
		{
			return false;
		}
		else
		{
			return false;
		}
		coding++;
	}
	return true;
}
bool x64Parser::ProcessCoding(x64Operand &operand, Coding *coding)
{
	int arr[1000];
	char bitcount[1000];
	char func[1000];
	int index = 0;
	if (coding->type == Coding::eot)
		return true;
	int defaultBits = 8;
	bool rv = ProcessCoding(operand, coding, -1, defaultBits, arr, bitcount, func, index);
	if (rv)
	{
		for (int i = 0; i < index; i++)
		{
			if (func[i])
				arr[i + 1] = DoMath(func[i], arr[i], arr[i + 1]);
			else
				bits.Add(arr[i], bitcount[i]);
		}
	}
	return rv;
}
bool x64Parser::DispatchOpcode(int opcode)
{
	bool rv;
	if (opcode == -1)
	{
		rv = true;
		x64Operand operand;
		for (auto& a : prefixes)
			rv &= ProcessCoding(operand, prefixCodings[a]);
	}
	else
	{
		x64Operand operand;
		operand.opcode = opcode;
		rv = (this->*DispatchTable[opcode])(operand);
		if (rv)
		{
			for (auto& a : prefixes)
				rv &= ProcessCoding(operand, prefixCodings[a]);
			if (rv)
			{
				if (operand.operandCoding != -1)
					rv = ProcessCoding(operand, Codings[operand.operandCoding]);
				else if (operand.addressCoding != -1)
					rv = ProcessCoding(operand, Codings[operand.addressCoding]);
				else rv = false;
			}
		}
	}
	return rv;
}
