#include "InstructionParser.h"
#include "x64Operand.h"
#include "x64Parser.h"

InstructionParser *InstructionParser::GetInstance()
{
	return static_cast<InstructionParser *>(new x64Parser());
}
Coding x64Parser::stateCoding_eot[] = { { Coding::eot } };
Coding x64Parser::stateCoding1_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding1_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding2_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding2_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding3_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding4_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding4_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding5_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding5_2[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding6_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding7_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding *x64Parser::StateFunc1()
{
	if (stateVars[0]!=16)
	{
		return stateCoding1_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding1_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc2()
{
	if (stateVars[0]!=32)
	{
		return stateCoding2_1;
	}
	if (stateVars[0]==32)
	{
		return stateCoding2_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc3()
{
	if (true)
	{
		return stateCoding3_1;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc4()
{
	if (stateVars[0]!=16)
	{
		return stateCoding4_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding4_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc5()
{
	if (stateVars[0]!=16)
	{
		return stateCoding5_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding5_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc6()
{
	if (true)
	{
		return stateCoding6_1;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc7()
{
	if (true)
	{
		return stateCoding7_1;
	}
	return stateCoding_eot;
}
x64Parser::StateFuncDispatchType x64Parser::stateFuncs[] = {
	&x64Parser::StateFunc1,
	&x64Parser::StateFunc2,
	&x64Parser::StateFunc3,
	&x64Parser::StateFunc4,
	&x64Parser::StateFunc5,
	&x64Parser::StateFunc6,
	&x64Parser::StateFunc7,
};
bool x64Parser::Number1(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 1, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number2(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 1, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number3(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 6, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number4(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number5(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number6(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number7(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 64, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number8(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(0, 0, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number9(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==32)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number10(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==32)
	{
		rv = ParseNumber(0, 0, 64, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number11(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(1, 1, 8, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number12(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(-1, 1, 8, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number13(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number14(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(-2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number15(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number16(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(-2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number17(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]!=16)
	{
		rv = ParseNumber(4, 1, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number18(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 1, 0);
	if (!rv)
		rv = SetNumber(tokenPos, 2, 1);
	if (!rv)
		rv = SetNumber(tokenPos, 4, 2);
	if (!rv)
		rv = SetNumber(tokenPos, 8, 3);
	return rv;
}
bool x64Parser::Number19(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 0, 0);
	return rv;
}
bool x64Parser::Number20(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 1, 1);
	return rv;
}
x64Parser::NumberDispatchType x64Parser::numberFuncs[] = {
	&x64Parser::Number1,
	&x64Parser::Number2,
	&x64Parser::Number3,
	&x64Parser::Number4,
	&x64Parser::Number5,
	&x64Parser::Number6,
	&x64Parser::Number7,
	&x64Parser::Number8,
	&x64Parser::Number9,
	&x64Parser::Number10,
	&x64Parser::Number11,
	&x64Parser::Number12,
	&x64Parser::Number13,
	&x64Parser::Number14,
	&x64Parser::Number15,
	&x64Parser::Number16,
	&x64Parser::Number17,
	&x64Parser::Number18,
	&x64Parser::Number19,
	&x64Parser::Number20,
};

unsigned char x64Parser::RegClassData1[] = {255, 255, 7, 0, 0, };
unsigned char x64Parser::RegClassData2[] = {255, 0, 0, 0, 0, };
unsigned char x64Parser::RegClassData3[] = {255, 7, 0, 0, 0, };
unsigned char x64Parser::RegClassData4[] = {127, 7, 0, 0, 0, };
unsigned char x64Parser::RegClassData5[] = {2, 249, 7, 0, 0, };
unsigned char x64Parser::RegClassData6[] = {9, 0, 8, 0, 0, };
unsigned char x64Parser::RegClassData7[] = {17, 0, 16, 0, 0, };
unsigned char x64Parser::RegClassData8[] = {33, 0, 32, 0, 0, };
unsigned char x64Parser::RegClassData9[] = {64, 0, 0, 0, 0, };
unsigned char x64Parser::RegClassData10[] = {0, 0, 64, 0, 0, };
unsigned char x64Parser::RegClassData11[] = {4, 16, 128, 0, 0, };
unsigned char x64Parser::RegClassData12[] = {0, 32, 0, 3, 0, };
unsigned char x64Parser::RegClassData13[] = {0, 64, 0, 12, 0, };
unsigned char x64Parser::RegClassData14[] = {0, 128, 0, 48, 0, };
unsigned char x64Parser::RegClassData15[] = {0, 0, 1, 192, 0, };
unsigned char x64Parser::RegClassData16[] = {0, 0, 0, 0, 3, };
unsigned char x64Parser::RegClassData17[] = {0, 0, 0, 0, 12, };
unsigned char x64Parser::RegClassData18[] = {0, 0, 0, 0, 48, };

unsigned char x64Parser::registerData23[] = {0, 0, 0, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData8[] = {8, 16, 32, 64, 64, 64, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData11[] = {136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData14[] = {16, 32, 64, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData17[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData34[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, 0, };
unsigned char x64Parser::registerData35[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, };
unsigned char x64Parser::registerData33[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, 0, 0, };
unsigned char x64Parser::registerData1[] = {255, 255, 255, 255, 15, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData5[] = {2, 4, 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData27[] = {0, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData9[] = {8, 16, 32, 64, 0, 64, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData12[] = {136, 16, 33, 66, 4, 64, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData15[] = {16, 32, 64, 128, 0, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData18[] = {16, 33, 66, 132, 8, 128, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData4[] = {33, 66, 132, 8, 17, 17, 17, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData22[] = {0, 0, 0, 120, 0, 0, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData16[] = {16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData6[] = {4, 8, 16, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData7[] = {68, 136, 16, 33, 34, 34, 34, 34, 2, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData10[] = {8, 16, 32, 64, 64, 64, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData13[] = {136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData21[] = {0, 32, 64, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData19[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData20[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData2[] = {3, 6, 12, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData3[] = {33, 66, 132, 8, 17, 17, 17, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData26[] = {0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData25[] = {0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData29[] = {0, 0, 0, 0, 0, 0, 0, 0, 144, 36, 73, 2, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData28[] = {0, 0, 0, 0, 0, 0, 0, 0, 240, 255, 255, 15, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData30[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 146, 4, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData32[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 3, 0, 0, 0, 0, };
unsigned char x64Parser::registerData31[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 36, 9, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData24[] = {0, 0, 0, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData36[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, };

unsigned char *x64Parser::registerDataIndirect[] = {
	registerData1,
	registerData2,
	registerData3,
	registerData4,
	registerData5,
	registerData6,
	registerData7,
	registerData8,
	registerData9,
	registerData10,
	registerData11,
	registerData12,
	registerData13,
	registerData14,
	registerData15,
	registerData16,
	registerData17,
	registerData18,
	registerData19,
	registerData20,
	registerData21,
	registerData22,
	registerData23,
	registerData24,
	registerData25,
	registerData26,
	registerData27,
	registerData28,
	registerData29,
	registerData30,
	registerData31,
	registerData32,
	registerData33,
	registerData34,
	registerData35,
	registerData36,
};

int x64Parser::registerValues[][7] = {
	{ 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 8, -1, -1, -1, },
	{ 1, 0, 4, 0, -1, -1, -1, },
	{ 1, 0, 4, 0, -1, -1, -1, },
	{ 1, 0, 4, 0, -1, -1, -1, },
	{ 1, 0, 4, 8, -1, -1, -1, },
	{ 0, 1, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 8, -1, -1, -1, },
	{ 1, 1, 4, 0, -1, -1, -1, },
	{ 1, 1, 4, 0, -1, -1, -1, },
	{ 1, 1, 4, 0, -1, -1, -1, },
	{ 1, 1, 4, 8, -1, -1, -1, },
	{ 0, 2, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 8, -1, -1, -1, },
	{ 1, 2, 4, 0, -1, -1, -1, },
	{ 1, 2, 4, 0, -1, -1, -1, },
	{ 1, 2, 4, 0, -1, -1, -1, },
	{ 1, 2, 4, 8, -1, -1, -1, },
	{ 0, 3, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, -1, -1, },
	{ 0, 3, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 8, -1, -1, -1, },
	{ 1, 3, 4, 0, -1, -1, -1, },
	{ 1, 3, 4, 0, -1, -1, -1, },
	{ 1, 3, 4, 0, -1, -1, -1, },
	{ 1, 3, 4, 8, -1, -1, -1, },
	{ 0, 4, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 8, -1, -1, -1, },
	{ 1, 4, 4, 0, -1, -1, -1, },
	{ 1, 4, 4, 0, -1, -1, -1, },
	{ 1, 4, 4, 0, -1, -1, -1, },
	{ 1, 4, 4, 8, -1, -1, -1, },
	{ 0, 5, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 1, -1, -1, },
	{ 0, 5, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 8, -1, -1, -1, },
	{ 1, 5, 4, 0, -1, -1, -1, },
	{ 1, 5, 4, 0, -1, -1, -1, },
	{ 1, 5, 4, 0, -1, -1, -1, },
	{ 1, 5, 4, 8, -1, -1, -1, },
	{ 0, 6, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, -1, 0, -1, },
	{ 0, 6, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 8, -1, -1, -1, },
	{ 1, 6, 4, 0, -1, -1, -1, },
	{ 1, 6, 4, 0, -1, -1, -1, },
	{ 1, 6, 4, 0, -1, -1, -1, },
	{ 1, 6, 4, 8, -1, -1, -1, },
	{ 0, 7, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, -1, 1, -1, },
	{ 0, 7, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 8, -1, -1, -1, },
	{ 1, 7, 4, 0, -1, -1, -1, },
	{ 1, 7, 4, 0, -1, -1, -1, },
	{ 1, 7, 4, 0, -1, -1, -1, },
	{ 1, 7, 4, 8, -1, -1, -1, },
	{ 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 0, 4, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, -1, -1, -1, },
	{ 1, 1, 4, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, -1, -1, -1, },
	{ 1, 2, 4, 0, -1, -1, -1, },
	{ 0, 3, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 0, -1, -1, -1, },
	{ 1, 3, 4, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, -1, -1, -1, },
	{ 1, 4, 4, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, -1, -1, -1, },
	{ 1, 5, 4, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, -1, -1, -1, },
	{ 1, 6, 4, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, -1, -1, -1, },
	{ 1, 7, 4, 0, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, 38, },
	{ -1, 1, -1, -1, -1, -1, 46, },
	{ -1, 2, -1, -1, -1, -1, 54, },
	{ -1, 3, -1, -1, -1, -1, 62, },
	{ -1, 4, -1, -1, -1, -1, 100, },
	{ -1, 5, -1, -1, -1, -1, 101, },
	{ -1, 0, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, },
};

void x64Parser::Init()
{
	memset(&stateVars, 0, sizeof(stateVars));
	stateVars[0] = 16;
	tokenTable[""] = 0;
	tokenTable["*"] = 5;
	tokenTable["+"] = 4;
	tokenTable[","] = 9;
	tokenTable[":"] = 3;
	tokenTable["["] = 1;
	tokenTable["]"] = 2;
	tokenTable["byte"] = 13;
	tokenTable["dword"] = 11;
	tokenTable["eip"] = 6;
	tokenTable["far"] = 17;
	tokenTable["near"] = 16;
	tokenTable["qword"] = 12;
	tokenTable["rip"] = 7;
	tokenTable["short"] = 15;
	tokenTable["tword"] = 14;
	tokenTable["word"] = 10;
	tokenTable["al"] = 1000;
	tokenTable["ah"] = 1001;
	tokenTable["ax"] = 1002;
	tokenTable["eax"] = 1003;
	tokenTable["rax"] = 1004;
	tokenTable["r8b"] = 1005;
	tokenTable["r8w"] = 1006;
	tokenTable["r8d"] = 1007;
	tokenTable["r8"] = 1008;
	tokenTable["cl"] = 1009;
	tokenTable["ch"] = 1010;
	tokenTable["cx"] = 1011;
	tokenTable["ecx"] = 1012;
	tokenTable["rcx"] = 1013;
	tokenTable["r9b"] = 1014;
	tokenTable["r9w"] = 1015;
	tokenTable["r9d"] = 1016;
	tokenTable["r9"] = 1017;
	tokenTable["dl"] = 1018;
	tokenTable["dh"] = 1019;
	tokenTable["dx"] = 1020;
	tokenTable["edx"] = 1021;
	tokenTable["rdx"] = 1022;
	tokenTable["r10b"] = 1023;
	tokenTable["r10w"] = 1024;
	tokenTable["r10d"] = 1025;
	tokenTable["r10"] = 1026;
	tokenTable["bl"] = 1027;
	tokenTable["bh"] = 1028;
	tokenTable["bx"] = 1029;
	tokenTable["ebx"] = 1030;
	tokenTable["rbx"] = 1031;
	tokenTable["r11b"] = 1032;
	tokenTable["r11w"] = 1033;
	tokenTable["r11d"] = 1034;
	tokenTable["r11"] = 1035;
	tokenTable["spl"] = 1036;
	tokenTable["sp"] = 1037;
	tokenTable["esp"] = 1038;
	tokenTable["rsp"] = 1039;
	tokenTable["r12b"] = 1040;
	tokenTable["r12w"] = 1041;
	tokenTable["r12d"] = 1042;
	tokenTable["r12"] = 1043;
	tokenTable["bpl"] = 1044;
	tokenTable["bp"] = 1045;
	tokenTable["ebp"] = 1046;
	tokenTable["rbp"] = 1047;
	tokenTable["r13b"] = 1048;
	tokenTable["r13w"] = 1049;
	tokenTable["r13d"] = 1050;
	tokenTable["r13"] = 1051;
	tokenTable["sil"] = 1052;
	tokenTable["si"] = 1053;
	tokenTable["esi"] = 1054;
	tokenTable["rsi"] = 1055;
	tokenTable["r14b"] = 1056;
	tokenTable["r14w"] = 1057;
	tokenTable["r14d"] = 1058;
	tokenTable["r14"] = 1059;
	tokenTable["dil"] = 1060;
	tokenTable["di"] = 1061;
	tokenTable["edi"] = 1062;
	tokenTable["rdi"] = 1063;
	tokenTable["r15b"] = 1064;
	tokenTable["r15w"] = 1065;
	tokenTable["r15d"] = 1066;
	tokenTable["r15"] = 1067;
	tokenTable["mm0"] = 1068;
	tokenTable["xmm0"] = 1069;
	tokenTable["xmm8"] = 1070;
	tokenTable["mm1"] = 1071;
	tokenTable["xmm1"] = 1072;
	tokenTable["xmm9"] = 1073;
	tokenTable["mm2"] = 1074;
	tokenTable["xmm2"] = 1075;
	tokenTable["xmm10"] = 1076;
	tokenTable["mm3"] = 1077;
	tokenTable["xmm3"] = 1078;
	tokenTable["xmm11"] = 1079;
	tokenTable["mm4"] = 1080;
	tokenTable["xmm4"] = 1081;
	tokenTable["xmm12"] = 1082;
	tokenTable["mm5"] = 1083;
	tokenTable["xmm5"] = 1084;
	tokenTable["xmm13"] = 1085;
	tokenTable["mm6"] = 1086;
	tokenTable["xmm6"] = 1087;
	tokenTable["xmm14"] = 1088;
	tokenTable["mm7"] = 1089;
	tokenTable["xmm7"] = 1090;
	tokenTable["xmm15"] = 1091;
	tokenTable["es"] = 1092;
	tokenTable["cs"] = 1093;
	tokenTable["ss"] = 1094;
	tokenTable["ds"] = 1095;
	tokenTable["fs"] = 1096;
	tokenTable["gs"] = 1097;
	tokenTable["st0"] = 1098;
	tokenTable["st1"] = 1099;
	tokenTable["st2"] = 1100;
	tokenTable["st3"] = 1101;
	tokenTable["st4"] = 1102;
	tokenTable["st5"] = 1103;
	tokenTable["st6"] = 1104;
	tokenTable["st7"] = 1105;
	tokenTable["cr0"] = 1106;
	tokenTable["cr1"] = 1107;
	tokenTable["cr2"] = 1108;
	tokenTable["cr3"] = 1109;
	tokenTable["cr4"] = 1110;
	tokenTable["cr5"] = 1111;
	tokenTable["cr6"] = 1112;
	tokenTable["cr7"] = 1113;
	tokenTable["dr0"] = 1114;
	tokenTable["dr1"] = 1115;
	tokenTable["dr2"] = 1116;
	tokenTable["dr3"] = 1117;
	tokenTable["dr4"] = 1118;
	tokenTable["dr5"] = 1119;
	tokenTable["dr6"] = 1120;
	tokenTable["dr7"] = 1121;
	tokenTable["tr0"] = 1122;
	tokenTable["tr1"] = 1123;
	tokenTable["tr2"] = 1124;
	tokenTable["tr3"] = 1125;
	tokenTable["tr4"] = 1126;
	tokenTable["tr5"] = 1127;
	tokenTable["tr6"] = 1128;
	tokenTable["tr7"] = 1129;
	opcodeTable["aaa"] = 32;
	opcodeTable["aad"] = 33;
	opcodeTable["aam"] = 34;
	opcodeTable["aas"] = 35;
	opcodeTable["adc"] = 36;
	opcodeTable["add"] = 37;
	opcodeTable["and"] = 38;
	opcodeTable["arpl"] = 39;
	opcodeTable["bound"] = 40;
	opcodeTable["bsf"] = 41;
	opcodeTable["bsr"] = 42;
	opcodeTable["bswap"] = 43;
	opcodeTable["bt"] = 44;
	opcodeTable["btc"] = 45;
	opcodeTable["btr"] = 46;
	opcodeTable["bts"] = 47;
	opcodeTable["call"] = 48;
	opcodeTable["cbw"] = 49;
	opcodeTable["cdq"] = 50;
	opcodeTable["cdqe"] = 51;
	opcodeTable["clc"] = 52;
	opcodeTable["cld"] = 53;
	opcodeTable["cli"] = 54;
	opcodeTable["clts"] = 55;
	opcodeTable["cmc"] = 56;
	opcodeTable["cmova"] = 57;
	opcodeTable["cmovae"] = 58;
	opcodeTable["cmovb"] = 59;
	opcodeTable["cmovbe"] = 60;
	opcodeTable["cmovc"] = 61;
	opcodeTable["cmove"] = 62;
	opcodeTable["cmovg"] = 63;
	opcodeTable["cmovge"] = 64;
	opcodeTable["cmovl"] = 65;
	opcodeTable["cmovle"] = 66;
	opcodeTable["cmovna"] = 67;
	opcodeTable["cmovnae"] = 68;
	opcodeTable["cmovnb"] = 69;
	opcodeTable["cmovnbe"] = 70;
	opcodeTable["cmovnc"] = 71;
	opcodeTable["cmovne"] = 72;
	opcodeTable["cmovng"] = 73;
	opcodeTable["cmovnge"] = 74;
	opcodeTable["cmovnl"] = 75;
	opcodeTable["cmovnle"] = 76;
	opcodeTable["cmovno"] = 77;
	opcodeTable["cmovnp"] = 78;
	opcodeTable["cmovns"] = 79;
	opcodeTable["cmovnz"] = 80;
	opcodeTable["cmovo"] = 81;
	opcodeTable["cmovp"] = 82;
	opcodeTable["cmovpe"] = 83;
	opcodeTable["cmovpo"] = 84;
	opcodeTable["cmovs"] = 85;
	opcodeTable["cmovz"] = 86;
	opcodeTable["cmp"] = 87;
	opcodeTable["cmps"] = 88;
	opcodeTable["cmpsb"] = 89;
	opcodeTable["cmpsw"] = 90;
	opcodeTable["cmpsd"] = 91;
	opcodeTable["cmpsq"] = 92;
	opcodeTable["cmpxchg"] = 93;
	opcodeTable["cmpxchg8b"] = 94;
	opcodeTable["cmpxchg16b"] = 95;
	opcodeTable["cpuid"] = 96;
	opcodeTable["cqo"] = 97;
	opcodeTable["cwd"] = 98;
	opcodeTable["cwde"] = 99;
	opcodeTable["daa"] = 100;
	opcodeTable["das"] = 101;
	opcodeTable["dec"] = 102;
	opcodeTable["div"] = 103;
	opcodeTable["enter"] = 104;
	opcodeTable["esc"] = 105;
	opcodeTable["f2xm1"] = 106;
	opcodeTable["fabs"] = 107;
	opcodeTable["fadd"] = 108;
	opcodeTable["faddp"] = 109;
	opcodeTable["fbld"] = 110;
	opcodeTable["fbstp"] = 111;
	opcodeTable["fchs"] = 112;
	opcodeTable["fclex"] = 113;
	opcodeTable["fnclex"] = 114;
	opcodeTable["fcmovb"] = 115;
	opcodeTable["fcmovbe"] = 116;
	opcodeTable["fcmove"] = 117;
	opcodeTable["fcmovnb"] = 118;
	opcodeTable["fcmovnbe"] = 119;
	opcodeTable["fcmovne"] = 120;
	opcodeTable["fcmovnu"] = 121;
	opcodeTable["fcmovu"] = 122;
	opcodeTable["fcom"] = 123;
	opcodeTable["fcom2"] = 124;
	opcodeTable["fcomi"] = 125;
	opcodeTable["fcomip"] = 126;
	opcodeTable["fcomp"] = 127;
	opcodeTable["fcomp3"] = 128;
	opcodeTable["fcomp5"] = 129;
	opcodeTable["fcompp"] = 130;
	opcodeTable["fcos"] = 131;
	opcodeTable["fdecstp"] = 132;
	opcodeTable["fdisi"] = 133;
	opcodeTable["fdiv"] = 134;
	opcodeTable["fdivp"] = 135;
	opcodeTable["fdivr"] = 136;
	opcodeTable["fdivrp"] = 137;
	opcodeTable["feni"] = 138;
	opcodeTable["ffree"] = 139;
	opcodeTable["ffreep"] = 140;
	opcodeTable["fiadd"] = 141;
	opcodeTable["ficom"] = 142;
	opcodeTable["ficomp"] = 143;
	opcodeTable["fidiv"] = 144;
	opcodeTable["fidivr"] = 145;
	opcodeTable["fild"] = 146;
	opcodeTable["fimul"] = 147;
	opcodeTable["fincstp"] = 148;
	opcodeTable["finit"] = 149;
	opcodeTable["fninit"] = 150;
	opcodeTable["fist"] = 151;
	opcodeTable["fistp"] = 152;
	opcodeTable["fisub"] = 153;
	opcodeTable["fisubr"] = 154;
	opcodeTable["fld"] = 155;
	opcodeTable["fld1"] = 156;
	opcodeTable["fldcw"] = 157;
	opcodeTable["fldenv"] = 158;
	opcodeTable["fldl2e"] = 159;
	opcodeTable["fldl2t"] = 160;
	opcodeTable["fldlg2"] = 161;
	opcodeTable["fldln2"] = 162;
	opcodeTable["fldpi"] = 163;
	opcodeTable["fldz"] = 164;
	opcodeTable["fmul"] = 165;
	opcodeTable["fmulp"] = 166;
	opcodeTable["fnop"] = 167;
	opcodeTable["fnsave"] = 168;
	opcodeTable["fpatan"] = 169;
	opcodeTable["fprem"] = 170;
	opcodeTable["fprem1"] = 171;
	opcodeTable["fptan"] = 172;
	opcodeTable["frndint"] = 173;
	opcodeTable["frstor"] = 174;
	opcodeTable["fsave"] = 175;
	opcodeTable["fscale"] = 176;
	opcodeTable["fsetpm"] = 177;
	opcodeTable["fsin"] = 178;
	opcodeTable["fsincos"] = 179;
	opcodeTable["fsqrt"] = 180;
	opcodeTable["fst"] = 181;
	opcodeTable["fstcw"] = 182;
	opcodeTable["fnstcw"] = 183;
	opcodeTable["fstenv"] = 184;
	opcodeTable["fnstenv"] = 185;
	opcodeTable["fstp"] = 186;
	opcodeTable["fstp1"] = 187;
	opcodeTable["fstp8"] = 188;
	opcodeTable["fstp9"] = 189;
	opcodeTable["fstsw"] = 190;
	opcodeTable["fnstsw"] = 191;
	opcodeTable["fsub"] = 192;
	opcodeTable["fsubp"] = 193;
	opcodeTable["fsubr"] = 194;
	opcodeTable["fsubrp"] = 195;
	opcodeTable["ftst"] = 196;
	opcodeTable["fucom"] = 197;
	opcodeTable["fucomi"] = 198;
	opcodeTable["fucomip"] = 199;
	opcodeTable["fucomp"] = 200;
	opcodeTable["fucompp"] = 201;
	opcodeTable["fwait"] = 202;
	opcodeTable["fxam"] = 203;
	opcodeTable["fxch"] = 204;
	opcodeTable["fxch4"] = 205;
	opcodeTable["fxch7"] = 206;
	opcodeTable["fxrstor"] = 207;
	opcodeTable["fxsave"] = 208;
	opcodeTable["fxtract"] = 209;
	opcodeTable["fyl2x"] = 210;
	opcodeTable["fyl2xp1"] = 211;
	opcodeTable["hlt"] = 212;
	opcodeTable["ibts"] = 213;
	opcodeTable["icebp"] = 214;
	opcodeTable["idiv"] = 215;
	opcodeTable["imul"] = 216;
	opcodeTable["in"] = 217;
	opcodeTable["ins"] = 218;
	opcodeTable["insb"] = 219;
	opcodeTable["insw"] = 220;
	opcodeTable["insd"] = 221;
	opcodeTable["insq"] = 222;
	opcodeTable["inc"] = 223;
	opcodeTable["int"] = 224;
	opcodeTable["int1"] = 225;
	opcodeTable["int3"] = 226;
	opcodeTable["into"] = 227;
	opcodeTable["invd"] = 228;
	opcodeTable["invlpg"] = 229;
	opcodeTable["iret"] = 230;
	opcodeTable["iretw"] = 231;
	opcodeTable["iretd"] = 232;
	opcodeTable["iretq"] = 233;
	opcodeTable["ja"] = 234;
	opcodeTable["jae"] = 235;
	opcodeTable["jb"] = 236;
	opcodeTable["jbe"] = 237;
	opcodeTable["jc"] = 238;
	opcodeTable["jcxz"] = 239;
	opcodeTable["jecxz"] = 240;
	opcodeTable["je"] = 241;
	opcodeTable["jg"] = 242;
	opcodeTable["jge"] = 243;
	opcodeTable["jl"] = 244;
	opcodeTable["jle"] = 245;
	opcodeTable["jmp"] = 246;
	opcodeTable["jna"] = 247;
	opcodeTable["jnae"] = 248;
	opcodeTable["jnb"] = 249;
	opcodeTable["jnbe"] = 250;
	opcodeTable["jnc"] = 251;
	opcodeTable["jne"] = 252;
	opcodeTable["jng"] = 253;
	opcodeTable["jnge"] = 254;
	opcodeTable["jnl"] = 255;
	opcodeTable["jnle"] = 256;
	opcodeTable["jno"] = 257;
	opcodeTable["jnp"] = 258;
	opcodeTable["jns"] = 259;
	opcodeTable["jnz"] = 260;
	opcodeTable["jo"] = 261;
	opcodeTable["jp"] = 262;
	opcodeTable["jpe"] = 263;
	opcodeTable["jpo"] = 264;
	opcodeTable["js"] = 265;
	opcodeTable["jz"] = 266;
	opcodeTable["lahf"] = 267;
	opcodeTable["lar"] = 268;
	opcodeTable["lds"] = 269;
	opcodeTable["lea"] = 270;
	opcodeTable["leave"] = 271;
	opcodeTable["les"] = 272;
	opcodeTable["lfence"] = 273;
	opcodeTable["lfs"] = 274;
	opcodeTable["lgdt"] = 275;
	opcodeTable["lgs"] = 276;
	opcodeTable["lidt"] = 277;
	opcodeTable["lmsw"] = 278;
	opcodeTable["lods"] = 279;
	opcodeTable["lodsb"] = 280;
	opcodeTable["lodsw"] = 281;
	opcodeTable["lodsd"] = 282;
	opcodeTable["lodsq"] = 283;
	opcodeTable["loop"] = 284;
	opcodeTable["loope"] = 285;
	opcodeTable["loopne"] = 286;
	opcodeTable["loopnz"] = 287;
	opcodeTable["loopz"] = 288;
	opcodeTable["lsl"] = 289;
	opcodeTable["lss"] = 290;
	opcodeTable["ltr"] = 291;
	opcodeTable["mov"] = 292;
	opcodeTable["movs"] = 293;
	opcodeTable["movbe"] = 294;
	opcodeTable["movsb"] = 295;
	opcodeTable["movsw"] = 296;
	opcodeTable["movsd"] = 297;
	opcodeTable["movsq"] = 298;
	opcodeTable["movsx"] = 299;
	opcodeTable["movzx"] = 300;
	opcodeTable["movsxd"] = 301;
	opcodeTable["mul"] = 302;
	opcodeTable["neg"] = 303;
	opcodeTable["nop"] = 304;
	opcodeTable["not"] = 305;
	opcodeTable["or"] = 306;
	opcodeTable["out"] = 307;
	opcodeTable["outs"] = 308;
	opcodeTable["outsb"] = 309;
	opcodeTable["outsw"] = 310;
	opcodeTable["outsd"] = 311;
	opcodeTable["pop"] = 312;
	opcodeTable["popa"] = 313;
	opcodeTable["popaw"] = 314;
	opcodeTable["popad"] = 315;
	opcodeTable["popcnt"] = 316;
	opcodeTable["popf"] = 317;
	opcodeTable["popfw"] = 318;
	opcodeTable["popfd"] = 319;
	opcodeTable["popfq"] = 320;
	opcodeTable["prefetchnta"] = 321;
	opcodeTable["prefetcht0"] = 322;
	opcodeTable["prefetcht1"] = 323;
	opcodeTable["prefetcht2"] = 324;
	opcodeTable["push"] = 325;
	opcodeTable["pusha"] = 326;
	opcodeTable["pushaw"] = 327;
	opcodeTable["pushad"] = 328;
	opcodeTable["pushf"] = 329;
	opcodeTable["pushfw"] = 330;
	opcodeTable["pushfd"] = 331;
	opcodeTable["pushfq"] = 332;
	opcodeTable["rcl"] = 333;
	opcodeTable["rcr"] = 334;
	opcodeTable["rdmsr"] = 335;
	opcodeTable["rdpmc"] = 336;
	opcodeTable["rdtsc"] = 337;
	opcodeTable["ret"] = 338;
	opcodeTable["retf"] = 339;
	opcodeTable["rol"] = 340;
	opcodeTable["ror"] = 341;
	opcodeTable["rsm"] = 342;
	opcodeTable["sahf"] = 343;
	opcodeTable["sal"] = 344;
	opcodeTable["sar"] = 345;
	opcodeTable["sbb"] = 346;
	opcodeTable["scas"] = 347;
	opcodeTable["scasb"] = 348;
	opcodeTable["scasw"] = 349;
	opcodeTable["scasd"] = 350;
	opcodeTable["scasq"] = 351;
	opcodeTable["seta"] = 352;
	opcodeTable["setae"] = 353;
	opcodeTable["setb"] = 354;
	opcodeTable["setbe"] = 355;
	opcodeTable["setc"] = 356;
	opcodeTable["sete"] = 357;
	opcodeTable["setg"] = 358;
	opcodeTable["setge"] = 359;
	opcodeTable["setl"] = 360;
	opcodeTable["setle"] = 361;
	opcodeTable["setna"] = 362;
	opcodeTable["setnae"] = 363;
	opcodeTable["setnb"] = 364;
	opcodeTable["setnbe"] = 365;
	opcodeTable["setnc"] = 366;
	opcodeTable["setne"] = 367;
	opcodeTable["setng"] = 368;
	opcodeTable["setnge"] = 369;
	opcodeTable["setnl"] = 370;
	opcodeTable["setnle"] = 371;
	opcodeTable["setno"] = 372;
	opcodeTable["setnp"] = 373;
	opcodeTable["setns"] = 374;
	opcodeTable["setnz"] = 375;
	opcodeTable["seto"] = 376;
	opcodeTable["setp"] = 377;
	opcodeTable["setpe"] = 378;
	opcodeTable["setpo"] = 379;
	opcodeTable["sets"] = 380;
	opcodeTable["setz"] = 381;
	opcodeTable["sfence"] = 382;
	opcodeTable["shl"] = 383;
	opcodeTable["shld"] = 384;
	opcodeTable["shr"] = 385;
	opcodeTable["shrd"] = 386;
	opcodeTable["sidt"] = 387;
	opcodeTable["sldt"] = 388;
	opcodeTable["smsw"] = 389;
	opcodeTable["stc"] = 390;
	opcodeTable["std"] = 391;
	opcodeTable["sti"] = 392;
	opcodeTable["stos"] = 393;
	opcodeTable["stosb"] = 394;
	opcodeTable["stosw"] = 395;
	opcodeTable["stosd"] = 396;
	opcodeTable["stosq"] = 397;
	opcodeTable["str"] = 398;
	opcodeTable["sub"] = 399;
	opcodeTable["syscall"] = 400;
	opcodeTable["sysenter"] = 401;
	opcodeTable["sysexit"] = 402;
	opcodeTable["sysret"] = 403;
	opcodeTable["test"] = 404;
	opcodeTable["ud2"] = 405;
	opcodeTable["verr"] = 406;
	opcodeTable["verw"] = 407;
	opcodeTable["wait"] = 408;
	opcodeTable["wbinvd"] = 409;
	opcodeTable["wrmsr"] = 410;
	opcodeTable["xadd"] = 411;
	opcodeTable["xbts"] = 412;
	opcodeTable["xchg"] = 413;
	opcodeTable["xlat"] = 414;
	opcodeTable["xlatb"] = 415;
	opcodeTable["xor"] = 416;
	opcodeTable["xrstor"] = 417;
	opcodeTable["xrstor64"] = 418;
	opcodeTable["xsave"] = 419;
	opcodeTable["xsave64"] = 420;
	opcodeTable["xsetbv"] = 421;
	opcodeTable["addpd"] = 422;
	opcodeTable["addps"] = 423;
	opcodeTable["addsd"] = 424;
	opcodeTable["addss"] = 425;
	opcodeTable["addsubpd"] = 426;
	opcodeTable["addsubps"] = 427;
	opcodeTable["andnpd"] = 428;
	opcodeTable["andnps"] = 429;
	opcodeTable["andpd"] = 430;
	opcodeTable["andps"] = 431;
	opcodeTable["blendpd"] = 432;
	opcodeTable["blendps"] = 433;
	opcodeTable["cmppd"] = 434;
	opcodeTable["cmpps"] = 435;
	opcodeTable["cvtdq2pd"] = 436;
	opcodeTable["cvtdq2ps"] = 437;
	opcodeTable["cvtpd2dq"] = 438;
	opcodeTable["cvtpd2pi"] = 439;
	opcodeTable["cvtpd2ps"] = 440;
	opcodeTable["cvtpi2pd"] = 441;
	opcodeTable["cvtpi2ps"] = 442;
	opcodeTable["cvtps2dq"] = 443;
	opcodeTable["cvtps2pd"] = 444;
	opcodeTable["cvtps2pi"] = 445;
	opcodeTable["cvtsd2si"] = 446;
	opcodeTable["cvtsd2ss"] = 447;
	opcodeTable["cvtsi2sd"] = 448;
	opcodeTable["cvtsi2ss"] = 449;
	opcodeTable["cvtss2sd"] = 450;
	opcodeTable["cvtss2si"] = 451;
	opcodeTable["cvttp2qdq"] = 452;
	opcodeTable["cvttp2qpi"] = 453;
	opcodeTable["cvttps2dq"] = 454;
	opcodeTable["cvttps2pi"] = 455;
	opcodeTable["cvttsd2si"] = 456;
	opcodeTable["cvttss2si"] = 457;
	opcodeTable["divpd"] = 458;
	opcodeTable["divps"] = 459;
	opcodeTable["divsd"] = 460;
	opcodeTable["divss"] = 461;
	opcodeTable["dppd"] = 462;
	opcodeTable["dpps"] = 463;
	opcodeTable["hsubpd"] = 464;
	opcodeTable["hsubps"] = 465;
	opcodeTable["insertps"] = 466;
	opcodeTable["lddqu"] = 467;
	opcodeTable["maskmovdqu"] = 468;
	opcodeTable["maskmovq"] = 469;
	opcodeTable["maxps"] = 470;
	opcodeTable["maxpd"] = 471;
	opcodeTable["maxps"] = 472;
	opcodeTable["maxsd"] = 473;
	opcodeTable["maxss"] = 474;
	opcodeTable["mfence"] = 475;
	opcodeTable["minpd"] = 476;
	opcodeTable["minps"] = 477;
	opcodeTable["minsd"] = 478;
	opcodeTable["minss"] = 479;
	opcodeTable["monitor"] = 480;
	opcodeTable["movapd"] = 481;
	opcodeTable["movaps"] = 482;
	opcodeTable["movd"] = 483;
	opcodeTable["movq"] = 484;
	opcodeTable["movddup"] = 485;
	opcodeTable["movdq2q"] = 486;
	opcodeTable["movdqa"] = 487;
	opcodeTable["movdqu"] = 488;
	opcodeTable["movhlps"] = 489;
	opcodeTable["movhpd"] = 490;
	opcodeTable["movhps"] = 491;
	opcodeTable["movlhps"] = 492;
	opcodeTable["movlpd"] = 493;
	opcodeTable["movlps"] = 494;
	opcodeTable["movmskpd"] = 495;
	opcodeTable["movmskps"] = 496;
	opcodeTable["movntdq"] = 497;
	opcodeTable["movnti"] = 498;
	opcodeTable["movntpd"] = 499;
	opcodeTable["movntpd"] = 500;
	opcodeTable["movntq"] = 501;
	opcodeTable["movq2dq"] = 502;
	opcodeTable["movshdup"] = 503;
	opcodeTable["movsldup"] = 504;
	opcodeTable["movss"] = 505;
	opcodeTable["movupd"] = 506;
	opcodeTable["movups"] = 507;
	opcodeTable["mpsadbw"] = 508;
	opcodeTable["mulpd"] = 509;
	opcodeTable["mulps"] = 510;
	opcodeTable["mulsd"] = 511;
	opcodeTable["mulss"] = 512;
	opcodeTable["orpd"] = 513;
	opcodeTable["orps"] = 514;
	opcodeTable["packssdw"] = 515;
	opcodeTable["packsswb"] = 516;
	opcodeTable["packusdw"] = 517;
	opcodeTable["paddb"] = 518;
	opcodeTable["paddd"] = 519;
	opcodeTable["paddq"] = 520;
	opcodeTable["paddsw"] = 521;
	opcodeTable["paddusb"] = 522;
	opcodeTable["paddusw"] = 523;
	opcodeTable["paddw"] = 524;
	opcodeTable["palignr"] = 525;
	opcodeTable["pand"] = 526;
	opcodeTable["pandn"] = 527;
	opcodeTable["pavgb"] = 528;
	opcodeTable["pavgw"] = 529;
	opcodeTable["pblendw"] = 530;
	opcodeTable["pcmpeqb"] = 531;
	opcodeTable["pcmpeqd"] = 532;
	opcodeTable["pcmpeqw"] = 533;
	opcodeTable["pcmpestri"] = 534;
	opcodeTable["pcmpestrm"] = 535;
	opcodeTable["pcmpgtb"] = 536;
	opcodeTable["pcmpgtd"] = 537;
	opcodeTable["pcmpgtw"] = 538;
	opcodeTable["pcmpestri"] = 539;
	opcodeTable["pcmpestrm"] = 540;
	opcodeTable["pextrb"] = 541;
	opcodeTable["pextrd"] = 542;
	opcodeTable["pextrq"] = 543;
	opcodeTable["pextrw"] = 544;
	opcodeTable["pinsrb"] = 545;
	opcodeTable["pinsrd"] = 546;
	opcodeTable["pinsrq"] = 547;
	opcodeTable["pinsrw"] = 548;
	opcodeTable["pmaddwd"] = 549;
	opcodeTable["pmaxsw"] = 550;
	opcodeTable["pmaxub"] = 551;
	opcodeTable["pminsw"] = 552;
	opcodeTable["pminub"] = 553;
	opcodeTable["pmovmskb"] = 554;
	opcodeTable["pmulhuw"] = 555;
	opcodeTable["pmulhw"] = 556;
	opcodeTable["pmullw"] = 557;
	opcodeTable["pmuludq"] = 558;
	opcodeTable["psadbw"] = 559;
	opcodeTable["pshufd"] = 560;
	opcodeTable["pshufhw"] = 561;
	opcodeTable["pshufhl"] = 562;
	opcodeTable["pshufw"] = 563;
	opcodeTable["pslld"] = 564;
	opcodeTable["pslldq"] = 565;
	opcodeTable["psllq"] = 566;
	opcodeTable["psllw"] = 567;
	opcodeTable["psrad"] = 568;
	opcodeTable["psraw"] = 569;
	opcodeTable["psrld"] = 570;
	opcodeTable["psrldq"] = 571;
	opcodeTable["psrlq"] = 572;
	opcodeTable["psrlw"] = 573;
	opcodeTable["psubb"] = 574;
	opcodeTable["psubd"] = 575;
	opcodeTable["psubq"] = 576;
	opcodeTable["psubsb"] = 577;
	opcodeTable["psubsw"] = 578;
	opcodeTable["psubusb"] = 579;
	opcodeTable["psubusw"] = 580;
	opcodeTable["punpckhbw"] = 581;
	opcodeTable["punpckhdq"] = 582;
	opcodeTable["punpckhqdq"] = 583;
	opcodeTable["punpckhwd"] = 584;
	opcodeTable["punpcklbw"] = 585;
	opcodeTable["punpckldq"] = 586;
	opcodeTable["punpcklqdq"] = 587;
	opcodeTable["punpcklwd"] = 588;
	opcodeTable["pxor"] = 589;
	opcodeTable["rcpps"] = 590;
	opcodeTable["rpcss"] = 591;
	opcodeTable["roundpd"] = 592;
	opcodeTable["roundps"] = 593;
	opcodeTable["roundsd"] = 594;
	opcodeTable["roundss"] = 595;
	opcodeTable["shufpd"] = 596;
	opcodeTable["shufps"] = 597;
	opcodeTable["sqrtps"] = 598;
	opcodeTable["sqrtss"] = 599;
	opcodeTable["subpd"] = 600;
	opcodeTable["subps"] = 601;
	opcodeTable["subsd"] = 602;
	opcodeTable["subss"] = 603;
	opcodeTable["unpckhpd"] = 604;
	opcodeTable["unpckhps"] = 605;
	opcodeTable["unpcklpd"] = 606;
	opcodeTable["unpcklps"] = 607;
	opcodeTable["xorpd"] = 608;
	opcodeTable["xorps"] = 609;
	opcodeTable["invept"] = 610;
	opcodeTable["invvpid"] = 611;
	opcodeTable["vmcall"] = 612;
	opcodeTable["vmclear"] = 613;
	opcodeTable["vmlaunch"] = 614;
	opcodeTable["vmptrld"] = 615;
	opcodeTable["vmptrst"] = 616;
	opcodeTable["vmread"] = 617;
	opcodeTable["vmresume"] = 618;
	opcodeTable["vmwrite"] = 619;
	opcodeTable["vmx0ff"] = 620;
	opcodeTable["vmxon"] = 621;
	prefixTable["a16"] = 0;
	prefixTable["a32"] = 1;
	prefixTable["lock"] = 2;
	prefixTable["o16"] = 3;
	prefixTable["o32"] = 4;
	prefixTable["rep"] = 5;
	prefixTable["repe"] = 6;
	prefixTable["repne"] = 7;
	prefixTable["repnz"] = 8;
	prefixTable["repz"] = 9;
}

void x64Parser::TokenFunc4(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 0;
}
x64Token x64Parser::tokenBranches3[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc4,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc9(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 1;
}
x64Token x64Parser::tokenBranches8[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc9,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc200(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 19;
}
x64Token x64Parser::tokenBranches199[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc200,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc346(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 34;
}
x64Token x64Parser::tokenBranches345[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc346,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc199(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc345(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches198[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc199, x64Parser::tokenBranches199 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc345, x64Parser::tokenBranches345 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc36(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 4;
}
x64Token x64Parser::tokenBranches35[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc36,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches198 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc137(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches136[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc137,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc283(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 28;
}
x64Token x64Parser::tokenBranches282[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc283,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc429(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 43;
}
x64Token x64Parser::tokenBranches428[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc429,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc35(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc136(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc282(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc428(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches34[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc35, x64Parser::tokenBranches35 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc136, x64Parser::tokenBranches136 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc282, x64Parser::tokenBranches282 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc428, x64Parser::tokenBranches428 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc97(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches33[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches34 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc97,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc227(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 22;
}
x64Token x64Parser::tokenBranches226[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc227,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc373(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 37;
}
x64Token x64Parser::tokenBranches372[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc373,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc226(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc372(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches225[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc226, x64Parser::tokenBranches226 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc372, x64Parser::tokenBranches372 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc57(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 7;
}
x64Token x64Parser::tokenBranches56[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc57,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches225 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc170(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 17;
}
x64Token x64Parser::tokenBranches169[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc170,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc316(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 32;
}
x64Token x64Parser::tokenBranches315[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc316,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc462(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 47;
}
x64Token x64Parser::tokenBranches461[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc462,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc56(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc169(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc315(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc461(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches55[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc56, x64Parser::tokenBranches56 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc169, x64Parser::tokenBranches169 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc315, x64Parser::tokenBranches315 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc461, x64Parser::tokenBranches461 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc120(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 17;
}
x64Token x64Parser::tokenBranches54[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches55 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc120,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc257(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 25;
}
x64Token x64Parser::tokenBranches256[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc257,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc403(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 40;
}
x64Token x64Parser::tokenBranches402[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc403,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc256(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc402(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches255[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc256, x64Parser::tokenBranches256 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc402, x64Parser::tokenBranches402 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc79(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 10;
}
x64Token x64Parser::tokenBranches78[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc79,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches255 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc584(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches583[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc584,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc662(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 66;
}
x64Token x64Parser::tokenBranches661[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc662,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc740(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 75;
}
x64Token x64Parser::tokenBranches739[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc740,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1034(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 102;
}
x64Token x64Parser::tokenBranches1033[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1034,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1442(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1441[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1442,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1670(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 138;
}
x64Token x64Parser::tokenBranches1669[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1670,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1033(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1441(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1669(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1032[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1033, x64Parser::tokenBranches1033 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1441, x64Parser::tokenBranches1441 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1669, x64Parser::tokenBranches1669 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1232(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 102;
}
x64Token x64Parser::tokenBranches1031[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1032 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1232,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1031(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1030[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1031, x64Parser::tokenBranches1031 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1043(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 103;
}
x64Token x64Parser::tokenBranches1042[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1043,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1451(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1450[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1451,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1679(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 139;
}
x64Token x64Parser::tokenBranches1678[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1679,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1042(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1450(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1678(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1041[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1042, x64Parser::tokenBranches1042 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1450, x64Parser::tokenBranches1450 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1678, x64Parser::tokenBranches1678 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1239(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 103;
}
x64Token x64Parser::tokenBranches1029[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1030 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1041 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1239,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc583(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc661(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc739(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1029(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches582[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc583, x64Parser::tokenBranches583 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc661, x64Parser::tokenBranches661 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc739, x64Parser::tokenBranches739 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1029, x64Parser::tokenBranches1029 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc498(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches497[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc498,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches582 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc591(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 54;
}
x64Token x64Parser::tokenBranches590[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc591,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc669(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 67;
}
x64Token x64Parser::tokenBranches668[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc669,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc747(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 76;
}
x64Token x64Parser::tokenBranches746[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc747,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1014(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 100;
}
x64Token x64Parser::tokenBranches1013[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1014,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1422(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 118;
}
x64Token x64Parser::tokenBranches1421[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1422,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1650(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 136;
}
x64Token x64Parser::tokenBranches1649[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1650,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1013(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1421(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1649(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1012[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1013, x64Parser::tokenBranches1013 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1421, x64Parser::tokenBranches1421 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1649, x64Parser::tokenBranches1649 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1216(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 100;
}
x64Token x64Parser::tokenBranches1011[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1012 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1216,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1011(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1010[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1011, x64Parser::tokenBranches1011 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1023(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 101;
}
x64Token x64Parser::tokenBranches1022[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1023,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1431(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1430[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1431,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1659(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 137;
}
x64Token x64Parser::tokenBranches1658[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1659,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1022(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1430(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1658(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1021[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1022, x64Parser::tokenBranches1022 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1430, x64Parser::tokenBranches1430 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1658, x64Parser::tokenBranches1658 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1223(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 101;
}
x64Token x64Parser::tokenBranches1009[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1010 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1021 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1223,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc590(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc668(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc746(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1009(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches589[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc590, x64Parser::tokenBranches590 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc668, x64Parser::tokenBranches668 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc746, x64Parser::tokenBranches746 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1009, x64Parser::tokenBranches1009 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc847(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 81;
}
x64Token x64Parser::tokenBranches846[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc847,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc846(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches845[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc846, x64Parser::tokenBranches846 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc838(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 80;
}
x64Token x64Parser::tokenBranches837[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc838,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches845 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc837(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches836[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc837, x64Parser::tokenBranches837 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc503(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 54;
}
x64Token x64Parser::tokenBranches502[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc503,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches589 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches836 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc598(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches597[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc598,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc676(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 64;
}
x64Token x64Parser::tokenBranches675[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc676,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc754(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 73;
}
x64Token x64Parser::tokenBranches753[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc754,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1054(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches1053[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1054,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1462(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 114;
}
x64Token x64Parser::tokenBranches1461[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1462,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1690(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1689[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1690,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1053(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1461(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1689(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1052[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1053, x64Parser::tokenBranches1053 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1461, x64Parser::tokenBranches1461 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1689, x64Parser::tokenBranches1689 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1248(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches1051[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1052 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1248,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1051(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1050[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1051, x64Parser::tokenBranches1051 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1063(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches1062[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1063,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1471(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 115;
}
x64Token x64Parser::tokenBranches1470[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1471,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1699(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1698[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1699,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1062(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1470(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1698(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1061[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1062, x64Parser::tokenBranches1062 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1470, x64Parser::tokenBranches1470 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1698, x64Parser::tokenBranches1698 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1255(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches1049[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1050 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1061 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1255,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc597(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc675(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc753(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1049(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches596[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc597, x64Parser::tokenBranches597 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc675, x64Parser::tokenBranches675 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc753, x64Parser::tokenBranches753 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1049, x64Parser::tokenBranches1049 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc863(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 83;
}
x64Token x64Parser::tokenBranches862[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc863,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc862(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches861[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc862, x64Parser::tokenBranches862 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc854(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 82;
}
x64Token x64Parser::tokenBranches853[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc854,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches861 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc853(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches852[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc853, x64Parser::tokenBranches853 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc508(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches507[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc508,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches596 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches852 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc531(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 59;
}
x64Token x64Parser::tokenBranches530[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc531,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc8(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc78(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc507(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc530(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches33 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches54 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches497 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches502 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc8, x64Parser::tokenBranches8 },
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc78, x64Parser::tokenBranches78 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc507, x64Parser::tokenBranches507 },
	{x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc530, x64Parser::tokenBranches530 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches7 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc14(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 2;
}
x64Token x64Parser::tokenBranches13[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc14,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc209(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 21;
}
x64Token x64Parser::tokenBranches208[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc209,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc355(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 36;
}
x64Token x64Parser::tokenBranches354[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc355,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc208(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc354(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches207[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc208, x64Parser::tokenBranches208 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc354, x64Parser::tokenBranches354 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc43(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 6;
}
x64Token x64Parser::tokenBranches42[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc43,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches207 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc144(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 14;
}
x64Token x64Parser::tokenBranches143[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc144,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc290(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 29;
}
x64Token x64Parser::tokenBranches289[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc290,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc436(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 44;
}
x64Token x64Parser::tokenBranches435[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc436,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc42(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc143(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc289(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc435(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches41[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc42, x64Parser::tokenBranches42 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc143, x64Parser::tokenBranches143 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc289, x64Parser::tokenBranches289 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc435, x64Parser::tokenBranches435 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc102(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 14;
}
x64Token x64Parser::tokenBranches40[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches41 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc102,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc218(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 20;
}
x64Token x64Parser::tokenBranches217[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc218,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc364(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 35;
}
x64Token x64Parser::tokenBranches363[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc364,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc217(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc363(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches216[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc217, x64Parser::tokenBranches217 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc363, x64Parser::tokenBranches363 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc50(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 5;
}
x64Token x64Parser::tokenBranches49[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc50,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches216 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc163(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches162[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc163,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc309(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 31;
}
x64Token x64Parser::tokenBranches308[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc309,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc455(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 46;
}
x64Token x64Parser::tokenBranches454[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc455,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc49(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc162(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc308(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc454(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches48[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc49, x64Parser::tokenBranches49 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc162, x64Parser::tokenBranches162 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc308, x64Parser::tokenBranches308 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc454, x64Parser::tokenBranches454 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc115(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches47[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches48 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc115,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc264(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 26;
}
x64Token x64Parser::tokenBranches263[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc264,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc410(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 41;
}
x64Token x64Parser::tokenBranches409[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc410,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc263(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc409(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches262[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc263, x64Parser::tokenBranches263 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc409, x64Parser::tokenBranches409 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc84(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 11;
}
x64Token x64Parser::tokenBranches83[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc84,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches262 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc563(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches562[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc563,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc641(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 62;
}
x64Token x64Parser::tokenBranches640[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc641,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc719(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 72;
}
x64Token x64Parser::tokenBranches718[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc719,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc974(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches973[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc974,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1382(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 112;
}
x64Token x64Parser::tokenBranches1381[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1382,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1610(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 130;
}
x64Token x64Parser::tokenBranches1609[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1610,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc973(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1381(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1609(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches972[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc973, x64Parser::tokenBranches973 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1381, x64Parser::tokenBranches1381 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1609, x64Parser::tokenBranches1609 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1184(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches971[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches972 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1184,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc971(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches970[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc971, x64Parser::tokenBranches971 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc983(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches982[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc983,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1391(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1390[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1391,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1619(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 131;
}
x64Token x64Parser::tokenBranches1618[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1619,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc982(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1390(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1618(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches981[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc982, x64Parser::tokenBranches982 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1390, x64Parser::tokenBranches1390 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1618, x64Parser::tokenBranches1618 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1191(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches969[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches970 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches981 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1191,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc562(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc640(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc718(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc969(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches561[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc562, x64Parser::tokenBranches562 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc640, x64Parser::tokenBranches640 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc718, x64Parser::tokenBranches718 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc969, x64Parser::tokenBranches969 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc483(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches482[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc483,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches561 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc570(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches569[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc570,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc648(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 63;
}
x64Token x64Parser::tokenBranches647[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc648,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc726(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 71;
}
x64Token x64Parser::tokenBranches725[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc726,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc954(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches953[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc954,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1362(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 110;
}
x64Token x64Parser::tokenBranches1361[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1362,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1590(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 128;
}
x64Token x64Parser::tokenBranches1589[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1590,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc953(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1361(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1589(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches952[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc953, x64Parser::tokenBranches953 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1361, x64Parser::tokenBranches1361 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1589, x64Parser::tokenBranches1589 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1168(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches951[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches952 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1168,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc951(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches950[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc951, x64Parser::tokenBranches951 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc963(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches962[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc963,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1371(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 111;
}
x64Token x64Parser::tokenBranches1370[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1371,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1599(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 129;
}
x64Token x64Parser::tokenBranches1598[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1599,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc962(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1370(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1598(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches961[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc962, x64Parser::tokenBranches962 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1370, x64Parser::tokenBranches1370 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1598, x64Parser::tokenBranches1598 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1175(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches949[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches950 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches961 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1175,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc569(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc647(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc725(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc949(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches568[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc569, x64Parser::tokenBranches569 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc647, x64Parser::tokenBranches647 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc725, x64Parser::tokenBranches725 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc949, x64Parser::tokenBranches949 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc815(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 85;
}
x64Token x64Parser::tokenBranches814[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc815,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc814(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches813[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc814, x64Parser::tokenBranches814 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc806(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 84;
}
x64Token x64Parser::tokenBranches805[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc806,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches813 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc805(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches804[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc805, x64Parser::tokenBranches805 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc488(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches487[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc488,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches568 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches804 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc577(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches576[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc577,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc655(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 65;
}
x64Token x64Parser::tokenBranches654[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc655,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc733(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 74;
}
x64Token x64Parser::tokenBranches732[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc733,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc994(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 98;
}
x64Token x64Parser::tokenBranches993[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc994,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1402(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 116;
}
x64Token x64Parser::tokenBranches1401[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1402,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1630(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 134;
}
x64Token x64Parser::tokenBranches1629[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1630,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc993(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1401(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1629(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches992[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc993, x64Parser::tokenBranches993 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1401, x64Parser::tokenBranches1401 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1629, x64Parser::tokenBranches1629 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1200(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 98;
}
x64Token x64Parser::tokenBranches991[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches992 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1200,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc991(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches990[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc991, x64Parser::tokenBranches991 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1003(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 99;
}
x64Token x64Parser::tokenBranches1002[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1003,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1411(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 117;
}
x64Token x64Parser::tokenBranches1410[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1411,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1639(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 135;
}
x64Token x64Parser::tokenBranches1638[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1639,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1002(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1410(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1638(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1001[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1002, x64Parser::tokenBranches1002 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1410, x64Parser::tokenBranches1410 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1638, x64Parser::tokenBranches1638 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1207(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 99;
}
x64Token x64Parser::tokenBranches989[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches990 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1001 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1207,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc576(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc654(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc732(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc989(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches575[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc576, x64Parser::tokenBranches576 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc654, x64Parser::tokenBranches654 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc732, x64Parser::tokenBranches732 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc989, x64Parser::tokenBranches989 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc831(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 87;
}
x64Token x64Parser::tokenBranches830[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc831,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc830(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches829[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc830, x64Parser::tokenBranches830 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc822(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 86;
}
x64Token x64Parser::tokenBranches821[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc822,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches829 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc821(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches820[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc821, x64Parser::tokenBranches821 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc493(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches492[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc493,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches575 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches820 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc536(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 60;
}
x64Token x64Parser::tokenBranches535[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc536,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc13(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc83(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc492(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc535(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches12[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches40 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches47 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches482 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches487 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc13, x64Parser::tokenBranches13 },
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc83, x64Parser::tokenBranches83 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc492, x64Parser::tokenBranches492 },
	{x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc535, x64Parser::tokenBranches535 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches11[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches12 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc19(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 3;
}
x64Token x64Parser::tokenBranches18[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc19,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 23;
}
x64Token x64Parser::tokenBranches235[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc382(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 38;
}
x64Token x64Parser::tokenBranches381[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc382,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc235(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc381(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches234[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc235, x64Parser::tokenBranches235 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc381, x64Parser::tokenBranches381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc64(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 8;
}
x64Token x64Parser::tokenBranches63[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc64,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches234 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc151(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 15;
}
x64Token x64Parser::tokenBranches150[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc151,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc297(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 30;
}
x64Token x64Parser::tokenBranches296[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc297,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc443(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 45;
}
x64Token x64Parser::tokenBranches442[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc443,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc63(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc150(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc296(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc442(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches62[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc63, x64Parser::tokenBranches63 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc150, x64Parser::tokenBranches150 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc296, x64Parser::tokenBranches296 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc442, x64Parser::tokenBranches442 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc107(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 15;
}
x64Token x64Parser::tokenBranches61[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches62 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc107,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc245(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 24;
}
x64Token x64Parser::tokenBranches244[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc245,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc391(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 39;
}
x64Token x64Parser::tokenBranches390[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc391,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc244(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc390(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches243[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc244, x64Parser::tokenBranches244 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc390, x64Parser::tokenBranches390 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc71(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 9;
}
x64Token x64Parser::tokenBranches70[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc71,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches243 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc177(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 18;
}
x64Token x64Parser::tokenBranches176[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc177,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc323(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 33;
}
x64Token x64Parser::tokenBranches322[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc323,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc469(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 48;
}
x64Token x64Parser::tokenBranches468[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc469,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc70(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc176(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc322(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc468(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches69[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc70, x64Parser::tokenBranches70 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc176, x64Parser::tokenBranches176 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc322, x64Parser::tokenBranches322 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc468, x64Parser::tokenBranches468 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc125(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 18;
}
x64Token x64Parser::tokenBranches68[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches69 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc125,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc271(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 27;
}
x64Token x64Parser::tokenBranches270[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc271,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc417(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 42;
}
x64Token x64Parser::tokenBranches416[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc417,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc270(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc416(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches269[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc270, x64Parser::tokenBranches270 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc416, x64Parser::tokenBranches416 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc89(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 12;
}
x64Token x64Parser::tokenBranches88[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc89,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches269 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc605(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 55;
}
x64Token x64Parser::tokenBranches604[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc605,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc683(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 68;
}
x64Token x64Parser::tokenBranches682[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc683,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc768(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 78;
}
x64Token x64Parser::tokenBranches767[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc768,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1094(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 106;
}
x64Token x64Parser::tokenBranches1093[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1094,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1502(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 124;
}
x64Token x64Parser::tokenBranches1501[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1502,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1730(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 142;
}
x64Token x64Parser::tokenBranches1729[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1730,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1093(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1501(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1729(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1092[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1093, x64Parser::tokenBranches1093 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1501, x64Parser::tokenBranches1501 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1729, x64Parser::tokenBranches1729 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1280(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 106;
}
x64Token x64Parser::tokenBranches1091[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1092 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1280,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1091(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1090[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1091, x64Parser::tokenBranches1091 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1103(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1102[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1103,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1511(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 125;
}
x64Token x64Parser::tokenBranches1510[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1511,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1739(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 143;
}
x64Token x64Parser::tokenBranches1738[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1739,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1102(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1510(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1738(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1101[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1102, x64Parser::tokenBranches1102 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1510, x64Parser::tokenBranches1510 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1738, x64Parser::tokenBranches1738 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1287(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1089[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1090 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1101 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1287,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc604(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc682(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc767(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1089(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches603[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc604, x64Parser::tokenBranches604 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc682, x64Parser::tokenBranches682 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc767, x64Parser::tokenBranches767 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1089, x64Parser::tokenBranches1089 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc513(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 55;
}
x64Token x64Parser::tokenBranches512[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc513,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches603 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc612(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 56;
}
x64Token x64Parser::tokenBranches611[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc612,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc690(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 69;
}
x64Token x64Parser::tokenBranches689[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc690,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc761(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 77;
}
x64Token x64Parser::tokenBranches760[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc761,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1074(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 104;
}
x64Token x64Parser::tokenBranches1073[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1074,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1482(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1481[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1482,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1710(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 140;
}
x64Token x64Parser::tokenBranches1709[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1710,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1073(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1481(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1709(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1072[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1073, x64Parser::tokenBranches1073 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1481, x64Parser::tokenBranches1481 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1709, x64Parser::tokenBranches1709 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1264(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 104;
}
x64Token x64Parser::tokenBranches1071[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1072 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1264,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1071(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1070[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1071, x64Parser::tokenBranches1071 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1083(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 105;
}
x64Token x64Parser::tokenBranches1082[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1083,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1491(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 123;
}
x64Token x64Parser::tokenBranches1490[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1491,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1719(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 141;
}
x64Token x64Parser::tokenBranches1718[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1719,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1082(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1490(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1718(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1081[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1082, x64Parser::tokenBranches1082 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1490, x64Parser::tokenBranches1490 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1718, x64Parser::tokenBranches1718 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1271(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 105;
}
x64Token x64Parser::tokenBranches1069[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1070 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1081 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1271,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc611(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc689(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc760(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1069(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches610[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc611, x64Parser::tokenBranches611 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc689, x64Parser::tokenBranches689 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc760, x64Parser::tokenBranches760 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1069, x64Parser::tokenBranches1069 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc879(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 89;
}
x64Token x64Parser::tokenBranches878[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc879,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc878(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches877[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc878, x64Parser::tokenBranches878 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc870(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 88;
}
x64Token x64Parser::tokenBranches869[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc870,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches877 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc869(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches868[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc869, x64Parser::tokenBranches869 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc518(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 56;
}
x64Token x64Parser::tokenBranches517[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc518,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches610 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches868 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc619(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 57;
}
x64Token x64Parser::tokenBranches618[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc619,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc697(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 70;
}
x64Token x64Parser::tokenBranches696[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc697,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc775(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 79;
}
x64Token x64Parser::tokenBranches774[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc775,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1114(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches1113[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1114,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1522(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 126;
}
x64Token x64Parser::tokenBranches1521[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1522,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1750(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 144;
}
x64Token x64Parser::tokenBranches1749[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1750,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1113(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1521(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1749(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1112[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1113, x64Parser::tokenBranches1113 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1521, x64Parser::tokenBranches1521 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1749, x64Parser::tokenBranches1749 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1296(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches1111[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1112 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1296,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1111(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1110[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1111, x64Parser::tokenBranches1111 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1123(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 109;
}
x64Token x64Parser::tokenBranches1122[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1123,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1531(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 127;
}
x64Token x64Parser::tokenBranches1530[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1531,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1759(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 145;
}
x64Token x64Parser::tokenBranches1758[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1759,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1122(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1530(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1758(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1121[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1122, x64Parser::tokenBranches1122 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1530, x64Parser::tokenBranches1530 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1758, x64Parser::tokenBranches1758 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1303(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 109;
}
x64Token x64Parser::tokenBranches1109[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1110 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches1121 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1303,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc618(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc696(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc774(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1109(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches617[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc618, x64Parser::tokenBranches618 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc696, x64Parser::tokenBranches696 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc774, x64Parser::tokenBranches774 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1109, x64Parser::tokenBranches1109 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc895(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 91;
}
x64Token x64Parser::tokenBranches894[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc895,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc894(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches893[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc894, x64Parser::tokenBranches894 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc886(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 90;
}
x64Token x64Parser::tokenBranches885[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc886,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches893 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc885(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches884[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc885, x64Parser::tokenBranches885 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc523(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 57;
}
x64Token x64Parser::tokenBranches522[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc523,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches617 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches884 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc541(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 61;
}
x64Token x64Parser::tokenBranches540[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc541,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1813(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 148;
}
x64Token x64Parser::tokenBranches1812[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1813,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1861(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 157;
}
x64Token x64Parser::tokenBranches1860[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1861,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1909(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 165;
}
x64Token x64Parser::tokenBranches1908[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1909,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2087(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 189;
}
x64Token x64Parser::tokenBranches2086[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2087,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2343(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 206;
}
x64Token x64Parser::tokenBranches2342[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2343,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2487(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 222;
}
x64Token x64Parser::tokenBranches2486[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2487,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2086(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2342(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2486(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2085[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2086, x64Parser::tokenBranches2086 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2342, x64Parser::tokenBranches2342 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2486, x64Parser::tokenBranches2486 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2217(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 189;
}
x64Token x64Parser::tokenBranches2084[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2085 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2217,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2084(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2083[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2084, x64Parser::tokenBranches2084 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2096(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 190;
}
x64Token x64Parser::tokenBranches2095[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2096,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2352(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 207;
}
x64Token x64Parser::tokenBranches2351[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2352,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2496(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 223;
}
x64Token x64Parser::tokenBranches2495[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2496,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2095(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2351(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2495(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2094[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2095, x64Parser::tokenBranches2095 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2351, x64Parser::tokenBranches2351 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2495, x64Parser::tokenBranches2495 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2224(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 190;
}
x64Token x64Parser::tokenBranches2082[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2083 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2094 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2224,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1812(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1860(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1908(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2082(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1811[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1812, x64Parser::tokenBranches1812 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1860, x64Parser::tokenBranches1860 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1908, x64Parser::tokenBranches1908 },
	{x64Token::REGISTERCLASS, 11, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2082, x64Parser::tokenBranches2082 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1770(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 148;
}
x64Token x64Parser::tokenBranches1769[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1770,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1811 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1820(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 149;
}
x64Token x64Parser::tokenBranches1819[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1820,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1868(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 158;
}
x64Token x64Parser::tokenBranches1867[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1868,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1916(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 166;
}
x64Token x64Parser::tokenBranches1915[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1916,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2067(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 187;
}
x64Token x64Parser::tokenBranches2066[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2067,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2323(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 204;
}
x64Token x64Parser::tokenBranches2322[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2323,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2467(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 220;
}
x64Token x64Parser::tokenBranches2466[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2467,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2066(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2322(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2466(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2065[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2066, x64Parser::tokenBranches2066 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2322, x64Parser::tokenBranches2322 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2466, x64Parser::tokenBranches2466 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2201(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 187;
}
x64Token x64Parser::tokenBranches2064[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2065 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2201,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2064(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2063[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2064, x64Parser::tokenBranches2064 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2076(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 188;
}
x64Token x64Parser::tokenBranches2075[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2076,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2332(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 205;
}
x64Token x64Parser::tokenBranches2331[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2332,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2476(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 221;
}
x64Token x64Parser::tokenBranches2475[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2476,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2075(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2331(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2475(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2074[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2075, x64Parser::tokenBranches2075 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2331, x64Parser::tokenBranches2331 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2475, x64Parser::tokenBranches2475 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2208(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 188;
}
x64Token x64Parser::tokenBranches2062[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2063 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2074 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2208,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1819(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1867(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1915(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2062(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1818[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1819, x64Parser::tokenBranches1819 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1867, x64Parser::tokenBranches1867 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1915, x64Parser::tokenBranches1915 },
	{x64Token::REGISTERCLASS, 11, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2062, x64Parser::tokenBranches2062 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1968(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 174;
}
x64Token x64Parser::tokenBranches1967[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1968,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1967(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1966[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1967, x64Parser::tokenBranches1967 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1959(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 173;
}
x64Token x64Parser::tokenBranches1958[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1959,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1966 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1958(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1957[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1958, x64Parser::tokenBranches1958 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1775(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 149;
}
x64Token x64Parser::tokenBranches1774[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1775,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1818 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1957 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1837(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 152;
}
x64Token x64Parser::tokenBranches1836[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1837,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1885(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 161;
}
x64Token x64Parser::tokenBranches1884[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1885,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1933(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 169;
}
x64Token x64Parser::tokenBranches1932[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1933,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2139(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 195;
}
x64Token x64Parser::tokenBranches2138[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2139,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2395(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 212;
}
x64Token x64Parser::tokenBranches2394[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2395,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2539(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 228;
}
x64Token x64Parser::tokenBranches2538[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2539,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2138(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2394(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2538(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2137[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2138, x64Parser::tokenBranches2138 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2394, x64Parser::tokenBranches2394 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2538, x64Parser::tokenBranches2538 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2257(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 195;
}
x64Token x64Parser::tokenBranches2136[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2137 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2257,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2136(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2135[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2136, x64Parser::tokenBranches2136 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2148(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 196;
}
x64Token x64Parser::tokenBranches2147[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2148,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2404(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 213;
}
x64Token x64Parser::tokenBranches2403[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2404,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2548(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 229;
}
x64Token x64Parser::tokenBranches2547[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2548,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2147(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2403(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2547(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2146[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2147, x64Parser::tokenBranches2147 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2403, x64Parser::tokenBranches2403 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2547, x64Parser::tokenBranches2547 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2264(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 196;
}
x64Token x64Parser::tokenBranches2134[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2135 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2146 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2264,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1836(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1884(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1932(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2134(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1835[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1836, x64Parser::tokenBranches1836 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1884, x64Parser::tokenBranches1884 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1932, x64Parser::tokenBranches1932 },
	{x64Token::REGISTERCLASS, 11, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2134, x64Parser::tokenBranches2134 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2008(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 180;
}
x64Token x64Parser::tokenBranches2007[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2008,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2007(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2006[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2007, x64Parser::tokenBranches2007 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1999(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 179;
}
x64Token x64Parser::tokenBranches1998[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1999,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2006 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1998(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1997[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1998, x64Parser::tokenBranches1998 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1786(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 152;
}
x64Token x64Parser::tokenBranches1785[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1786,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1835 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1997 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1844(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 153;
}
x64Token x64Parser::tokenBranches1843[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1844,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1892(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 162;
}
x64Token x64Parser::tokenBranches1891[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1892,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1940(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 170;
}
x64Token x64Parser::tokenBranches1939[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1940,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2159(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 197;
}
x64Token x64Parser::tokenBranches2158[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2159,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2415(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 214;
}
x64Token x64Parser::tokenBranches2414[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2415,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2559(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 230;
}
x64Token x64Parser::tokenBranches2558[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2559,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2158(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2414(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2558(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2157[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2158, x64Parser::tokenBranches2158 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2414, x64Parser::tokenBranches2414 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2558, x64Parser::tokenBranches2558 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2273(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 197;
}
x64Token x64Parser::tokenBranches2156[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2157 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2273,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2156(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2155[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2156, x64Parser::tokenBranches2156 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2168(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 198;
}
x64Token x64Parser::tokenBranches2167[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2168,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2424(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 215;
}
x64Token x64Parser::tokenBranches2423[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2424,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2568(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 231;
}
x64Token x64Parser::tokenBranches2567[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2568,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2167(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2423(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2567(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2166[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2167, x64Parser::tokenBranches2167 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2423, x64Parser::tokenBranches2423 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2567, x64Parser::tokenBranches2567 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2280(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 198;
}
x64Token x64Parser::tokenBranches2154[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2155 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2166 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2280,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1843(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1891(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1939(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2154(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1842[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1843, x64Parser::tokenBranches1843 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1891, x64Parser::tokenBranches1891 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1939, x64Parser::tokenBranches1939 },
	{x64Token::REGISTERCLASS, 11, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2154, x64Parser::tokenBranches2154 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2024(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 182;
}
x64Token x64Parser::tokenBranches2023[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2024,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2023(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2022[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2023, x64Parser::tokenBranches2023 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2015(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 181;
}
x64Token x64Parser::tokenBranches2014[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2015,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2022 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2014(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2013[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2014, x64Parser::tokenBranches2014 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1791(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 153;
}
x64Token x64Parser::tokenBranches1790[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1791,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1842 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2013 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2622(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 234;
}
x64Token x64Parser::tokenBranches2621[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2622,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2670(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 243;
}
x64Token x64Parser::tokenBranches2669[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2670,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2718(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 251;
}
x64Token x64Parser::tokenBranches2717[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2718,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2896(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 275;
}
x64Token x64Parser::tokenBranches2895[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2896,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3152(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 291;
}
x64Token x64Parser::tokenBranches3151[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3152,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3296(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 307;
}
x64Token x64Parser::tokenBranches3295[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3296,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2895(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3151(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3295(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2894[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2895, x64Parser::tokenBranches2895 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3151, x64Parser::tokenBranches3151 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3295, x64Parser::tokenBranches3295 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3026(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 275;
}
x64Token x64Parser::tokenBranches2893[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2894 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3026,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2893(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2892[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2893, x64Parser::tokenBranches2893 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2905(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 276;
}
x64Token x64Parser::tokenBranches2904[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2905,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3161(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 292;
}
x64Token x64Parser::tokenBranches3160[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3161,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3305(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 308;
}
x64Token x64Parser::tokenBranches3304[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3305,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2904(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3160(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3304(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2903[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2904, x64Parser::tokenBranches2904 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3160, x64Parser::tokenBranches3160 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3304, x64Parser::tokenBranches3304 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3033(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 276;
}
x64Token x64Parser::tokenBranches2891[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2892 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2903 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3033,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2621(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2669(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2717(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2891(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2620[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2621, x64Parser::tokenBranches2621 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2669, x64Parser::tokenBranches2669 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2717, x64Parser::tokenBranches2717 },
	{x64Token::REGISTERCLASS, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2891, x64Parser::tokenBranches2891 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2579(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 234;
}
x64Token x64Parser::tokenBranches2578[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2579,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2620 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2629(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 235;
}
x64Token x64Parser::tokenBranches2628[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2629,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2677(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 244;
}
x64Token x64Parser::tokenBranches2676[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2677,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2725(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 252;
}
x64Token x64Parser::tokenBranches2724[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2725,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2876(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 273;
}
x64Token x64Parser::tokenBranches2875[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2876,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3132(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 289;
}
x64Token x64Parser::tokenBranches3131[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3132,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 305;
}
x64Token x64Parser::tokenBranches3275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2875(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3131(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3275(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2874[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2875, x64Parser::tokenBranches2875 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3131, x64Parser::tokenBranches3131 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3275, x64Parser::tokenBranches3275 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3010(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 273;
}
x64Token x64Parser::tokenBranches2873[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2874 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3010,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2873(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2872[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2873, x64Parser::tokenBranches2873 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2885(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 274;
}
x64Token x64Parser::tokenBranches2884[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2885,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3141(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 290;
}
x64Token x64Parser::tokenBranches3140[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3141,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3285(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 306;
}
x64Token x64Parser::tokenBranches3284[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3285,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2884(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3140(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3284(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2883[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2884, x64Parser::tokenBranches2884 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3140, x64Parser::tokenBranches3140 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3284, x64Parser::tokenBranches3284 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3017(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 274;
}
x64Token x64Parser::tokenBranches2871[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2872 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2883 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3017,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2628(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2676(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2724(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2871(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2627[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2628, x64Parser::tokenBranches2628 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2676, x64Parser::tokenBranches2676 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2724, x64Parser::tokenBranches2724 },
	{x64Token::REGISTERCLASS, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2871, x64Parser::tokenBranches2871 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2777(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 260;
}
x64Token x64Parser::tokenBranches2776[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2777,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2776(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2775[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2776, x64Parser::tokenBranches2776 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2768(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 259;
}
x64Token x64Parser::tokenBranches2767[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2768,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2775 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2767(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2766[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2767, x64Parser::tokenBranches2767 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2584(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 235;
}
x64Token x64Parser::tokenBranches2583[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2584,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2627 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2766 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2646(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 238;
}
x64Token x64Parser::tokenBranches2645[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2646,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2694(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 247;
}
x64Token x64Parser::tokenBranches2693[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2694,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2742(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 255;
}
x64Token x64Parser::tokenBranches2741[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2742,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2948(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 281;
}
x64Token x64Parser::tokenBranches2947[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2948,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3204(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 297;
}
x64Token x64Parser::tokenBranches3203[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3204,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3348(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 313;
}
x64Token x64Parser::tokenBranches3347[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3348,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2947(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3203(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3347(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2946[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2947, x64Parser::tokenBranches2947 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3203, x64Parser::tokenBranches3203 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3347, x64Parser::tokenBranches3347 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3066(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 281;
}
x64Token x64Parser::tokenBranches2945[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2946 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3066,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2945(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2944[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2945, x64Parser::tokenBranches2945 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2957(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 282;
}
x64Token x64Parser::tokenBranches2956[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2957,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3213(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 298;
}
x64Token x64Parser::tokenBranches3212[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3213,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3357(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 314;
}
x64Token x64Parser::tokenBranches3356[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3357,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2956(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3212(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3356(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2955[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2956, x64Parser::tokenBranches2956 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3212, x64Parser::tokenBranches3212 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3356, x64Parser::tokenBranches3356 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3073(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 282;
}
x64Token x64Parser::tokenBranches2943[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2944 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2955 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3073,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2645(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2693(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2741(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2943(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2644[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2645, x64Parser::tokenBranches2645 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2693, x64Parser::tokenBranches2693 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2741, x64Parser::tokenBranches2741 },
	{x64Token::REGISTERCLASS, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2943, x64Parser::tokenBranches2943 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2817(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 266;
}
x64Token x64Parser::tokenBranches2816[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2817,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2816(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2815[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2816, x64Parser::tokenBranches2816 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2808(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 265;
}
x64Token x64Parser::tokenBranches2807[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2808,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2815 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2807(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2806[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2807, x64Parser::tokenBranches2807 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2595(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 238;
}
x64Token x64Parser::tokenBranches2594[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2595,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2644 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2806 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2653(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 239;
}
x64Token x64Parser::tokenBranches2652[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2653,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2701(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 248;
}
x64Token x64Parser::tokenBranches2700[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2701,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2749(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 256;
}
x64Token x64Parser::tokenBranches2748[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2749,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2968(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 283;
}
x64Token x64Parser::tokenBranches2967[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2968,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3224(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 299;
}
x64Token x64Parser::tokenBranches3223[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3224,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3368(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 315;
}
x64Token x64Parser::tokenBranches3367[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3368,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2967(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3223(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3367(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2966[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2967, x64Parser::tokenBranches2967 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3223, x64Parser::tokenBranches3223 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3367, x64Parser::tokenBranches3367 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3082(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 283;
}
x64Token x64Parser::tokenBranches2965[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2966 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3082,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2965(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2964[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2965, x64Parser::tokenBranches2965 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2977(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 284;
}
x64Token x64Parser::tokenBranches2976[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2977,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3233(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 300;
}
x64Token x64Parser::tokenBranches3232[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3233,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3377(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 316;
}
x64Token x64Parser::tokenBranches3376[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3377,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2976(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3232(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3376(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2975[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2976, x64Parser::tokenBranches2976 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3232, x64Parser::tokenBranches3232 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3376, x64Parser::tokenBranches3376 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3089(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 284;
}
x64Token x64Parser::tokenBranches2963[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2964 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2975 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3089,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2652(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2700(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2748(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2963(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2651[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2652, x64Parser::tokenBranches2652 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2700, x64Parser::tokenBranches2700 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2748, x64Parser::tokenBranches2748 },
	{x64Token::REGISTERCLASS, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2963, x64Parser::tokenBranches2963 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2833(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 268;
}
x64Token x64Parser::tokenBranches2832[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2833,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2832(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2831[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2832, x64Parser::tokenBranches2832 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2824(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 267;
}
x64Token x64Parser::tokenBranches2823[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2824,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2831 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2823(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2822[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2823, x64Parser::tokenBranches2823 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2600(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 239;
}
x64Token x64Parser::tokenBranches2599[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2600,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2651 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2822 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc18(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc88(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc522(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc540(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1769(x64Operand &operand, int tokenPos)
{
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc1774(x64Operand &operand, int tokenPos)
{
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc1790(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc2599(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches17[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches61 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches68 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches512 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches517 },
	{x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1785 },
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2578 },
	{x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2583 },
	{x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2594 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc18, x64Parser::tokenBranches18 },
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc88, x64Parser::tokenBranches88 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc522, x64Parser::tokenBranches522 },
	{x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc540, x64Parser::tokenBranches540 },
	{x64Token::REGISTERCLASS, 24, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1769, x64Parser::tokenBranches1769 },
	{x64Token::REGISTERCLASS, 25, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1774, x64Parser::tokenBranches1774 },
	{x64Token::REGISTERCLASS, 10, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1790, x64Parser::tokenBranches1790 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2599, x64Parser::tokenBranches2599 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches16[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches17 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc184(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 19;
}
x64Token x64Parser::tokenBranches183[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc184,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc330(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 34;
}
x64Token x64Parser::tokenBranches329[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc330,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc183(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc329(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches182[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc183, x64Parser::tokenBranches183 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc329, x64Parser::tokenBranches329 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc24(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 4;
}
x64Token x64Parser::tokenBranches23[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc24,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches182 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc130(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches129[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc130,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 28;
}
x64Token x64Parser::tokenBranches275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc422(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 43;
}
x64Token x64Parser::tokenBranches421[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc422,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc23(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc129(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc275(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc421(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches22[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc23, x64Parser::tokenBranches23 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc129, x64Parser::tokenBranches129 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc275, x64Parser::tokenBranches275 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc421, x64Parser::tokenBranches421 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc92(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches21[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches22 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc92,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc191(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 20;
}
x64Token x64Parser::tokenBranches190[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc191,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc337(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 35;
}
x64Token x64Parser::tokenBranches336[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc337,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc190(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc336(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches189[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc190, x64Parser::tokenBranches190 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc336, x64Parser::tokenBranches336 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc29(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 5;
}
x64Token x64Parser::tokenBranches28[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc29,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches189 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc156(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches155[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc156,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc302(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 31;
}
x64Token x64Parser::tokenBranches301[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc302,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc448(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 46;
}
x64Token x64Parser::tokenBranches447[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc448,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc28(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc155(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc301(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc447(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches27[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc28, x64Parser::tokenBranches28 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc155, x64Parser::tokenBranches155 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc301, x64Parser::tokenBranches301 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc447, x64Parser::tokenBranches447 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc110(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches26[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches27 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc110,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc250(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 25;
}
x64Token x64Parser::tokenBranches249[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc250,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc396(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 40;
}
x64Token x64Parser::tokenBranches395[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc396,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc249(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc395(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches248[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc249, x64Parser::tokenBranches249 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc395, x64Parser::tokenBranches395 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc74(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 10;
}
x64Token x64Parser::tokenBranches73[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc74,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches248 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc546(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches545[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc546,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc624(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 62;
}
x64Token x64Parser::tokenBranches623[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc624,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc707(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 72;
}
x64Token x64Parser::tokenBranches706[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc707,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc920(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches919[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc920,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1328(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 112;
}
x64Token x64Parser::tokenBranches1327[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1328,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1556(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 130;
}
x64Token x64Parser::tokenBranches1555[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1556,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc919(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1327(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1555(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches918[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc919, x64Parser::tokenBranches919 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1327, x64Parser::tokenBranches1327 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1555, x64Parser::tokenBranches1555 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1142(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches917[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches918 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1142,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc917(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches916[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc917, x64Parser::tokenBranches917 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc927(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches926[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc927,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1335(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1334[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1335,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1563(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 131;
}
x64Token x64Parser::tokenBranches1562[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1563,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc926(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1334(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1562(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches925[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc926, x64Parser::tokenBranches926 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1334, x64Parser::tokenBranches1334 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1562, x64Parser::tokenBranches1562 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1147(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches915[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches916 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches925 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1147,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc545(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc623(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc706(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc915(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches544[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc545, x64Parser::tokenBranches545 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc623, x64Parser::tokenBranches623 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc706, x64Parser::tokenBranches706 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc915, x64Parser::tokenBranches915 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc472(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches471[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc472,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches544 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc551(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches550[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc551,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc629(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 63;
}
x64Token x64Parser::tokenBranches628[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc629,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc702(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 71;
}
x64Token x64Parser::tokenBranches701[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc702,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc904(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches903[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc904,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1312(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 110;
}
x64Token x64Parser::tokenBranches1311[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1312,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1540(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 128;
}
x64Token x64Parser::tokenBranches1539[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1540,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc903(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1311(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1539(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches902[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc903, x64Parser::tokenBranches903 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1311, x64Parser::tokenBranches1311 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1539, x64Parser::tokenBranches1539 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1130(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches901[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches902 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1130,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc901(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches900[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc901, x64Parser::tokenBranches901 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc911(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches910[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc911,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1319(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 111;
}
x64Token x64Parser::tokenBranches1318[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1319,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1547(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 129;
}
x64Token x64Parser::tokenBranches1546[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1547,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc910(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1318(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1546(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches909[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc910, x64Parser::tokenBranches910 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1318, x64Parser::tokenBranches1318 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1546, x64Parser::tokenBranches1546 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1135(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches899[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches900 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches909 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1135,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc550(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc628(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc701(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc899(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches549[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc550, x64Parser::tokenBranches550 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc628, x64Parser::tokenBranches628 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc701, x64Parser::tokenBranches701 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc899, x64Parser::tokenBranches899 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc787(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 81;
}
x64Token x64Parser::tokenBranches786[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc787,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc786(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches785[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc786, x64Parser::tokenBranches786 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc780(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 80;
}
x64Token x64Parser::tokenBranches779[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc780,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches785 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc779(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches778[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc779, x64Parser::tokenBranches779 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc475(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches474[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc475,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches549 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches778 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc556(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches555[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc556,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc634(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 64;
}
x64Token x64Parser::tokenBranches633[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc634,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc712(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 73;
}
x64Token x64Parser::tokenBranches711[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc712,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc936(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches935[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc936,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1344(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 114;
}
x64Token x64Parser::tokenBranches1343[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1344,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1572(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1571[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1572,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc935(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1343(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1571(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches934[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc935, x64Parser::tokenBranches935 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1343, x64Parser::tokenBranches1343 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1571, x64Parser::tokenBranches1571 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1154(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches933[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches934 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1154,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc933(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches932[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc933, x64Parser::tokenBranches933 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc943(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches942[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc943,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1351(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 115;
}
x64Token x64Parser::tokenBranches1350[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1351,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1579(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1578[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1579,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc942(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1350(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1578(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches941[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc942, x64Parser::tokenBranches942 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1350, x64Parser::tokenBranches1350 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1578, x64Parser::tokenBranches1578 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1159(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches931[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches932 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches941 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc1159,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc555(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc633(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc711(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc931(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches554[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc555, x64Parser::tokenBranches555 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc633, x64Parser::tokenBranches633 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc711, x64Parser::tokenBranches711 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc931, x64Parser::tokenBranches931 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc799(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 83;
}
x64Token x64Parser::tokenBranches798[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc799,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc798(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches797[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc798, x64Parser::tokenBranches798 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc792(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 82;
}
x64Token x64Parser::tokenBranches791[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc792,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches797 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc791(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches790[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc791, x64Parser::tokenBranches791 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc478(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches477[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc478,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches554 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches790 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc526(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 58;
}
x64Token x64Parser::tokenBranches525[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc526,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1801(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 146;
}
x64Token x64Parser::tokenBranches1800[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1801,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1849(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 155;
}
x64Token x64Parser::tokenBranches1848[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1849,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1897(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 163;
}
x64Token x64Parser::tokenBranches1896[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1897,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2049(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 185;
}
x64Token x64Parser::tokenBranches2048[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2049,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2305(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 202;
}
x64Token x64Parser::tokenBranches2304[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2305,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2449(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 218;
}
x64Token x64Parser::tokenBranches2448[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2449,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2048(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2304(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2448(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2047[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2048, x64Parser::tokenBranches2048 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2304, x64Parser::tokenBranches2304 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2448, x64Parser::tokenBranches2448 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2187(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 185;
}
x64Token x64Parser::tokenBranches2046[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2047 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2187,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2046(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2045[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2046, x64Parser::tokenBranches2046 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2056(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 186;
}
x64Token x64Parser::tokenBranches2055[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2056,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2312(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 203;
}
x64Token x64Parser::tokenBranches2311[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2312,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2456(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 219;
}
x64Token x64Parser::tokenBranches2455[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2456,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2055(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2311(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2455(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2054[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2055, x64Parser::tokenBranches2055 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2311, x64Parser::tokenBranches2311 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2455, x64Parser::tokenBranches2455 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2192(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 186;
}
x64Token x64Parser::tokenBranches2044[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2045 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2054 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2192,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1800(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1848(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1896(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2044(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1799[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1800, x64Parser::tokenBranches1800 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1848, x64Parser::tokenBranches1848 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1896, x64Parser::tokenBranches1896 },
	{x64Token::REGISTERCLASS, 11, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2044, x64Parser::tokenBranches2044 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1762(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 146;
}
x64Token x64Parser::tokenBranches1761[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1762,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1799 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1806(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 147;
}
x64Token x64Parser::tokenBranches1805[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1806,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1854(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 156;
}
x64Token x64Parser::tokenBranches1853[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1854,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1902(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 164;
}
x64Token x64Parser::tokenBranches1901[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1902,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2033(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 183;
}
x64Token x64Parser::tokenBranches2032[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2033,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2289(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 200;
}
x64Token x64Parser::tokenBranches2288[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2289,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2433(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 216;
}
x64Token x64Parser::tokenBranches2432[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2433,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2032(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2288(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2432(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2031[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2032, x64Parser::tokenBranches2032 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2288, x64Parser::tokenBranches2288 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2432, x64Parser::tokenBranches2432 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2175(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 183;
}
x64Token x64Parser::tokenBranches2030[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2031 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2175,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2030(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2029[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2030, x64Parser::tokenBranches2030 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2040(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 184;
}
x64Token x64Parser::tokenBranches2039[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2040,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2296(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 201;
}
x64Token x64Parser::tokenBranches2295[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2296,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2440(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 217;
}
x64Token x64Parser::tokenBranches2439[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2440,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2039(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2295(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2439(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2038[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2039, x64Parser::tokenBranches2039 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2295, x64Parser::tokenBranches2295 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2439, x64Parser::tokenBranches2439 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2180(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 184;
}
x64Token x64Parser::tokenBranches2028[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2029 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2038 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2180,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1805(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1853(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1901(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2028(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1804[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1805, x64Parser::tokenBranches1805 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1853, x64Parser::tokenBranches1853 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1901, x64Parser::tokenBranches1901 },
	{x64Token::REGISTERCLASS, 11, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2028, x64Parser::tokenBranches2028 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1952(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 172;
}
x64Token x64Parser::tokenBranches1951[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1952,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1951(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1950[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1951, x64Parser::tokenBranches1951 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1945(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 171;
}
x64Token x64Parser::tokenBranches1944[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1945,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1950 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1944(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1943[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1944, x64Parser::tokenBranches1944 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1765(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 147;
}
x64Token x64Parser::tokenBranches1764[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1765,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1804 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1943 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1825(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 150;
}
x64Token x64Parser::tokenBranches1824[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1825,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1873(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 159;
}
x64Token x64Parser::tokenBranches1872[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1873,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1921(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 167;
}
x64Token x64Parser::tokenBranches1920[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1921,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2105(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 191;
}
x64Token x64Parser::tokenBranches2104[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2105,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2361(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 208;
}
x64Token x64Parser::tokenBranches2360[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2361,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2505(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 224;
}
x64Token x64Parser::tokenBranches2504[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2505,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2104(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2360(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2504(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2103[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2104, x64Parser::tokenBranches2104 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2360, x64Parser::tokenBranches2360 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2504, x64Parser::tokenBranches2504 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2231(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 191;
}
x64Token x64Parser::tokenBranches2102[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2103 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2231,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2102(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2101[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2102, x64Parser::tokenBranches2102 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2112(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 192;
}
x64Token x64Parser::tokenBranches2111[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2112,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2368(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 209;
}
x64Token x64Parser::tokenBranches2367[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2368,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2512(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 225;
}
x64Token x64Parser::tokenBranches2511[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2512,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2111(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2367(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2511(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2110[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2111, x64Parser::tokenBranches2111 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2367, x64Parser::tokenBranches2367 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2511, x64Parser::tokenBranches2511 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 199;
}
x64Token x64Parser::tokenBranches2100[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2101 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2110 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1824(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1872(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1920(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2100(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1823[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1824, x64Parser::tokenBranches1824 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1872, x64Parser::tokenBranches1872 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1920, x64Parser::tokenBranches1920 },
	{x64Token::REGISTERCLASS, 11, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2100, x64Parser::tokenBranches2100 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1980(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 176;
}
x64Token x64Parser::tokenBranches1979[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1980,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1979(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1978[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1979, x64Parser::tokenBranches1979 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1973(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 175;
}
x64Token x64Parser::tokenBranches1972[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1973,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1978 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1972(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1971[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1972, x64Parser::tokenBranches1972 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1778(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 150;
}
x64Token x64Parser::tokenBranches1777[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1778,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1823 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1971 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1830(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 151;
}
x64Token x64Parser::tokenBranches1829[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1830,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1878(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 160;
}
x64Token x64Parser::tokenBranches1877[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1878,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1926(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 168;
}
x64Token x64Parser::tokenBranches1925[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1926,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2121(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 193;
}
x64Token x64Parser::tokenBranches2120[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2121,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2377(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 210;
}
x64Token x64Parser::tokenBranches2376[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2377,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2521(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 226;
}
x64Token x64Parser::tokenBranches2520[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2521,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2120(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2376(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2520(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2119[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2120, x64Parser::tokenBranches2120 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2376, x64Parser::tokenBranches2376 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2520, x64Parser::tokenBranches2520 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2243(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 193;
}
x64Token x64Parser::tokenBranches2118[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2119 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2243,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2118(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2117[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2118, x64Parser::tokenBranches2118 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2128(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 194;
}
x64Token x64Parser::tokenBranches2127[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2128,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2384(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 211;
}
x64Token x64Parser::tokenBranches2383[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2384,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2528(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 227;
}
x64Token x64Parser::tokenBranches2527[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2528,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2127(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2383(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2527(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2126[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2127, x64Parser::tokenBranches2127 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2383, x64Parser::tokenBranches2383 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2527, x64Parser::tokenBranches2527 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2248(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 194;
}
x64Token x64Parser::tokenBranches2116[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2117 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2126 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2248,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1829(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1877(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1925(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2116(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1828[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1829, x64Parser::tokenBranches1829 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1877, x64Parser::tokenBranches1877 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1925, x64Parser::tokenBranches1925 },
	{x64Token::REGISTERCLASS, 11, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2116, x64Parser::tokenBranches2116 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1992(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 178;
}
x64Token x64Parser::tokenBranches1991[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1992,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1991(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1990[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1991, x64Parser::tokenBranches1991 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1985(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 177;
}
x64Token x64Parser::tokenBranches1984[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1985,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1990 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1984(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1983[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1984, x64Parser::tokenBranches1984 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1781(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 151;
}
x64Token x64Parser::tokenBranches1780[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1781,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1828 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1983 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1796(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 154;
}
x64Token x64Parser::tokenBranches1795[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1796,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1795(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1794[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1795, x64Parser::tokenBranches1795 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1793[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1794 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2610(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 232;
}
x64Token x64Parser::tokenBranches2609[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2610,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2658(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 241;
}
x64Token x64Parser::tokenBranches2657[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2658,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2706(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 249;
}
x64Token x64Parser::tokenBranches2705[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2706,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2858(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 271;
}
x64Token x64Parser::tokenBranches2857[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2858,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3114(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 287;
}
x64Token x64Parser::tokenBranches3113[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3114,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3258(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 303;
}
x64Token x64Parser::tokenBranches3257[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3258,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2857(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3113(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3257(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2856[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2857, x64Parser::tokenBranches2857 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3113, x64Parser::tokenBranches3113 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3257, x64Parser::tokenBranches3257 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2996(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 271;
}
x64Token x64Parser::tokenBranches2855[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2856 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2996,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2855(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2854[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2855, x64Parser::tokenBranches2855 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2865(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 272;
}
x64Token x64Parser::tokenBranches2864[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2865,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3121(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 288;
}
x64Token x64Parser::tokenBranches3120[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3121,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3265(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 304;
}
x64Token x64Parser::tokenBranches3264[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3265,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2864(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3120(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3264(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2863[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2864, x64Parser::tokenBranches2864 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3120, x64Parser::tokenBranches3120 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3264, x64Parser::tokenBranches3264 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3001(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 272;
}
x64Token x64Parser::tokenBranches2853[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2854 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2863 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3001,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2609(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2657(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2705(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2853(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2608[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2609, x64Parser::tokenBranches2609 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2657, x64Parser::tokenBranches2657 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2705, x64Parser::tokenBranches2705 },
	{x64Token::REGISTERCLASS, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2853, x64Parser::tokenBranches2853 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2571(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 232;
}
x64Token x64Parser::tokenBranches2570[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2571,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2608 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2615(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 233;
}
x64Token x64Parser::tokenBranches2614[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2615,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2663(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 242;
}
x64Token x64Parser::tokenBranches2662[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2663,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2711(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 250;
}
x64Token x64Parser::tokenBranches2710[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2711,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2842(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 269;
}
x64Token x64Parser::tokenBranches2841[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2842,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3098(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 285;
}
x64Token x64Parser::tokenBranches3097[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3098,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3242(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 301;
}
x64Token x64Parser::tokenBranches3241[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3242,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2841(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3097(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3241(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2840[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2841, x64Parser::tokenBranches2841 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3097, x64Parser::tokenBranches3097 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3241, x64Parser::tokenBranches3241 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2984(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 269;
}
x64Token x64Parser::tokenBranches2839[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2840 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2984,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2839(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2838[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2839, x64Parser::tokenBranches2839 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2849(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 270;
}
x64Token x64Parser::tokenBranches2848[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2849,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3105(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 286;
}
x64Token x64Parser::tokenBranches3104[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3105,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3249(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 302;
}
x64Token x64Parser::tokenBranches3248[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3249,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2848(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3104(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3248(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2847[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2848, x64Parser::tokenBranches2848 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3104, x64Parser::tokenBranches3104 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3248, x64Parser::tokenBranches3248 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2989(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 270;
}
x64Token x64Parser::tokenBranches2837[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2838 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2847 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2989,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2614(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2662(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2710(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2837(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2613[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2614, x64Parser::tokenBranches2614 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2662, x64Parser::tokenBranches2662 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2710, x64Parser::tokenBranches2710 },
	{x64Token::REGISTERCLASS, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2837, x64Parser::tokenBranches2837 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2761(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 258;
}
x64Token x64Parser::tokenBranches2760[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2761,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2760(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2759[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2760, x64Parser::tokenBranches2760 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2754(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 257;
}
x64Token x64Parser::tokenBranches2753[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2754,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2759 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2753(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2752[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2753, x64Parser::tokenBranches2753 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2574(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 233;
}
x64Token x64Parser::tokenBranches2573[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2574,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2613 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2752 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2634(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 236;
}
x64Token x64Parser::tokenBranches2633[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2634,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2682(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 245;
}
x64Token x64Parser::tokenBranches2681[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2682,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2730(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 253;
}
x64Token x64Parser::tokenBranches2729[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2730,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2914(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 277;
}
x64Token x64Parser::tokenBranches2913[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2914,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3170(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 293;
}
x64Token x64Parser::tokenBranches3169[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3170,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3314(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 309;
}
x64Token x64Parser::tokenBranches3313[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3314,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2913(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3169(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3313(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2912[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2913, x64Parser::tokenBranches2913 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3169, x64Parser::tokenBranches3169 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3313, x64Parser::tokenBranches3313 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3040(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 277;
}
x64Token x64Parser::tokenBranches2911[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2912 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3040,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2911(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2910[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2911, x64Parser::tokenBranches2911 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2921(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 278;
}
x64Token x64Parser::tokenBranches2920[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2921,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3177(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 294;
}
x64Token x64Parser::tokenBranches3176[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3177,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3321(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 310;
}
x64Token x64Parser::tokenBranches3320[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3321,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2920(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3176(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3320(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2919[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2920, x64Parser::tokenBranches2920 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3176, x64Parser::tokenBranches3176 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3320, x64Parser::tokenBranches3320 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3045(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 278;
}
x64Token x64Parser::tokenBranches2909[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2910 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2919 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3045,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2633(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2681(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2729(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2909(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2632[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2633, x64Parser::tokenBranches2633 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2681, x64Parser::tokenBranches2681 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2729, x64Parser::tokenBranches2729 },
	{x64Token::REGISTERCLASS, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2909, x64Parser::tokenBranches2909 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2789(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 262;
}
x64Token x64Parser::tokenBranches2788[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2789,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2788(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2787[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2788, x64Parser::tokenBranches2788 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2782(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 261;
}
x64Token x64Parser::tokenBranches2781[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2782,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2787 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2781(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2780[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2781, x64Parser::tokenBranches2781 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2587(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 236;
}
x64Token x64Parser::tokenBranches2586[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2587,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2632 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2780 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2639(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 237;
}
x64Token x64Parser::tokenBranches2638[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2639,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2687(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 246;
}
x64Token x64Parser::tokenBranches2686[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2687,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2735(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 254;
}
x64Token x64Parser::tokenBranches2734[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2735,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2930(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 279;
}
x64Token x64Parser::tokenBranches2929[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2930,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3186(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 295;
}
x64Token x64Parser::tokenBranches3185[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3186,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3330(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 311;
}
x64Token x64Parser::tokenBranches3329[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3330,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2929(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3185(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3329(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2928[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2929, x64Parser::tokenBranches2929 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3185, x64Parser::tokenBranches3185 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3329, x64Parser::tokenBranches3329 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3052(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 279;
}
x64Token x64Parser::tokenBranches2927[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2928 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3052,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2927(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2926[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2927, x64Parser::tokenBranches2927 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2937(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 280;
}
x64Token x64Parser::tokenBranches2936[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2937,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3193(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 296;
}
x64Token x64Parser::tokenBranches3192[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3193,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3337(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 312;
}
x64Token x64Parser::tokenBranches3336[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3337,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2936(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3192(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3336(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2935[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2936, x64Parser::tokenBranches2936 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3192, x64Parser::tokenBranches3192 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3336, x64Parser::tokenBranches3336 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3057(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 280;
}
x64Token x64Parser::tokenBranches2925[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2926 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2935 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3057,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2638(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2686(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2734(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2925(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2637[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2638, x64Parser::tokenBranches2638 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2686, x64Parser::tokenBranches2686 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2734, x64Parser::tokenBranches2734 },
	{x64Token::REGISTERCLASS, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2925, x64Parser::tokenBranches2925 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2801(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 264;
}
x64Token x64Parser::tokenBranches2800[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2801,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2800(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2799[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2800, x64Parser::tokenBranches2800 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2794(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 263;
}
x64Token x64Parser::tokenBranches2793[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2794,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2799 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2793(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2792[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2793, x64Parser::tokenBranches2793 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2590(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 237;
}
x64Token x64Parser::tokenBranches2589[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2590,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2637 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2792 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2605(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 240;
}
x64Token x64Parser::tokenBranches2604[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2605,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2604(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2603[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2604, x64Parser::tokenBranches2604 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2602[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2603 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc16(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc73(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc477(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc525(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1761(x64Operand &operand, int tokenPos)
{
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc1764(x64Operand &operand, int tokenPos)
{
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc1780(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc2589(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2[] = {
	{x64Token::REGISTER, 95, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches6 },
	{x64Token::REGISTER, 94, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches11 },
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches21 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches26 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches471 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches474 },
	{x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1777 },
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2570 },
	{x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2573 },
	{x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2586 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc3, x64Parser::tokenBranches3 },
	{x64Token::REGISTERCLASS, 31, 0, 0, x64Parser::RegClassData1, &x64Parser::TokenFunc16, x64Parser::tokenBranches16 },
	{x64Token::REGISTERCLASS, 26, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc73, x64Parser::tokenBranches73 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc477, x64Parser::tokenBranches477 },
	{x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc525, x64Parser::tokenBranches525 },
	{x64Token::REGISTERCLASS, 24, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1761, x64Parser::tokenBranches1761 },
	{x64Token::REGISTERCLASS, 25, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1764, x64Parser::tokenBranches1764 },
	{x64Token::REGISTERCLASS, 10, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1780, x64Parser::tokenBranches1780 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1793 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2589, x64Parser::tokenBranches2589 },
	{x64Token::TOKEN, 7, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2602 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3378(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3379(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3380(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3381(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 318;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3382(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3383(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3384(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 319;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3385(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 319;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3386(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 319;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3387(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 319;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3388(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 320;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3389(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 320;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3390(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 321;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1[] = {
	{x64Token::TOKEN, 1, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches2 },
	{x64Token::REGISTERCLASS, 1, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3378,  },
	{x64Token::REGISTERCLASS, 5, 1, 0, x64Parser::RegClassData7, &x64Parser::TokenFunc3379,  },
	{x64Token::REGISTERCLASS, 9, 1, 0, x64Parser::RegClassData8, &x64Parser::TokenFunc3380,  },
	{x64Token::REGISTERCLASS, 20, 1, 0, x64Parser::RegClassData9, &x64Parser::TokenFunc3381,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, x64Parser::RegClassData10, &x64Parser::TokenFunc3382,  },
	{x64Token::REGISTERCLASS, 32, 1, 0, x64Parser::RegClassData11, &x64Parser::TokenFunc3383,  },
	{x64Token::REGISTERCLASS, 2, 1, 0, x64Parser::RegClassData12, &x64Parser::TokenFunc3384,  },
	{x64Token::REGISTERCLASS, 6, 1, 0, x64Parser::RegClassData13, &x64Parser::TokenFunc3385,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, x64Parser::RegClassData14, &x64Parser::TokenFunc3386,  },
	{x64Token::REGISTERCLASS, 18, 1, 0, x64Parser::RegClassData15, &x64Parser::TokenFunc3387,  },
	{x64Token::REGISTERCLASS, 28, 1, 0, x64Parser::RegClassData16, &x64Parser::TokenFunc3388,  },
	{x64Token::REGISTERCLASS, 27, 1, 0, x64Parser::RegClassData17, &x64Parser::TokenFunc3389,  },
	{x64Token::REGISTERCLASS, 29, 1, 0, x64Parser::RegClassData18, &x64Parser::TokenFunc3390,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3392(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 322;
}
x64Token x64Parser::tokenBranches3391[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3392,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3394(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 323;
}
x64Token x64Parser::tokenBranches3393[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3394,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3399_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3399_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3399_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3399_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3399(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3399_9;
	operand.values[10] = tokenCoding3399_10;
	operand.values[11] = tokenCoding3399_11;
	operand.values[12] = tokenCoding3399_12;
}
Coding x64Parser::tokenCoding3407_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3407_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3407_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3407_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3407(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3407_9;
	operand.values[10] = tokenCoding3407_10;
	operand.values[11] = tokenCoding3407_11;
	operand.values[12] = tokenCoding3407_12;
}
x64Token x64Parser::tokenBranches3398[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3399,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3407,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3397[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3398 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3396[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3397 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3403_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3403_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3403_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3403_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3403(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3403_9;
	operand.values[10] = tokenCoding3403_10;
	operand.values[11] = tokenCoding3403_11;
	operand.values[12] = tokenCoding3403_12;
}
Coding x64Parser::tokenCoding3411_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3411_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3411_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3411_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3411(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3411_9;
	operand.values[10] = tokenCoding3411_10;
	operand.values[11] = tokenCoding3411_11;
	operand.values[12] = tokenCoding3411_12;
}
x64Token x64Parser::tokenBranches3402[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3403,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3411,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3401[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3402 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3400[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3401 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3415_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3415_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3415_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3415_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3415(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3415_9;
	operand.values[10] = tokenCoding3415_10;
	operand.values[11] = tokenCoding3415_11;
	operand.values[12] = tokenCoding3415_12;
}
x64Token x64Parser::tokenBranches3414[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3415,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3413[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3414 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3412[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3413 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3419_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3419_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3419_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3419_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3419(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3419_9;
	operand.values[10] = tokenCoding3419_10;
	operand.values[11] = tokenCoding3419_11;
	operand.values[12] = tokenCoding3419_12;
}
x64Token x64Parser::tokenBranches3418[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3419,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3417[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3418 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3416[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3417 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3423_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3423_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3423_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3423_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3423(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3423_9;
	operand.values[10] = tokenCoding3423_10;
	operand.values[11] = tokenCoding3423_11;
	operand.values[12] = tokenCoding3423_12;
}
x64Token x64Parser::tokenBranches3422[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3423,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3421[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3422 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3420[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3421 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3396(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3400(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3412(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3416(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3420(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3395[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc3396, x64Parser::tokenBranches3396 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc3400, x64Parser::tokenBranches3400 },
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc3412, x64Parser::tokenBranches3412 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc3416, x64Parser::tokenBranches3416 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc3420, x64Parser::tokenBranches3420 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3428_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3428_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3428_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3428_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3428(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3428_9;
	operand.values[10] = tokenCoding3428_10;
	operand.values[11] = tokenCoding3428_11;
	operand.values[12] = tokenCoding3428_12;
}
Coding x64Parser::tokenCoding3436_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3436_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3436_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3436_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3436(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3436_9;
	operand.values[10] = tokenCoding3436_10;
	operand.values[11] = tokenCoding3436_11;
	operand.values[12] = tokenCoding3436_12;
}
x64Token x64Parser::tokenBranches3427[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3428,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3436,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3426[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3427 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3425[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3426 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3432_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3432_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3432_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3432_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3432(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3432_9;
	operand.values[10] = tokenCoding3432_10;
	operand.values[11] = tokenCoding3432_11;
	operand.values[12] = tokenCoding3432_12;
}
Coding x64Parser::tokenCoding3440_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3440_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3440_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3440_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3440(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3440_9;
	operand.values[10] = tokenCoding3440_10;
	operand.values[11] = tokenCoding3440_11;
	operand.values[12] = tokenCoding3440_12;
}
x64Token x64Parser::tokenBranches3431[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3432,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3440,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3430[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3431 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3429[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3430 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3444_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3444_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3444_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3444_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3444(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3444_9;
	operand.values[10] = tokenCoding3444_10;
	operand.values[11] = tokenCoding3444_11;
	operand.values[12] = tokenCoding3444_12;
}
x64Token x64Parser::tokenBranches3443[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3444,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3442[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3443 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3441[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3442 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3448_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3448_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3448_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3448_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3448(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3448_9;
	operand.values[10] = tokenCoding3448_10;
	operand.values[11] = tokenCoding3448_11;
	operand.values[12] = tokenCoding3448_12;
}
x64Token x64Parser::tokenBranches3447[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3448,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3446[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3447 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3445[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3446 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3452_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3452_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3452_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3452_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3452(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3452_9;
	operand.values[10] = tokenCoding3452_10;
	operand.values[11] = tokenCoding3452_11;
	operand.values[12] = tokenCoding3452_12;
}
x64Token x64Parser::tokenBranches3451[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3452,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3450[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3451 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3449[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3450 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3425(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3429(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3441(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3445(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3449(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3424[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc3425, x64Parser::tokenBranches3425 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc3429, x64Parser::tokenBranches3429 },
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc3441, x64Parser::tokenBranches3441 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc3445, x64Parser::tokenBranches3445 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc3449, x64Parser::tokenBranches3449 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3457(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 324;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3456[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3457,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3455[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3456 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3454[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3455 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3461(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 325;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3460[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3461,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3459[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3460 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3458[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3459 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3465(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 326;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3464[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3465,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3463[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3464 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3462[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3463 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3469(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3468[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3469,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3467[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3468 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3466[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3467 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3473_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3473_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3473_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3473_12[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3473(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3473_9;
	operand.values[10] = tokenCoding3473_10;
	operand.values[11] = tokenCoding3473_11;
	operand.values[12] = tokenCoding3473_12;
}
x64Token x64Parser::tokenBranches3472[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3473,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3471[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3472 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3470[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3471 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3477_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3477_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3477_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3477_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3477(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3477_9;
	operand.values[10] = tokenCoding3477_10;
	operand.values[11] = tokenCoding3477_11;
	operand.values[12] = tokenCoding3477_12;
}
x64Token x64Parser::tokenBranches3476[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3477,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3475[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3476 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3474[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3475 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3481_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3481_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3481_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3481_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3481(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3481_9;
	operand.values[10] = tokenCoding3481_10;
	operand.values[11] = tokenCoding3481_11;
	operand.values[12] = tokenCoding3481_12;
}
x64Token x64Parser::tokenBranches3480[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3481,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3479[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3480 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3478[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3479 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3485_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3485_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3485_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3485_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3485(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3485_9;
	operand.values[10] = tokenCoding3485_10;
	operand.values[11] = tokenCoding3485_11;
	operand.values[12] = tokenCoding3485_12;
}
x64Token x64Parser::tokenBranches3484[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc3485,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3483[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3484 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3482[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3483 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3489_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3489_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3489_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3489_12[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3489(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3489_9;
	operand.values[10] = tokenCoding3489_10;
	operand.values[11] = tokenCoding3489_11;
	operand.values[12] = tokenCoding3489_12;
}
x64Token x64Parser::tokenBranches3488[] = {
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3489,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3487[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3488 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3486[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3487 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3493_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3493_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3493_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3493_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3493(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3493_9;
	operand.values[10] = tokenCoding3493_10;
	operand.values[11] = tokenCoding3493_11;
	operand.values[12] = tokenCoding3493_12;
}
x64Token x64Parser::tokenBranches3492[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3493,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3491[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3492 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3490[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3491 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3497_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3497_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3497_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3497_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3497(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3497_9;
	operand.values[10] = tokenCoding3497_10;
	operand.values[11] = tokenCoding3497_11;
	operand.values[12] = tokenCoding3497_12;
}
x64Token x64Parser::tokenBranches3496[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3497,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3495[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3496 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3494[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3495 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3501_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3501_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3501_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3501_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3501(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3501_9;
	operand.values[10] = tokenCoding3501_10;
	operand.values[11] = tokenCoding3501_11;
	operand.values[12] = tokenCoding3501_12;
}
x64Token x64Parser::tokenBranches3500[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3501,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3499[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3500 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3498[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3499 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3505_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3505_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3505_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3505_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3505(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3505_9;
	operand.values[10] = tokenCoding3505_10;
	operand.values[11] = tokenCoding3505_11;
	operand.values[12] = tokenCoding3505_12;
}
x64Token x64Parser::tokenBranches3504[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3505,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3503[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3504 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3517_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3517_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3517_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3517_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3517(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3517_9;
	operand.values[10] = tokenCoding3517_10;
	operand.values[11] = tokenCoding3517_11;
	operand.values[12] = tokenCoding3517_12;
}
x64Token x64Parser::tokenBranches3516[] = {
	{x64Token::REGISTERCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3517,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3515[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3516 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3502[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3503 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3515 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3509_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3509_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3509_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3509_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3509(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3509_9;
	operand.values[10] = tokenCoding3509_10;
	operand.values[11] = tokenCoding3509_11;
	operand.values[12] = tokenCoding3509_12;
}
x64Token x64Parser::tokenBranches3508[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3509,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3507[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3508 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3521_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3521_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3521_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3521_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3521(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3521_9;
	operand.values[10] = tokenCoding3521_10;
	operand.values[11] = tokenCoding3521_11;
	operand.values[12] = tokenCoding3521_12;
}
x64Token x64Parser::tokenBranches3520[] = {
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc3521,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3519[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3520 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3506[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3507 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3519 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3513_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3513_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3513_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3513_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3513(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3513_9;
	operand.values[10] = tokenCoding3513_10;
	operand.values[11] = tokenCoding3513_11;
	operand.values[12] = tokenCoding3513_12;
}
x64Token x64Parser::tokenBranches3512[] = {
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc3513,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3511[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3512 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3525_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3525_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3525_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3525_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3525(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3525_9;
	operand.values[10] = tokenCoding3525_10;
	operand.values[11] = tokenCoding3525_11;
	operand.values[12] = tokenCoding3525_12;
}
x64Token x64Parser::tokenBranches3524[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3525,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3523[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3524 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3510[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3511 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3523 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3529_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3529_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3529_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3529_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3529(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3529_9;
	operand.values[10] = tokenCoding3529_10;
	operand.values[11] = tokenCoding3529_11;
	operand.values[12] = tokenCoding3529_12;
}
x64Token x64Parser::tokenBranches3528[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3529,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3527[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3528 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3526[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3527 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3534_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3534(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3534_12;
}
x64Token x64Parser::tokenBranches3533[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3534,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3532[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3533 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3531[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3532 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3569_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3569(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3569_12;
}
x64Token x64Parser::tokenBranches3568[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3569,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3567[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3568 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3566[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3567 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3530[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3531 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3566 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3539_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3539(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3539_12;
}
x64Token x64Parser::tokenBranches3538[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3539,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3544_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3544(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3544_12;
}
x64Token x64Parser::tokenBranches3543[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3544,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3537[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3538 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3543 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3536[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3537 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3574_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3574(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3574_12;
}
x64Token x64Parser::tokenBranches3573[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3574,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3579_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3579(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3579_12;
}
x64Token x64Parser::tokenBranches3578[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3579,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3572[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3573 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3578 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3571[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3572 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3535[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3536 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3571 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3549_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3549(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3549_12;
}
x64Token x64Parser::tokenBranches3548[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3549,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3554_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3554(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3554_12;
}
x64Token x64Parser::tokenBranches3553[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3554,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3547[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3548 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3553 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3546[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3547 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3584_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3584(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3584_12;
}
x64Token x64Parser::tokenBranches3583[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3584,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3589_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3589(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3589_12;
}
x64Token x64Parser::tokenBranches3588[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3589,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3582[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3583 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3588 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3581[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3582 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3545[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3546 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3581 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3559_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3559(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3559_12;
}
x64Token x64Parser::tokenBranches3558[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3559,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3564_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3564(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3564_12;
}
x64Token x64Parser::tokenBranches3563[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3564,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3557[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3558 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3563 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3556[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3557 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3594_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3594(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3594_12;
}
x64Token x64Parser::tokenBranches3593[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3594,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3599_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3599(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3599_12;
}
x64Token x64Parser::tokenBranches3598[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3599,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3592[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3593 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3598 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3591[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3592 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3555[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches3556 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3591 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3603_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3603(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3603_12;
}
x64Token x64Parser::tokenBranches3602[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3603,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3601[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3602 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3600[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3601 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3607_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3607(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3607_12;
}
x64Token x64Parser::tokenBranches3606[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3607,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3605[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3606 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3604[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3605 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3611_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3611(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3611_12;
}
x64Token x64Parser::tokenBranches3610[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3611,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3615_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3615(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3615_12;
}
x64Token x64Parser::tokenBranches3614[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3615,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3609[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3610 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3614 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3608[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3609 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3619_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3619(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3619_12;
}
x64Token x64Parser::tokenBranches3618[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3619,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3623_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3623(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3623_12;
}
x64Token x64Parser::tokenBranches3622[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3623,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3617[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3618 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3622 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3616[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3617 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3627_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3627(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3627_12;
}
x64Token x64Parser::tokenBranches3626[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3627,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3631_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3631(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3631_12;
}
x64Token x64Parser::tokenBranches3630[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3631,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3625[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3626 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3630 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3624[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3625 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3635_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3635(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3635_12;
}
x64Token x64Parser::tokenBranches3634[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3635,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3639_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3639(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3639_12;
}
x64Token x64Parser::tokenBranches3638[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3639,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3633[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3634 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3638 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3632[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3633 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3643_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3643(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 333;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3643_12;
}
x64Token x64Parser::tokenBranches3642[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3643,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3647_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3647(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 334;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3647_12;
}
x64Token x64Parser::tokenBranches3646[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc3647,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3641[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3642 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3646 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3640[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3641 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3470(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3474(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3478(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3482(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3486(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3490(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3494(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3498(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3453[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches3454 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3458 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3462 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3466 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc3470, x64Parser::tokenBranches3470 },
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc3474, x64Parser::tokenBranches3474 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc3478, x64Parser::tokenBranches3478 },
	{x64Token::REGISTERCLASS, 20, 0, 0, NULL,&x64Parser::TokenFunc3482, x64Parser::tokenBranches3482 },
	{x64Token::REGISTERCLASS, 2, 0, 0, NULL,&x64Parser::TokenFunc3486, x64Parser::tokenBranches3486 },
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc3490, x64Parser::tokenBranches3490 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc3494, x64Parser::tokenBranches3494 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc3498, x64Parser::tokenBranches3498 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3502 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3506 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3510 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3526 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3530 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3535 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3545 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3555 },
	{x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches3600 },
	{x64Token::ADDRESSCLASS, 25, 0, 0, NULL, NULL, x64Parser::tokenBranches3604 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches3608 },
	{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches3616 },
	{x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches3624 },
	{x64Token::ADDRESSCLASS, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches3632 },
	{x64Token::ADDRESSCLASS, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches3640 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3653_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3653(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 335;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3653_12;
}
x64Token x64Parser::tokenBranches3652[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3653,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3672_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3672_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3672_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3672_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3672(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3672_9;
	operand.values[10] = tokenCoding3672_10;
	operand.values[11] = tokenCoding3672_11;
	operand.values[12] = tokenCoding3672_12;
}
x64Token x64Parser::tokenBranches3651[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3652 },
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3672,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3650[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3651 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3663_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3663(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 335;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3663_12;
}
x64Token x64Parser::tokenBranches3662[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3663,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3680_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3680_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3680_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3680_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3680(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3680_9;
	operand.values[10] = tokenCoding3680_10;
	operand.values[11] = tokenCoding3680_11;
	operand.values[12] = tokenCoding3680_12;
}
x64Token x64Parser::tokenBranches3661[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3662 },
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc3680,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3660[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3661 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3649[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3650 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3660 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3658_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3658(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 336;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3658_12;
}
x64Token x64Parser::tokenBranches3657[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3658,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3676_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3676_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3676_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3676_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3676(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3676_9;
	operand.values[10] = tokenCoding3676_10;
	operand.values[11] = tokenCoding3676_11;
	operand.values[12] = tokenCoding3676_12;
}
x64Token x64Parser::tokenBranches3656[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3657 },
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc3676,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3655[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3656 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3668_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3668(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 336;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3668_12;
}
x64Token x64Parser::tokenBranches3667[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3668,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3684_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3684_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3684_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3684_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3684(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3684_9;
	operand.values[10] = tokenCoding3684_10;
	operand.values[11] = tokenCoding3684_11;
	operand.values[12] = tokenCoding3684_12;
}
x64Token x64Parser::tokenBranches3666[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3667 },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3684,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3665[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3666 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3654[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3655 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3665 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3688_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3688_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3688_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3688_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3688(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding3688_9;
	operand.values[10] = tokenCoding3688_10;
	operand.values[11] = tokenCoding3688_11;
	operand.values[12] = tokenCoding3688_12;
}
x64Token x64Parser::tokenBranches3687[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3688,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3686[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3687 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3685[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3686 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3648[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3649 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3654 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3685 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3698_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3698(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3698_12;
}
Coding x64Parser::tokenCoding3704_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3704(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3704_12;
}
x64Token x64Parser::tokenBranches3697[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3698,  },
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3704,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3700_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3700(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3700_12;
}
Coding x64Parser::tokenCoding3706_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3706(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3706_12;
}
x64Token x64Parser::tokenBranches3699[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3700,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3706,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3702_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3702(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3702_12;
}
Coding x64Parser::tokenCoding3708_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3708(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3708_12;
}
x64Token x64Parser::tokenBranches3701[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3702,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3708,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3710_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3710(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3710_12;
}
x64Token x64Parser::tokenBranches3709[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3710,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3690_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3690(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3690_12;
}
void x64Parser::TokenFunc3691(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3692(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 338;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
Coding x64Parser::tokenCoding3693_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3693(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3693_12;
}
void x64Parser::TokenFunc3694(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3695(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 338;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3696(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 339;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3689[] = {
	{x64Token::ADDRESSCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3690,  },
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3691,  },
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc3692,  },
	{x64Token::ADDRESSCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc3693,  },
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc3694,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3695,  },
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3696,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3697 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3699 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3701 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3709 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3720_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3720(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3720_12;
}
Coding x64Parser::tokenCoding3726_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3726(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3726_12;
}
x64Token x64Parser::tokenBranches3719[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3720,  },
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3726,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3722_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3722(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3722_12;
}
Coding x64Parser::tokenCoding3728_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3728(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3728_12;
}
x64Token x64Parser::tokenBranches3721[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3722,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3728,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3724_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3724(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3724_12;
}
Coding x64Parser::tokenCoding3730_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3730(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3730_12;
}
Coding x64Parser::tokenCoding3732_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3732(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3732_12;
}
x64Token x64Parser::tokenBranches3723[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3724,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3730,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3732,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3712_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3712(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3712_12;
}
Coding x64Parser::tokenCoding3713_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3713(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3713_12;
}
Coding x64Parser::tokenCoding3714_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3714(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3714_12;
}
Coding x64Parser::tokenCoding3715_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3715(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3715_12;
}
Coding x64Parser::tokenCoding3716_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3716(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3716_12;
}
Coding x64Parser::tokenCoding3717_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3717(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3717_12;
}
Coding x64Parser::tokenCoding3718_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3718(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3718_12;
}
x64Token x64Parser::tokenBranches3711[] = {
	{x64Token::ADDRESSCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3712,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3713,  },
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc3714,  },
	{x64Token::ADDRESSCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc3715,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc3716,  },
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc3717,  },
	{x64Token::ADDRESSCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc3718,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3719 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3721 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3723 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3736(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3735[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc3736,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3734[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3735 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3739(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 341;
}
x64Token x64Parser::tokenBranches3738[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc3739,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3737[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3738 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3742_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3742(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3742_12;
}
Coding x64Parser::tokenCoding3746_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3746(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3746_12;
}
x64Token x64Parser::tokenBranches3741[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3742,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3746,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3744_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3744(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3744_12;
}
Coding x64Parser::tokenCoding3748_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3748(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3748_12;
}
x64Token x64Parser::tokenBranches3743[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3744,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3748,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3737(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 342;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3733[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3734 },
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc3737, x64Parser::tokenBranches3737 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3741 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3743 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3752(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 317;
}
x64Token x64Parser::tokenBranches3751[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc3752,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3750[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3751 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3750(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 317;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
void x64Parser::TokenFunc3754(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 343;
}
x64Token x64Parser::tokenBranches3749[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc3750, x64Parser::tokenBranches3750 },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3754,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3757_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3757(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3757_12;
}
Coding x64Parser::tokenCoding3761_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3761(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3761_12;
}
x64Token x64Parser::tokenBranches3756[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3757,  },
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc3761,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3759_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3759(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3759_12;
}
Coding x64Parser::tokenCoding3763_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3763(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3763_12;
}
x64Token x64Parser::tokenBranches3758[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3759,  },
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc3763,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3755[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3756 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3758 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3765[] = {
	{x64Token::ADDRESSCLASS, 0, 1, 0, NULL, NULL,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3764[] = {
	{x64Token::TOKEN, 14, 0, 1, NULL, NULL, x64Parser::tokenBranches3765 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3769(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3768[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc3769,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3771(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 345;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3773(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3770[] = {
	{x64Token::NUMBER, 13, 1, 0, NULL,&x64Parser::TokenFunc3771,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc3773,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3774(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 345;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3775(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3767[] = {
	{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3768 },
	{x64Token::TOKEN, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3770 },
	{x64Token::NUMBER, 12, 1, 0, NULL,&x64Parser::TokenFunc3774,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc3775,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3780_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3780_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3780_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3780_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3780(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3780_9;
	operand.values[10] = tokenCoding3780_10;
	operand.values[11] = tokenCoding3780_11;
	operand.values[12] = tokenCoding3780_12;
}
x64Token x64Parser::tokenBranches3779[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3780,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3778[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3779 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3777[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3778 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3784_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3784_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3784_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3784_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3784(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3784_9;
	operand.values[10] = tokenCoding3784_10;
	operand.values[11] = tokenCoding3784_11;
	operand.values[12] = tokenCoding3784_12;
}
x64Token x64Parser::tokenBranches3783[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3784,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3782[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3783 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3781[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3782 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3788_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3788_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3788_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3788_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3788(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3788_9;
	operand.values[10] = tokenCoding3788_10;
	operand.values[11] = tokenCoding3788_11;
	operand.values[12] = tokenCoding3788_12;
}
x64Token x64Parser::tokenBranches3787[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3788,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3786[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3787 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3785[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3786 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3792_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3792_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3792_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3792_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3792(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3792_9;
	operand.values[10] = tokenCoding3792_10;
	operand.values[11] = tokenCoding3792_11;
	operand.values[12] = tokenCoding3792_12;
}
x64Token x64Parser::tokenBranches3791[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3792,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3790[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3791 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3789[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3790 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3796_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3796_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3796_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3796_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3796(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3796_9;
	operand.values[10] = tokenCoding3796_10;
	operand.values[11] = tokenCoding3796_11;
	operand.values[12] = tokenCoding3796_12;
}
x64Token x64Parser::tokenBranches3795[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3796,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3794[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3795 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3793[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3794 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3777(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3781(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3785(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3789(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3793(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3776[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc3777, x64Parser::tokenBranches3777 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc3781, x64Parser::tokenBranches3781 },
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc3785, x64Parser::tokenBranches3785 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc3789, x64Parser::tokenBranches3789 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc3793, x64Parser::tokenBranches3793 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3799_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3799_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3799(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3799_11;
	operand.values[12] = tokenCoding3799_12;
}
Coding x64Parser::tokenCoding3801_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3801_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3801(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3801_11;
	operand.values[12] = tokenCoding3801_12;
}
x64Token x64Parser::tokenBranches3798[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3799,  },
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3801,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3797[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3798 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3815_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3815_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3815_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3815_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3815(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3815_9;
	operand.values[10] = tokenCoding3815_10;
	operand.values[11] = tokenCoding3815_11;
	operand.values[12] = tokenCoding3815_12;
}
x64Token x64Parser::tokenBranches3814[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3815,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3805_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3805_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3805_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3805_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3805(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3805_9;
	operand.values[10] = tokenCoding3805_10;
	operand.values[11] = tokenCoding3805_11;
	operand.values[12] = tokenCoding3805_12;
}
x64Token x64Parser::tokenBranches3804[] = {
	{x64Token::ADDRESSCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3805,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3814 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3803[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3804 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3819_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3819_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3819_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3819_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3819(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3819_9;
	operand.values[10] = tokenCoding3819_10;
	operand.values[11] = tokenCoding3819_11;
	operand.values[12] = tokenCoding3819_12;
}
x64Token x64Parser::tokenBranches3818[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3819,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3823_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3823_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3823_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3823_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3823(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3823_9;
	operand.values[10] = tokenCoding3823_10;
	operand.values[11] = tokenCoding3823_11;
	operand.values[12] = tokenCoding3823_12;
}
x64Token x64Parser::tokenBranches3822[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3823,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3808_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3808_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3808_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3808_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3808(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3808_9;
	operand.values[10] = tokenCoding3808_10;
	operand.values[11] = tokenCoding3808_11;
	operand.values[12] = tokenCoding3808_12;
}
Coding x64Parser::tokenCoding3811_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3811_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3811_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3811_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3811(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3811_9;
	operand.values[10] = tokenCoding3811_10;
	operand.values[11] = tokenCoding3811_11;
	operand.values[12] = tokenCoding3811_12;
}
x64Token x64Parser::tokenBranches3807[] = {
	{x64Token::ADDRESSCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3808,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3811,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3818 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3822 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3806[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3807 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3845_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3845_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3845_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3845_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3845(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3845_9;
	operand.values[10] = tokenCoding3845_10;
	operand.values[11] = tokenCoding3845_11;
	operand.values[12] = tokenCoding3845_12;
}
x64Token x64Parser::tokenBranches3844[] = {
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3845,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3826_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3826_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3826_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3826_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3826(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3826_9;
	operand.values[10] = tokenCoding3826_10;
	operand.values[11] = tokenCoding3826_11;
	operand.values[12] = tokenCoding3826_12;
}
x64Token x64Parser::tokenBranches3825[] = {
	{x64Token::ADDRESSCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc3826,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3844 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3824[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3825 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3849_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3849_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3849_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3849_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3849(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3849_9;
	operand.values[10] = tokenCoding3849_10;
	operand.values[11] = tokenCoding3849_11;
	operand.values[12] = tokenCoding3849_12;
}
x64Token x64Parser::tokenBranches3848[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3849,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3853_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3853_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3853_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3853_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3853(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3853_9;
	operand.values[10] = tokenCoding3853_10;
	operand.values[11] = tokenCoding3853_11;
	operand.values[12] = tokenCoding3853_12;
}
x64Token x64Parser::tokenBranches3852[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3853,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3829_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3829_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3829_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3829_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3829(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3829_9;
	operand.values[10] = tokenCoding3829_10;
	operand.values[11] = tokenCoding3829_11;
	operand.values[12] = tokenCoding3829_12;
}
Coding x64Parser::tokenCoding3832_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3832_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3832_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3832_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3832(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3832_9;
	operand.values[10] = tokenCoding3832_10;
	operand.values[11] = tokenCoding3832_11;
	operand.values[12] = tokenCoding3832_12;
}
x64Token x64Parser::tokenBranches3828[] = {
	{x64Token::ADDRESSCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc3829,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc3832,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3848 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3852 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3827[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3828 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3857_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3857_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3857_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3857_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3857(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3857_9;
	operand.values[10] = tokenCoding3857_10;
	operand.values[11] = tokenCoding3857_11;
	operand.values[12] = tokenCoding3857_12;
}
x64Token x64Parser::tokenBranches3856[] = {
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3857,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3861_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3861_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3861_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3861_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3861(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3861_9;
	operand.values[10] = tokenCoding3861_10;
	operand.values[11] = tokenCoding3861_11;
	operand.values[12] = tokenCoding3861_12;
}
x64Token x64Parser::tokenBranches3860[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3861,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3865_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3865_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3865_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3865_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3865(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3865_9;
	operand.values[10] = tokenCoding3865_10;
	operand.values[11] = tokenCoding3865_11;
	operand.values[12] = tokenCoding3865_12;
}
x64Token x64Parser::tokenBranches3864[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3865,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3835_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3835_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3835_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3835_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3835(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3835_9;
	operand.values[10] = tokenCoding3835_10;
	operand.values[11] = tokenCoding3835_11;
	operand.values[12] = tokenCoding3835_12;
}
Coding x64Parser::tokenCoding3838_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3838_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3838_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3838_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3838(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3838_9;
	operand.values[10] = tokenCoding3838_10;
	operand.values[11] = tokenCoding3838_11;
	operand.values[12] = tokenCoding3838_12;
}
Coding x64Parser::tokenCoding3841_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3841_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3841_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3841_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3841(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding3841_9;
	operand.values[10] = tokenCoding3841_10;
	operand.values[11] = tokenCoding3841_11;
	operand.values[12] = tokenCoding3841_12;
}
x64Token x64Parser::tokenBranches3834[] = {
	{x64Token::ADDRESSCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc3835,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc3838,  },
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc3841,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3856 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3860 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3864 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3833[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3834 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3803(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3806(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3824(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3827(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc3833(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3802[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc3803, x64Parser::tokenBranches3803 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc3806, x64Parser::tokenBranches3806 },
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc3824, x64Parser::tokenBranches3824 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc3827, x64Parser::tokenBranches3827 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc3833, x64Parser::tokenBranches3833 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3869_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3869(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3869_12;
}
Coding x64Parser::tokenCoding3872_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3872(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3872_12;
}
Coding x64Parser::tokenCoding3875_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3875(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3875_12;
}
x64Token x64Parser::tokenBranches3868[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3869,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3872,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3875,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3867[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3868 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3878_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3878(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3878_12;
}
Coding x64Parser::tokenCoding3881_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3881(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3881_12;
}
Coding x64Parser::tokenCoding3884_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3884(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3884_12;
}
x64Token x64Parser::tokenBranches3877[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3878,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3881,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3884,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3876[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3877 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3889_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3889(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3889_12;
}
Coding x64Parser::tokenCoding3894_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3894(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3894_12;
}
x64Token x64Parser::tokenBranches3888[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3889,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3894,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3898_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3898(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3898_12;
}
x64Token x64Parser::tokenBranches3887[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3888 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3898,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3886[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3887 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3903_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3903(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3903_12;
}
Coding x64Parser::tokenCoding3908_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3908(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3908_12;
}
x64Token x64Parser::tokenBranches3902[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3903,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3908,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3912_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3912(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3912_12;
}
x64Token x64Parser::tokenBranches3901[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3902 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3912,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3900[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3901 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3885[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3886 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3900 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3915_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3915(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3915_12;
}
Coding x64Parser::tokenCoding3918_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3918(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3918_12;
}
Coding x64Parser::tokenCoding3921_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3921(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3921_12;
}
x64Token x64Parser::tokenBranches3914[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3915,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3918,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3921,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3913[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3914 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3924_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3924(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3924_12;
}
Coding x64Parser::tokenCoding3927_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3927(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3927_12;
}
Coding x64Parser::tokenCoding3930_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3930(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3930_12;
}
x64Token x64Parser::tokenBranches3923[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3924,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3927,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3930,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3922[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3923 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3935_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3935(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3935_12;
}
Coding x64Parser::tokenCoding3940_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3940(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3940_12;
}
x64Token x64Parser::tokenBranches3934[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3935,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3940,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3944_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3944(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3944_12;
}
x64Token x64Parser::tokenBranches3933[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3934 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3944,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3932[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3933 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3949_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3949(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3949_12;
}
Coding x64Parser::tokenCoding3954_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3954(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3954_12;
}
x64Token x64Parser::tokenBranches3948[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3949,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3954,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3958_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3958(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3958_12;
}
x64Token x64Parser::tokenBranches3947[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3948 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3958,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3946[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3947 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3931[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3932 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3946 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3965_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3965(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3965_12;
}
x64Token x64Parser::tokenBranches3964[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3965,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3961_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3961(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3961_12;
}
Coding x64Parser::tokenCoding3968_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3968(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3968_12;
}
x64Token x64Parser::tokenBranches3960[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3961,  },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3964 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3968,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3959[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3960 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3975_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3975(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3975_12;
}
x64Token x64Parser::tokenBranches3974[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3975,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3971_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3971(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3971_12;
}
Coding x64Parser::tokenCoding3978_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3978(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3978_12;
}
x64Token x64Parser::tokenBranches3970[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3971,  },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3974 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3978,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3969[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3970 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3983_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3983(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3983_12;
}
Coding x64Parser::tokenCoding3988_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3988(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3988_12;
}
x64Token x64Parser::tokenBranches3982[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3983,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3988,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3992_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3992(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding3992_12;
}
x64Token x64Parser::tokenBranches3981[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3982 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3992,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3980[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3981 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3997_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3997(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding3997_12;
}
Coding x64Parser::tokenCoding4002_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4002(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding4002_12;
}
x64Token x64Parser::tokenBranches3996[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3997,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4002,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4006_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4006(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4006_12;
}
x64Token x64Parser::tokenBranches3995[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3996 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4006,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3994[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3995 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3979[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3980 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3994 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4011_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4011(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding4011_12;
}
Coding x64Parser::tokenCoding4016_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4016(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding4016_12;
}
x64Token x64Parser::tokenBranches4010[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc4011,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4016,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4020_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4020(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4020_12;
}
x64Token x64Parser::tokenBranches4009[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4010 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4020,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4008[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4009 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4025_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4025(x64Operand &operand, int tokenPos)
{
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding4025_12;
}
Coding x64Parser::tokenCoding4030_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4030(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding4030_12;
}
x64Token x64Parser::tokenBranches4024[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc4025,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4030,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4034_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4034(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4034_12;
}
x64Token x64Parser::tokenBranches4023[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4024 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4034,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4022[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4023 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4007[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches4008 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches4022 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3866[] = {
	{x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches3867 },
	{x64Token::ADDRESSCLASS, 25, 0, 0, NULL, NULL, x64Parser::tokenBranches3876 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3885 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches3913 },
	{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches3922 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3931 },
	{x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches3959 },
	{x64Token::ADDRESSCLASS, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches3969 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3979 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4007 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4041_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4041_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4041_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4041_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4041(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4041_9;
	operand.values[10] = tokenCoding4041_10;
	operand.values[11] = tokenCoding4041_11;
	operand.values[12] = tokenCoding4041_12;
}
Coding x64Parser::tokenCoding4047_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4047_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4047_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4047_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4047(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4047_9;
	operand.values[10] = tokenCoding4047_10;
	operand.values[11] = tokenCoding4047_11;
	operand.values[12] = tokenCoding4047_12;
}
x64Token x64Parser::tokenBranches4040[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4041,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4047,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4039[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4040 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4039(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4038[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc4039, x64Parser::tokenBranches4039 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4037[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4038 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4053_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4053_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4053_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4053_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4053(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4053_9;
	operand.values[10] = tokenCoding4053_10;
	operand.values[11] = tokenCoding4053_11;
	operand.values[12] = tokenCoding4053_12;
}
Coding x64Parser::tokenCoding4059_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4059_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4059_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4059_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4059(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4059_9;
	operand.values[10] = tokenCoding4059_10;
	operand.values[11] = tokenCoding4059_11;
	operand.values[12] = tokenCoding4059_12;
}
x64Token x64Parser::tokenBranches4052[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4053,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4059,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4051[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4052 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4051(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4050[] = {
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc4051, x64Parser::tokenBranches4051 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4049[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4050 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4036[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4037 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4049 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4065_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4065_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4065_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4065_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4065(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4065_9;
	operand.values[10] = tokenCoding4065_10;
	operand.values[11] = tokenCoding4065_11;
	operand.values[12] = tokenCoding4065_12;
}
Coding x64Parser::tokenCoding4071_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4071_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4071_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4071_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4071(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4071_9;
	operand.values[10] = tokenCoding4071_10;
	operand.values[11] = tokenCoding4071_11;
	operand.values[12] = tokenCoding4071_12;
}
x64Token x64Parser::tokenBranches4064[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4065,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4071,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4063[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4064 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4063(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4062[] = {
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc4063, x64Parser::tokenBranches4063 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4061[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4062 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4077_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4077_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4077_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4077_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4077(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4077_9;
	operand.values[10] = tokenCoding4077_10;
	operand.values[11] = tokenCoding4077_11;
	operand.values[12] = tokenCoding4077_12;
}
Coding x64Parser::tokenCoding4083_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4083_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4083_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4083_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4083(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4083_9;
	operand.values[10] = tokenCoding4083_10;
	operand.values[11] = tokenCoding4083_11;
	operand.values[12] = tokenCoding4083_12;
}
x64Token x64Parser::tokenBranches4076[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4077,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4083,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4075[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4076 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4075(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4074[] = {
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc4075, x64Parser::tokenBranches4075 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4073[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4074 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4060[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches4061 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches4073 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4089_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4089_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4089_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4089_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4089(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4089_9;
	operand.values[10] = tokenCoding4089_10;
	operand.values[11] = tokenCoding4089_11;
	operand.values[12] = tokenCoding4089_12;
}
Coding x64Parser::tokenCoding4095_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4095_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4095_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4095_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4095(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4095_9;
	operand.values[10] = tokenCoding4095_10;
	operand.values[11] = tokenCoding4095_11;
	operand.values[12] = tokenCoding4095_12;
}
x64Token x64Parser::tokenBranches4088[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4089,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4095,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4087[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4088 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4087(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4086[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc4087, x64Parser::tokenBranches4087 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4085[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4086 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4084[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches4085 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4035[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4036 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4060 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4084 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4096[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL, NULL,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4101_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4101_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4101_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4101(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4101_9;
	operand.values[10] = tokenCoding4101_10;
	operand.values[11] = tokenCoding4101_11;
}
x64Token x64Parser::tokenBranches4100[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4101,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4099[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4100 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4104_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4104_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4104_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4104(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4104_9;
	operand.values[10] = tokenCoding4104_10;
	operand.values[11] = tokenCoding4104_11;
}
x64Token x64Parser::tokenBranches4103[] = {
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4104,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4102[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4103 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4099(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4102(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4098[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc4099, x64Parser::tokenBranches4099 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4102, x64Parser::tokenBranches4102 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4108_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4108_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4108_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4108_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4108(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4108_9;
	operand.values[10] = tokenCoding4108_10;
	operand.values[11] = tokenCoding4108_11;
	operand.values[12] = tokenCoding4108_12;
}
x64Token x64Parser::tokenBranches4107[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4108,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4106[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4107 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4111_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4111_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4111_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4111_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4111(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4111_9;
	operand.values[10] = tokenCoding4111_10;
	operand.values[11] = tokenCoding4111_11;
	operand.values[12] = tokenCoding4111_12;
}
x64Token x64Parser::tokenBranches4110[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4111,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4109[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4110 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4114_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4114_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4114_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4114_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4114(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4114_9;
	operand.values[10] = tokenCoding4114_10;
	operand.values[11] = tokenCoding4114_11;
	operand.values[12] = tokenCoding4114_12;
}
x64Token x64Parser::tokenBranches4113[] = {
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc4114,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4112[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4113 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4117_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4117_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4117_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4117_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4117(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4117_9;
	operand.values[10] = tokenCoding4117_10;
	operand.values[11] = tokenCoding4117_11;
	operand.values[12] = tokenCoding4117_12;
}
x64Token x64Parser::tokenBranches4116[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4117,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4115[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4116 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4106(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4109(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4105[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc4106, x64Parser::tokenBranches4106 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4109, x64Parser::tokenBranches4109 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4112 },
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches4115 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4121_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4121_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4121_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4121_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4121(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4121_9;
	operand.values[10] = tokenCoding4121_10;
	operand.values[11] = tokenCoding4121_11;
	operand.values[12] = tokenCoding4121_12;
}
x64Token x64Parser::tokenBranches4120[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4121,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4119[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4120 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4124_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4124_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4124_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4124_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4124(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4124_9;
	operand.values[10] = tokenCoding4124_10;
	operand.values[11] = tokenCoding4124_11;
	operand.values[12] = tokenCoding4124_12;
}
x64Token x64Parser::tokenBranches4123[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4124,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4122[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4123 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4127_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4127_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4127_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4127_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4127(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4127_9;
	operand.values[10] = tokenCoding4127_10;
	operand.values[11] = tokenCoding4127_11;
	operand.values[12] = tokenCoding4127_12;
}
x64Token x64Parser::tokenBranches4126[] = {
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc4127,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4125[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4126 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4130_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4130_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4130_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4130_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4130(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4130_9;
	operand.values[10] = tokenCoding4130_10;
	operand.values[11] = tokenCoding4130_11;
	operand.values[12] = tokenCoding4130_12;
}
x64Token x64Parser::tokenBranches4129[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4130,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4128[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4129 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4119(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4122(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4118[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc4119, x64Parser::tokenBranches4119 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4122, x64Parser::tokenBranches4122 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4125 },
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches4128 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4134_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4134_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4134_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4134_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4134(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4134_9;
	operand.values[10] = tokenCoding4134_10;
	operand.values[11] = tokenCoding4134_11;
	operand.values[12] = tokenCoding4134_12;
}
x64Token x64Parser::tokenBranches4133[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4134,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4132[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4133 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4137_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4137_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4137_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4137_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4137(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4137_9;
	operand.values[10] = tokenCoding4137_10;
	operand.values[11] = tokenCoding4137_11;
	operand.values[12] = tokenCoding4137_12;
}
x64Token x64Parser::tokenBranches4136[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4137,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4135[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4136 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4140_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4140_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4140_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4140_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4140(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4140_9;
	operand.values[10] = tokenCoding4140_10;
	operand.values[11] = tokenCoding4140_11;
	operand.values[12] = tokenCoding4140_12;
}
x64Token x64Parser::tokenBranches4139[] = {
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc4140,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4138[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4139 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4143_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4143_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4143_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4143_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4143(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4143_9;
	operand.values[10] = tokenCoding4143_10;
	operand.values[11] = tokenCoding4143_11;
	operand.values[12] = tokenCoding4143_12;
}
x64Token x64Parser::tokenBranches4142[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4143,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4141[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4142 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4132(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4135(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4131[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc4132, x64Parser::tokenBranches4132 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4135, x64Parser::tokenBranches4135 },
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4138 },
	{x64Token::ADDRESSCLASS, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4141 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4147_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4147_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4147_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4147(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4147_9;
	operand.values[10] = tokenCoding4147_10;
	operand.values[11] = tokenCoding4147_11;
}
Coding x64Parser::tokenCoding4150_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4150_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4150_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4150(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4150_9;
	operand.values[10] = tokenCoding4150_10;
	operand.values[11] = tokenCoding4150_11;
}
x64Token x64Parser::tokenBranches4146[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4147,  },
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4150,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4145[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4146 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4145(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4144[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc4145, x64Parser::tokenBranches4145 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4154_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4154_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4154_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4154(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4154_9;
	operand.values[10] = tokenCoding4154_10;
	operand.values[11] = tokenCoding4154_11;
}
x64Token x64Parser::tokenBranches4153[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4154,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4152[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4153 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4157_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4157_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4157_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4157(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4157_9;
	operand.values[10] = tokenCoding4157_10;
	operand.values[11] = tokenCoding4157_11;
}
x64Token x64Parser::tokenBranches4156[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4157,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4155[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4156 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4152(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4155(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4151[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc4152, x64Parser::tokenBranches4152 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4155, x64Parser::tokenBranches4155 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4161_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4161_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4161_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4161(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4161_9;
	operand.values[10] = tokenCoding4161_10;
	operand.values[11] = tokenCoding4161_11;
}
x64Token x64Parser::tokenBranches4160[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4161,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4159[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4160 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4164_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4164_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4164_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4164(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4164_9;
	operand.values[10] = tokenCoding4164_10;
	operand.values[11] = tokenCoding4164_11;
}
x64Token x64Parser::tokenBranches4163[] = {
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4164,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4162[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4163 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4167_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4167_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4167_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4167(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4167_9;
	operand.values[10] = tokenCoding4167_10;
	operand.values[11] = tokenCoding4167_11;
}
x64Token x64Parser::tokenBranches4166[] = {
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4167,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4165[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4166 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4159(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4162(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4165(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4158[] = {
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc4159, x64Parser::tokenBranches4159 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc4162, x64Parser::tokenBranches4162 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc4165, x64Parser::tokenBranches4165 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4172_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4172_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4172_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4172(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4172_9;
	operand.values[10] = tokenCoding4172_10;
	operand.values[11] = tokenCoding4172_11;
}
x64Token x64Parser::tokenBranches4171[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4172,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4180_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4180_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4180_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4180(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4180_9;
	operand.values[10] = tokenCoding4180_10;
	operand.values[11] = tokenCoding4180_11;
}
x64Token x64Parser::tokenBranches4179[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc4180,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4170[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4171 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4179 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4169[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4170 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4176_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4176_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4176_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4176(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4176_9;
	operand.values[10] = tokenCoding4176_10;
	operand.values[11] = tokenCoding4176_11;
}
x64Token x64Parser::tokenBranches4175[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc4176,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4184_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4184_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4184_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4184(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4184_9;
	operand.values[10] = tokenCoding4184_10;
	operand.values[11] = tokenCoding4184_11;
}
x64Token x64Parser::tokenBranches4183[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc4184,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4174[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4175 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4183 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4173[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4174 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4169(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4173(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4168[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc4169, x64Parser::tokenBranches4169 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4173, x64Parser::tokenBranches4173 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4188_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4188_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4188_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4188_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4188(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4188_9;
	operand.values[10] = tokenCoding4188_10;
	operand.values[19] = tokenCoding4188_19;
	operand.values[11] = tokenCoding4188_11;
}
x64Token x64Parser::tokenBranches4187[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4188,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4186[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4187 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4191_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4191_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4191_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4191_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4191(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4191_9;
	operand.values[10] = tokenCoding4191_10;
	operand.values[19] = tokenCoding4191_19;
	operand.values[11] = tokenCoding4191_11;
}
x64Token x64Parser::tokenBranches4190[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4191,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4189[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4190 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4194_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4194_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4194_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4194_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4194(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4194_9;
	operand.values[10] = tokenCoding4194_10;
	operand.values[19] = tokenCoding4194_19;
	operand.values[11] = tokenCoding4194_11;
}
x64Token x64Parser::tokenBranches4193[] = {
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4194,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4192[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4193 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4186(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4189(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4192(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4185[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc4186, x64Parser::tokenBranches4186 },
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc4189, x64Parser::tokenBranches4189 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4192, x64Parser::tokenBranches4192 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4200_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4200_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4200_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4200(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4200_9;
	operand.values[10] = tokenCoding4200_10;
	operand.values[11] = tokenCoding4200_11;
}
x64Token x64Parser::tokenBranches4199[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4200,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4198[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4199 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4197[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4198 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4196[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4197 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4205_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4205_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4205_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4205(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4205_9;
	operand.values[10] = tokenCoding4205_10;
	operand.values[11] = tokenCoding4205_11;
}
x64Token x64Parser::tokenBranches4204[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4205,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4203[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4204 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4202[] = {
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches4203 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4201[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4202 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4196(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4201(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4195[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc4196, x64Parser::tokenBranches4196 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4201, x64Parser::tokenBranches4201 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4209_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4209_11[] = {
	{ (Coding::Type)(Coding::indirect), 32, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4209_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4209(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[19] = tokenCoding4209_19;
	operand.values[11] = tokenCoding4209_11;
	operand.values[12] = tokenCoding4209_12;
}
Coding x64Parser::tokenCoding4218_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4218_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4218_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4218_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4218_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4218(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4218_9;
	operand.values[10] = tokenCoding4218_10;
	operand.values[19] = tokenCoding4218_19;
	operand.values[11] = tokenCoding4218_11;
	operand.values[12] = tokenCoding4218_12;
}
x64Token x64Parser::tokenBranches4208[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4209,  },
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4218,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4207[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4208 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4212_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4212_11[] = {
	{ (Coding::Type)(Coding::indirect), 32, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4212_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4212(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[19] = tokenCoding4212_19;
	operand.values[11] = tokenCoding4212_11;
	operand.values[12] = tokenCoding4212_12;
}
Coding x64Parser::tokenCoding4221_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4221_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4221_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4221_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4221_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4221(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4221_9;
	operand.values[10] = tokenCoding4221_10;
	operand.values[19] = tokenCoding4221_19;
	operand.values[11] = tokenCoding4221_11;
	operand.values[12] = tokenCoding4221_12;
}
x64Token x64Parser::tokenBranches4211[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4212,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4221,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4210[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4211 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4215_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4215_11[] = {
	{ (Coding::Type)(Coding::indirect), 32, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4215_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4215(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[19] = tokenCoding4215_19;
	operand.values[11] = tokenCoding4215_11;
	operand.values[12] = tokenCoding4215_12;
}
Coding x64Parser::tokenCoding4224_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4224_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4224_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4224_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4224_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4224(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4224_9;
	operand.values[10] = tokenCoding4224_10;
	operand.values[19] = tokenCoding4224_19;
	operand.values[11] = tokenCoding4224_11;
	operand.values[12] = tokenCoding4224_12;
}
x64Token x64Parser::tokenBranches4214[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4215,  },
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4224,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4213[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4214 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4207(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4210(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4213(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4206[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc4207, x64Parser::tokenBranches4207 },
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc4210, x64Parser::tokenBranches4210 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4213, x64Parser::tokenBranches4213 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4230_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4230_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4230_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4230(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4230_9;
	operand.values[10] = tokenCoding4230_10;
	operand.values[11] = tokenCoding4230_11;
}
x64Token x64Parser::tokenBranches4229[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4230,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4228[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4229 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4227[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4228 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4226[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4227 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4235_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4235_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4235_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4235(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4235_9;
	operand.values[10] = tokenCoding4235_10;
	operand.values[11] = tokenCoding4235_11;
}
x64Token x64Parser::tokenBranches4234[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4235,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4233[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4234 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4232[] = {
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches4233 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4231[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4232 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4226(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4231(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4225[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc4226, x64Parser::tokenBranches4226 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4231, x64Parser::tokenBranches4231 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4241_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4241_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4241_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4241(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4241_9;
	operand.values[10] = tokenCoding4241_10;
	operand.values[11] = tokenCoding4241_11;
}
x64Token x64Parser::tokenBranches4240[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4241,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4239[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4240 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4238[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4239 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4237[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4238 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4237(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4236[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc4237, x64Parser::tokenBranches4237 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4252_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4252_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4252_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4252_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4252(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4252_9;
	operand.values[10] = tokenCoding4252_10;
	operand.values[11] = tokenCoding4252_11;
	operand.values[12] = tokenCoding4252_12;
}
x64Token x64Parser::tokenBranches4251[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4252,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4250[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4251 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4255_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4255_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4255_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4255_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4255(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4255_9;
	operand.values[10] = tokenCoding4255_10;
	operand.values[11] = tokenCoding4255_11;
	operand.values[12] = tokenCoding4255_12;
}
x64Token x64Parser::tokenBranches4254[] = {
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc4255,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4253[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4254 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4249[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4250 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4253 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4260_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4260_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4260_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4260(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 348;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4260_9;
	operand.values[10] = tokenCoding4260_10;
	operand.values[11] = tokenCoding4260_11;
}
Coding x64Parser::tokenCoding4261_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4261_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4261_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4261(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 348;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4261_9;
	operand.values[10] = tokenCoding4261_10;
	operand.values[11] = tokenCoding4261_11;
}
Coding x64Parser::tokenCoding4262_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4262_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4262_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4262(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 349;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4262_9;
	operand.values[10] = tokenCoding4262_10;
	operand.values[11] = tokenCoding4262_11;
}
x64Token x64Parser::tokenBranches4259[] = {
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4260,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4261,  },
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4262,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4271(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 350;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4270[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4271,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4275(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 351;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4274[] = {
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc4275,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4269[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4270 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4274 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4268[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4269 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4283_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4283_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4283(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4283_11;
	operand.values[12] = tokenCoding4283_12;
}
x64Token x64Parser::tokenBranches4282[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4283,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4285_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4285_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4285(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4285_11;
	operand.values[12] = tokenCoding4285_12;
}
x64Token x64Parser::tokenBranches4284[] = {
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4285,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4287_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4287_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4287(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4287_11;
	operand.values[12] = tokenCoding4287_12;
}
x64Token x64Parser::tokenBranches4286[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4287,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4289(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 354;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4291(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 355;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4293_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4293_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4293(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4293_11;
	operand.values[12] = tokenCoding4293_12;
}
Coding x64Parser::tokenCoding4295_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4295_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4295(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4295_11;
	operand.values[12] = tokenCoding4295_12;
}
x64Token x64Parser::tokenBranches4288[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4289,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc4291,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4293,  },
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4295,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4268(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::number;
	operand.values[1]->val = operands.size();
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4276(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 352;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4277(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 353;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4278_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4278_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4278(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4278_11;
	operand.values[12] = tokenCoding4278_12;
}
Coding x64Parser::tokenCoding4279_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4279_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4279(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4279_11;
	operand.values[12] = tokenCoding4279_12;
}
Coding x64Parser::tokenCoding4280_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4280_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4280(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4280_11;
	operand.values[12] = tokenCoding4280_12;
}
Coding x64Parser::tokenCoding4281_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4281_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4281(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4281_11;
	operand.values[12] = tokenCoding4281_12;
}
x64Token x64Parser::tokenBranches4267[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc4268, x64Parser::tokenBranches4268 },
	{x64Token::NUMBER, 14, 1, 0, NULL,&x64Parser::TokenFunc4276,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc4277,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4278,  },
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc4279,  },
	{x64Token::ADDRESSCLASS, 22, 1, 0, NULL,&x64Parser::TokenFunc4280,  },
	{x64Token::ADDRESSCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc4281,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4282 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4284 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4286 },
	{x64Token::TOKEN, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches4288 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4348(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 356;
}
x64Token x64Parser::tokenBranches4347[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4348,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4346[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4347 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4345[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4346 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4344[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4345 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4343[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4344 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4342[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4343 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4341[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4342 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4340[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4341 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4374(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 358;
}
x64Token x64Parser::tokenBranches4373[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4374,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4372[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4373 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4371[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4372 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4370[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4371 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4369[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4370 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4368[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4369 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4367[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4368 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4366[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4367 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4339[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4340 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4366 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4338[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4339 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4361(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 357;
}
x64Token x64Parser::tokenBranches4360[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4361,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4359[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4360 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4358[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4359 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4357[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4358 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4356[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4357 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4355[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4356 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4354[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4355 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4353[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4354 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4387(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 359;
}
x64Token x64Parser::tokenBranches4386[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4387,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4385[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4386 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4384[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4385 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4383[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4384 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4382[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4383 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4381[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4382 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4380[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4381 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4379[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4380 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4409(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 361;
}
x64Token x64Parser::tokenBranches4408[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4409,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4407[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4408 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4406[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4407 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4405[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4406 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4404[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4405 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4403[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4404 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4402[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4403 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4401[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4402 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4352[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4353 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4379 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4401 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4351[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4352 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4396(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 360;
}
x64Token x64Parser::tokenBranches4395[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4396,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4394[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4395 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4393[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4394 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4392[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4393 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4391[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4392 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4390[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4391 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4351(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4337[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4338 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc4351, x64Parser::tokenBranches4351 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4390 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4336[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4337 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4422(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 362;
}
x64Token x64Parser::tokenBranches4421[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4422,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4420[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4421 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4419[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4420 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4418[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4419 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4417[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4418 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4416[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4417 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4415[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4416 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4414[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4415 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4448(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 364;
}
x64Token x64Parser::tokenBranches4447[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4448,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4446[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4447 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4445[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4446 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4444[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4445 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4443[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4444 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4442[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4443 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4441[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4442 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4440[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4441 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4413[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4414 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4440 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4412[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4413 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4435(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 363;
}
x64Token x64Parser::tokenBranches4434[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4435,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4433[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4434 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4432[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4433 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4431[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4432 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4430[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4431 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4429[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4430 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4428[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4429 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4427[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4428 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4461(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 365;
}
x64Token x64Parser::tokenBranches4460[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4461,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4459[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4460 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4458[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4459 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4457[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4458 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4456[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4457 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4455[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4456 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4454[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4455 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4453[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4454 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4481(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 367;
}
x64Token x64Parser::tokenBranches4480[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4481,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4479[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4480 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4478[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4479 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4477[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4478 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4476[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4477 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4475[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4476 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4426[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4427 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4453 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4475 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4425[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4426 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4470(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 366;
}
x64Token x64Parser::tokenBranches4469[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4470,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4468[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4469 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4467[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4468 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4466[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4467 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4465[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4466 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4464[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4465 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4425(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4411[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4412 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc4425, x64Parser::tokenBranches4425 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4464 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4410[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4411 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4494(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 368;
}
x64Token x64Parser::tokenBranches4493[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4494,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4492[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4493 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4491[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4492 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4490[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4491 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4489[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4490 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4488[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4489 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4487[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4488 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4486[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4487 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4520(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 370;
}
x64Token x64Parser::tokenBranches4519[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4520,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4518[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4519 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4517[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4518 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4516[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4517 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4515[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4516 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4514[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4515 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4513[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4514 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4512[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4513 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4485[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4486 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4512 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4484[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4485 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4507(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 369;
}
x64Token x64Parser::tokenBranches4506[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4507,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4505[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4506 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4504[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4505 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4503[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4504 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4502[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4503 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4501[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4502 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4500[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4501 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4499[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4500 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4533(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 371;
}
x64Token x64Parser::tokenBranches4532[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4533,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4531[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4532 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4530[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4531 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4529[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4530 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4528[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4529 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4527[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4528 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4526[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4527 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4525[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4526 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4553(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 373;
}
x64Token x64Parser::tokenBranches4552[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4553,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4551[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4552 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4550[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4551 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4549[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4550 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4548[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4549 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4547[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4548 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4498[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4499 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4525 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4547 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4497[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4498 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4542(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 372;
}
x64Token x64Parser::tokenBranches4541[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4542,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4540[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4541 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4539[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4540 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4538[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4539 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4537[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4538 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4536[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4537 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4497(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4483[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4484 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc4497, x64Parser::tokenBranches4497 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4536 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4482[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4483 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4566(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 374;
}
x64Token x64Parser::tokenBranches4565[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4566,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4564[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4565 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4563[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4564 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4562[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4563 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4561[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4562 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4560[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4561 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4559[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4560 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4558[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4559 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4557[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4558 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4556[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4557 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4579(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 375;
}
x64Token x64Parser::tokenBranches4578[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4579,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4577[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4578 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4576[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4577 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4575[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4576 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4574[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4575 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4573[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4574 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4572[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4573 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4571[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4572 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4599(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 377;
}
x64Token x64Parser::tokenBranches4598[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4599,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4597[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4598 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4596[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4597 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4595[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4596 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4594[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4595 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4593[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4594 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4570[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4571 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4593 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4569[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4570 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4588(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 376;
}
x64Token x64Parser::tokenBranches4587[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4588,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4586[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4587 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4585[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4586 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4584[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4585 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4583[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4584 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4582[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4583 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4569(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4555[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4556 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc4569, x64Parser::tokenBranches4569 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4582 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4554[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4555 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4335[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4336 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4410 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4482 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4554 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4608_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4608_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4608_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4608(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4608_9;
	operand.values[10] = tokenCoding4608_10;
	operand.values[11] = tokenCoding4608_11;
}
x64Token x64Parser::tokenBranches4607[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4608,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4606[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4607 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4612_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4612_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4612_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4612(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4612_9;
	operand.values[10] = tokenCoding4612_10;
	operand.values[11] = tokenCoding4612_11;
}
x64Token x64Parser::tokenBranches4611[] = {
	{x64Token::REGISTERCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4612,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4610[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4611 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4605[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4606 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4610 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4616_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4616_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4616_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4616(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4616_9;
	operand.values[10] = tokenCoding4616_10;
	operand.values[11] = tokenCoding4616_11;
}
x64Token x64Parser::tokenBranches4615[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4616,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4614[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4615 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4620_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4620_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4620_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4620(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4620_9;
	operand.values[10] = tokenCoding4620_10;
	operand.values[11] = tokenCoding4620_11;
}
x64Token x64Parser::tokenBranches4619[] = {
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc4620,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4618[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4619 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4613[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4614 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4618 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4624_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4624_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4624_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4624(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4624_9;
	operand.values[10] = tokenCoding4624_10;
	operand.values[11] = tokenCoding4624_11;
}
x64Token x64Parser::tokenBranches4623[] = {
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4624,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4622[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4623 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4628_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4628_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4628_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4628(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4628_9;
	operand.values[10] = tokenCoding4628_10;
	operand.values[11] = tokenCoding4628_11;
}
x64Token x64Parser::tokenBranches4627[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4628,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4626[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4627 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4621[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches4622 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches4626 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4632_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4632_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4632_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4632(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding4632_9;
	operand.values[10] = tokenCoding4632_10;
	operand.values[11] = tokenCoding4632_11;
}
x64Token x64Parser::tokenBranches4631[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4632,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4630[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4631 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4629[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches4630 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4604[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4605 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4613 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4621 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4629 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4634_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4634_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4634(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4634_11;
	operand.values[12] = tokenCoding4634_12;
}
x64Token x64Parser::tokenBranches4633[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4634,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4636_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4636_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4636(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 378;
	operand.values[11] = tokenCoding4636_11;
	operand.values[12] = tokenCoding4636_12;
}
x64Token x64Parser::tokenBranches4635[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4636,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4650(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 379;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->unary = 0;
	operand.values[21]->binary = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4649[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4650,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4648[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4649 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4647[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4648 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4647(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4646[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc4647, x64Parser::tokenBranches4647 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4645[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4646 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4654_11[] = {
	{ (Coding::Type)(Coding::indirect), 15, -1, -1, 0, '&' }, 
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4654_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 27, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 15, -1, -1, 0, '>' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4654(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4654_11;
	operand.values[12] = tokenCoding4654_12;
}
x64Token x64Parser::tokenBranches4653[] = {
	{x64Token::ADDRESSCLASS, 0, 1, 0, NULL,&x64Parser::TokenFunc4654,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4652[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4653 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4652(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4651[] = {
	{x64Token::NUMBER, 2, 0, 0, NULL,&x64Parser::TokenFunc4652, x64Parser::tokenBranches4652 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4667(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4666[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4667,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4665[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4666 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4664[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4665 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4671(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4670[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4671,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4669[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4670 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4668[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4669 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4675(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4674[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4675,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4673[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4674 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4672[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4673 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4679(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4678[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4679,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4677[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4678 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4676[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4677 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4683(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4682[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4683,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4681[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4682 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4680[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4681 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4687(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4686[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4687,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4685[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4686 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4684[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4685 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4691(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4690[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4691,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4689[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4690 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4688[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4689 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4695(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4694[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4695,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4693[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4694 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4692[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4693 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4699(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4698[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4699,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4697[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4698 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4702_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4702(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4702_12;
}
Coding x64Parser::tokenCoding4706_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4706(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4706_12;
}
x64Token x64Parser::tokenBranches4701[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4702,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4706,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4704_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4704(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4704_12;
}
Coding x64Parser::tokenCoding4708_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4708(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4708_12;
}
x64Token x64Parser::tokenBranches4703[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4704,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4708,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4700(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4696[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4697 },
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4700,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4701 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4703 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4712(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4711[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4712,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4710[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4711 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4709[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4710 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4716(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4715[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4716,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4714[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4715 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4713[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4714 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4720(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4719[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4720,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4718[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4719 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4717[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4718 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4724_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4724(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4724_12;
}
Coding x64Parser::tokenCoding4728_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4728(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4728_12;
}
x64Token x64Parser::tokenBranches4723[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4724,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4728,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4726_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4726(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4726_12;
}
Coding x64Parser::tokenCoding4730_12[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4730(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4730_12;
}
x64Token x64Parser::tokenBranches4725[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4726,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4730,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4722(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4721[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4722,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4723 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4725 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4734(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4733[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4734,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4732[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4733 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4731[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4732 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4738(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4737[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4738,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4736[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4737 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4735[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4736 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4749_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4749_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4749(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4749_11;
	operand.values[12] = tokenCoding4749_12;
}
x64Token x64Parser::tokenBranches4748[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc4749,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4751_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4751_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 223, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4751(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4751_11;
	operand.values[12] = tokenCoding4751_12;
}
x64Token x64Parser::tokenBranches4750[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc4751,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4759_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4759_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4759(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4759_11;
	operand.values[12] = tokenCoding4759_12;
}
x64Token x64Parser::tokenBranches4758[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4759,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4757[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4758 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4767_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4767_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4767(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4767_11;
	operand.values[12] = tokenCoding4767_12;
}
x64Token x64Parser::tokenBranches4766[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4767,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4765[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4766 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4773_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4773_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4773(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4773_11;
	operand.values[12] = tokenCoding4773_12;
}
x64Token x64Parser::tokenBranches4772[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4773,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4775_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4775_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4775(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4775_11;
	operand.values[12] = tokenCoding4775_12;
}
x64Token x64Parser::tokenBranches4774[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4775,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4777_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4777_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 219, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4777(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4777_11;
	operand.values[12] = tokenCoding4777_12;
}
x64Token x64Parser::tokenBranches4776[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4777,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4771_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4771_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4771(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4771_11;
	operand.values[12] = tokenCoding4771_12;
}
x64Token x64Parser::tokenBranches4770[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc4771,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4772 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4774 },
	{x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4776 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4781_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4781_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4781(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4781_11;
	operand.values[12] = tokenCoding4781_12;
}
x64Token x64Parser::tokenBranches4780[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4781,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4779[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4780 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4783_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4783_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4783(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4783_11;
	operand.values[12] = tokenCoding4783_12;
}
x64Token x64Parser::tokenBranches4782[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4783,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4794_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4794_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4794(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4794_11;
	operand.values[12] = tokenCoding4794_12;
}
x64Token x64Parser::tokenBranches4793[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4794,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4801_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4801_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4801(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4801_11;
	operand.values[12] = tokenCoding4801_12;
}
x64Token x64Parser::tokenBranches4800[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4801,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4803_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4803_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4803(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4803_11;
	operand.values[12] = tokenCoding4803_12;
}
x64Token x64Parser::tokenBranches4802[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4803,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4812_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4812_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4812(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4812_11;
	operand.values[12] = tokenCoding4812_12;
}
x64Token x64Parser::tokenBranches4811[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4812,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4814_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4814_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4814(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4814_11;
	operand.values[12] = tokenCoding4814_12;
}
x64Token x64Parser::tokenBranches4813[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4814,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4810_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4810_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4810(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4810_11;
	operand.values[12] = tokenCoding4810_12;
}
x64Token x64Parser::tokenBranches4809[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc4810,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4811 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4813 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4817_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4817_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4817(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4817_11;
	operand.values[12] = tokenCoding4817_12;
}
x64Token x64Parser::tokenBranches4816[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4817,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4815[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4816 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4820_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4820_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4820(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4820_11;
	operand.values[12] = tokenCoding4820_12;
}
x64Token x64Parser::tokenBranches4819[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4820,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4818[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4819 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4822_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4822_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4822(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4822_11;
	operand.values[12] = tokenCoding4822_12;
}
x64Token x64Parser::tokenBranches4821[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4822,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4824_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4824_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4824(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4824_11;
	operand.values[12] = tokenCoding4824_12;
}
x64Token x64Parser::tokenBranches4823[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4824,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4828_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4828_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4828(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4828_11;
	operand.values[12] = tokenCoding4828_12;
}
Coding x64Parser::tokenCoding4834_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4834_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4834(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4834_11;
	operand.values[12] = tokenCoding4834_12;
}
x64Token x64Parser::tokenBranches4827[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4828,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4834,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4830_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4830_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4830(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4830_11;
	operand.values[12] = tokenCoding4830_12;
}
Coding x64Parser::tokenCoding4836_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4836_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4836(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4836_11;
	operand.values[12] = tokenCoding4836_12;
}
x64Token x64Parser::tokenBranches4829[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4830,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4836,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4832_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4832_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 219, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4832(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4832_11;
	operand.values[12] = tokenCoding4832_12;
}
Coding x64Parser::tokenCoding4838_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4838_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 219, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4838(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4838_11;
	operand.values[12] = tokenCoding4838_12;
}
x64Token x64Parser::tokenBranches4831[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4832,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4838,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4826_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4826_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4826(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4826_11;
	operand.values[12] = tokenCoding4826_12;
}
x64Token x64Parser::tokenBranches4825[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc4826,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4827 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4829 },
	{x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4831 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4842(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
}
x64Token x64Parser::tokenBranches4841[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc4842,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4840[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4841 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4840(x64Operand &operand, int tokenPos)
{
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4839[] = {
	{x64Token::REGISTERCLASS, 32, 0, 0, NULL,&x64Parser::TokenFunc4840, x64Parser::tokenBranches4840 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4846(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
}
x64Token x64Parser::tokenBranches4845[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc4846,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4844[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4845 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4844(x64Operand &operand, int tokenPos)
{
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4843[] = {
	{x64Token::REGISTERCLASS, 32, 0, 0, NULL,&x64Parser::TokenFunc4844, x64Parser::tokenBranches4844 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4850(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
}
x64Token x64Parser::tokenBranches4849[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc4850,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4848[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4849 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4848(x64Operand &operand, int tokenPos)
{
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4847[] = {
	{x64Token::REGISTERCLASS, 32, 0, 0, NULL,&x64Parser::TokenFunc4848, x64Parser::tokenBranches4848 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4853_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4853_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4853(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4853_11;
	operand.values[12] = tokenCoding4853_12;
}
x64Token x64Parser::tokenBranches4852[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4853,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4854(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 380;
}
x64Token x64Parser::tokenBranches4851[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4852 },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc4854,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4857_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4857_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4857(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4857_11;
	operand.values[12] = tokenCoding4857_12;
}
x64Token x64Parser::tokenBranches4856[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4857,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4858(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 381;
}
x64Token x64Parser::tokenBranches4855[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4856 },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc4858,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4868(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4867[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4868,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4866[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4867 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4865[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4866 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4872(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4871[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4872,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4870[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4871 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4869[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4870 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4881(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4880[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4881,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4879[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4880 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4878[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4879 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4885(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::reg;
	operand.values[8]->val = inputTokens[tokenPos]->val->ival;
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4884[] = {
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc4885,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4883[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4884 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4882[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4883 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4887_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4887_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 174, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4887(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4887_11;
	operand.values[12] = tokenCoding4887_12;
}
x64Token x64Parser::tokenBranches4886[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4887,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4889_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4889_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 174, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4889(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4889_11;
	operand.values[12] = tokenCoding4889_12;
}
x64Token x64Parser::tokenBranches4888[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4889,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4904_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4904_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4904_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4904_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4904(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4904_9;
	operand.values[10] = tokenCoding4904_10;
	operand.values[11] = tokenCoding4904_11;
	operand.values[12] = tokenCoding4904_12;
}
x64Token x64Parser::tokenBranches4903[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4904,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4910_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4910_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4910_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4910_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4910(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4910_9;
	operand.values[10] = tokenCoding4910_10;
	operand.values[11] = tokenCoding4910_11;
	operand.values[12] = tokenCoding4910_12;
}
x64Token x64Parser::tokenBranches4902[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4903 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4910,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4901[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4902 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4901_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4901_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4901_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4901_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4901(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4901_9;
	operand.values[10] = tokenCoding4901_10;
	operand.values[11] = tokenCoding4901_11;
	operand.values[12] = tokenCoding4901_12;
}
void x64Parser::TokenFunc4939(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 386;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4900[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4901, x64Parser::tokenBranches4901 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4939,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4935(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 385;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4934[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4935,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4899[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4900 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4934 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4898[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4899 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4921_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4921_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4921_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4921_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4921(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4921_9;
	operand.values[10] = tokenCoding4921_10;
	operand.values[11] = tokenCoding4921_11;
	operand.values[12] = tokenCoding4921_12;
}
x64Token x64Parser::tokenBranches4920[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4921,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4927_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4927_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4927_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4927_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4927(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4927_9;
	operand.values[10] = tokenCoding4927_10;
	operand.values[11] = tokenCoding4927_11;
	operand.values[12] = tokenCoding4927_12;
}
x64Token x64Parser::tokenBranches4919[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4920 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4927,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4918[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4919 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4918_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4918_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4918_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4918_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4918(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4918_9;
	operand.values[10] = tokenCoding4918_10;
	operand.values[11] = tokenCoding4918_11;
	operand.values[12] = tokenCoding4918_12;
}
void x64Parser::TokenFunc4947(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4917[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4918, x64Parser::tokenBranches4918 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4947,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4943(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4942[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4943,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4916[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4917 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4942 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4915[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4916 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4954_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4954_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4954_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4954_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4954(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4954_9;
	operand.values[10] = tokenCoding4954_10;
	operand.values[11] = tokenCoding4954_11;
	operand.values[12] = tokenCoding4954_12;
}
x64Token x64Parser::tokenBranches4953[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4954,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4960_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4960_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4960_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4960_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4960(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4960_9;
	operand.values[10] = tokenCoding4960_10;
	operand.values[11] = tokenCoding4960_11;
	operand.values[12] = tokenCoding4960_12;
}
x64Token x64Parser::tokenBranches4952[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4953 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4960,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4951[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4952 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4951_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4951_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4951_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4951_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4951(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4951_9;
	operand.values[10] = tokenCoding4951_10;
	operand.values[11] = tokenCoding4951_11;
	operand.values[12] = tokenCoding4951_12;
}
void x64Parser::TokenFunc5006(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 386;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4950[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc4951, x64Parser::tokenBranches4951 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5006,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5002(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 385;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5001[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc5002,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4949[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4950 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5001 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4948[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4949 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4971_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4971_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4971_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4971_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4971(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4971_9;
	operand.values[10] = tokenCoding4971_10;
	operand.values[11] = tokenCoding4971_11;
	operand.values[12] = tokenCoding4971_12;
}
x64Token x64Parser::tokenBranches4970[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4971,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4977_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4977_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4977_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4977_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4977(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4977_9;
	operand.values[10] = tokenCoding4977_10;
	operand.values[11] = tokenCoding4977_11;
	operand.values[12] = tokenCoding4977_12;
}
x64Token x64Parser::tokenBranches4969[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4970 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4977,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4968[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4969 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4968_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4968_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4968_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4968_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4968(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4968_9;
	operand.values[10] = tokenCoding4968_10;
	operand.values[11] = tokenCoding4968_11;
	operand.values[12] = tokenCoding4968_12;
}
void x64Parser::TokenFunc5014(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4967[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc4968, x64Parser::tokenBranches4968 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5014,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5010(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5009[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc5010,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4966[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4967 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5009 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4965[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4966 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4988_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4988_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4988_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4988_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4988(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4988_9;
	operand.values[10] = tokenCoding4988_10;
	operand.values[11] = tokenCoding4988_11;
	operand.values[12] = tokenCoding4988_12;
}
x64Token x64Parser::tokenBranches4987[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4988,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4994_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4994_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4994_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4994_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4994(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding4994_9;
	operand.values[10] = tokenCoding4994_10;
	operand.values[11] = tokenCoding4994_11;
	operand.values[12] = tokenCoding4994_12;
}
x64Token x64Parser::tokenBranches4986[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4987 },
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4994,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4985[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4986 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4985_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4985_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4985_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4985_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4985(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding4985_9;
	operand.values[10] = tokenCoding4985_10;
	operand.values[11] = tokenCoding4985_11;
	operand.values[12] = tokenCoding4985_12;
}
void x64Parser::TokenFunc5022(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4984[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc4985, x64Parser::tokenBranches4985 },
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc5022,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5018(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 390;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5017[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc5018,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4983[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4984 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5017 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4982[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4983 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4898(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4915(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4948(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4965(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc4982(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4897[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc4898, x64Parser::tokenBranches4898 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc4915, x64Parser::tokenBranches4915 },
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc4948, x64Parser::tokenBranches4948 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc4965, x64Parser::tokenBranches4965 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc4982, x64Parser::tokenBranches4982 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5027(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 392;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5026[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5027,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5042(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 396;
}
x64Token x64Parser::tokenBranches5025[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5026 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5042,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5024[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5025 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5031(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 393;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5030[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5031,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5045(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 397;
}
x64Token x64Parser::tokenBranches5029[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5030 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5045,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5028[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5029 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5035(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 394;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5034[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5035,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5048(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 398;
}
x64Token x64Parser::tokenBranches5033[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5034 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5048,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5032[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5033 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5039(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 395;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5038[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5039,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5051(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 399;
}
x64Token x64Parser::tokenBranches5037[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5038 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5051,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5036[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5037 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5023[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches5024 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5028 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5032 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5036 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5060(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 400;
}
x64Token x64Parser::tokenBranches5059[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5060,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5058[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5059 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5057[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5058 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5076(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 402;
}
x64Token x64Parser::tokenBranches5075[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5076,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5074[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5075 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5073[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5074 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5056[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5057 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5073 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5055[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5056 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5054[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5055 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5068(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 401;
}
x64Token x64Parser::tokenBranches5067[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5068,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5066[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5067 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5065[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5066 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5084(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 403;
}
x64Token x64Parser::tokenBranches5083[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5084,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5082[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5083 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5081[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5082 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5098(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 405;
}
x64Token x64Parser::tokenBranches5097[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5098,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5096[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5097 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5095[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5096 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5064[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5065 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5081 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5095 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5063[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5064 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5090(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 404;
}
x64Token x64Parser::tokenBranches5089[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5090,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5088[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5089 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5087[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5088 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5063(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5062[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5063, x64Parser::tokenBranches5063 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5087 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5053[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5054 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5062 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5106(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 406;
}
x64Token x64Parser::tokenBranches5105[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5106,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5104[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5105 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5103[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5104 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5122(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 408;
}
x64Token x64Parser::tokenBranches5121[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5122,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5120[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5121 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5119[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5120 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5102[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5103 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5119 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5101[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5102 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5100[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5101 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5114(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 407;
}
x64Token x64Parser::tokenBranches5113[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5114,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5112[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5113 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5111[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5112 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5130(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 409;
}
x64Token x64Parser::tokenBranches5129[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5130,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5128[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5129 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5127[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5128 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5144(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 411;
}
x64Token x64Parser::tokenBranches5143[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5144,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5142[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5143 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5141[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5142 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5110[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5111 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5127 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5141 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5109[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5110 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5136(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 410;
}
x64Token x64Parser::tokenBranches5135[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5136,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5134[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5135 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5133[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5134 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5109(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5108[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5109, x64Parser::tokenBranches5109 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5133 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5099[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5100 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5108 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5152(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 412;
}
x64Token x64Parser::tokenBranches5151[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5152,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5150[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5151 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5149[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5150 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5168(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 414;
}
x64Token x64Parser::tokenBranches5167[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5168,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5166[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5167 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5165[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5166 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5148[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5149 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5165 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5147[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5148 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5146[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5147 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5160(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 413;
}
x64Token x64Parser::tokenBranches5159[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5160,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5158[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5159 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5157[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5158 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5176(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 415;
}
x64Token x64Parser::tokenBranches5175[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5176,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5174[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5175 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5173[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5174 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5190(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 417;
}
x64Token x64Parser::tokenBranches5189[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5190,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5188[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5189 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5187[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5188 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5156[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5157 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5173 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5187 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5155[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5156 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5182(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 416;
}
x64Token x64Parser::tokenBranches5181[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5182,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5180[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5181 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5179[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5180 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5155(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5154[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5155, x64Parser::tokenBranches5155 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5179 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5145[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5146 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5154 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5052[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5053 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5099 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5145 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5198(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 418;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5197[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5198,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5196[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5197 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5204_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5204_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5204(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5204_11;
	operand.values[12] = tokenCoding5204_12;
}
x64Token x64Parser::tokenBranches5203[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5204,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5215(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 419;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5214[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5215,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5217(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 420;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5216[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5217,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5228(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 421;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5227[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc5228,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5233(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 422;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5232[] = {
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc5233,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5226[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5227 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5232 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5225[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5226 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5225(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::number;
	operand.values[1]->val = operands.size();
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5235(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 423;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5237(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 424;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5239_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5239_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5239(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5239_11;
	operand.values[12] = tokenCoding5239_12;
}
Coding x64Parser::tokenCoding5241_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5241_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5241(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5241_11;
	operand.values[12] = tokenCoding5241_12;
}
x64Token x64Parser::tokenBranches5224[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc5225, x64Parser::tokenBranches5225 },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc5235,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc5237,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5239,  },
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc5241,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5243(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 425;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5242[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5243,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5245(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 426;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5247(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 427;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5244[] = {
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc5245,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc5247,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5255_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5255_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5255(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5255_11;
	operand.values[12] = tokenCoding5255_12;
}
x64Token x64Parser::tokenBranches5254[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5255,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5257_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5257_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5257(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5257_11;
	operand.values[12] = tokenCoding5257_12;
}
x64Token x64Parser::tokenBranches5256[] = {
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc5257,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5248(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 426;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5249(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 427;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5250_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5250_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5250(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5250_11;
	operand.values[12] = tokenCoding5250_12;
}
Coding x64Parser::tokenCoding5251_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5251_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5251(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5251_11;
	operand.values[12] = tokenCoding5251_12;
}
Coding x64Parser::tokenCoding5252_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5252_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5252(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5252_11;
	operand.values[12] = tokenCoding5252_12;
}
Coding x64Parser::tokenCoding5253_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5253_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5253(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5253_11;
	operand.values[12] = tokenCoding5253_12;
}
x64Token x64Parser::tokenBranches5223[] = {
	{x64Token::TOKEN, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches5224 },
	{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches5242 },
	{x64Token::TOKEN, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches5244 },
	{x64Token::NUMBER, 14, 1, 0, NULL,&x64Parser::TokenFunc5248,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc5249,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc5250,  },
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5251,  },
	{x64Token::ADDRESSCLASS, 22, 1, 0, NULL,&x64Parser::TokenFunc5252,  },
	{x64Token::ADDRESSCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5253,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5254 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5256 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5290_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5290_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5290(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5290_11;
	operand.values[12] = tokenCoding5290_12;
}
Coding x64Parser::tokenCoding5291_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5291_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5291(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5291_11;
	operand.values[12] = tokenCoding5291_12;
}
x64Token x64Parser::tokenBranches5289[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc5290,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc5291,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5298(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 428;
}
x64Token x64Parser::tokenBranches5297[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5298,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5310(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 430;
}
x64Token x64Parser::tokenBranches5309[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5310,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5296[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5297 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5309 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5295[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5296 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5304(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 429;
}
x64Token x64Parser::tokenBranches5303[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5304,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5316(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 431;
}
x64Token x64Parser::tokenBranches5315[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5316,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5326(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 433;
}
x64Token x64Parser::tokenBranches5325[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5326,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5302[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5303 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5315 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5325 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5301[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5302 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5320(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 432;
}
x64Token x64Parser::tokenBranches5319[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5320,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5301(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5294[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5295 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5301, x64Parser::tokenBranches5301 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5319 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5293[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5294 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5332(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 434;
}
x64Token x64Parser::tokenBranches5331[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5332,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5344(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 436;
}
x64Token x64Parser::tokenBranches5343[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5344,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5330[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5331 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5343 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5329[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5330 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5338(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 435;
}
x64Token x64Parser::tokenBranches5337[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5338,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5350(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 437;
}
x64Token x64Parser::tokenBranches5349[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5350,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5360(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 439;
}
x64Token x64Parser::tokenBranches5359[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5360,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5336[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5337 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5349 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5359 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5335[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5336 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5354(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 438;
}
x64Token x64Parser::tokenBranches5353[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5354,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5335(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5328[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5329 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5335, x64Parser::tokenBranches5335 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5353 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5327[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5328 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5366(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 440;
}
x64Token x64Parser::tokenBranches5365[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5366,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5378(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 442;
}
x64Token x64Parser::tokenBranches5377[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5378,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5364[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5365 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5377 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5363[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5364 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5372(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 441;
}
x64Token x64Parser::tokenBranches5371[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5372,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5384(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 443;
}
x64Token x64Parser::tokenBranches5383[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5384,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5394(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 445;
}
x64Token x64Parser::tokenBranches5393[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5394,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5370[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5371 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5383 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5393 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5369[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5370 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5388(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 444;
}
x64Token x64Parser::tokenBranches5387[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5388,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5369(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5362[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5363 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5369, x64Parser::tokenBranches5369 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5387 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5361[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5362 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5400(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 446;
}
x64Token x64Parser::tokenBranches5399[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5400,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5398[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5399 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5397[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5398 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5406(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 447;
}
x64Token x64Parser::tokenBranches5405[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5406,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5416(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 449;
}
x64Token x64Parser::tokenBranches5415[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5416,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5404[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5405 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5415 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5403[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5404 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5410(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 448;
}
x64Token x64Parser::tokenBranches5409[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5410,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5403(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5396[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5397 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5403, x64Parser::tokenBranches5403 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5409 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5395[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5396 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5292[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5293 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5327 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5361 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5395 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5422(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 450;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5421[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5422,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5424(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 451;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5423[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5424,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5426(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 452;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5425[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5426,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5428(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 452;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5427[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5428,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5430(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 451;
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5429[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5430,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5434_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5434_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5434(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5434_11;
	operand.values[12] = tokenCoding5434_12;
}
Coding x64Parser::tokenCoding5435_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5435_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5435(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5435_11;
	operand.values[12] = tokenCoding5435_12;
}
x64Token x64Parser::tokenBranches5433[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5434,  },
	{x64Token::ADDRESSCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5435,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5439_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 24, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5439_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 34, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5439(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5439_11;
	operand.values[12] = tokenCoding5439_12;
}
x64Token x64Parser::tokenBranches5438[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5439,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5437[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5438 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5442_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 25, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5442_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 35, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5442(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5442_11;
	operand.values[12] = tokenCoding5442_12;
}
x64Token x64Parser::tokenBranches5441[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5442,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5440[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5441 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5445_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5445_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 38, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5445(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5445_11;
	operand.values[12] = tokenCoding5445_12;
}
x64Token x64Parser::tokenBranches5444[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5445,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5443[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5444 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5451(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 453;
}
x64Token x64Parser::tokenBranches5450[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5451,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5459(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 454;
}
x64Token x64Parser::tokenBranches5458[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5459,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5473(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 456;
}
x64Token x64Parser::tokenBranches5472[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5473,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5458(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5472(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5457[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5458, x64Parser::tokenBranches5458 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5472, x64Parser::tokenBranches5472 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5456[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5457 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5465(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 455;
}
x64Token x64Parser::tokenBranches5464[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5465,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5450(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5456(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5464(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5449[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5450, x64Parser::tokenBranches5450 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5456, x64Parser::tokenBranches5456 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5464, x64Parser::tokenBranches5464 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5448[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5449 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5447[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5448 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5446[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5447 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5479(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 457;
}
x64Token x64Parser::tokenBranches5478[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5479,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5487(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 458;
}
x64Token x64Parser::tokenBranches5486[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5487,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5501(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 460;
}
x64Token x64Parser::tokenBranches5500[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5501,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5486(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5500(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5485[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5486, x64Parser::tokenBranches5486 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5500, x64Parser::tokenBranches5500 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5484[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5485 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5493(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 459;
}
x64Token x64Parser::tokenBranches5492[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5493,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5478(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5484(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5492(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5477[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5478, x64Parser::tokenBranches5478 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5484, x64Parser::tokenBranches5484 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5492, x64Parser::tokenBranches5492 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5476[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5477 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5475[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5476 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5474[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5475 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5507(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 461;
}
x64Token x64Parser::tokenBranches5506[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5507,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5515(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 462;
}
x64Token x64Parser::tokenBranches5514[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5515,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5529(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 464;
}
x64Token x64Parser::tokenBranches5528[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5529,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5514(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5528(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5513[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5514, x64Parser::tokenBranches5514 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5528, x64Parser::tokenBranches5528 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5512[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5513 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5521(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 463;
}
x64Token x64Parser::tokenBranches5520[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5521,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5506(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5512(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5520(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5505[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5506, x64Parser::tokenBranches5506 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5512, x64Parser::tokenBranches5512 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5520, x64Parser::tokenBranches5520 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5504[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5505 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5503[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5504 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5502[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5503 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5535(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 465;
}
x64Token x64Parser::tokenBranches5534[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5535,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5543(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 466;
}
x64Token x64Parser::tokenBranches5542[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5543,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5557(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 468;
}
x64Token x64Parser::tokenBranches5556[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5557,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5542(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5556(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5541[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5542, x64Parser::tokenBranches5542 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc5556, x64Parser::tokenBranches5556 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5540[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5541 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5549(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 467;
}
x64Token x64Parser::tokenBranches5548[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5549,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5534(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5540(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5548(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5533[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5534, x64Parser::tokenBranches5534 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5540, x64Parser::tokenBranches5540 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc5548, x64Parser::tokenBranches5548 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5532[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5533 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5531[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5532 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5530[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5531 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5561(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 469;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5589_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5589_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5589_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5589_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 138, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5589(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding5589_9;
	operand.values[10] = tokenCoding5589_10;
	operand.values[11] = tokenCoding5589_11;
	operand.values[12] = tokenCoding5589_12;
}
x64Token x64Parser::tokenBranches5560[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5561,  },
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc5589,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5559[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5560 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5558[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5559 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5565(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 470;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5593_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5593_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5593_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5593_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5593(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding5593_9;
	operand.values[10] = tokenCoding5593_10;
	operand.values[11] = tokenCoding5593_11;
	operand.values[12] = tokenCoding5593_12;
}
x64Token x64Parser::tokenBranches5564[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5565,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5593,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5563[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5564 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5562[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5563 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5569(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 471;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5597_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5597_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5597_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5597_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5597(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding5597_9;
	operand.values[10] = tokenCoding5597_10;
	operand.values[11] = tokenCoding5597_11;
	operand.values[12] = tokenCoding5597_12;
}
x64Token x64Parser::tokenBranches5568[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5569,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5597,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5567[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5568 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5566[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5567 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5573(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 469;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5601_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5601_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5601_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5601_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 138, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5601(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding5601_9;
	operand.values[10] = tokenCoding5601_10;
	operand.values[11] = tokenCoding5601_11;
	operand.values[12] = tokenCoding5601_12;
}
x64Token x64Parser::tokenBranches5572[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5573,  },
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc5601,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5571[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5572 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5570[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5571 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5577(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 470;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5605_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5605_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5605_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5605_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5605(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding5605_9;
	operand.values[10] = tokenCoding5605_10;
	operand.values[11] = tokenCoding5605_11;
	operand.values[12] = tokenCoding5605_12;
}
x64Token x64Parser::tokenBranches5576[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5577,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc5605,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5575[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5576 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5574[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5575 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5581(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 471;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5609_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5609_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5609_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5609_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5609(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding5609_9;
	operand.values[10] = tokenCoding5609_10;
	operand.values[11] = tokenCoding5609_11;
	operand.values[12] = tokenCoding5609_12;
}
x64Token x64Parser::tokenBranches5580[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5581,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc5609,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5579[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5580 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5578[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5579 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5585(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 472;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5613_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5613_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5613_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5613_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5613(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding5613_9;
	operand.values[10] = tokenCoding5613_10;
	operand.values[11] = tokenCoding5613_11;
	operand.values[12] = tokenCoding5613_12;
}
x64Token x64Parser::tokenBranches5584[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc5585,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc5613,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5583[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5584 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5582[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5583 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5618_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5618_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5618(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5618_11;
	operand.values[12] = tokenCoding5618_12;
}
x64Token x64Parser::tokenBranches5617[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5618,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5616[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5617 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5615[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5616 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5638_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5638_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5638(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5638_11;
	operand.values[12] = tokenCoding5638_12;
}
x64Token x64Parser::tokenBranches5637[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5638,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5636[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5637 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5635[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5636 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5614[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5615 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5635 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5623_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5623_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5623(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5623_11;
	operand.values[12] = tokenCoding5623_12;
}
x64Token x64Parser::tokenBranches5622[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5623,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5621[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5622 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5620[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5621 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5643_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5643_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5643(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5643_11;
	operand.values[12] = tokenCoding5643_12;
}
x64Token x64Parser::tokenBranches5642[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5643,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5641[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5642 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5640[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5641 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5619[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5620 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches5640 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5628_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5628_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5628(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5628_11;
	operand.values[12] = tokenCoding5628_12;
}
x64Token x64Parser::tokenBranches5627[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5628,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5626[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5627 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5625[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5626 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5648_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5648_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5648(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5648_11;
	operand.values[12] = tokenCoding5648_12;
}
x64Token x64Parser::tokenBranches5647[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5648,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5646[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5647 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5645[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5646 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5624[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5625 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches5645 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5633_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5633_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5633(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5633_11;
	operand.values[12] = tokenCoding5633_12;
}
x64Token x64Parser::tokenBranches5632[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5633,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5631[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5632 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5630[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5631 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5653_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5653_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5653(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5653_11;
	operand.values[12] = tokenCoding5653_12;
}
x64Token x64Parser::tokenBranches5652[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5653,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5651[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5652 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5650[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5651 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5629[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches5630 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches5650 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5854_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5854_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5854(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5854_11;
	operand.values[12] = tokenCoding5854_12;
}
x64Token x64Parser::tokenBranches5853[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5854,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5656_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 24, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5656_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 32, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5656(x64Operand &operand, int tokenPos)
{
	operand.values[24] = new Coding[2];
	CleanupValues.push_back(operand.values[24]);
	operand.values[24]->type = Coding::reg;
	operand.values[24]->val = inputTokens[tokenPos]->val->ival;
	operand.values[24]->bits = 0;
	operand.values[24]->field = 0;
	operand.values[24]->unary = 0;
	operand.values[24]->binary = 0;
	operand.values[24][1].type = Coding::eot;
	operand.values[11] = tokenCoding5656_11;
	operand.values[12] = tokenCoding5656_12;
}
Coding x64Parser::tokenCoding5659_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 25, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5659_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5659(x64Operand &operand, int tokenPos)
{
	operand.values[25] = new Coding[2];
	CleanupValues.push_back(operand.values[25]);
	operand.values[25]->type = Coding::reg;
	operand.values[25]->val = inputTokens[tokenPos]->val->ival;
	operand.values[25]->bits = 0;
	operand.values[25]->field = 0;
	operand.values[25]->unary = 0;
	operand.values[25]->binary = 0;
	operand.values[25][1].type = Coding::eot;
	operand.values[11] = tokenCoding5659_11;
	operand.values[12] = tokenCoding5659_12;
}
Coding x64Parser::tokenCoding5662_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5662_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5662(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->unary = 0;
	operand.values[26]->binary = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[11] = tokenCoding5662_11;
	operand.values[12] = tokenCoding5662_12;
}
x64Token x64Parser::tokenBranches5655[] = {
	{x64Token::REGISTERCLASS, 33, 1, 0, NULL,&x64Parser::TokenFunc5656,  },
	{x64Token::REGISTERCLASS, 34, 1, 0, NULL,&x64Parser::TokenFunc5659,  },
	{x64Token::REGISTERCLASS, 35, 1, 0, NULL,&x64Parser::TokenFunc5662,  },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5853 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5654[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5655 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5668(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 473;
}
x64Token x64Parser::tokenBranches5667[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5668,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5666[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5667 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5665[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5666 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5676(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 474;
}
x64Token x64Parser::tokenBranches5675[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5676,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5674[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5675 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5673[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5674 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5690(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 476;
}
x64Token x64Parser::tokenBranches5689[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5690,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5688[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5689 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5687[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5688 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5673(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5687(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5672[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5673, x64Parser::tokenBranches5673 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5687, x64Parser::tokenBranches5687 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5671[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5672 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5682(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 475;
}
x64Token x64Parser::tokenBranches5681[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5682,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5680[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5681 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5679[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5680 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5665(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5671(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5679(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5664[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5665, x64Parser::tokenBranches5665 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5671, x64Parser::tokenBranches5671 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5679, x64Parser::tokenBranches5679 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5778_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5778_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5778_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5778_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 136, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5778(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding5778_9;
	operand.values[10] = tokenCoding5778_10;
	operand.values[11] = tokenCoding5778_11;
	operand.values[12] = tokenCoding5778_12;
}
x64Token x64Parser::tokenBranches5777[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5778,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5776[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5777 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5790_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5790_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5790_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5790_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 136, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5790(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding5790_9;
	operand.values[10] = tokenCoding5790_10;
	operand.values[11] = tokenCoding5790_11;
	operand.values[12] = tokenCoding5790_12;
}
x64Token x64Parser::tokenBranches5789[] = {
	{x64Token::REGISTERCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc5790,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5788[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5789 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5663[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5664 },
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5776 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5788 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5696(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 477;
}
x64Token x64Parser::tokenBranches5695[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5696,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5694[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5695 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5693[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5694 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5704(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 478;
}
x64Token x64Parser::tokenBranches5703[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5704,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5702[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5703 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5701[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5702 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5718(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 480;
}
x64Token x64Parser::tokenBranches5717[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5718,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5716[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5717 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5715[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5716 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5701(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5715(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5700[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5701, x64Parser::tokenBranches5701 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5715, x64Parser::tokenBranches5715 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5699[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5700 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5710(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 479;
}
x64Token x64Parser::tokenBranches5709[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5710,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5708[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5709 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5707[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5708 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5693(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5699(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5707(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5692[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5693, x64Parser::tokenBranches5693 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5699, x64Parser::tokenBranches5699 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5707, x64Parser::tokenBranches5707 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5782_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5782_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5782_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5782_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5782(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding5782_9;
	operand.values[10] = tokenCoding5782_10;
	operand.values[11] = tokenCoding5782_11;
	operand.values[12] = tokenCoding5782_12;
}
Coding x64Parser::tokenCoding5814_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5814_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5814(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[11] = tokenCoding5814_11;
	operand.values[12] = tokenCoding5814_12;
}
x64Token x64Parser::tokenBranches5781[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5782,  },
	{x64Token::REGISTERCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5814,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5780[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5781 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5794_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5794_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5794_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5794_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5794(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding5794_9;
	operand.values[10] = tokenCoding5794_10;
	operand.values[11] = tokenCoding5794_11;
	operand.values[12] = tokenCoding5794_12;
}
Coding x64Parser::tokenCoding5834_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5834_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5834(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[11] = tokenCoding5834_11;
	operand.values[12] = tokenCoding5834_12;
}
x64Token x64Parser::tokenBranches5793[] = {
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc5794,  },
	{x64Token::REGISTERCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5834,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5792[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5793 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5691[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5692 },
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5780 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches5792 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5724(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 481;
}
x64Token x64Parser::tokenBranches5723[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5724,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5722[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5723 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5721[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5722 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5732(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 482;
}
x64Token x64Parser::tokenBranches5731[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5732,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5730[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5731 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5729[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5730 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5746(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 484;
}
x64Token x64Parser::tokenBranches5745[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5746,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5744[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5745 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5743[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5744 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5729(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5743(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5728[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5729, x64Parser::tokenBranches5729 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5743, x64Parser::tokenBranches5743 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5727[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5728 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5738(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 483;
}
x64Token x64Parser::tokenBranches5737[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5738,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5736[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5737 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5735[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5736 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5721(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5727(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5735(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5720[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5721, x64Parser::tokenBranches5721 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5727, x64Parser::tokenBranches5727 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5735, x64Parser::tokenBranches5735 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5786_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5786_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5786_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5786_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5786(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding5786_9;
	operand.values[10] = tokenCoding5786_10;
	operand.values[11] = tokenCoding5786_11;
	operand.values[12] = tokenCoding5786_12;
}
x64Token x64Parser::tokenBranches5785[] = {
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc5786,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5784[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5785 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5798_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5798_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5798_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5798_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5798(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding5798_9;
	operand.values[10] = tokenCoding5798_10;
	operand.values[11] = tokenCoding5798_11;
	operand.values[12] = tokenCoding5798_12;
}
x64Token x64Parser::tokenBranches5797[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc5798,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5796[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5797 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5818_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5818_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5818(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[11] = tokenCoding5818_11;
	operand.values[12] = tokenCoding5818_12;
}
x64Token x64Parser::tokenBranches5817[] = {
	{x64Token::REGISTERCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5818,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5816[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5817 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5838_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5838_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5838(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[11] = tokenCoding5838_11;
	operand.values[12] = tokenCoding5838_12;
}
x64Token x64Parser::tokenBranches5837[] = {
	{x64Token::REGISTERCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5838,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5836[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5837 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5842_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5842_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5842(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[11] = tokenCoding5842_11;
	operand.values[12] = tokenCoding5842_12;
}
x64Token x64Parser::tokenBranches5841[] = {
	{x64Token::REGISTERCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5842,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5840[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5841 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5719[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5720 },
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5784 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches5796 },
	{x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches5816 },
	{x64Token::ADDRESSCLASS, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches5836 },
	{x64Token::ADDRESSCLASS, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches5840 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5752(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 485;
}
x64Token x64Parser::tokenBranches5751[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5752,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5750[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5751 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5749[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5750 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5760(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 486;
}
x64Token x64Parser::tokenBranches5759[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5760,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5758[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5759 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5757[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5758 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5774(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 488;
}
x64Token x64Parser::tokenBranches5773[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5774,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5772[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5773 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5771[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5772 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5757(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5771(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5756[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5757, x64Parser::tokenBranches5757 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc5771, x64Parser::tokenBranches5771 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5755[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5756 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5766(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 487;
}
x64Token x64Parser::tokenBranches5765[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5766,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5764[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5765 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5763[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5764 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5749(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5755(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5763(x64Operand &operand, int tokenPos)
{
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5748[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5749, x64Parser::tokenBranches5749 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5755, x64Parser::tokenBranches5755 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc5763, x64Parser::tokenBranches5763 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5802_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5802_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5802_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5802_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5802(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding5802_9;
	operand.values[10] = tokenCoding5802_10;
	operand.values[11] = tokenCoding5802_11;
	operand.values[12] = tokenCoding5802_12;
}
x64Token x64Parser::tokenBranches5801[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5802,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5800[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5801 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5747[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5748 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches5800 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5806_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5806_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5806_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5806_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5806(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding5806_9;
	operand.values[10] = tokenCoding5806_10;
	operand.values[11] = tokenCoding5806_11;
	operand.values[12] = tokenCoding5806_12;
}
Coding x64Parser::tokenCoding5822_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5822_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5822_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5822_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5822(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding5822_9;
	operand.values[10] = tokenCoding5822_10;
	operand.values[11] = tokenCoding5822_11;
	operand.values[12] = tokenCoding5822_12;
}
x64Token x64Parser::tokenBranches5805[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5806,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc5822,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5810_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5810_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5810(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5810_11;
	operand.values[12] = tokenCoding5810_12;
}
Coding x64Parser::tokenCoding5826_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5826_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5826(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5826_11;
	operand.values[12] = tokenCoding5826_12;
}
Coding x64Parser::tokenCoding5830_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5830_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5830(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding5830_11;
	operand.values[12] = tokenCoding5830_12;
}
x64Token x64Parser::tokenBranches5809[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5810,  },
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc5826,  },
	{x64Token::ADDRESSCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5830,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5804[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5805 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5809 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5803[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5804 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5846_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5846_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5846(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5846_11;
	operand.values[12] = tokenCoding5846_12;
}
x64Token x64Parser::tokenBranches5845[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5846,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5844[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5845 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5843[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5844 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5850_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5850_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5850(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5850_11;
	operand.values[12] = tokenCoding5850_12;
}
x64Token x64Parser::tokenBranches5849[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5850,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5848[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5849 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5847[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5848 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5858_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5858_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5858(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5858_11;
	operand.values[12] = tokenCoding5858_12;
}
x64Token x64Parser::tokenBranches5857[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5858,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5856[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5857 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5855[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5856 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5862_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5862_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5862(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5862_11;
	operand.values[12] = tokenCoding5862_12;
}
x64Token x64Parser::tokenBranches5861[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5862,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5860[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5861 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5859[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5860 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5866_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5866_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5866(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5866_11;
	operand.values[12] = tokenCoding5866_12;
}
x64Token x64Parser::tokenBranches5865[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5866,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5864[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5865 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5863[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5864 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5870_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5870_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5870(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding5870_11;
	operand.values[12] = tokenCoding5870_12;
}
x64Token x64Parser::tokenBranches5869[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc5870,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5868[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5869 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5867[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5868 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5437(x64Operand &operand, int tokenPos)
{
	operand.values[24] = new Coding[2];
	CleanupValues.push_back(operand.values[24]);
	operand.values[24]->type = Coding::reg;
	operand.values[24]->val = inputTokens[tokenPos]->val->ival;
	operand.values[24]->bits = 0;
	operand.values[24]->field = 0;
	operand.values[24]->unary = 0;
	operand.values[24]->binary = 0;
	operand.values[24][1].type = Coding::eot;
}
void x64Parser::TokenFunc5440(x64Operand &operand, int tokenPos)
{
	operand.values[25] = new Coding[2];
	CleanupValues.push_back(operand.values[25]);
	operand.values[25]->type = Coding::reg;
	operand.values[25]->val = inputTokens[tokenPos]->val->ival;
	operand.values[25]->bits = 0;
	operand.values[25]->field = 0;
	operand.values[25]->unary = 0;
	operand.values[25]->binary = 0;
	operand.values[25][1].type = Coding::eot;
}
void x64Parser::TokenFunc5443(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->unary = 0;
	operand.values[26]->binary = 0;
	operand.values[26][1].type = Coding::eot;
}
void x64Parser::TokenFunc5558(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc5562(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc5566(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc5570(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc5574(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc5578(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc5582(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc5803(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5436[] = {
	{x64Token::REGISTERCLASS, 33, 0, 0, NULL,&x64Parser::TokenFunc5437, x64Parser::tokenBranches5437 },
	{x64Token::REGISTERCLASS, 34, 0, 0, NULL,&x64Parser::TokenFunc5440, x64Parser::tokenBranches5440 },
	{x64Token::REGISTERCLASS, 35, 0, 0, NULL,&x64Parser::TokenFunc5443, x64Parser::tokenBranches5443 },
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches5446 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5474 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5502 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5530 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc5558, x64Parser::tokenBranches5558 },
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc5562, x64Parser::tokenBranches5562 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc5566, x64Parser::tokenBranches5566 },
	{x64Token::REGISTERCLASS, 2, 0, 0, NULL,&x64Parser::TokenFunc5570, x64Parser::tokenBranches5570 },
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc5574, x64Parser::tokenBranches5574 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc5578, x64Parser::tokenBranches5578 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc5582, x64Parser::tokenBranches5582 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5614 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5619 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5624 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5629 },
	{x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches5654 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5663 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5691 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5719 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5747 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5803, x64Parser::tokenBranches5803 },
	{x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches5843 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches5847 },
	{x64Token::ADDRESSCLASS, 25, 0, 0, NULL, NULL, x64Parser::tokenBranches5855 },
	{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches5859 },
	{x64Token::ADDRESSCLASS, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches5863 },
	{x64Token::ADDRESSCLASS, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches5867 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5884(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 489;
}
x64Token x64Parser::tokenBranches5883[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5884,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5882[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5883 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5881[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5882 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5897(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 490;
}
x64Token x64Parser::tokenBranches5896[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5897,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5895[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5896 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5894[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5895 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5894(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5880[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5881 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5894, x64Parser::tokenBranches5894 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5879[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5880 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5878[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5879 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5877[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5878 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5876[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5877 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5910(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 491;
}
x64Token x64Parser::tokenBranches5909[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5910,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5908[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5909 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5907[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5908 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5923(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 492;
}
x64Token x64Parser::tokenBranches5922[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5923,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5921[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5922 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5920[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5921 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5920(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5906[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5907 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5920, x64Parser::tokenBranches5920 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5905[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5906 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5904[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5905 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5903[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5904 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5902[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5903 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5875[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5876 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5902 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5874[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5875 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5873[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5874 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5932(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 493;
}
x64Token x64Parser::tokenBranches5931[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5932,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5943(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 494;
}
x64Token x64Parser::tokenBranches5942[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5943,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5941[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5942 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5940[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5941 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5940(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5930[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5931 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5940, x64Parser::tokenBranches5940 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5929[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5930 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5928[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5929 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5927[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5928 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5926[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5927 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5925[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5926 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5872[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5873 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5925 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5956(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 495;
}
x64Token x64Parser::tokenBranches5955[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5956,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5954[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5955 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5953[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5954 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5969(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 496;
}
x64Token x64Parser::tokenBranches5968[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5969,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5967[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5968 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5966[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5967 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5966(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5952[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5953 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5966, x64Parser::tokenBranches5966 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5951[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5952 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5950[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5951 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5949[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5950 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5948[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5949 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5982(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 497;
}
x64Token x64Parser::tokenBranches5981[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5982,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5980[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5981 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5979[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5980 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5995(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 498;
}
x64Token x64Parser::tokenBranches5994[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5995,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5993[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5994 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5992[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5993 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5992(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5978[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5979 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5992, x64Parser::tokenBranches5992 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5977[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5978 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5976[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5977 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5975[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5976 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5974[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5975 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5947[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5948 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5974 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5946[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5947 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5945[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5946 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6004(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 499;
}
x64Token x64Parser::tokenBranches6003[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6004,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6015(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 500;
}
x64Token x64Parser::tokenBranches6014[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6015,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6013[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6014 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6012[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6013 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6012(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6002[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6003 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6012, x64Parser::tokenBranches6012 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6001[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6002 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6000[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6001 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5999[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6000 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5998[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5999 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5997[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5998 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5944[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5945 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5997 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6028(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 501;
}
x64Token x64Parser::tokenBranches6027[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6028,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6026[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6027 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6025[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6026 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6041(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 502;
}
x64Token x64Parser::tokenBranches6040[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6041,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6039[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6040 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6038[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6039 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6038(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6024[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6025 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6038, x64Parser::tokenBranches6038 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6023[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6024 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6022[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6023 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6021[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6022 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6020[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6021 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6054(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 503;
}
x64Token x64Parser::tokenBranches6053[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6054,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6052[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6053 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6051[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6052 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6067(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 504;
}
x64Token x64Parser::tokenBranches6066[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6067,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6065[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6066 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6064[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6065 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6064(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6050[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6051 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6064, x64Parser::tokenBranches6064 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6049[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6050 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6048[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6049 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6047[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6048 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6046[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6047 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6019[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6020 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6046 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6018[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6019 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6017[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6018 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6076(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 505;
}
x64Token x64Parser::tokenBranches6075[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6076,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6087(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 506;
}
x64Token x64Parser::tokenBranches6086[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6087,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6085[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6086 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6084[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6085 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6084(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6074[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6075 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6084, x64Parser::tokenBranches6084 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6073[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6074 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6072[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6073 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6071[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6072 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6070[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6071 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6069[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6070 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6016[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6017 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6069 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6100(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 507;
}
x64Token x64Parser::tokenBranches6099[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6100,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6098[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6099 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6097[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6098 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6113(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 508;
}
x64Token x64Parser::tokenBranches6112[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6113,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6111[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6112 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6110[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6111 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6110(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6096[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6097 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6110, x64Parser::tokenBranches6110 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6095[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6096 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6094[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6095 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6093[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6094 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6092[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6093 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6091[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6092 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6090[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6091 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6089[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6090 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6122(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 507;
}
x64Token x64Parser::tokenBranches6121[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6122,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6133(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 508;
}
x64Token x64Parser::tokenBranches6132[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6133,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6131[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6132 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6130[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6131 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6130(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6120[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6121 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6130, x64Parser::tokenBranches6130 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6119[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6120 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6118[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6119 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6117[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6118 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6116[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6117 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6115[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6116 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6088[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6089 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6115 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5871[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5872 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5944 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6016 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6088 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6138_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6138_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6138_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6138_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6138(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6138_9;
	operand.values[10] = tokenCoding6138_10;
	operand.values[11] = tokenCoding6138_11;
	operand.values[12] = tokenCoding6138_12;
}
x64Token x64Parser::tokenBranches6137[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6138,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6136[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6137 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6135[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6136 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6142_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6142_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6142_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6142_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6142(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6142_9;
	operand.values[10] = tokenCoding6142_10;
	operand.values[11] = tokenCoding6142_11;
	operand.values[12] = tokenCoding6142_12;
}
x64Token x64Parser::tokenBranches6141[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6142,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6140[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6141 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6139[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6140 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6146_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6146_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6146_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6146_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6146(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6146_9;
	operand.values[10] = tokenCoding6146_10;
	operand.values[11] = tokenCoding6146_11;
	operand.values[12] = tokenCoding6146_12;
}
x64Token x64Parser::tokenBranches6145[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6146,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6144[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6145 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6143[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6144 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6150_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6150_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6150_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6150_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6150(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6150_9;
	operand.values[10] = tokenCoding6150_10;
	operand.values[11] = tokenCoding6150_11;
	operand.values[12] = tokenCoding6150_12;
}
x64Token x64Parser::tokenBranches6149[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6150,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6148[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6149 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6147[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6148 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6154_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6154_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6154_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6154_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6154(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6154_9;
	operand.values[10] = tokenCoding6154_10;
	operand.values[11] = tokenCoding6154_11;
	operand.values[12] = tokenCoding6154_12;
}
x64Token x64Parser::tokenBranches6153[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6154,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6152[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6153 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6151[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6152 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6158_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6158_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6158_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6158_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6158(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6158_9;
	operand.values[10] = tokenCoding6158_10;
	operand.values[11] = tokenCoding6158_11;
	operand.values[12] = tokenCoding6158_12;
}
x64Token x64Parser::tokenBranches6157[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6158,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6156[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6157 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6166_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6166_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6166_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6166_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6166(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6166_9;
	operand.values[10] = tokenCoding6166_10;
	operand.values[11] = tokenCoding6166_11;
	operand.values[12] = tokenCoding6166_12;
}
x64Token x64Parser::tokenBranches6165[] = {
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc6166,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6164[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6165 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6155[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6156 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6164 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6162_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6162_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6162_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6162_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6162(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6162_9;
	operand.values[10] = tokenCoding6162_10;
	operand.values[11] = tokenCoding6162_11;
	operand.values[12] = tokenCoding6162_12;
}
x64Token x64Parser::tokenBranches6161[] = {
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6162,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6160[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6161 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6170_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6170_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6170_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6170_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6170(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6170_9;
	operand.values[10] = tokenCoding6170_10;
	operand.values[11] = tokenCoding6170_11;
	operand.values[12] = tokenCoding6170_12;
}
x64Token x64Parser::tokenBranches6169[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc6170,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6168[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6169 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6159[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6160 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches6168 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6174_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6174_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6174_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6174_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6174(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6174_9;
	operand.values[10] = tokenCoding6174_10;
	operand.values[11] = tokenCoding6174_11;
	operand.values[12] = tokenCoding6174_12;
}
x64Token x64Parser::tokenBranches6173[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6174,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6172[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6173 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6171[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches6172 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6135(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6139(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6143(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6147(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6151(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6134[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc6135, x64Parser::tokenBranches6135 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc6139, x64Parser::tokenBranches6139 },
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc6143, x64Parser::tokenBranches6143 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc6147, x64Parser::tokenBranches6147 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc6151, x64Parser::tokenBranches6151 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6155 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6159 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6171 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6180_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6180_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6180_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6180_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6180_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6180(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6180_9;
	operand.values[10] = tokenCoding6180_10;
	operand.values[19] = tokenCoding6180_19;
	operand.values[11] = tokenCoding6180_11;
	operand.values[12] = tokenCoding6180_12;
}
x64Token x64Parser::tokenBranches6179[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6180,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6178[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6179 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6183_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6183_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6183_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6183_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6183_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6183(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6183_9;
	operand.values[10] = tokenCoding6183_10;
	operand.values[19] = tokenCoding6183_19;
	operand.values[11] = tokenCoding6183_11;
	operand.values[12] = tokenCoding6183_12;
}
x64Token x64Parser::tokenBranches6182[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6183,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6181[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6182 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6186_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6186_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6186_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6186_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6186_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6186(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6186_9;
	operand.values[10] = tokenCoding6186_10;
	operand.values[19] = tokenCoding6186_19;
	operand.values[11] = tokenCoding6186_11;
	operand.values[12] = tokenCoding6186_12;
}
Coding x64Parser::tokenCoding6189_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6189_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6189_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6189_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6189_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6189(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6189_9;
	operand.values[10] = tokenCoding6189_10;
	operand.values[19] = tokenCoding6189_19;
	operand.values[11] = tokenCoding6189_11;
	operand.values[12] = tokenCoding6189_12;
}
x64Token x64Parser::tokenBranches6185[] = {
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc6186,  },
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc6189,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6184[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6185 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6178(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6181(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6177[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc6178, x64Parser::tokenBranches6178 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc6181, x64Parser::tokenBranches6181 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6184 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6200_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6200_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6200_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6200_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6200(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6200_9;
	operand.values[10] = tokenCoding6200_10;
	operand.values[11] = tokenCoding6200_11;
	operand.values[12] = tokenCoding6200_12;
}
x64Token x64Parser::tokenBranches6199[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6200,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6196_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6196_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6196_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6196_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6196(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6196_9;
	operand.values[10] = tokenCoding6196_10;
	operand.values[11] = tokenCoding6196_11;
	operand.values[12] = tokenCoding6196_12;
}
x64Token x64Parser::tokenBranches6195[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc6196,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6199 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6194[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6195 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6210_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6210_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6210_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6210_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6210(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6210_9;
	operand.values[10] = tokenCoding6210_10;
	operand.values[11] = tokenCoding6210_11;
	operand.values[12] = tokenCoding6210_12;
}
x64Token x64Parser::tokenBranches6209[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6210,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6203_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6203_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6203_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6203_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6203(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6203_9;
	operand.values[10] = tokenCoding6203_10;
	operand.values[11] = tokenCoding6203_11;
	operand.values[12] = tokenCoding6203_12;
}
x64Token x64Parser::tokenBranches6202[] = {
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc6203,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6209 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6201[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6202 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6214_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6214_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6214_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6214_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6214(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6214_9;
	operand.values[10] = tokenCoding6214_10;
	operand.values[11] = tokenCoding6214_11;
	operand.values[12] = tokenCoding6214_12;
}
x64Token x64Parser::tokenBranches6213[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6214,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6206_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6206_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6206_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6206_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6206(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6206_9;
	operand.values[10] = tokenCoding6206_10;
	operand.values[11] = tokenCoding6206_11;
	operand.values[12] = tokenCoding6206_12;
}
x64Token x64Parser::tokenBranches6205[] = {
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc6206,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6213 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6204[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6205 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6194(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6201(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6204(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6193[] = {
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc6194, x64Parser::tokenBranches6194 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc6201, x64Parser::tokenBranches6201 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc6204, x64Parser::tokenBranches6204 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6224(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 509;
}
x64Token x64Parser::tokenBranches6223[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc6224,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6222[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6223 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6222(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6221[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc6222, x64Parser::tokenBranches6222 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6228(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 510;
}
x64Token x64Parser::tokenBranches6227[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc6228,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6226[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6227 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6226(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6225[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc6226, x64Parser::tokenBranches6226 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6232(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 511;
}
x64Token x64Parser::tokenBranches6231[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc6232,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6230[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6231 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6230(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6229[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc6230, x64Parser::tokenBranches6230 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6236(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 512;
}
x64Token x64Parser::tokenBranches6235[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc6236,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6234[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6235 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6234(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6233[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc6234, x64Parser::tokenBranches6234 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6239(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 513;
}
void x64Parser::TokenFunc6242(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 514;
}
void x64Parser::TokenFunc6245(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 515;
}
void x64Parser::TokenFunc6248(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 516;
}
x64Token x64Parser::tokenBranches6238[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc6239,  },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc6242,  },
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc6245,  },
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc6248,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6237[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6238 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6220[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6221 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6225 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6229 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6233 },
	{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches6237 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6257(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 517;
}
x64Token x64Parser::tokenBranches6256[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6257,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6273(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 519;
}
x64Token x64Parser::tokenBranches6272[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6273,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6255[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6256 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6272 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6254[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6255 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6265(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 518;
}
x64Token x64Parser::tokenBranches6264[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6265,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6281(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 520;
}
x64Token x64Parser::tokenBranches6280[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6281,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6295(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 522;
}
x64Token x64Parser::tokenBranches6294[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6295,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6263[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6264 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6280 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6294 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6262[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6263 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6287(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 521;
}
x64Token x64Parser::tokenBranches6286[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6287,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6262(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6253[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6254 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6262, x64Parser::tokenBranches6262 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6286 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6252[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6253 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6303(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 523;
}
x64Token x64Parser::tokenBranches6302[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6303,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6319(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 525;
}
x64Token x64Parser::tokenBranches6318[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6319,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6301[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6302 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6318 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6300[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6301 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6311(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 524;
}
x64Token x64Parser::tokenBranches6310[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6311,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6327(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 526;
}
x64Token x64Parser::tokenBranches6326[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6327,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6341(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 528;
}
x64Token x64Parser::tokenBranches6340[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6341,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6309[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6310 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6326 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6340 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6308[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6309 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6333(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 527;
}
x64Token x64Parser::tokenBranches6332[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6333,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6308(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6299[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6300 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6308, x64Parser::tokenBranches6308 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6332 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6298[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6299 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6349(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 529;
}
x64Token x64Parser::tokenBranches6348[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6349,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6365(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 531;
}
x64Token x64Parser::tokenBranches6364[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6365,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6347[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6348 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6364 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6346[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6347 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6357(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 530;
}
x64Token x64Parser::tokenBranches6356[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6357,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6373(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 532;
}
x64Token x64Parser::tokenBranches6372[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6373,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6387(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 534;
}
x64Token x64Parser::tokenBranches6386[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6387,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6355[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6356 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6372 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6386 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6354[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6355 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6379(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 533;
}
x64Token x64Parser::tokenBranches6378[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6379,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6354(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6345[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6346 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6354, x64Parser::tokenBranches6354 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6378 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6344[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6345 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6251[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6252 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6298 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6344 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6250[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6251 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6249[] = {
	{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches6250 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6399_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6399_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6399(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6399_11;
	operand.values[12] = tokenCoding6399_12;
}
Coding x64Parser::tokenCoding6405_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6405_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6405(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6405_11;
	operand.values[12] = tokenCoding6405_12;
}
x64Token x64Parser::tokenBranches6398[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6399,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6405,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6401_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6401_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6401(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6401_11;
	operand.values[12] = tokenCoding6401_12;
}
Coding x64Parser::tokenCoding6407_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6407_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6407(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6407_11;
	operand.values[12] = tokenCoding6407_12;
}
x64Token x64Parser::tokenBranches6400[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6401,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6407,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6403_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6403_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6403(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6403_11;
	operand.values[12] = tokenCoding6403_12;
}
Coding x64Parser::tokenCoding6409_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6409_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6409(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6409_11;
	operand.values[12] = tokenCoding6409_12;
}
x64Token x64Parser::tokenBranches6402[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc6403,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6409,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6392(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 535;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6393(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 536;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6394(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 537;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6395(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 538;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6396(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 539;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6397(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 540;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6410(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 541;
}
void x64Parser::TokenFunc6411(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 542;
}
void x64Parser::TokenFunc6412(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 543;
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6391[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6392,  },
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6393,  },
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc6394,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc6395,  },
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6396,  },
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6397,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6398 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6400 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6402 },
	{x64Token::REGISTER, 96, 1, 0, NULL,&x64Parser::TokenFunc6410,  },
	{x64Token::REGISTER, 97, 1, 0, NULL,&x64Parser::TokenFunc6411,  },
	{x64Token::REGISTERCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc6412,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6422_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6422_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6422_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6422_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6422_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6422(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6422_28;
	operand.values[9] = tokenCoding6422_9;
	operand.values[10] = tokenCoding6422_10;
	operand.values[11] = tokenCoding6422_11;
	operand.values[12] = tokenCoding6422_12;
}
x64Token x64Parser::tokenBranches6421[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6422,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6424_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6424_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6424_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6424_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6424_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6424(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6424_28;
	operand.values[9] = tokenCoding6424_9;
	operand.values[10] = tokenCoding6424_10;
	operand.values[11] = tokenCoding6424_11;
	operand.values[12] = tokenCoding6424_12;
}
x64Token x64Parser::tokenBranches6423[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6424,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6426_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6426_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6426_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6426_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6426_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6426(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6426_28;
	operand.values[9] = tokenCoding6426_9;
	operand.values[10] = tokenCoding6426_10;
	operand.values[11] = tokenCoding6426_11;
	operand.values[12] = tokenCoding6426_12;
}
x64Token x64Parser::tokenBranches6425[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6426,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6428_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6428_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6428_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6428_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6428_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6428(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6428_28;
	operand.values[9] = tokenCoding6428_9;
	operand.values[10] = tokenCoding6428_10;
	operand.values[11] = tokenCoding6428_11;
	operand.values[12] = tokenCoding6428_12;
}
x64Token x64Parser::tokenBranches6427[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6428,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6437(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 550;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6436[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc6437,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6442(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 551;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6448_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6448_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6448(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 555;
	operand.values[11] = tokenCoding6448_11;
	operand.values[12] = tokenCoding6448_12;
}
Coding x64Parser::tokenCoding6454_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6454_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6454(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 555;
	operand.values[11] = tokenCoding6454_11;
	operand.values[12] = tokenCoding6454_12;
}
x64Token x64Parser::tokenBranches6441[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6442,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6448,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6454,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6444(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 552;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6450_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6450_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6450(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 556;
	operand.values[11] = tokenCoding6450_11;
	operand.values[12] = tokenCoding6450_12;
}
Coding x64Parser::tokenCoding6456_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6456_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6456(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 556;
	operand.values[11] = tokenCoding6456_11;
	operand.values[12] = tokenCoding6456_12;
}
x64Token x64Parser::tokenBranches6443[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6444,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6450,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6456,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6446(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 554;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6452_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6452_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6452(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 556;
	operand.values[11] = tokenCoding6452_11;
	operand.values[12] = tokenCoding6452_12;
}
Coding x64Parser::tokenCoding6458_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6458_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6458(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 556;
	operand.values[11] = tokenCoding6458_11;
	operand.values[12] = tokenCoding6458_12;
}
x64Token x64Parser::tokenBranches6445[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6446,  },
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc6452,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6458,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6430(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 544;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6431(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 545;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6432(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 546;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6433(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 547;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6434(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 548;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6435(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 549;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6438(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 551;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6439(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 552;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6440(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 553;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6459(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 557;
}
void x64Parser::TokenFunc6460(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 558;
}
void x64Parser::TokenFunc6461(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 559;
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6429[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6430,  },
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6431,  },
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc6432,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc6433,  },
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6434,  },
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6435,  },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6436 },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc6438,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc6439,  },
	{x64Token::NUMBER, 9, 1, 0, NULL,&x64Parser::TokenFunc6440,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6441 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6443 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6445 },
	{x64Token::REGISTER, 96, 1, 0, NULL,&x64Parser::TokenFunc6459,  },
	{x64Token::REGISTER, 97, 1, 0, NULL,&x64Parser::TokenFunc6460,  },
	{x64Token::REGISTERCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc6461,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6475(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 560;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6476(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 561;
}
x64Token x64Parser::tokenBranches6474[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6475,  },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6476,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6478(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 562;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6479(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 563;
}
x64Token x64Parser::tokenBranches6477[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6478,  },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6479,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6493(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 564;
}
x64Token x64Parser::tokenBranches6492[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6493,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6505(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 566;
}
x64Token x64Parser::tokenBranches6504[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6505,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6491[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6492 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6504 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6490[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6491 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6489[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6490 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6499(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 565;
}
x64Token x64Parser::tokenBranches6498[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6499,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6511(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 567;
}
x64Token x64Parser::tokenBranches6510[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6511,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6521(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 569;
}
x64Token x64Parser::tokenBranches6520[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6521,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6497[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6498 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6510 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6520 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6496[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6497 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6515(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 568;
}
x64Token x64Parser::tokenBranches6514[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6515,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6496(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6495[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6496, x64Parser::tokenBranches6496 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6514 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6488[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6489 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6495 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6527(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 570;
}
x64Token x64Parser::tokenBranches6526[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6527,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6539(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 572;
}
x64Token x64Parser::tokenBranches6538[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6539,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6525[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6526 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6538 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6524[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6525 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6523[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6524 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6533(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 571;
}
x64Token x64Parser::tokenBranches6532[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6533,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6545(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 573;
}
x64Token x64Parser::tokenBranches6544[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6545,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6555(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 575;
}
x64Token x64Parser::tokenBranches6554[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6555,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6531[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6532 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6544 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6554 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6530[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6531 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6549(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 574;
}
x64Token x64Parser::tokenBranches6548[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6549,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6530(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6529[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6530, x64Parser::tokenBranches6530 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6548 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6522[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6523 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6529 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6561(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 576;
}
x64Token x64Parser::tokenBranches6560[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6561,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6573(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 578;
}
x64Token x64Parser::tokenBranches6572[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6573,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6559[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6560 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6572 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6558[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6559 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6557[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6558 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6567(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 577;
}
x64Token x64Parser::tokenBranches6566[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6567,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6579(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 579;
}
x64Token x64Parser::tokenBranches6578[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6579,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6589(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 581;
}
x64Token x64Parser::tokenBranches6588[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6589,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6565[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6566 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6578 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6588 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6564[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6565 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6583(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 580;
}
x64Token x64Parser::tokenBranches6582[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6583,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6564(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6563[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6564, x64Parser::tokenBranches6564 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6582 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6556[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6557 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6563 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6595(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 582;
}
x64Token x64Parser::tokenBranches6594[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6595,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6593[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6594 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6592[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6593 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6591[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6592 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6601(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 583;
}
x64Token x64Parser::tokenBranches6600[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6601,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6611(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 583;
}
x64Token x64Parser::tokenBranches6610[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6611,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6599[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6600 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6610 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6598[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6599 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6605(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 582;
}
x64Token x64Parser::tokenBranches6604[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6605,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6598(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6597[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6598, x64Parser::tokenBranches6598 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6604 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6590[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6591 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6597 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6487[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6488 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6522 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6556 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6590 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6654_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6654_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6654(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6654_11;
	operand.values[12] = tokenCoding6654_12;
}
Coding x64Parser::tokenCoding6655_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6655_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6655(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6655_11;
	operand.values[12] = tokenCoding6655_12;
}
x64Token x64Parser::tokenBranches6653[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6654,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc6655,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6665(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 584;
}
x64Token x64Parser::tokenBranches6664[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6665,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6677(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 586;
}
x64Token x64Parser::tokenBranches6676[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6677,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6663[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6664 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6676 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6662[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6663 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6661[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6662 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6671(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 585;
}
x64Token x64Parser::tokenBranches6670[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6671,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6683(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 587;
}
x64Token x64Parser::tokenBranches6682[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6683,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6693(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 589;
}
x64Token x64Parser::tokenBranches6692[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6693,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6669[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6670 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6682 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6692 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6668[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6669 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6687(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 588;
}
x64Token x64Parser::tokenBranches6686[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6687,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6668(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6667[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6668, x64Parser::tokenBranches6668 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6686 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6660[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6661 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6667 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6699(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 590;
}
x64Token x64Parser::tokenBranches6698[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6699,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6711(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 592;
}
x64Token x64Parser::tokenBranches6710[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6711,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6697[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6698 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6710 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6696[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6697 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6695[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6696 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6705(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 591;
}
x64Token x64Parser::tokenBranches6704[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6705,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6717(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 593;
}
x64Token x64Parser::tokenBranches6716[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6717,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6727(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 595;
}
x64Token x64Parser::tokenBranches6726[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6727,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6703[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6704 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6716 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6726 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6702[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6703 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6721(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 594;
}
x64Token x64Parser::tokenBranches6720[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6721,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6702(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6701[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6702, x64Parser::tokenBranches6702 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6720 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6694[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6695 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6701 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6733(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 596;
}
x64Token x64Parser::tokenBranches6732[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6733,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6745(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 598;
}
x64Token x64Parser::tokenBranches6744[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6745,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6731[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6732 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6744 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6730[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6731 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6729[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6730 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6739(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 597;
}
x64Token x64Parser::tokenBranches6738[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6739,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6751(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 599;
}
x64Token x64Parser::tokenBranches6750[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6751,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6761(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 601;
}
x64Token x64Parser::tokenBranches6760[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6761,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6737[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6738 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6750 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6760 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6736[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6737 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6755(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 600;
}
x64Token x64Parser::tokenBranches6754[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6755,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6736(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6735[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6736, x64Parser::tokenBranches6736 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6754 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6728[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6729 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6735 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6767(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 602;
}
x64Token x64Parser::tokenBranches6766[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6767,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6765[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6766 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6764[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6765 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6763[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6764 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6773(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 603;
}
x64Token x64Parser::tokenBranches6772[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6773,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6783(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 603;
}
x64Token x64Parser::tokenBranches6782[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6783,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6771[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6772 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6782 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6770[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6771 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6777(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 602;
}
x64Token x64Parser::tokenBranches6776[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6777,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6770(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6769[] = {
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc6770, x64Parser::tokenBranches6770 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6776 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6762[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6763 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6769 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6659[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6660 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6694 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6728 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6762 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6789_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6789_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6789(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6789_11;
	operand.values[12] = tokenCoding6789_12;
}
Coding x64Parser::tokenCoding6790_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6790_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6790(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6790_11;
	operand.values[12] = tokenCoding6790_12;
}
Coding x64Parser::tokenCoding6791_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6791_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6791(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6791_11;
	operand.values[12] = tokenCoding6791_12;
}
Coding x64Parser::tokenCoding6792_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6792_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6792(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6792_11;
	operand.values[12] = tokenCoding6792_12;
}
x64Token x64Parser::tokenBranches6788[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6789,  },
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc6790,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc6791,  },
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc6792,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6802(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 604;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6801[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6802,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6800[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6801 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6799[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6800 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6806(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 605;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6805[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6806,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6804[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6805 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6803[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6804 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6810(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 606;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6809[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6810,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6808[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6809 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6807[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6808 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6814(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 607;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6813[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6814,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6812[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6813 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6811[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6812 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6818_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6818_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6818_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6818_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6818(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6818_9;
	operand.values[10] = tokenCoding6818_10;
	operand.values[11] = tokenCoding6818_11;
	operand.values[12] = tokenCoding6818_12;
}
x64Token x64Parser::tokenBranches6817[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6818,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6816[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6817 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6830_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6830_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6830_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6830_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6830(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6830_9;
	operand.values[10] = tokenCoding6830_10;
	operand.values[11] = tokenCoding6830_11;
	operand.values[12] = tokenCoding6830_12;
}
x64Token x64Parser::tokenBranches6829[] = {
	{x64Token::REGISTERCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc6830,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6828[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6829 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6815[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6816 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6828 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6822_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6822_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6822_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6822_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6822(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6822_9;
	operand.values[10] = tokenCoding6822_10;
	operand.values[11] = tokenCoding6822_11;
	operand.values[12] = tokenCoding6822_12;
}
x64Token x64Parser::tokenBranches6821[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6822,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6820[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6821 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6834_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6834_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6834_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6834_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6834(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6834_9;
	operand.values[10] = tokenCoding6834_10;
	operand.values[11] = tokenCoding6834_11;
	operand.values[12] = tokenCoding6834_12;
}
x64Token x64Parser::tokenBranches6833[] = {
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc6834,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6832[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6833 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6819[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6820 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6832 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6826_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6826_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6826_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6826_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6826(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6826_9;
	operand.values[10] = tokenCoding6826_10;
	operand.values[11] = tokenCoding6826_11;
	operand.values[12] = tokenCoding6826_12;
}
x64Token x64Parser::tokenBranches6825[] = {
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6826,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6824[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6825 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6838_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6838_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6838_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6838_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6838(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6838_9;
	operand.values[10] = tokenCoding6838_10;
	operand.values[11] = tokenCoding6838_11;
	operand.values[12] = tokenCoding6838_12;
}
x64Token x64Parser::tokenBranches6837[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc6838,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6836[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6837 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6823[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6824 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches6836 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6842_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6842_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6842_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6842_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6842(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6842_9;
	operand.values[10] = tokenCoding6842_10;
	operand.values[11] = tokenCoding6842_11;
	operand.values[12] = tokenCoding6842_12;
}
x64Token x64Parser::tokenBranches6841[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6842,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6840[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6841 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6839[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches6840 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6846_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6846_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6846_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6846_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6846(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6846_9;
	operand.values[10] = tokenCoding6846_10;
	operand.values[11] = tokenCoding6846_11;
	operand.values[12] = tokenCoding6846_12;
}
x64Token x64Parser::tokenBranches6845[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc6846,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6844[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6845 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6843[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6844 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6850_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6850_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6850_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6850_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6850(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6850_9;
	operand.values[10] = tokenCoding6850_10;
	operand.values[11] = tokenCoding6850_11;
	operand.values[12] = tokenCoding6850_12;
}
x64Token x64Parser::tokenBranches6849[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6850,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6848[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6849 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6847[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6848 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6854_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6854_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6854_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6854_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6854(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6854_9;
	operand.values[10] = tokenCoding6854_10;
	operand.values[11] = tokenCoding6854_11;
	operand.values[12] = tokenCoding6854_12;
}
x64Token x64Parser::tokenBranches6853[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6854,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6852[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6853 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6851[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6852 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6858_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6858_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6858_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6858_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6858(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6858_9;
	operand.values[10] = tokenCoding6858_10;
	operand.values[11] = tokenCoding6858_11;
	operand.values[12] = tokenCoding6858_12;
}
x64Token x64Parser::tokenBranches6857[] = {
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc6858,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6856[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6857 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6855[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6856 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6862_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6862_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6862_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6862_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6862(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6862_9;
	operand.values[10] = tokenCoding6862_10;
	operand.values[11] = tokenCoding6862_11;
	operand.values[12] = tokenCoding6862_12;
}
x64Token x64Parser::tokenBranches6861[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6862,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6860[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6861 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6859[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6860 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6866_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6866_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6866_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6866_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6866(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6866_9;
	operand.values[10] = tokenCoding6866_10;
	operand.values[11] = tokenCoding6866_11;
	operand.values[12] = tokenCoding6866_12;
}
x64Token x64Parser::tokenBranches6865[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6866,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6864[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6865 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6863[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6864 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6870_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6870_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6870_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6870_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6870(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6870_9;
	operand.values[10] = tokenCoding6870_10;
	operand.values[11] = tokenCoding6870_11;
	operand.values[12] = tokenCoding6870_12;
}
x64Token x64Parser::tokenBranches6869[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6870,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6868[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6869 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6867[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6868 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6873_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6873_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6873(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6873_11;
	operand.values[12] = tokenCoding6873_12;
}
x64Token x64Parser::tokenBranches6872[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6873,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6871[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6872 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6876_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6876_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6876(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6876_11;
	operand.values[12] = tokenCoding6876_12;
}
x64Token x64Parser::tokenBranches6875[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6876,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6874[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6875 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6879_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6879_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6879(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6879_11;
	operand.values[12] = tokenCoding6879_12;
}
x64Token x64Parser::tokenBranches6878[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6879,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6877[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6878 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6882_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6882_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6882(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6882_11;
	operand.values[12] = tokenCoding6882_12;
}
x64Token x64Parser::tokenBranches6881[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6882,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6880[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6881 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6885_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6885_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6885(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6885_11;
	operand.values[12] = tokenCoding6885_12;
}
x64Token x64Parser::tokenBranches6884[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6885,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6883[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6884 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6888_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6888_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6888(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6888_11;
	operand.values[12] = tokenCoding6888_12;
}
x64Token x64Parser::tokenBranches6887[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6888,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6886[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6887 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6891_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6891_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6891(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6891_11;
	operand.values[12] = tokenCoding6891_12;
}
x64Token x64Parser::tokenBranches6890[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6891,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6889[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6890 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6895_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6895_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6895(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6895_11;
	operand.values[12] = tokenCoding6895_12;
}
x64Token x64Parser::tokenBranches6894[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6895,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6893[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6894 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6911_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6911_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6911(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6911_11;
	operand.values[12] = tokenCoding6911_12;
}
x64Token x64Parser::tokenBranches6910[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6911,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6909[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6910 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6892[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6893 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6909 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6899_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6899_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6899(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6899_11;
	operand.values[12] = tokenCoding6899_12;
}
x64Token x64Parser::tokenBranches6898[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6899,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6897[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6898 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6915_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6915_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6915(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6915_11;
	operand.values[12] = tokenCoding6915_12;
}
x64Token x64Parser::tokenBranches6914[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6915,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6913[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6914 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6896[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6897 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6913 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6903_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6903_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6903(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6903_11;
	operand.values[12] = tokenCoding6903_12;
}
x64Token x64Parser::tokenBranches6902[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6903,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6901[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6902 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6919_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6919_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6919(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6919_11;
	operand.values[12] = tokenCoding6919_12;
}
x64Token x64Parser::tokenBranches6918[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6919,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6917[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6918 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6900[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6901 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches6917 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6907_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6907_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6907(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6907_11;
	operand.values[12] = tokenCoding6907_12;
}
x64Token x64Parser::tokenBranches6906[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6907,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6905[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6906 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6923_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6923_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6923(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding6923_11;
	operand.values[12] = tokenCoding6923_12;
}
x64Token x64Parser::tokenBranches6922[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6923,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6921[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6922 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6904[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches6905 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches6921 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6843(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6847(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6851(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6855(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6859(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6863(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6867(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6798[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches6799 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6803 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6807 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6811 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6815 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6819 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6823 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6839 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc6843, x64Parser::tokenBranches6843 },
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc6847, x64Parser::tokenBranches6847 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc6851, x64Parser::tokenBranches6851 },
	{x64Token::REGISTERCLASS, 2, 0, 0, NULL,&x64Parser::TokenFunc6855, x64Parser::tokenBranches6855 },
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc6859, x64Parser::tokenBranches6859 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc6863, x64Parser::tokenBranches6863 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc6867, x64Parser::tokenBranches6867 },
	{x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches6871 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches6874 },
	{x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches6877 },
	{x64Token::ADDRESSCLASS, 25, 0, 0, NULL, NULL, x64Parser::tokenBranches6880 },
	{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches6883 },
	{x64Token::ADDRESSCLASS, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches6886 },
	{x64Token::ADDRESSCLASS, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches6889 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6892 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6896 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6900 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6904 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6926_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6926_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6926(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6926_11;
	operand.values[12] = tokenCoding6926_12;
}
Coding x64Parser::tokenCoding6927_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6927_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6927(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6927_11;
	operand.values[12] = tokenCoding6927_12;
}
x64Token x64Parser::tokenBranches6925[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6926,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc6927,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6929_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6929_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6929(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6929_11;
	operand.values[12] = tokenCoding6929_12;
}
Coding x64Parser::tokenCoding6930_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6930_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6930(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding6930_11;
	operand.values[12] = tokenCoding6930_12;
}
x64Token x64Parser::tokenBranches6928[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6929,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc6930,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6938_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6938_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6938_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6938_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6938(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6938_9;
	operand.values[10] = tokenCoding6938_10;
	operand.values[11] = tokenCoding6938_11;
	operand.values[12] = tokenCoding6938_12;
}
x64Token x64Parser::tokenBranches6937[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6938,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6936[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6937 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6942_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6942_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6942_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6942_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6942(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6942_9;
	operand.values[10] = tokenCoding6942_10;
	operand.values[11] = tokenCoding6942_11;
	operand.values[12] = tokenCoding6942_12;
}
x64Token x64Parser::tokenBranches6941[] = {
	{x64Token::REGISTERCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc6942,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6940[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6941 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6935[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6936 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6940 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6946_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6946_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6946_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6946_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6946(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6946_9;
	operand.values[10] = tokenCoding6946_10;
	operand.values[11] = tokenCoding6946_11;
	operand.values[12] = tokenCoding6946_12;
}
x64Token x64Parser::tokenBranches6945[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6946,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6944[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6945 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6950_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6950_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6950_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6950_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6950(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6950_9;
	operand.values[10] = tokenCoding6950_10;
	operand.values[11] = tokenCoding6950_11;
	operand.values[12] = tokenCoding6950_12;
}
x64Token x64Parser::tokenBranches6949[] = {
	{x64Token::REGISTERCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc6950,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6948[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6949 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6943[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6944 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6948 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6954_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6954_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6954_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6954_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6954(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6954_9;
	operand.values[10] = tokenCoding6954_10;
	operand.values[11] = tokenCoding6954_11;
	operand.values[12] = tokenCoding6954_12;
}
x64Token x64Parser::tokenBranches6953[] = {
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6954,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6952[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6953 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6958_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6958_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6958_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6958_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6958(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6958_9;
	operand.values[10] = tokenCoding6958_10;
	operand.values[11] = tokenCoding6958_11;
	operand.values[12] = tokenCoding6958_12;
}
x64Token x64Parser::tokenBranches6957[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc6958,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6956[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6957 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6951[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6952 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches6956 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6962_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6962_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6962_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6962_12[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6962(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding6962_9;
	operand.values[10] = tokenCoding6962_10;
	operand.values[11] = tokenCoding6962_11;
	operand.values[12] = tokenCoding6962_12;
}
x64Token x64Parser::tokenBranches6961[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6962,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6960[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6961 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6959[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches6960 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6934[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6935 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6943 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6951 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6959 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6967_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6967_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6967_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6967_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6967(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6967_9;
	operand.values[10] = tokenCoding6967_10;
	operand.values[11] = tokenCoding6967_11;
	operand.values[12] = tokenCoding6967_12;
}
x64Token x64Parser::tokenBranches6966[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6967,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6965[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6966 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6964[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6965 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6971_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6971_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6971_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6971_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6971(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6971_9;
	operand.values[10] = tokenCoding6971_10;
	operand.values[11] = tokenCoding6971_11;
	operand.values[12] = tokenCoding6971_12;
}
x64Token x64Parser::tokenBranches6970[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6971,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6969[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6970 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6968[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6969 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6975_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6975_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6975_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6975_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6975(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6975_9;
	operand.values[10] = tokenCoding6975_10;
	operand.values[11] = tokenCoding6975_11;
	operand.values[12] = tokenCoding6975_12;
}
x64Token x64Parser::tokenBranches6974[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6975,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6973[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6974 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6972[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6973 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6979_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6979_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6979_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6979_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6979(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6979_9;
	operand.values[10] = tokenCoding6979_10;
	operand.values[11] = tokenCoding6979_11;
	operand.values[12] = tokenCoding6979_12;
}
x64Token x64Parser::tokenBranches6978[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6979,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6977[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6978 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6976[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6977 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6964(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6968(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6972(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6976(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6963[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc6964, x64Parser::tokenBranches6964 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc6968, x64Parser::tokenBranches6968 },
	{x64Token::REGISTERCLASS, 6, 0, 0, NULL,&x64Parser::TokenFunc6972, x64Parser::tokenBranches6972 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc6976, x64Parser::tokenBranches6976 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6983(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 608;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6982[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6983,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6981[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6982 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6986(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 609;
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6985[] = {
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6986,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6984[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6985 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7000_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7000_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7000_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7000_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7000(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7000_9;
	operand.values[10] = tokenCoding7000_10;
	operand.values[11] = tokenCoding7000_11;
	operand.values[12] = tokenCoding7000_12;
}
x64Token x64Parser::tokenBranches6999[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc7000,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6989(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 608;
}
x64Token x64Parser::tokenBranches6988[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc6989,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6999 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6987[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6988 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7004_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7004_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7004_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7004_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7004(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7004_9;
	operand.values[10] = tokenCoding7004_10;
	operand.values[11] = tokenCoding7004_11;
	operand.values[12] = tokenCoding7004_12;
}
x64Token x64Parser::tokenBranches7003[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc7004,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6992(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 609;
}
x64Token x64Parser::tokenBranches6991[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc6992,  },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches7003 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6990[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6991 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6996_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6996_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6996_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6996_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc6996(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding6996_9;
	operand.values[10] = tokenCoding6996_10;
	operand.values[11] = tokenCoding6996_11;
	operand.values[12] = tokenCoding6996_12;
}
x64Token x64Parser::tokenBranches6995[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc6996,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6994[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6995 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6993[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6994 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7008_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7008_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7008_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7008_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7008(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7008_9;
	operand.values[10] = tokenCoding7008_10;
	operand.values[11] = tokenCoding7008_11;
	operand.values[12] = tokenCoding7008_12;
}
x64Token x64Parser::tokenBranches7007[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc7008,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7006[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7007 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7005[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7006 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7012_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7012_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7012_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7012_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7012(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7012_9;
	operand.values[10] = tokenCoding7012_10;
	operand.values[11] = tokenCoding7012_11;
	operand.values[12] = tokenCoding7012_12;
}
x64Token x64Parser::tokenBranches7011[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc7012,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7010[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7011 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7009[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches7010 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7016_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7016_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7016_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7016_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7016(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7016_9;
	operand.values[10] = tokenCoding7016_10;
	operand.values[11] = tokenCoding7016_11;
	operand.values[12] = tokenCoding7016_12;
}
x64Token x64Parser::tokenBranches7015[] = {
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc7016,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7014[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7015 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7013[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7014 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6987(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6990(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc6993(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6980[] = {
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6981 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6984 },
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc6987, x64Parser::tokenBranches6987 },
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc6990, x64Parser::tokenBranches6990 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc6993, x64Parser::tokenBranches6993 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches7005 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches7009 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches7013 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7023(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 610;
}
x64Token x64Parser::tokenBranches7022[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7023,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7035(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 612;
}
x64Token x64Parser::tokenBranches7034[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7035,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7047(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 614;
}
x64Token x64Parser::tokenBranches7046[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7047,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7021[] = {
	{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches7022 },
	{x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches7034 },
	{x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches7046 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7020[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7021 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7029(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 611;
}
x64Token x64Parser::tokenBranches7028[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7029,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7041(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 613;
}
x64Token x64Parser::tokenBranches7040[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7041,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7053(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 615;
}
x64Token x64Parser::tokenBranches7052[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7053,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7027[] = {
	{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches7028 },
	{x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches7040 },
	{x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches7052 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7026[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7027 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7026(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7019[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches7020 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc7026, x64Parser::tokenBranches7026 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7018[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7019 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7054(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 616;
}
x64Token x64Parser::tokenBranches7017[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches7018 },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc7054,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7058_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7058_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7058(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding7058_11;
	operand.values[12] = tokenCoding7058_12;
}
x64Token x64Parser::tokenBranches7057[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc7058,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7060_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7060_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7060(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 378;
	operand.values[11] = tokenCoding7060_11;
	operand.values[12] = tokenCoding7060_12;
}
x64Token x64Parser::tokenBranches7059[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc7060,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7062_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7062_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7062(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding7062_11;
	operand.values[12] = tokenCoding7062_12;
}
x64Token x64Parser::tokenBranches7061[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc7062,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7064_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7064_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7064(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 378;
	operand.values[11] = tokenCoding7064_11;
	operand.values[12] = tokenCoding7064_12;
}
x64Token x64Parser::tokenBranches7063[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc7064,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7115_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7115_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7115_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7115_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7115_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7115(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7115_9;
	operand.values[10] = tokenCoding7115_10;
	operand.values[19] = tokenCoding7115_19;
	operand.values[11] = tokenCoding7115_11;
	operand.values[12] = tokenCoding7115_12;
}
Coding x64Parser::tokenCoding7118_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7118_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7118_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7118_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7118_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7118(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7118_9;
	operand.values[10] = tokenCoding7118_10;
	operand.values[19] = tokenCoding7118_19;
	operand.values[11] = tokenCoding7118_11;
	operand.values[12] = tokenCoding7118_12;
}
x64Token x64Parser::tokenBranches7114[] = {
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc7115,  },
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc7118,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7113[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7114 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7112[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7113 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7122_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7122_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7122_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7122_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7122_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7122(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7122_9;
	operand.values[10] = tokenCoding7122_10;
	operand.values[19] = tokenCoding7122_19;
	operand.values[11] = tokenCoding7122_11;
	operand.values[12] = tokenCoding7122_12;
}
x64Token x64Parser::tokenBranches7121[] = {
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc7122,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7120[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7121 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7119[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7120 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7139_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7139_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7139_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7139_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7139_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7139(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7139_9;
	operand.values[10] = tokenCoding7139_10;
	operand.values[19] = tokenCoding7139_19;
	operand.values[11] = tokenCoding7139_11;
	operand.values[12] = tokenCoding7139_12;
}
x64Token x64Parser::tokenBranches7138[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc7139,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7137[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7138 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7142_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7142_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7142_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7142_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7142_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7142(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7142_9;
	operand.values[10] = tokenCoding7142_10;
	operand.values[19] = tokenCoding7142_19;
	operand.values[11] = tokenCoding7142_11;
	operand.values[12] = tokenCoding7142_12;
}
x64Token x64Parser::tokenBranches7141[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc7142,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7140[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7141 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7145_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7145_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7145_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7145_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7145_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7145(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7145_9;
	operand.values[10] = tokenCoding7145_10;
	operand.values[19] = tokenCoding7145_19;
	operand.values[11] = tokenCoding7145_11;
	operand.values[12] = tokenCoding7145_12;
}
x64Token x64Parser::tokenBranches7144[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc7145,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7143[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7144 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7148_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7148_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7148_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7148_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7148_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7148(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7148_9;
	operand.values[10] = tokenCoding7148_10;
	operand.values[19] = tokenCoding7148_19;
	operand.values[11] = tokenCoding7148_11;
	operand.values[12] = tokenCoding7148_12;
}
Coding x64Parser::tokenCoding7151_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7151_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7151_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7151_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7151_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7151(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7151_9;
	operand.values[10] = tokenCoding7151_10;
	operand.values[19] = tokenCoding7151_19;
	operand.values[11] = tokenCoding7151_11;
	operand.values[12] = tokenCoding7151_12;
}
x64Token x64Parser::tokenBranches7147[] = {
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc7148,  },
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc7151,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7146[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7147 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7154_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7154_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7154_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7154_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7154_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7154(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7154_9;
	operand.values[10] = tokenCoding7154_10;
	operand.values[19] = tokenCoding7154_19;
	operand.values[11] = tokenCoding7154_11;
	operand.values[12] = tokenCoding7154_12;
}
x64Token x64Parser::tokenBranches7153[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc7154,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7152[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7153 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7137(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7140(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7143(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7136[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc7137, x64Parser::tokenBranches7137 },
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7140, x64Parser::tokenBranches7140 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7143, x64Parser::tokenBranches7143 },
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7146 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7152 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7158_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7158_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7158_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7158_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7158_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7158(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7158_9;
	operand.values[10] = tokenCoding7158_10;
	operand.values[19] = tokenCoding7158_19;
	operand.values[11] = tokenCoding7158_11;
	operand.values[12] = tokenCoding7158_12;
}
x64Token x64Parser::tokenBranches7157[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc7158,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7156[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7157 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7161_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7161_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7161_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7161_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7161_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7161(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7161_9;
	operand.values[10] = tokenCoding7161_10;
	operand.values[19] = tokenCoding7161_19;
	operand.values[11] = tokenCoding7161_11;
	operand.values[12] = tokenCoding7161_12;
}
x64Token x64Parser::tokenBranches7160[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc7161,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7159[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7160 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7164_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7164_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7164_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7164_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7164_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7164(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7164_9;
	operand.values[10] = tokenCoding7164_10;
	operand.values[19] = tokenCoding7164_19;
	operand.values[11] = tokenCoding7164_11;
	operand.values[12] = tokenCoding7164_12;
}
x64Token x64Parser::tokenBranches7163[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc7164,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7162[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7163 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7167_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7167_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7167_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7167_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7167_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7167(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7167_9;
	operand.values[10] = tokenCoding7167_10;
	operand.values[19] = tokenCoding7167_19;
	operand.values[11] = tokenCoding7167_11;
	operand.values[12] = tokenCoding7167_12;
}
Coding x64Parser::tokenCoding7170_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7170_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7170_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7170_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7170_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7170(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7170_9;
	operand.values[10] = tokenCoding7170_10;
	operand.values[19] = tokenCoding7170_19;
	operand.values[11] = tokenCoding7170_11;
	operand.values[12] = tokenCoding7170_12;
}
x64Token x64Parser::tokenBranches7166[] = {
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc7167,  },
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc7170,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7165[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7166 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7173_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7173_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7173_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7173_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7173_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7173(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7173_9;
	operand.values[10] = tokenCoding7173_10;
	operand.values[19] = tokenCoding7173_19;
	operand.values[11] = tokenCoding7173_11;
	operand.values[12] = tokenCoding7173_12;
}
x64Token x64Parser::tokenBranches7172[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc7173,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7171[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7172 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7156(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7159(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7162(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7155[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc7156, x64Parser::tokenBranches7156 },
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7159, x64Parser::tokenBranches7159 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7162, x64Parser::tokenBranches7162 },
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches7165 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches7171 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7181_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7181_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7181_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7181_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7181_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7181(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[9] = tokenCoding7181_9;
	operand.values[10] = tokenCoding7181_10;
	operand.values[19] = tokenCoding7181_19;
	operand.values[11] = tokenCoding7181_11;
	operand.values[12] = tokenCoding7181_12;
}
x64Token x64Parser::tokenBranches7180[] = {
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc7181,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7179[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7180 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7184_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7184_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7184_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7184_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7184_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7184(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[9] = tokenCoding7184_9;
	operand.values[10] = tokenCoding7184_10;
	operand.values[19] = tokenCoding7184_19;
	operand.values[11] = tokenCoding7184_11;
	operand.values[12] = tokenCoding7184_12;
}
x64Token x64Parser::tokenBranches7183[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc7184,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7182[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7183 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7179(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7182(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7178[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7179, x64Parser::tokenBranches7179 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7182, x64Parser::tokenBranches7182 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7190_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7190_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7190_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7190_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7190_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7190(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[9] = tokenCoding7190_9;
	operand.values[10] = tokenCoding7190_10;
	operand.values[19] = tokenCoding7190_19;
	operand.values[11] = tokenCoding7190_11;
	operand.values[12] = tokenCoding7190_12;
}
x64Token x64Parser::tokenBranches7189[] = {
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc7190,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7188[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7189 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7193_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7193_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7193_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7193_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7193_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7193(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[9] = tokenCoding7193_9;
	operand.values[10] = tokenCoding7193_10;
	operand.values[19] = tokenCoding7193_19;
	operand.values[11] = tokenCoding7193_11;
	operand.values[12] = tokenCoding7193_12;
}
x64Token x64Parser::tokenBranches7192[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc7193,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7191[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7192 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7188(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7191(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7187[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7188, x64Parser::tokenBranches7188 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7191, x64Parser::tokenBranches7191 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7201_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7201_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7201_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7201_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7201_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7201(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7201_9;
	operand.values[10] = tokenCoding7201_10;
	operand.values[19] = tokenCoding7201_19;
	operand.values[11] = tokenCoding7201_11;
	operand.values[12] = tokenCoding7201_12;
}
x64Token x64Parser::tokenBranches7200[] = {
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc7201,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7199[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7200 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7204_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7204_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7204_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7204_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7204_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7204(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7204_9;
	operand.values[10] = tokenCoding7204_10;
	operand.values[19] = tokenCoding7204_19;
	operand.values[11] = tokenCoding7204_11;
	operand.values[12] = tokenCoding7204_12;
}
x64Token x64Parser::tokenBranches7203[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc7204,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7202[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7203 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7198[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7199 },
	{x64Token::ADDRESSCLASS, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7202 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7208_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7208_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7208_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7208(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7208_9;
	operand.values[10] = tokenCoding7208_10;
	operand.values[11] = tokenCoding7208_11;
}
Coding x64Parser::tokenCoding7211_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7211_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7211_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7211(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7211_9;
	operand.values[10] = tokenCoding7211_10;
	operand.values[11] = tokenCoding7211_11;
}
Coding x64Parser::tokenCoding7214_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7214_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7214_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7214(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7214_9;
	operand.values[10] = tokenCoding7214_10;
	operand.values[11] = tokenCoding7214_11;
}
x64Token x64Parser::tokenBranches7207[] = {
	{x64Token::REGISTERCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc7208,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc7211,  },
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc7214,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7206[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7207 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7205[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7206 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7218_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7218_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7218_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7218_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7218_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7218(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7218_9;
	operand.values[10] = tokenCoding7218_10;
	operand.values[19] = tokenCoding7218_19;
	operand.values[11] = tokenCoding7218_11;
	operand.values[12] = tokenCoding7218_12;
}
x64Token x64Parser::tokenBranches7217[] = {
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc7218,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7216[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7217 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7221_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7221_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7221_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7221_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7221_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7221(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7221_9;
	operand.values[10] = tokenCoding7221_10;
	operand.values[19] = tokenCoding7221_19;
	operand.values[11] = tokenCoding7221_11;
	operand.values[12] = tokenCoding7221_12;
}
x64Token x64Parser::tokenBranches7220[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc7221,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7219[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7220 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7215[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7216 },
	{x64Token::ADDRESSCLASS, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7219 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7225_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7225_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7225_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7225_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7225_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7225(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7225_9;
	operand.values[10] = tokenCoding7225_10;
	operand.values[19] = tokenCoding7225_19;
	operand.values[11] = tokenCoding7225_11;
	operand.values[12] = tokenCoding7225_12;
}
x64Token x64Parser::tokenBranches7224[] = {
	{x64Token::REGISTERCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc7225,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7223[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7224 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7228_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7228_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7228_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7228_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7228_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7228(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7228_9;
	operand.values[10] = tokenCoding7228_10;
	operand.values[19] = tokenCoding7228_19;
	operand.values[11] = tokenCoding7228_11;
	operand.values[12] = tokenCoding7228_12;
}
x64Token x64Parser::tokenBranches7227[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc7228,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7226[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7227 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7222[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7223 },
	{x64Token::ADDRESSCLASS, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7226 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7232_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7232_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7232_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7232_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7232_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7232(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7232_9;
	operand.values[10] = tokenCoding7232_10;
	operand.values[19] = tokenCoding7232_19;
	operand.values[11] = tokenCoding7232_11;
	operand.values[12] = tokenCoding7232_12;
}
x64Token x64Parser::tokenBranches7231[] = {
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc7232,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7230[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7231 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7229[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7230 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7236_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7236_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7236_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7236_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7236_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7236(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[9] = tokenCoding7236_9;
	operand.values[10] = tokenCoding7236_10;
	operand.values[19] = tokenCoding7236_19;
	operand.values[11] = tokenCoding7236_11;
	operand.values[12] = tokenCoding7236_12;
}
x64Token x64Parser::tokenBranches7235[] = {
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc7236,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7234[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7235 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7234(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7233[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7234, x64Parser::tokenBranches7234 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7264_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7264_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7264_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7264_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7264(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7264_9;
	operand.values[10] = tokenCoding7264_10;
	operand.values[19] = tokenCoding7264_19;
	operand.values[11] = tokenCoding7264_11;
}
x64Token x64Parser::tokenBranches7263[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7264,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7262[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7263 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7261[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7262 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7260[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7261 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7269_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7269_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7269_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7269_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7269(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7269_9;
	operand.values[10] = tokenCoding7269_10;
	operand.values[19] = tokenCoding7269_19;
	operand.values[11] = tokenCoding7269_11;
}
x64Token x64Parser::tokenBranches7268[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7269,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7267[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7268 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7266[] = {
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches7267 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7265[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7266 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7274_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7274_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7274_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7274_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7274(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7274_9;
	operand.values[10] = tokenCoding7274_10;
	operand.values[19] = tokenCoding7274_19;
	operand.values[11] = tokenCoding7274_11;
}
x64Token x64Parser::tokenBranches7273[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7274,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7272[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7273 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7271[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7272 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7270[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7271 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7260(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7265(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7270(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7259[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7260, x64Parser::tokenBranches7260 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7265, x64Parser::tokenBranches7265 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc7270, x64Parser::tokenBranches7270 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7295_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7295_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7295_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7295_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7295(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7295_9;
	operand.values[10] = tokenCoding7295_10;
	operand.values[19] = tokenCoding7295_19;
	operand.values[11] = tokenCoding7295_11;
}
x64Token x64Parser::tokenBranches7294[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7295,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7293[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7294 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7293(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7292[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7293, x64Parser::tokenBranches7293 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7291[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7292 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7300_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7300_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7300_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7300_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7300(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7300_9;
	operand.values[10] = tokenCoding7300_10;
	operand.values[19] = tokenCoding7300_19;
	operand.values[11] = tokenCoding7300_11;
}
x64Token x64Parser::tokenBranches7299[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7300,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7298[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7299 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7298(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7297[] = {
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7298, x64Parser::tokenBranches7298 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7296[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7297 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7290[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7291 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7296 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7306_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7306_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7306_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7306_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7306(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7306_9;
	operand.values[10] = tokenCoding7306_10;
	operand.values[19] = tokenCoding7306_19;
	operand.values[11] = tokenCoding7306_11;
}
x64Token x64Parser::tokenBranches7305[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7306,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7304[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7305 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7304(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7303[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7304, x64Parser::tokenBranches7304 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7302[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7303 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7311_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7311_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7311_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7311_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7311(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7311_9;
	operand.values[10] = tokenCoding7311_10;
	operand.values[19] = tokenCoding7311_19;
	operand.values[11] = tokenCoding7311_11;
}
x64Token x64Parser::tokenBranches7310[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7311,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7309[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7310 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7309(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7308[] = {
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7309, x64Parser::tokenBranches7309 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7307[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7308 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7301[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7302 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7307 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7317_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7317_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7317_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7317_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7317(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7317_9;
	operand.values[10] = tokenCoding7317_10;
	operand.values[19] = tokenCoding7317_19;
	operand.values[11] = tokenCoding7317_11;
}
x64Token x64Parser::tokenBranches7316[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7317,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7315[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7316 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7315(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7314[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7315, x64Parser::tokenBranches7315 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7313[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7314 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7322_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7322_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7322_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7322_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7322(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7322_9;
	operand.values[10] = tokenCoding7322_10;
	operand.values[19] = tokenCoding7322_19;
	operand.values[11] = tokenCoding7322_11;
}
x64Token x64Parser::tokenBranches7321[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7322,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7320[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7321 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7320(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7319[] = {
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7320, x64Parser::tokenBranches7320 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7318[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7319 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7312[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches7313 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches7318 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7328_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7328_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7328_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7328_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7328(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7328_9;
	operand.values[10] = tokenCoding7328_10;
	operand.values[19] = tokenCoding7328_19;
	operand.values[11] = tokenCoding7328_11;
}
x64Token x64Parser::tokenBranches7327[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7328,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7326[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7327 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7338_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7338_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7338_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7338_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7338(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7338_9;
	operand.values[10] = tokenCoding7338_10;
	operand.values[19] = tokenCoding7338_19;
	operand.values[11] = tokenCoding7338_11;
}
x64Token x64Parser::tokenBranches7337[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7338,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7336[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7337 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7325[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7326 },
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7336 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7324[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7325 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7333_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7333_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7333_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7333_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7333(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7333_9;
	operand.values[10] = tokenCoding7333_10;
	operand.values[19] = tokenCoding7333_19;
	operand.values[11] = tokenCoding7333_11;
}
x64Token x64Parser::tokenBranches7332[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7333,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7331[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7332 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7343_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7343_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7343_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7343_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7343(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7343_9;
	operand.values[10] = tokenCoding7343_10;
	operand.values[19] = tokenCoding7343_19;
	operand.values[11] = tokenCoding7343_11;
}
x64Token x64Parser::tokenBranches7342[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7343,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7341[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7342 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7330[] = {
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches7331 },
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7341 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7329[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7330 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7348_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7348_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7348_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7348_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7348(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7348_9;
	operand.values[10] = tokenCoding7348_10;
	operand.values[19] = tokenCoding7348_19;
	operand.values[11] = tokenCoding7348_11;
}
x64Token x64Parser::tokenBranches7347[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7348,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7346[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7347 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7345[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7346 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7344[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7345 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7353_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7353_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7353_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7353_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7353(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7353_9;
	operand.values[10] = tokenCoding7353_10;
	operand.values[19] = tokenCoding7353_19;
	operand.values[11] = tokenCoding7353_11;
}
x64Token x64Parser::tokenBranches7352[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7353,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7351[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7352 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7358_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7358_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7358_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7358_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7358(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7358_9;
	operand.values[10] = tokenCoding7358_10;
	operand.values[19] = tokenCoding7358_19;
	operand.values[11] = tokenCoding7358_11;
}
x64Token x64Parser::tokenBranches7357[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7358,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7356[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7357 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7350[] = {
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches7351 },
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7356 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7349[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7350 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7324(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7329(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7344(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7349(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7323[] = {
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc7324, x64Parser::tokenBranches7324 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc7329, x64Parser::tokenBranches7329 },
	{x64Token::REGISTERCLASS, 20, 0, 0, NULL,&x64Parser::TokenFunc7344, x64Parser::tokenBranches7344 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc7349, x64Parser::tokenBranches7349 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7364_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7364_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7364_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7364_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7364(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7364_9;
	operand.values[10] = tokenCoding7364_10;
	operand.values[19] = tokenCoding7364_19;
	operand.values[11] = tokenCoding7364_11;
}
x64Token x64Parser::tokenBranches7363[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7364,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7362[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7363 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7361[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7362 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7360[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7361 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7369_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7369_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7369_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7369_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7369(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7369_9;
	operand.values[10] = tokenCoding7369_10;
	operand.values[19] = tokenCoding7369_19;
	operand.values[11] = tokenCoding7369_11;
}
x64Token x64Parser::tokenBranches7368[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7369,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7367[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7368 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7366[] = {
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7367 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7365[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7366 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7360(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7365(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7359[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7360, x64Parser::tokenBranches7360 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7365, x64Parser::tokenBranches7365 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7375_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7375_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7375_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7375_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7375(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7375_9;
	operand.values[10] = tokenCoding7375_10;
	operand.values[19] = tokenCoding7375_19;
	operand.values[11] = tokenCoding7375_11;
}
x64Token x64Parser::tokenBranches7374[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7375,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7373[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7374 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7372[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7373 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7371[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7372 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7380_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7380_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7380_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7380_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7380(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7380_9;
	operand.values[10] = tokenCoding7380_10;
	operand.values[19] = tokenCoding7380_19;
	operand.values[11] = tokenCoding7380_11;
}
x64Token x64Parser::tokenBranches7379[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7380,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7378[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7379 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7377[] = {
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7378 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7376[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7377 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7371(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7376(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7370[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7371, x64Parser::tokenBranches7371 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7376, x64Parser::tokenBranches7376 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7386_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7386_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7386_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7386_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7386(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7386_9;
	operand.values[10] = tokenCoding7386_10;
	operand.values[19] = tokenCoding7386_19;
	operand.values[11] = tokenCoding7386_11;
}
x64Token x64Parser::tokenBranches7385[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7386,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7384[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7385 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7383[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches7384 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7382[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7383 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7391_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7391_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7391_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7391_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7391(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7391_9;
	operand.values[10] = tokenCoding7391_10;
	operand.values[19] = tokenCoding7391_19;
	operand.values[11] = tokenCoding7391_11;
}
x64Token x64Parser::tokenBranches7390[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7391,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7389[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7390 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7388[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches7389 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7387[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7388 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7382(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7387(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7381[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7382, x64Parser::tokenBranches7382 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7387, x64Parser::tokenBranches7387 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7397_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7397_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7397_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7397_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7397(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7397_9;
	operand.values[10] = tokenCoding7397_10;
	operand.values[19] = tokenCoding7397_19;
	operand.values[11] = tokenCoding7397_11;
}
x64Token x64Parser::tokenBranches7396[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7397,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7395[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7396 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7394[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7395 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7393[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7394 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7402_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7402_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7402_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7402_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7402(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7402_9;
	operand.values[10] = tokenCoding7402_10;
	operand.values[19] = tokenCoding7402_19;
	operand.values[11] = tokenCoding7402_11;
}
x64Token x64Parser::tokenBranches7401[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7402,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7400[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7401 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7399[] = {
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7400 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7398[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7399 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7407_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7407_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7407_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7407_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7407(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7407_9;
	operand.values[10] = tokenCoding7407_10;
	operand.values[19] = tokenCoding7407_19;
	operand.values[11] = tokenCoding7407_11;
}
x64Token x64Parser::tokenBranches7406[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7407,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7405[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7406 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7412_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7412_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7412_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7412_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7412(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7412_9;
	operand.values[10] = tokenCoding7412_10;
	operand.values[19] = tokenCoding7412_19;
	operand.values[11] = tokenCoding7412_11;
}
x64Token x64Parser::tokenBranches7411[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7412,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7410[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7411 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7404[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7405 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7410 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7403[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7404 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7393(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7398(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7403(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7392[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7393, x64Parser::tokenBranches7393 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7398, x64Parser::tokenBranches7398 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc7403, x64Parser::tokenBranches7403 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7421_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7421_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7421_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7421_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7421(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7421_9;
	operand.values[10] = tokenCoding7421_10;
	operand.values[19] = tokenCoding7421_19;
	operand.values[11] = tokenCoding7421_11;
}
Coding x64Parser::tokenCoding7427_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7427_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7427_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7427_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7427(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7427_9;
	operand.values[10] = tokenCoding7427_10;
	operand.values[19] = tokenCoding7427_19;
	operand.values[11] = tokenCoding7427_11;
}
x64Token x64Parser::tokenBranches7420[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc7421,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc7427,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7419[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7420 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7424_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7424_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7424_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7424_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7424(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7424_9;
	operand.values[10] = tokenCoding7424_10;
	operand.values[19] = tokenCoding7424_19;
	operand.values[11] = tokenCoding7424_11;
}
Coding x64Parser::tokenCoding7433_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7433_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7433_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7433_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7433(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7433_9;
	operand.values[10] = tokenCoding7433_10;
	operand.values[19] = tokenCoding7433_19;
	operand.values[11] = tokenCoding7433_11;
}
x64Token x64Parser::tokenBranches7423[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc7424,  },
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc7433,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7422[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7423 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7430_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7430_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7430_19[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7430_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7430(x64Operand &operand, int tokenPos)
{
	operand.values[9] = tokenCoding7430_9;
	operand.values[10] = tokenCoding7430_10;
	operand.values[19] = tokenCoding7430_19;
	operand.values[11] = tokenCoding7430_11;
}
x64Token x64Parser::tokenBranches7429[] = {
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc7430,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7428[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7429 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7419(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7422(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7428(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7418[] = {
	{x64Token::REGISTERCLASS, 9, 0, 0, NULL,&x64Parser::TokenFunc7419, x64Parser::tokenBranches7419 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc7422, x64Parser::tokenBranches7422 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc7428, x64Parser::tokenBranches7428 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7447_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7447_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7447_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7447(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7447_9;
	operand.values[10] = tokenCoding7447_10;
	operand.values[11] = tokenCoding7447_11;
}
x64Token x64Parser::tokenBranches7446[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7447,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7445[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7446 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7444[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7445 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7443[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7444 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7443(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7442[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc7443, x64Parser::tokenBranches7443 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7452_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7452(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding7452_11;
}
x64Token x64Parser::tokenBranches7451[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7452,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7450[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7451 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7455_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7455(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding7455_11;
}
x64Token x64Parser::tokenBranches7454[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7455,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7453[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7454 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7450(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7453(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7449[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7450, x64Parser::tokenBranches7450 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7453, x64Parser::tokenBranches7453 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7464_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7464(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding7464_11;
}
x64Token x64Parser::tokenBranches7463[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7464,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7462[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7463 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7467_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7467(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding7467_11;
}
x64Token x64Parser::tokenBranches7466[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7467,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7465[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7466 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7462(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7465(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7461[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7462, x64Parser::tokenBranches7462 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7465, x64Parser::tokenBranches7465 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7497_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7497_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7497_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7497(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7497_9;
	operand.values[10] = tokenCoding7497_10;
	operand.values[11] = tokenCoding7497_11;
}
x64Token x64Parser::tokenBranches7496[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7497,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7495[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7496 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7494[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7495 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7493[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7494 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7502_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7502_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7502_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7502(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7502_9;
	operand.values[10] = tokenCoding7502_10;
	operand.values[11] = tokenCoding7502_11;
}
x64Token x64Parser::tokenBranches7501[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7502,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7500[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7501 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7499[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7500 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7498[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7499 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7493(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7498(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7492[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7493, x64Parser::tokenBranches7493 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7498, x64Parser::tokenBranches7498 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7508_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7508_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7508_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7508(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7508_9;
	operand.values[10] = tokenCoding7508_10;
	operand.values[11] = tokenCoding7508_11;
}
x64Token x64Parser::tokenBranches7507[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7508,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7506[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7507 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7505[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7506 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7504[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7505 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7513_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7513_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7513_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 13, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc7513(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[9] = tokenCoding7513_9;
	operand.values[10] = tokenCoding7513_10;
	operand.values[11] = tokenCoding7513_11;
}
x64Token x64Parser::tokenBranches7512[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7513,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7511[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7512 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7510[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7511 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7509[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7510 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7504(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
void x64Parser::TokenFunc7509(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7503[] = {
	{x64Token::REGISTERCLASS, 27, 0, 0, NULL,&x64Parser::TokenFunc7504, x64Parser::tokenBranches7504 },
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc7509, x64Parser::tokenBranches7509 },
	{x64Token::EOT }
};
bool x64Parser::Opcode0(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3391, operand);
	return rv;
}
bool x64Parser::Opcode1(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3393, operand);
	return rv;
}
bool x64Parser::Opcode2(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3395, operand);
	return rv;
}
bool x64Parser::Opcode3(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3424, operand);
	return rv;
}
bool x64Parser::Opcode4(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3453, operand);
	return rv;
}
bool x64Parser::Opcode5(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3648, operand);
	return rv;
}
bool x64Parser::Opcode6(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3689, operand);
	return rv;
}
bool x64Parser::Opcode7(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3711, operand);
	return rv;
}
bool x64Parser::Opcode8(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3733, operand);
	return rv;
}
bool x64Parser::Opcode9(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3749, operand);
	return rv;
}
bool x64Parser::Opcode10(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3755, operand);
	return rv;
}
bool x64Parser::Opcode11(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3764, operand);
	return rv;
}
bool x64Parser::Opcode12(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3767, operand);
	return rv;
}
bool x64Parser::Opcode13(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3776, operand);
	return rv;
}
bool x64Parser::Opcode14(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3797, operand);
	return rv;
}
bool x64Parser::Opcode15(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3802, operand);
	return rv;
}
bool x64Parser::Opcode16(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3866, operand);
	return rv;
}
bool x64Parser::Opcode17(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4035, operand);
	return rv;
}
bool x64Parser::Opcode18(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4096, operand);
	return rv;
}
bool x64Parser::Opcode19(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4098, operand);
	return rv;
}
bool x64Parser::Opcode20(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4105, operand);
	return rv;
}
bool x64Parser::Opcode21(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4118, operand);
	return rv;
}
bool x64Parser::Opcode22(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4131, operand);
	return rv;
}
bool x64Parser::Opcode23(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4144, operand);
	return rv;
}
bool x64Parser::Opcode24(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4151, operand);
	return rv;
}
bool x64Parser::Opcode25(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4158, operand);
	return rv;
}
bool x64Parser::Opcode26(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4168, operand);
	return rv;
}
bool x64Parser::Opcode27(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4185, operand);
	return rv;
}
bool x64Parser::Opcode28(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4195, operand);
	return rv;
}
bool x64Parser::Opcode29(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4206, operand);
	return rv;
}
bool x64Parser::Opcode30(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4225, operand);
	return rv;
}
bool x64Parser::Opcode31(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4236, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings32_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 55, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode32(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings32_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings33_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 213, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode33(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings33_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings34_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode34(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings34_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings35_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 63, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode35(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings35_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings36_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings36_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings36_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 16, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode36(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings36_11;
	operand.values[29] = OpcodeCodings36_29;
	operand.values[30] = OpcodeCodings36_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings37_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings37_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings37_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode37(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings37_11;
	operand.values[29] = OpcodeCodings37_29;
	operand.values[30] = OpcodeCodings37_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings38_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings38_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings38_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 32, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode38(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings38_11;
	operand.values[29] = OpcodeCodings38_29;
	operand.values[30] = OpcodeCodings38_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode39(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4249, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings40_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode40(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings40_29;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings41_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 188, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode41(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings41_29;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings42_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 189, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode42(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings42_29;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
bool x64Parser::Opcode43(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4259, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings44_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings44_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings44_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode44(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings44_11;
	operand.values[29] = OpcodeCodings44_29;
	operand.values[30] = OpcodeCodings44_30;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings45_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings45_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings45_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 187, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode45(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings45_11;
	operand.values[29] = OpcodeCodings45_29;
	operand.values[30] = OpcodeCodings45_30;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings46_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings46_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings46_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 179, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode46(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings46_11;
	operand.values[29] = OpcodeCodings46_29;
	operand.values[30] = OpcodeCodings46_30;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings47_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings47_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings47_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode47(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings47_11;
	operand.values[29] = OpcodeCodings47_29;
	operand.values[30] = OpcodeCodings47_30;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
bool x64Parser::Opcode48(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4267, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings49_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode49(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings49_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings50_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode50(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings50_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings51_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode51(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings51_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings52_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode52(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings52_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings53_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode53(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings53_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings54_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode54(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings54_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings55_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode55(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings55_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings56_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 245, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode56(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings56_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings57_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode57(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings57_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings58_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode58(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings58_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings59_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode59(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings59_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings60_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode60(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings60_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings61_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode61(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings61_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings62_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode62(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings62_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings63_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode63(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings63_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings64_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode64(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings64_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings65_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode65(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings65_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings66_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode66(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings66_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings67_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode67(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings67_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings68_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode68(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings68_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings69_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode69(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings69_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings70_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode70(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings70_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings71_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode71(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings71_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings72_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode72(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings72_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings73_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode73(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings73_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings74_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode74(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings74_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings75_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode75(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings75_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings76_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode76(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings76_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings77_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode77(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings77_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings78_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode78(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings78_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings79_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode79(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings79_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings80_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode80(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings80_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings81_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode81(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings81_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings82_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode82(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings82_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings83_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode83(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings83_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings84_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode84(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings84_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings85_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode85(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings85_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings86_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode86(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings86_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings87_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings87_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 60, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings87_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 56, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode87(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings87_11;
	operand.values[29] = OpcodeCodings87_29;
	operand.values[30] = OpcodeCodings87_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode88(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4335, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings89_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode89(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings89_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings90_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode90(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings90_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings91_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode91(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings91_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings92_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode92(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings92_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings93_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 176, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode93(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings93_12;
	bool rv = ParseOperands(tokenBranches4604, operand);
	return rv;
}
bool x64Parser::Opcode94(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4633, operand);
	return rv;
}
bool x64Parser::Opcode95(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4635, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings96_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode96(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings96_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings97_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode97(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings97_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings98_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode98(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings98_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings99_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode99(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings99_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings100_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 39, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode100(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings100_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings101_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 47, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode101(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings101_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings102_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings102_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode102(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings102_11;
	operand.values[12] = OpcodeCodings102_12;
	bool rv;
	{
		rv = Opcode6(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings103_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode103(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings103_11;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
bool x64Parser::Opcode104(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4645, operand);
	return rv;
}
bool x64Parser::Opcode105(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4651, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings106_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode106(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings106_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings107_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode107(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings107_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings108_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings108_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings108_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode108(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings108_11;
	operand.values[32] = OpcodeCodings108_32;
	operand.values[29] = OpcodeCodings108_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings109_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings109_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode109(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings109_11;
	operand.values[12] = OpcodeCodings109_12;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings110_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings110_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode110(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings110_11;
	operand.values[12] = OpcodeCodings110_12;
	bool rv;
	{
		rv = Opcode11(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings111_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings111_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode111(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings111_11;
	operand.values[12] = OpcodeCodings111_12;
	bool rv;
	{
		rv = Opcode11(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings112_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode112(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings112_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings113_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode113(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings113_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings114_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode114(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings114_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings115_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings115_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode115(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings115_11;
	operand.values[29] = OpcodeCodings115_29;
	bool rv = ParseOperands(tokenBranches4664, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings116_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings116_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode116(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings116_11;
	operand.values[29] = OpcodeCodings116_29;
	bool rv = ParseOperands(tokenBranches4668, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings117_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings117_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode117(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings117_11;
	operand.values[29] = OpcodeCodings117_29;
	bool rv = ParseOperands(tokenBranches4672, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings118_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings118_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode118(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings118_11;
	operand.values[29] = OpcodeCodings118_29;
	bool rv = ParseOperands(tokenBranches4676, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings119_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings119_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode119(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings119_11;
	operand.values[29] = OpcodeCodings119_29;
	bool rv = ParseOperands(tokenBranches4680, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings120_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings120_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode120(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings120_11;
	operand.values[29] = OpcodeCodings120_29;
	bool rv = ParseOperands(tokenBranches4684, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings121_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings121_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode121(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings121_11;
	operand.values[29] = OpcodeCodings121_29;
	bool rv = ParseOperands(tokenBranches4688, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings122_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings122_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode122(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings122_11;
	operand.values[29] = OpcodeCodings122_29;
	bool rv = ParseOperands(tokenBranches4692, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings123_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings123_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode123(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings123_11;
	operand.values[29] = OpcodeCodings123_29;
	bool rv = ParseOperands(tokenBranches4696, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings124_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings124_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode124(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings124_11;
	operand.values[29] = OpcodeCodings124_29;
	bool rv = ParseOperands(tokenBranches4709, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings125_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings125_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode125(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings125_11;
	operand.values[29] = OpcodeCodings125_29;
	bool rv = ParseOperands(tokenBranches4713, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings126_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings126_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode126(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings126_11;
	operand.values[29] = OpcodeCodings126_29;
	bool rv = ParseOperands(tokenBranches4717, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings127_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings127_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode127(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings127_11;
	operand.values[29] = OpcodeCodings127_29;
	bool rv = ParseOperands(tokenBranches4721, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings128_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings128_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode128(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings128_11;
	operand.values[29] = OpcodeCodings128_29;
	bool rv = ParseOperands(tokenBranches4731, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings129_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings129_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode129(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings129_11;
	operand.values[29] = OpcodeCodings129_29;
	bool rv = ParseOperands(tokenBranches4735, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings130_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode130(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings130_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings131_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode131(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings131_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings132_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode132(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings132_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings133_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode133(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings133_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings134_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings134_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings134_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode134(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings134_11;
	operand.values[32] = OpcodeCodings134_32;
	operand.values[29] = OpcodeCodings134_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings135_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings135_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode135(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings135_11;
	operand.values[12] = OpcodeCodings135_12;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings136_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings136_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings136_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode136(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings136_11;
	operand.values[32] = OpcodeCodings136_32;
	operand.values[29] = OpcodeCodings136_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings137_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings137_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode137(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings137_11;
	operand.values[12] = OpcodeCodings137_12;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings138_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode138(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings138_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode139(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4748, operand);
	return rv;
}
bool x64Parser::Opcode140(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4750, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings141_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings141_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode141(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings141_11;
	operand.values[29] = OpcodeCodings141_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings142_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings142_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode142(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings142_11;
	operand.values[29] = OpcodeCodings142_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings143_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings143_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode143(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings143_11;
	operand.values[29] = OpcodeCodings143_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings144_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings144_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode144(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings144_11;
	operand.values[29] = OpcodeCodings144_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings145_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings145_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode145(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings145_11;
	operand.values[29] = OpcodeCodings145_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings146_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings146_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode146(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings146_11;
	operand.values[29] = OpcodeCodings146_29;
	bool rv = ParseOperands(tokenBranches4757, operand);
	if (!rv)
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings147_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings147_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode147(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings147_11;
	operand.values[29] = OpcodeCodings147_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings148_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode148(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings148_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings149_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode149(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings149_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings150_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode150(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings150_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings151_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings151_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode151(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings151_11;
	operand.values[29] = OpcodeCodings151_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings152_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings152_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode152(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings152_11;
	operand.values[29] = OpcodeCodings152_29;
	bool rv = ParseOperands(tokenBranches4765, operand);
	if (!rv)
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings153_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings153_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode153(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings153_11;
	operand.values[29] = OpcodeCodings153_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings154_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings154_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode154(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings154_11;
	operand.values[29] = OpcodeCodings154_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
bool x64Parser::Opcode155(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4770, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings156_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode156(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings156_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode157(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4779, operand);
	return rv;
}
bool x64Parser::Opcode158(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4782, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings159_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode159(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings159_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings160_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode160(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings160_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings161_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode161(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings161_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings162_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode162(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings162_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings163_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode163(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings163_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings164_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode164(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings164_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings165_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings165_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings165_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode165(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings165_11;
	operand.values[32] = OpcodeCodings165_32;
	operand.values[29] = OpcodeCodings165_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings166_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings166_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode166(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings166_11;
	operand.values[12] = OpcodeCodings166_12;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings167_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode167(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings167_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode168(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4793, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings169_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode169(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings169_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings170_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode170(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings170_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings171_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 245, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode171(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings171_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings172_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode172(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings172_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings173_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode173(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings173_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode174(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4800, operand);
	return rv;
}
bool x64Parser::Opcode175(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4802, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings176_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode176(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings176_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings177_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode177(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings177_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings178_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode178(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings178_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings179_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode179(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings179_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings180_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode180(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings180_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode181(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4809, operand);
	return rv;
}
bool x64Parser::Opcode182(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4815, operand);
	return rv;
}
bool x64Parser::Opcode183(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4818, operand);
	return rv;
}
bool x64Parser::Opcode184(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4821, operand);
	return rv;
}
bool x64Parser::Opcode185(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4823, operand);
	return rv;
}
bool x64Parser::Opcode186(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4825, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings187_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings187_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode187(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings187_11;
	operand.values[29] = OpcodeCodings187_29;
	bool rv = ParseOperands(tokenBranches4839, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings188_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings188_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode188(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings188_11;
	operand.values[29] = OpcodeCodings188_29;
	bool rv = ParseOperands(tokenBranches4843, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings189_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings189_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode189(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings189_11;
	operand.values[29] = OpcodeCodings189_29;
	bool rv = ParseOperands(tokenBranches4847, operand);
	return rv;
}
bool x64Parser::Opcode190(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4851, operand);
	return rv;
}
bool x64Parser::Opcode191(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4855, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings192_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings192_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings192_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode192(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings192_11;
	operand.values[32] = OpcodeCodings192_32;
	operand.values[29] = OpcodeCodings192_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings193_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings193_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode193(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings193_11;
	operand.values[12] = OpcodeCodings193_12;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings194_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings194_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings194_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode194(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings194_11;
	operand.values[32] = OpcodeCodings194_32;
	operand.values[29] = OpcodeCodings194_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings195_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings195_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode195(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings195_11;
	operand.values[12] = OpcodeCodings195_12;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings196_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode196(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings196_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings197_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings197_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode197(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings197_11;
	operand.values[12] = OpcodeCodings197_12;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings198_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings198_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode198(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings198_11;
	operand.values[29] = OpcodeCodings198_29;
	bool rv = ParseOperands(tokenBranches4865, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings199_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings199_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode199(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings199_11;
	operand.values[29] = OpcodeCodings199_29;
	bool rv = ParseOperands(tokenBranches4869, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings200_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings200_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode200(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings200_11;
	operand.values[12] = OpcodeCodings200_12;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings201_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode201(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings201_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings202_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode202(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings202_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings203_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode203(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings203_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings204_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings204_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode204(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings204_11;
	operand.values[12] = OpcodeCodings204_12;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings205_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings205_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode205(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings205_11;
	operand.values[29] = OpcodeCodings205_29;
	bool rv = ParseOperands(tokenBranches4878, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings206_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings206_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode206(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings206_11;
	operand.values[29] = OpcodeCodings206_29;
	bool rv = ParseOperands(tokenBranches4882, operand);
	return rv;
}
bool x64Parser::Opcode207(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4886, operand);
	return rv;
}
bool x64Parser::Opcode208(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4888, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings209_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode209(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings209_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings210_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode210(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings210_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings211_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode211(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings211_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings212_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode212(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings212_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings213_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode213(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings213_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings214_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode214(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings214_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings215_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode215(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings215_11;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings216_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode216(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings216_11;
	bool rv = ParseOperands(tokenBranches4897, operand);
	if (!rv)
	{
		rv = Opcode7(operand);
	}
	return rv;
}
bool x64Parser::Opcode217(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5023, operand);
	return rv;
}
bool x64Parser::Opcode218(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5052, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings219_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode219(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings219_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings220_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode220(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings220_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings221_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode221(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings221_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings222_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode222(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings222_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings223_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings223_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode223(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings223_11;
	operand.values[12] = OpcodeCodings223_12;
	bool rv;
	{
		rv = Opcode6(operand);
	}
	return rv;
}
bool x64Parser::Opcode224(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5196, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings225_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode225(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings225_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings226_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 204, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode226(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings226_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings227_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 206, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode227(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings227_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings228_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode228(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings228_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode229(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5203, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings230_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 207, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode230(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings230_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings231_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 207, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode231(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings231_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings232_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 207, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode232(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings232_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings233_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 207, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode233(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings233_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings234_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode234(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings234_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings235_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode235(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings235_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings236_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode236(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings236_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings237_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode237(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings237_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings238_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode238(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings238_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
bool x64Parser::Opcode239(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5214, operand);
	return rv;
}
bool x64Parser::Opcode240(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5216, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings241_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode241(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings241_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings242_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode242(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings242_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings243_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode243(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings243_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings244_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode244(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings244_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings245_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode245(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings245_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
bool x64Parser::Opcode246(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5223, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings247_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode247(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings247_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings248_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode248(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings248_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings249_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode249(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings249_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings250_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode250(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings250_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings251_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode251(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings251_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings252_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode252(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings252_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings253_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode253(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings253_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings254_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode254(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings254_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings255_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode255(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings255_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings256_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode256(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings256_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings257_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode257(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings257_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings258_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode258(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings258_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings259_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode259(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings259_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings260_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode260(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings260_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings261_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode261(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings261_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings262_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode262(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings262_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings263_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode263(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings263_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings264_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode264(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings264_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings265_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode265(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings265_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings266_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode266(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings266_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings267_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 159, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode267(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings267_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings268_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode268(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings268_29;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings269_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 197, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode269(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings269_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings270_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 141, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode270(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings270_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings271_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 201, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode271(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings271_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings272_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode272(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings272_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings273_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode273(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings273_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings274_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 180, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode274(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings274_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings275_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings275_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode275(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings275_11;
	operand.values[12] = OpcodeCodings275_12;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings276_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 181, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode276(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings276_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings277_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings277_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode277(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings277_11;
	operand.values[12] = OpcodeCodings277_12;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings278_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings278_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode278(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings278_11;
	operand.values[12] = OpcodeCodings278_12;
	bool rv = ParseOperands(tokenBranches5289, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
bool x64Parser::Opcode279(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5292, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings280_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode280(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings280_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings281_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode281(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings281_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings282_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode282(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings282_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings283_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode283(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings283_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode284(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5421, operand);
	return rv;
}
bool x64Parser::Opcode285(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5423, operand);
	return rv;
}
bool x64Parser::Opcode286(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5425, operand);
	return rv;
}
bool x64Parser::Opcode287(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5427, operand);
	return rv;
}
bool x64Parser::Opcode288(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5429, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings289_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode289(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings289_29;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings290_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 178, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode290(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings290_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings291_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings291_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode291(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings291_11;
	operand.values[12] = OpcodeCodings291_12;
	bool rv = ParseOperands(tokenBranches5433, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
bool x64Parser::Opcode292(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5436, operand);
	return rv;
}
bool x64Parser::Opcode293(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5871, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings294_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 56, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode294(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings294_29;
	bool rv = ParseOperands(tokenBranches6134, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings295_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode295(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings295_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings296_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode296(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings296_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode297(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6177, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings298_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode298(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings298_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings299_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 190, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode299(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings299_29;
	bool rv;
	{
		rv = Opcode15(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings300_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 182, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode300(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings300_29;
	bool rv;
	{
		rv = Opcode15(operand);
	}
	return rv;
}
bool x64Parser::Opcode301(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6193, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings302_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode302(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings302_11;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings303_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode303(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings303_11;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings304_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 144, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode304(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings304_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings305_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode305(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings305_11;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings306_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings306_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 12, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings306_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode306(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings306_11;
	operand.values[29] = OpcodeCodings306_29;
	operand.values[30] = OpcodeCodings306_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode307(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6220, operand);
	return rv;
}
bool x64Parser::Opcode308(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6249, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings309_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode309(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings309_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings310_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode310(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings310_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings311_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode311(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings311_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode312(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6391, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings313_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode313(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings313_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings314_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode314(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings314_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings315_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode315(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings315_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings316_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings316_33[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 184, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode316(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings316_19;
	operand.values[33] = OpcodeCodings316_33;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings317_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode317(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings317_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings318_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode318(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings318_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings319_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode319(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings319_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings320_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode320(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings320_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode321(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6421, operand);
	return rv;
}
bool x64Parser::Opcode322(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6423, operand);
	return rv;
}
bool x64Parser::Opcode323(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6425, operand);
	return rv;
}
bool x64Parser::Opcode324(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6427, operand);
	return rv;
}
bool x64Parser::Opcode325(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6429, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings326_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode326(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings326_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings327_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode327(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings327_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings328_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode328(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings328_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings329_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode329(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings329_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings330_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode330(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings330_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings331_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode331(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings331_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings332_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode332(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings332_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings333_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode333(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings333_11;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings334_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode334(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings334_11;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings335_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 50, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode335(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings335_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings336_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 51, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode336(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings336_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings337_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 49, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode337(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings337_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode338(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6474, operand);
	return rv;
}
bool x64Parser::Opcode339(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6477, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings340_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode340(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings340_11;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings341_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode341(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings341_11;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings342_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode342(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings342_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings343_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 158, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode343(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings343_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings344_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode344(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings344_11;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings345_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode345(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings345_11;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings346_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings346_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 28, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings346_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 24, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode346(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings346_11;
	operand.values[29] = OpcodeCodings346_29;
	operand.values[30] = OpcodeCodings346_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode347(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6487, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings348_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode348(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings348_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings349_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode349(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings349_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings350_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode350(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings350_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings351_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode351(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings351_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings352_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode352(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings352_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings353_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode353(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings353_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings354_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode354(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings354_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings355_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode355(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings355_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings356_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode356(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings356_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings357_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode357(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings357_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings358_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode358(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings358_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings359_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode359(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings359_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings360_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode360(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings360_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings361_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode361(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings361_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings362_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode362(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings362_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings363_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode363(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings363_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings364_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode364(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings364_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings365_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode365(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings365_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings366_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode366(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings366_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings367_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode367(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings367_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings368_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode368(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings368_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings369_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode369(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings369_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings370_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode370(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings370_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings371_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode371(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings371_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings372_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode372(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings372_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings373_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode373(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings373_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings374_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode374(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings374_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings375_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode375(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings375_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings376_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode376(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings376_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings377_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode377(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings377_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings378_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode378(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings378_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings379_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode379(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings379_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings380_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode380(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings380_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings381_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode381(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings381_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings382_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode382(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings382_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings383_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode383(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings383_11;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings384_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 164, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode384(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings384_29;
	bool rv;
	{
		rv = Opcode17(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings385_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode385(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings385_11;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings386_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 172, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode386(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings386_29;
	bool rv;
	{
		rv = Opcode17(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings387_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings387_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode387(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings387_11;
	operand.values[12] = OpcodeCodings387_12;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings388_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings388_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode388(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings388_11;
	operand.values[12] = OpcodeCodings388_12;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings389_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings389_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode389(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings389_11;
	operand.values[12] = OpcodeCodings389_12;
	bool rv = ParseOperands(tokenBranches6653, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings390_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode390(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings390_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings391_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode391(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings391_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings392_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode392(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings392_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode393(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6659, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings394_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode394(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings394_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings395_12[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode395(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings395_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings396_12[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode396(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings396_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings397_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode397(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings397_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings398_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings398_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode398(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings398_11;
	operand.values[12] = OpcodeCodings398_12;
	bool rv = ParseOperands(tokenBranches6788, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings399_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings399_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings399_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 40, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode399(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings399_11;
	operand.values[29] = OpcodeCodings399_29;
	operand.values[30] = OpcodeCodings399_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings400_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode400(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings400_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings401_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode401(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings401_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings402_12[] = {
	{ (Coding::Type)(Coding::valSpecified), 53, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode402(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings402_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings403_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode403(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings403_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode404(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6798, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings405_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode405(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings405_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings406_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings406_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode406(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings406_11;
	operand.values[12] = OpcodeCodings406_12;
	bool rv = ParseOperands(tokenBranches6925, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings407_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings407_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode407(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings407_11;
	operand.values[12] = OpcodeCodings407_12;
	bool rv = ParseOperands(tokenBranches6928, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings408_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode408(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings408_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings409_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode409(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings409_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings410_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 48, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode410(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings410_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode411(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6934, operand);
	return rv;
}
bool x64Parser::Opcode412(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6963, operand);
	return rv;
}
bool x64Parser::Opcode413(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6980, operand);
	return rv;
}
bool x64Parser::Opcode414(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7017, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings415_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode415(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings415_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings416_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings416_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings416_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 48, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode416(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings416_11;
	operand.values[29] = OpcodeCodings416_29;
	operand.values[30] = OpcodeCodings416_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode417(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7057, operand);
	return rv;
}
bool x64Parser::Opcode418(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7059, operand);
	return rv;
}
bool x64Parser::Opcode419(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7061, operand);
	return rv;
}
bool x64Parser::Opcode420(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7063, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings421_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode421(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings421_12;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings422_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings422_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode422(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings422_19;
	operand.values[12] = OpcodeCodings422_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings423_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings423_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode423(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings423_19;
	operand.values[12] = OpcodeCodings423_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings424_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings424_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode424(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings424_19;
	operand.values[12] = OpcodeCodings424_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings425_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings425_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode425(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings425_19;
	operand.values[12] = OpcodeCodings425_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings426_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings426_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode426(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings426_19;
	operand.values[12] = OpcodeCodings426_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings427_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings427_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode427(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings427_19;
	operand.values[12] = OpcodeCodings427_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings428_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings428_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode428(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings428_19;
	operand.values[12] = OpcodeCodings428_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings429_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings429_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode429(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings429_19;
	operand.values[12] = OpcodeCodings429_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings430_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings430_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode430(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings430_19;
	operand.values[12] = OpcodeCodings430_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings431_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings431_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode431(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings431_19;
	operand.values[12] = OpcodeCodings431_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings432_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings432_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 13, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode432(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings432_19;
	operand.values[12] = OpcodeCodings432_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings433_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings433_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 13, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode433(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings433_19;
	operand.values[12] = OpcodeCodings433_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings434_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings434_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode434(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings434_19;
	operand.values[12] = OpcodeCodings434_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings435_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings435_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode435(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings435_19;
	operand.values[12] = OpcodeCodings435_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings436_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings436_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode436(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings436_19;
	operand.values[12] = OpcodeCodings436_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings437_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings437_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode437(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings437_19;
	operand.values[12] = OpcodeCodings437_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings438_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings438_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode438(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings438_19;
	operand.values[12] = OpcodeCodings438_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings439_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings439_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode439(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings439_19;
	operand.values[12] = OpcodeCodings439_12;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings440_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings440_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode440(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings440_19;
	operand.values[12] = OpcodeCodings440_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings441_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings441_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode441(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings441_19;
	operand.values[12] = OpcodeCodings441_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings442_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings442_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode442(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings442_19;
	operand.values[12] = OpcodeCodings442_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings443_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings443_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode443(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings443_19;
	operand.values[12] = OpcodeCodings443_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings444_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings444_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode444(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings444_19;
	operand.values[12] = OpcodeCodings444_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings445_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings445_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode445(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings445_19;
	operand.values[12] = OpcodeCodings445_12;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings446_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings446_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode446(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings446_19;
	operand.values[12] = OpcodeCodings446_12;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings447_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings447_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode447(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings447_19;
	operand.values[12] = OpcodeCodings447_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings448_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings448_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode448(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings448_19;
	operand.values[12] = OpcodeCodings448_12;
	bool rv;
	{
		rv = Opcode26(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings449_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings449_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode449(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings449_19;
	operand.values[12] = OpcodeCodings449_12;
	bool rv;
	{
		rv = Opcode26(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings450_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings450_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode450(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings450_19;
	operand.values[12] = OpcodeCodings450_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings451_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings451_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode451(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings451_19;
	operand.values[12] = OpcodeCodings451_12;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings452_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings452_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode452(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings452_19;
	operand.values[12] = OpcodeCodings452_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings453_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings453_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode453(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings453_19;
	operand.values[12] = OpcodeCodings453_12;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings454_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings454_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode454(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings454_19;
	operand.values[12] = OpcodeCodings454_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings455_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings455_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode455(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings455_19;
	operand.values[12] = OpcodeCodings455_12;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings456_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 242, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings456_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode456(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings456_19;
	operand.values[12] = OpcodeCodings456_12;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings457_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings457_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode457(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings457_19;
	operand.values[12] = OpcodeCodings457_12;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings458_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings458_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode458(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings458_19;
	operand.values[12] = OpcodeCodings458_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings459_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings459_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode459(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings459_19;
	operand.values[12] = OpcodeCodings459_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings460_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings460_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode460(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings460_19;
	operand.values[12] = OpcodeCodings460_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings461_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings461_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode461(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings461_19;
	operand.values[12] = OpcodeCodings461_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings462_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings462_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 65, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode462(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings462_19;
	operand.values[12] = OpcodeCodings462_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings463_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings463_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 65, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode463(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings463_19;
	operand.values[12] = OpcodeCodings463_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings464_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings464_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode464(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings464_19;
	operand.values[12] = OpcodeCodings464_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings465_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings465_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode465(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings465_19;
	operand.values[12] = OpcodeCodings465_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings466_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings466_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode466(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings466_19;
	operand.values[12] = OpcodeCodings466_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings467_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings467_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode467(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings467_19;
	operand.values[12] = OpcodeCodings467_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
bool x64Parser::Opcode468(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7112, operand);
	return rv;
}
bool x64Parser::Opcode469(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7119, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings470_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings470_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode470(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings470_19;
	operand.values[12] = OpcodeCodings470_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings471_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings471_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode471(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings471_19;
	operand.values[12] = OpcodeCodings471_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings472_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings472_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode472(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings472_19;
	operand.values[12] = OpcodeCodings472_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings473_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings473_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode473(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings473_19;
	operand.values[12] = OpcodeCodings473_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings474_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings474_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode474(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings474_19;
	operand.values[12] = OpcodeCodings474_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings475_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode475(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings475_12;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings476_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings476_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode476(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings476_19;
	operand.values[12] = OpcodeCodings476_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings477_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings477_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode477(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings477_19;
	operand.values[12] = OpcodeCodings477_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings478_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings478_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode478(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings478_19;
	operand.values[12] = OpcodeCodings478_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings479_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings479_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode479(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings479_19;
	operand.values[12] = OpcodeCodings479_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings480_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode480(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings480_12;
	bool rv = true;
	return rv;
}
Coding x64Parser::OpcodeCodings481_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings481_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode481(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings481_19;
	operand.values[29] = OpcodeCodings481_29;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings482_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings482_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode482(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings482_19;
	operand.values[29] = OpcodeCodings482_29;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
bool x64Parser::Opcode483(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7136, operand);
	return rv;
}
bool x64Parser::Opcode484(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7155, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings485_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings485_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode485(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings485_19;
	operand.values[12] = OpcodeCodings485_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings486_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings486_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode486(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings486_19;
	operand.values[12] = OpcodeCodings486_12;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings487_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings487_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode487(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings487_19;
	operand.values[12] = OpcodeCodings487_12;
	bool rv;
	{
		rv = Opcode21(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings488_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings488_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode488(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings488_19;
	operand.values[12] = OpcodeCodings488_12;
	bool rv;
	{
		rv = Opcode21(operand);
	}
	return rv;
}
bool x64Parser::Opcode489(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7178, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings490_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings490_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode490(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings490_19;
	operand.values[12] = OpcodeCodings490_12;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings491_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings491_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode491(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings491_19;
	operand.values[12] = OpcodeCodings491_12;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
bool x64Parser::Opcode492(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7187, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings493_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings493_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode493(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings493_19;
	operand.values[12] = OpcodeCodings493_12;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings494_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings494_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode494(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings494_19;
	operand.values[12] = OpcodeCodings494_12;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings495_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings495_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode495(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings495_19;
	operand.values[12] = OpcodeCodings495_12;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings496_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings496_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode496(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings496_19;
	operand.values[12] = OpcodeCodings496_12;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
bool x64Parser::Opcode497(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7198, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings498_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode498(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings498_12;
	bool rv = ParseOperands(tokenBranches7205, operand);
	return rv;
}
bool x64Parser::Opcode499(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7215, operand);
	return rv;
}
bool x64Parser::Opcode500(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7222, operand);
	return rv;
}
bool x64Parser::Opcode501(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7229, operand);
	return rv;
}
bool x64Parser::Opcode502(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7233, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings503_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings503_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode503(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings503_19;
	operand.values[12] = OpcodeCodings503_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings504_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings504_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode504(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings504_19;
	operand.values[12] = OpcodeCodings504_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings505_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings505_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode505(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings505_19;
	operand.values[29] = OpcodeCodings505_29;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings506_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings506_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode506(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings506_19;
	operand.values[29] = OpcodeCodings506_29;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings507_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings507_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode507(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings507_19;
	operand.values[29] = OpcodeCodings507_29;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings508_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings508_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 66, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode508(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings508_19;
	operand.values[12] = OpcodeCodings508_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings509_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings509_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode509(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings509_19;
	operand.values[12] = OpcodeCodings509_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings510_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings510_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode510(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings510_19;
	operand.values[12] = OpcodeCodings510_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings511_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings511_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode511(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings511_19;
	operand.values[12] = OpcodeCodings511_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings512_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings512_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode512(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings512_19;
	operand.values[12] = OpcodeCodings512_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings513_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings513_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode513(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings513_19;
	operand.values[12] = OpcodeCodings513_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings514_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings514_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode514(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings514_19;
	operand.values[12] = OpcodeCodings514_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings515_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode515(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings515_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings516_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode516(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings516_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings517_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode517(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings517_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings518_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode518(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings518_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings519_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode519(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings519_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings520_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode520(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings520_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings521_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode521(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings521_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings522_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode522(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings522_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings523_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode523(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings523_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings524_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode524(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings524_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings525_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode525(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings525_12;
	bool rv = ParseOperands(tokenBranches7259, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings526_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode526(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings526_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings527_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode527(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings527_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings528_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode528(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings528_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings529_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode529(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings529_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings530_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings530_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode530(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings530_19;
	operand.values[12] = OpcodeCodings530_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings531_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode531(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings531_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings532_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode532(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings532_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings533_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 213, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode533(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings533_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings534_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings534_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode534(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings534_19;
	operand.values[12] = OpcodeCodings534_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings535_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings535_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode535(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings535_19;
	operand.values[12] = OpcodeCodings535_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings536_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 100, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode536(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings536_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings537_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode537(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings537_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings538_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 101, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode538(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings538_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings539_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings539_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode539(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings539_19;
	operand.values[12] = OpcodeCodings539_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings540_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings540_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode540(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings540_19;
	operand.values[12] = OpcodeCodings540_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings541_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode541(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings541_12;
	bool rv = ParseOperands(tokenBranches7290, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings542_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode542(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings542_12;
	bool rv = ParseOperands(tokenBranches7301, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings543_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode543(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings543_12;
	bool rv = ParseOperands(tokenBranches7312, operand);
	return rv;
}
bool x64Parser::Opcode544(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7323, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings545_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode545(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings545_12;
	bool rv = ParseOperands(tokenBranches7359, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings546_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode546(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings546_12;
	bool rv = ParseOperands(tokenBranches7370, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings547_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode547(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings547_12;
	bool rv = ParseOperands(tokenBranches7381, operand);
	return rv;
}
bool x64Parser::Opcode548(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7392, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings549_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 245, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode549(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings549_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings550_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode550(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings550_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings551_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode551(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings551_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings552_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode552(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings552_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings553_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode553(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings553_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings554_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode554(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings554_12;
	bool rv = ParseOperands(tokenBranches7418, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings555_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode555(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings555_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings556_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 229, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode556(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings556_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings557_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 213, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode557(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings557_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings558_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode558(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings558_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings559_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode559(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings559_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings560_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings560_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode560(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings560_19;
	operand.values[12] = OpcodeCodings560_12;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings561_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings561_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode561(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings561_19;
	operand.values[12] = OpcodeCodings561_12;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings562_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings562_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode562(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings562_19;
	operand.values[12] = OpcodeCodings562_12;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings563_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings563_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode563(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings563_19;
	operand.values[12] = OpcodeCodings563_12;
	bool rv = ParseOperands(tokenBranches7442, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings564_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings564_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings564_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 242, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode564(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings564_32;
	operand.values[29] = OpcodeCodings564_29;
	operand.values[30] = OpcodeCodings564_30;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings565_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings565_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode565(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings565_19;
	operand.values[12] = OpcodeCodings565_12;
	bool rv = ParseOperands(tokenBranches7449, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings566_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings566_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings566_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode566(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings566_32;
	operand.values[29] = OpcodeCodings566_29;
	operand.values[30] = OpcodeCodings566_30;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings567_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings567_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 241, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings567_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode567(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings567_32;
	operand.values[34] = OpcodeCodings567_34;
	operand.values[29] = OpcodeCodings567_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings568_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings568_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 226, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings568_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode568(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings568_32;
	operand.values[34] = OpcodeCodings568_34;
	operand.values[29] = OpcodeCodings568_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings569_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings569_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 225, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings569_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode569(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings569_32;
	operand.values[34] = OpcodeCodings569_34;
	operand.values[29] = OpcodeCodings569_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings570_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings570_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 210, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings570_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode570(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings570_32;
	operand.values[34] = OpcodeCodings570_34;
	operand.values[29] = OpcodeCodings570_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings571_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings571_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode571(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings571_19;
	operand.values[12] = OpcodeCodings571_12;
	bool rv = ParseOperands(tokenBranches7461, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings572_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings572_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 211, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings572_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode572(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings572_32;
	operand.values[34] = OpcodeCodings572_34;
	operand.values[29] = OpcodeCodings572_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings573_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings573_34[] = {
	{ (Coding::Type)(Coding::valSpecified), 209, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings573_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode573(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings573_32;
	operand.values[34] = OpcodeCodings573_34;
	operand.values[29] = OpcodeCodings573_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings574_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode574(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings574_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings575_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode575(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings575_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings576_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode576(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings576_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings577_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode577(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings577_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings578_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode578(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings578_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings579_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode579(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings579_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings580_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode580(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings580_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings581_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode581(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings581_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings582_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode582(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings582_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings583_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings583_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode583(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings583_19;
	operand.values[12] = OpcodeCodings583_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings584_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode584(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings584_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings585_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode585(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings585_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings586_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode586(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings586_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings587_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings587_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode587(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings587_19;
	operand.values[12] = OpcodeCodings587_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings588_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode588(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings588_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings589_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode589(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings589_12;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings590_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings590_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode590(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings590_19;
	operand.values[12] = OpcodeCodings590_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings591_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings591_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode591(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings591_19;
	operand.values[12] = OpcodeCodings591_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings592_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings592_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode592(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings592_19;
	operand.values[12] = OpcodeCodings592_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings593_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings593_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode593(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings593_19;
	operand.values[12] = OpcodeCodings593_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings594_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings594_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode594(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings594_19;
	operand.values[12] = OpcodeCodings594_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings595_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings595_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode595(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings595_19;
	operand.values[12] = OpcodeCodings595_12;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings596_19[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings596_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode596(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings596_19;
	operand.values[12] = OpcodeCodings596_12;
	bool rv = ParseOperands(tokenBranches7492, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings597_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings597_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode597(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings597_19;
	operand.values[12] = OpcodeCodings597_12;
	bool rv = ParseOperands(tokenBranches7503, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings598_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings598_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode598(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings598_19;
	operand.values[12] = OpcodeCodings598_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings599_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings599_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode599(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings599_19;
	operand.values[12] = OpcodeCodings599_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings600_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings600_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode600(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings600_19;
	operand.values[12] = OpcodeCodings600_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings601_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings601_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode601(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings601_19;
	operand.values[12] = OpcodeCodings601_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings602_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings602_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode602(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings602_19;
	operand.values[12] = OpcodeCodings602_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings603_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings603_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode603(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings603_19;
	operand.values[12] = OpcodeCodings603_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings604_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings604_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode604(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings604_19;
	operand.values[12] = OpcodeCodings604_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings605_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings605_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode605(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings605_19;
	operand.values[12] = OpcodeCodings605_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings606_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings606_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode606(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings606_19;
	operand.values[12] = OpcodeCodings606_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings607_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings607_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode607(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings607_19;
	operand.values[12] = OpcodeCodings607_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings608_19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings608_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode608(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings608_19;
	operand.values[12] = OpcodeCodings608_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings609_19[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings609_12[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode609(x64Operand &operand)
{
	operand.values[19] = OpcodeCodings609_19;
	operand.values[12] = OpcodeCodings609_12;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
bool x64Parser::Opcode610(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode611(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode612(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode613(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode614(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode615(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode616(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode617(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode618(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode619(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode620(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode621(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
x64Parser::DispatchType x64Parser::DispatchTable[622] = {
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&x64Parser::Opcode32,
	&x64Parser::Opcode33,
	&x64Parser::Opcode34,
	&x64Parser::Opcode35,
	&x64Parser::Opcode36,
	&x64Parser::Opcode37,
	&x64Parser::Opcode38,
	&x64Parser::Opcode39,
	&x64Parser::Opcode40,
	&x64Parser::Opcode41,
	&x64Parser::Opcode42,
	&x64Parser::Opcode43,
	&x64Parser::Opcode44,
	&x64Parser::Opcode45,
	&x64Parser::Opcode46,
	&x64Parser::Opcode47,
	&x64Parser::Opcode48,
	&x64Parser::Opcode49,
	&x64Parser::Opcode50,
	&x64Parser::Opcode51,
	&x64Parser::Opcode52,
	&x64Parser::Opcode53,
	&x64Parser::Opcode54,
	&x64Parser::Opcode55,
	&x64Parser::Opcode56,
	&x64Parser::Opcode57,
	&x64Parser::Opcode58,
	&x64Parser::Opcode59,
	&x64Parser::Opcode60,
	&x64Parser::Opcode61,
	&x64Parser::Opcode62,
	&x64Parser::Opcode63,
	&x64Parser::Opcode64,
	&x64Parser::Opcode65,
	&x64Parser::Opcode66,
	&x64Parser::Opcode67,
	&x64Parser::Opcode68,
	&x64Parser::Opcode69,
	&x64Parser::Opcode70,
	&x64Parser::Opcode71,
	&x64Parser::Opcode72,
	&x64Parser::Opcode73,
	&x64Parser::Opcode74,
	&x64Parser::Opcode75,
	&x64Parser::Opcode76,
	&x64Parser::Opcode77,
	&x64Parser::Opcode78,
	&x64Parser::Opcode79,
	&x64Parser::Opcode80,
	&x64Parser::Opcode81,
	&x64Parser::Opcode82,
	&x64Parser::Opcode83,
	&x64Parser::Opcode84,
	&x64Parser::Opcode85,
	&x64Parser::Opcode86,
	&x64Parser::Opcode87,
	&x64Parser::Opcode88,
	&x64Parser::Opcode89,
	&x64Parser::Opcode90,
	&x64Parser::Opcode91,
	&x64Parser::Opcode92,
	&x64Parser::Opcode93,
	&x64Parser::Opcode94,
	&x64Parser::Opcode95,
	&x64Parser::Opcode96,
	&x64Parser::Opcode97,
	&x64Parser::Opcode98,
	&x64Parser::Opcode99,
	&x64Parser::Opcode100,
	&x64Parser::Opcode101,
	&x64Parser::Opcode102,
	&x64Parser::Opcode103,
	&x64Parser::Opcode104,
	&x64Parser::Opcode105,
	&x64Parser::Opcode106,
	&x64Parser::Opcode107,
	&x64Parser::Opcode108,
	&x64Parser::Opcode109,
	&x64Parser::Opcode110,
	&x64Parser::Opcode111,
	&x64Parser::Opcode112,
	&x64Parser::Opcode113,
	&x64Parser::Opcode114,
	&x64Parser::Opcode115,
	&x64Parser::Opcode116,
	&x64Parser::Opcode117,
	&x64Parser::Opcode118,
	&x64Parser::Opcode119,
	&x64Parser::Opcode120,
	&x64Parser::Opcode121,
	&x64Parser::Opcode122,
	&x64Parser::Opcode123,
	&x64Parser::Opcode124,
	&x64Parser::Opcode125,
	&x64Parser::Opcode126,
	&x64Parser::Opcode127,
	&x64Parser::Opcode128,
	&x64Parser::Opcode129,
	&x64Parser::Opcode130,
	&x64Parser::Opcode131,
	&x64Parser::Opcode132,
	&x64Parser::Opcode133,
	&x64Parser::Opcode134,
	&x64Parser::Opcode135,
	&x64Parser::Opcode136,
	&x64Parser::Opcode137,
	&x64Parser::Opcode138,
	&x64Parser::Opcode139,
	&x64Parser::Opcode140,
	&x64Parser::Opcode141,
	&x64Parser::Opcode142,
	&x64Parser::Opcode143,
	&x64Parser::Opcode144,
	&x64Parser::Opcode145,
	&x64Parser::Opcode146,
	&x64Parser::Opcode147,
	&x64Parser::Opcode148,
	&x64Parser::Opcode149,
	&x64Parser::Opcode150,
	&x64Parser::Opcode151,
	&x64Parser::Opcode152,
	&x64Parser::Opcode153,
	&x64Parser::Opcode154,
	&x64Parser::Opcode155,
	&x64Parser::Opcode156,
	&x64Parser::Opcode157,
	&x64Parser::Opcode158,
	&x64Parser::Opcode159,
	&x64Parser::Opcode160,
	&x64Parser::Opcode161,
	&x64Parser::Opcode162,
	&x64Parser::Opcode163,
	&x64Parser::Opcode164,
	&x64Parser::Opcode165,
	&x64Parser::Opcode166,
	&x64Parser::Opcode167,
	&x64Parser::Opcode168,
	&x64Parser::Opcode169,
	&x64Parser::Opcode170,
	&x64Parser::Opcode171,
	&x64Parser::Opcode172,
	&x64Parser::Opcode173,
	&x64Parser::Opcode174,
	&x64Parser::Opcode175,
	&x64Parser::Opcode176,
	&x64Parser::Opcode177,
	&x64Parser::Opcode178,
	&x64Parser::Opcode179,
	&x64Parser::Opcode180,
	&x64Parser::Opcode181,
	&x64Parser::Opcode182,
	&x64Parser::Opcode183,
	&x64Parser::Opcode184,
	&x64Parser::Opcode185,
	&x64Parser::Opcode186,
	&x64Parser::Opcode187,
	&x64Parser::Opcode188,
	&x64Parser::Opcode189,
	&x64Parser::Opcode190,
	&x64Parser::Opcode191,
	&x64Parser::Opcode192,
	&x64Parser::Opcode193,
	&x64Parser::Opcode194,
	&x64Parser::Opcode195,
	&x64Parser::Opcode196,
	&x64Parser::Opcode197,
	&x64Parser::Opcode198,
	&x64Parser::Opcode199,
	&x64Parser::Opcode200,
	&x64Parser::Opcode201,
	&x64Parser::Opcode202,
	&x64Parser::Opcode203,
	&x64Parser::Opcode204,
	&x64Parser::Opcode205,
	&x64Parser::Opcode206,
	&x64Parser::Opcode207,
	&x64Parser::Opcode208,
	&x64Parser::Opcode209,
	&x64Parser::Opcode210,
	&x64Parser::Opcode211,
	&x64Parser::Opcode212,
	&x64Parser::Opcode213,
	&x64Parser::Opcode214,
	&x64Parser::Opcode215,
	&x64Parser::Opcode216,
	&x64Parser::Opcode217,
	&x64Parser::Opcode218,
	&x64Parser::Opcode219,
	&x64Parser::Opcode220,
	&x64Parser::Opcode221,
	&x64Parser::Opcode222,
	&x64Parser::Opcode223,
	&x64Parser::Opcode224,
	&x64Parser::Opcode225,
	&x64Parser::Opcode226,
	&x64Parser::Opcode227,
	&x64Parser::Opcode228,
	&x64Parser::Opcode229,
	&x64Parser::Opcode230,
	&x64Parser::Opcode231,
	&x64Parser::Opcode232,
	&x64Parser::Opcode233,
	&x64Parser::Opcode234,
	&x64Parser::Opcode235,
	&x64Parser::Opcode236,
	&x64Parser::Opcode237,
	&x64Parser::Opcode238,
	&x64Parser::Opcode239,
	&x64Parser::Opcode240,
	&x64Parser::Opcode241,
	&x64Parser::Opcode242,
	&x64Parser::Opcode243,
	&x64Parser::Opcode244,
	&x64Parser::Opcode245,
	&x64Parser::Opcode246,
	&x64Parser::Opcode247,
	&x64Parser::Opcode248,
	&x64Parser::Opcode249,
	&x64Parser::Opcode250,
	&x64Parser::Opcode251,
	&x64Parser::Opcode252,
	&x64Parser::Opcode253,
	&x64Parser::Opcode254,
	&x64Parser::Opcode255,
	&x64Parser::Opcode256,
	&x64Parser::Opcode257,
	&x64Parser::Opcode258,
	&x64Parser::Opcode259,
	&x64Parser::Opcode260,
	&x64Parser::Opcode261,
	&x64Parser::Opcode262,
	&x64Parser::Opcode263,
	&x64Parser::Opcode264,
	&x64Parser::Opcode265,
	&x64Parser::Opcode266,
	&x64Parser::Opcode267,
	&x64Parser::Opcode268,
	&x64Parser::Opcode269,
	&x64Parser::Opcode270,
	&x64Parser::Opcode271,
	&x64Parser::Opcode272,
	&x64Parser::Opcode273,
	&x64Parser::Opcode274,
	&x64Parser::Opcode275,
	&x64Parser::Opcode276,
	&x64Parser::Opcode277,
	&x64Parser::Opcode278,
	&x64Parser::Opcode279,
	&x64Parser::Opcode280,
	&x64Parser::Opcode281,
	&x64Parser::Opcode282,
	&x64Parser::Opcode283,
	&x64Parser::Opcode284,
	&x64Parser::Opcode285,
	&x64Parser::Opcode286,
	&x64Parser::Opcode287,
	&x64Parser::Opcode288,
	&x64Parser::Opcode289,
	&x64Parser::Opcode290,
	&x64Parser::Opcode291,
	&x64Parser::Opcode292,
	&x64Parser::Opcode293,
	&x64Parser::Opcode294,
	&x64Parser::Opcode295,
	&x64Parser::Opcode296,
	&x64Parser::Opcode297,
	&x64Parser::Opcode298,
	&x64Parser::Opcode299,
	&x64Parser::Opcode300,
	&x64Parser::Opcode301,
	&x64Parser::Opcode302,
	&x64Parser::Opcode303,
	&x64Parser::Opcode304,
	&x64Parser::Opcode305,
	&x64Parser::Opcode306,
	&x64Parser::Opcode307,
	&x64Parser::Opcode308,
	&x64Parser::Opcode309,
	&x64Parser::Opcode310,
	&x64Parser::Opcode311,
	&x64Parser::Opcode312,
	&x64Parser::Opcode313,
	&x64Parser::Opcode314,
	&x64Parser::Opcode315,
	&x64Parser::Opcode316,
	&x64Parser::Opcode317,
	&x64Parser::Opcode318,
	&x64Parser::Opcode319,
	&x64Parser::Opcode320,
	&x64Parser::Opcode321,
	&x64Parser::Opcode322,
	&x64Parser::Opcode323,
	&x64Parser::Opcode324,
	&x64Parser::Opcode325,
	&x64Parser::Opcode326,
	&x64Parser::Opcode327,
	&x64Parser::Opcode328,
	&x64Parser::Opcode329,
	&x64Parser::Opcode330,
	&x64Parser::Opcode331,
	&x64Parser::Opcode332,
	&x64Parser::Opcode333,
	&x64Parser::Opcode334,
	&x64Parser::Opcode335,
	&x64Parser::Opcode336,
	&x64Parser::Opcode337,
	&x64Parser::Opcode338,
	&x64Parser::Opcode339,
	&x64Parser::Opcode340,
	&x64Parser::Opcode341,
	&x64Parser::Opcode342,
	&x64Parser::Opcode343,
	&x64Parser::Opcode344,
	&x64Parser::Opcode345,
	&x64Parser::Opcode346,
	&x64Parser::Opcode347,
	&x64Parser::Opcode348,
	&x64Parser::Opcode349,
	&x64Parser::Opcode350,
	&x64Parser::Opcode351,
	&x64Parser::Opcode352,
	&x64Parser::Opcode353,
	&x64Parser::Opcode354,
	&x64Parser::Opcode355,
	&x64Parser::Opcode356,
	&x64Parser::Opcode357,
	&x64Parser::Opcode358,
	&x64Parser::Opcode359,
	&x64Parser::Opcode360,
	&x64Parser::Opcode361,
	&x64Parser::Opcode362,
	&x64Parser::Opcode363,
	&x64Parser::Opcode364,
	&x64Parser::Opcode365,
	&x64Parser::Opcode366,
	&x64Parser::Opcode367,
	&x64Parser::Opcode368,
	&x64Parser::Opcode369,
	&x64Parser::Opcode370,
	&x64Parser::Opcode371,
	&x64Parser::Opcode372,
	&x64Parser::Opcode373,
	&x64Parser::Opcode374,
	&x64Parser::Opcode375,
	&x64Parser::Opcode376,
	&x64Parser::Opcode377,
	&x64Parser::Opcode378,
	&x64Parser::Opcode379,
	&x64Parser::Opcode380,
	&x64Parser::Opcode381,
	&x64Parser::Opcode382,
	&x64Parser::Opcode383,
	&x64Parser::Opcode384,
	&x64Parser::Opcode385,
	&x64Parser::Opcode386,
	&x64Parser::Opcode387,
	&x64Parser::Opcode388,
	&x64Parser::Opcode389,
	&x64Parser::Opcode390,
	&x64Parser::Opcode391,
	&x64Parser::Opcode392,
	&x64Parser::Opcode393,
	&x64Parser::Opcode394,
	&x64Parser::Opcode395,
	&x64Parser::Opcode396,
	&x64Parser::Opcode397,
	&x64Parser::Opcode398,
	&x64Parser::Opcode399,
	&x64Parser::Opcode400,
	&x64Parser::Opcode401,
	&x64Parser::Opcode402,
	&x64Parser::Opcode403,
	&x64Parser::Opcode404,
	&x64Parser::Opcode405,
	&x64Parser::Opcode406,
	&x64Parser::Opcode407,
	&x64Parser::Opcode408,
	&x64Parser::Opcode409,
	&x64Parser::Opcode410,
	&x64Parser::Opcode411,
	&x64Parser::Opcode412,
	&x64Parser::Opcode413,
	&x64Parser::Opcode414,
	&x64Parser::Opcode415,
	&x64Parser::Opcode416,
	&x64Parser::Opcode417,
	&x64Parser::Opcode418,
	&x64Parser::Opcode419,
	&x64Parser::Opcode420,
	&x64Parser::Opcode421,
	&x64Parser::Opcode422,
	&x64Parser::Opcode423,
	&x64Parser::Opcode424,
	&x64Parser::Opcode425,
	&x64Parser::Opcode426,
	&x64Parser::Opcode427,
	&x64Parser::Opcode428,
	&x64Parser::Opcode429,
	&x64Parser::Opcode430,
	&x64Parser::Opcode431,
	&x64Parser::Opcode432,
	&x64Parser::Opcode433,
	&x64Parser::Opcode434,
	&x64Parser::Opcode435,
	&x64Parser::Opcode436,
	&x64Parser::Opcode437,
	&x64Parser::Opcode438,
	&x64Parser::Opcode439,
	&x64Parser::Opcode440,
	&x64Parser::Opcode441,
	&x64Parser::Opcode442,
	&x64Parser::Opcode443,
	&x64Parser::Opcode444,
	&x64Parser::Opcode445,
	&x64Parser::Opcode446,
	&x64Parser::Opcode447,
	&x64Parser::Opcode448,
	&x64Parser::Opcode449,
	&x64Parser::Opcode450,
	&x64Parser::Opcode451,
	&x64Parser::Opcode452,
	&x64Parser::Opcode453,
	&x64Parser::Opcode454,
	&x64Parser::Opcode455,
	&x64Parser::Opcode456,
	&x64Parser::Opcode457,
	&x64Parser::Opcode458,
	&x64Parser::Opcode459,
	&x64Parser::Opcode460,
	&x64Parser::Opcode461,
	&x64Parser::Opcode462,
	&x64Parser::Opcode463,
	&x64Parser::Opcode464,
	&x64Parser::Opcode465,
	&x64Parser::Opcode466,
	&x64Parser::Opcode467,
	&x64Parser::Opcode468,
	&x64Parser::Opcode469,
	&x64Parser::Opcode470,
	&x64Parser::Opcode471,
	&x64Parser::Opcode472,
	&x64Parser::Opcode473,
	&x64Parser::Opcode474,
	&x64Parser::Opcode475,
	&x64Parser::Opcode476,
	&x64Parser::Opcode477,
	&x64Parser::Opcode478,
	&x64Parser::Opcode479,
	&x64Parser::Opcode480,
	&x64Parser::Opcode481,
	&x64Parser::Opcode482,
	&x64Parser::Opcode483,
	&x64Parser::Opcode484,
	&x64Parser::Opcode485,
	&x64Parser::Opcode486,
	&x64Parser::Opcode487,
	&x64Parser::Opcode488,
	&x64Parser::Opcode489,
	&x64Parser::Opcode490,
	&x64Parser::Opcode491,
	&x64Parser::Opcode492,
	&x64Parser::Opcode493,
	&x64Parser::Opcode494,
	&x64Parser::Opcode495,
	&x64Parser::Opcode496,
	&x64Parser::Opcode497,
	&x64Parser::Opcode498,
	&x64Parser::Opcode499,
	&x64Parser::Opcode500,
	&x64Parser::Opcode501,
	&x64Parser::Opcode502,
	&x64Parser::Opcode503,
	&x64Parser::Opcode504,
	&x64Parser::Opcode505,
	&x64Parser::Opcode506,
	&x64Parser::Opcode507,
	&x64Parser::Opcode508,
	&x64Parser::Opcode509,
	&x64Parser::Opcode510,
	&x64Parser::Opcode511,
	&x64Parser::Opcode512,
	&x64Parser::Opcode513,
	&x64Parser::Opcode514,
	&x64Parser::Opcode515,
	&x64Parser::Opcode516,
	&x64Parser::Opcode517,
	&x64Parser::Opcode518,
	&x64Parser::Opcode519,
	&x64Parser::Opcode520,
	&x64Parser::Opcode521,
	&x64Parser::Opcode522,
	&x64Parser::Opcode523,
	&x64Parser::Opcode524,
	&x64Parser::Opcode525,
	&x64Parser::Opcode526,
	&x64Parser::Opcode527,
	&x64Parser::Opcode528,
	&x64Parser::Opcode529,
	&x64Parser::Opcode530,
	&x64Parser::Opcode531,
	&x64Parser::Opcode532,
	&x64Parser::Opcode533,
	&x64Parser::Opcode534,
	&x64Parser::Opcode535,
	&x64Parser::Opcode536,
	&x64Parser::Opcode537,
	&x64Parser::Opcode538,
	&x64Parser::Opcode539,
	&x64Parser::Opcode540,
	&x64Parser::Opcode541,
	&x64Parser::Opcode542,
	&x64Parser::Opcode543,
	&x64Parser::Opcode544,
	&x64Parser::Opcode545,
	&x64Parser::Opcode546,
	&x64Parser::Opcode547,
	&x64Parser::Opcode548,
	&x64Parser::Opcode549,
	&x64Parser::Opcode550,
	&x64Parser::Opcode551,
	&x64Parser::Opcode552,
	&x64Parser::Opcode553,
	&x64Parser::Opcode554,
	&x64Parser::Opcode555,
	&x64Parser::Opcode556,
	&x64Parser::Opcode557,
	&x64Parser::Opcode558,
	&x64Parser::Opcode559,
	&x64Parser::Opcode560,
	&x64Parser::Opcode561,
	&x64Parser::Opcode562,
	&x64Parser::Opcode563,
	&x64Parser::Opcode564,
	&x64Parser::Opcode565,
	&x64Parser::Opcode566,
	&x64Parser::Opcode567,
	&x64Parser::Opcode568,
	&x64Parser::Opcode569,
	&x64Parser::Opcode570,
	&x64Parser::Opcode571,
	&x64Parser::Opcode572,
	&x64Parser::Opcode573,
	&x64Parser::Opcode574,
	&x64Parser::Opcode575,
	&x64Parser::Opcode576,
	&x64Parser::Opcode577,
	&x64Parser::Opcode578,
	&x64Parser::Opcode579,
	&x64Parser::Opcode580,
	&x64Parser::Opcode581,
	&x64Parser::Opcode582,
	&x64Parser::Opcode583,
	&x64Parser::Opcode584,
	&x64Parser::Opcode585,
	&x64Parser::Opcode586,
	&x64Parser::Opcode587,
	&x64Parser::Opcode588,
	&x64Parser::Opcode589,
	&x64Parser::Opcode590,
	&x64Parser::Opcode591,
	&x64Parser::Opcode592,
	&x64Parser::Opcode593,
	&x64Parser::Opcode594,
	&x64Parser::Opcode595,
	&x64Parser::Opcode596,
	&x64Parser::Opcode597,
	&x64Parser::Opcode598,
	&x64Parser::Opcode599,
	&x64Parser::Opcode600,
	&x64Parser::Opcode601,
	&x64Parser::Opcode602,
	&x64Parser::Opcode603,
	&x64Parser::Opcode604,
	&x64Parser::Opcode605,
	&x64Parser::Opcode606,
	&x64Parser::Opcode607,
	&x64Parser::Opcode608,
	&x64Parser::Opcode609,
	&x64Parser::Opcode610,
	&x64Parser::Opcode611,
	&x64Parser::Opcode612,
	&x64Parser::Opcode613,
	&x64Parser::Opcode614,
	&x64Parser::Opcode615,
	&x64Parser::Opcode616,
	&x64Parser::Opcode617,
	&x64Parser::Opcode618,
	&x64Parser::Opcode619,
	&x64Parser::Opcode620,
	&x64Parser::Opcode621,
};
Coding x64Parser::Coding1[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding2[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding3[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding4[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding5[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding6[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding7[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding8[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding9[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding10[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding11[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding12[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding14[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding15[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding16[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding17[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding18[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding20[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding21[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding22[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding23[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding24[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding25[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding26[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding27[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding28[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding29[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding30[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding31[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding32[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding33[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding34[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding35[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding36[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding37[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding38[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding39[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding40[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 5, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding41[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding42[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding43[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 5, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding44[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding45[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding46[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding47[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding48[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding49[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding50[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding51[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding52[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding53[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding54[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding55[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding56[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding57[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding58[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding59[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 37, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding60[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding61[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding62[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding63[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding64[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding65[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding66[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding67[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding68[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding69[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding70[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding71[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding72[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding73[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding74[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding75[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding76[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding77[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding78[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding79[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding80[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding81[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding82[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding83[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding84[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding85[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding86[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding87[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding88[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding89[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding90[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding91[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding92[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding93[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding94[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding95[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding96[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding97[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding98[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding99[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding100[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding101[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding102[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding103[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding104[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding105[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding106[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding107[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding108[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding109[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding110[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding111[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding112[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding113[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding114[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding115[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding116[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding117[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding118[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding119[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding120[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding121[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding122[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding123[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding124[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding125[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding126[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding127[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding128[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding129[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding130[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding131[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding132[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding133[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding134[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding135[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding136[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding137[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding138[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding139[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding140[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding141[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding142[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding143[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding144[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding145[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding146[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding147[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding148[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding149[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding150[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding151[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding152[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding153[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding154[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding155[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding156[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding157[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding158[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding159[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding160[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding161[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding162[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding163[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding164[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding165[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding166[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding167[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding168[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding169[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding170[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding171[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding172[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding173[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding174[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding175[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding176[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding177[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding178[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding179[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding180[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding181[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding182[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding183[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding184[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding185[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding186[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding187[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding188[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding189[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding190[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding191[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding192[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding193[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding194[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding195[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding196[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding197[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding198[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding199[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding200[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding201[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding202[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding203[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding204[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding205[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding206[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding207[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding208[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding209[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding210[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding211[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding212[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding213[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding214[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding215[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding216[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding217[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding218[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding219[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding220[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding221[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding222[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding223[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding224[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding225[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding226[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding227[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding228[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding229[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding230[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding231[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding232[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding233[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding234[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding235[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding236[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding237[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding238[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding239[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding240[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding241[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding242[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding243[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding244[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding245[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding246[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding247[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding248[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding249[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding250[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding251[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding252[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding253[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding254[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding255[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding256[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding257[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding258[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding259[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding260[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding261[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding262[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding263[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding264[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding265[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding266[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding267[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding268[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding269[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding270[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding271[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding272[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding273[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding274[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding275[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding276[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding277[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding278[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding279[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding280[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding281[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding282[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding283[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding284[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding285[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding286[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding287[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding288[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding289[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding290[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding291[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding292[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding293[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding294[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding295[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding296[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding297[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding298[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding299[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding300[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding301[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding302[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding303[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding304[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding305[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding306[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding307[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding308[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding309[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding310[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding311[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding312[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding313[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding314[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding315[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding316[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding317[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 67, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding318[] = {
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 8, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding319[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 8, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding320[] = {
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 8, -1, 0, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 8, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding321[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 8, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding322[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 19, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 65, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 8, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding323[] = {
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding324[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding325[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding326[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding327[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding328[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding329[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding330[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding331[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding332[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding333[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding334[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding335[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding336[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding337[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding338[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding339[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding340[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding341[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 8, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding342[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 8, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding343[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 8, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding344[] = {
	{ (Coding::Type)(Coding::indirect), 12, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding345[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding346[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding347[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding348[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding349[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding350[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding351[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding352[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding353[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding354[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding355[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding356[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding357[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding358[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding359[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding360[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding361[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding362[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding363[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding364[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding365[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding366[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding367[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding368[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding369[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding370[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding371[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding372[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding373[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding374[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding375[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding376[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding377[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding378[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding379[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::native },
	{ Coding::eot },
};
Coding x64Parser::Coding380[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding381[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding382[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding383[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding384[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding385[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding386[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding387[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding388[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding389[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding390[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding391[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding392[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding393[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding394[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding395[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding396[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding397[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding398[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding399[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding400[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding401[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding402[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding403[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding404[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding405[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding406[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding407[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding408[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding409[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding410[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding411[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding412[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding413[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding414[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding415[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding416[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding417[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding418[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding419[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 205, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding420[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding421[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding422[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding423[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding424[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding425[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding426[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding427[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding428[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding429[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding430[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding431[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding432[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding433[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding434[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding435[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding436[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding437[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding438[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding439[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding440[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding441[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding442[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding443[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding444[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding445[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding446[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding447[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding448[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding449[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding450[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding451[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding452[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding453[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding454[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding455[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding456[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding457[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding458[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding459[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding460[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding461[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding462[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding463[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding464[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding465[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding466[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding467[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding468[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding469[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding470[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding471[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding472[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding473[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding474[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding475[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding476[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding477[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding478[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding479[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding480[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding481[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding482[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding483[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding484[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding485[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding486[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding487[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding488[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding489[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding490[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding491[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding492[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding493[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding494[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding495[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding496[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding497[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding498[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding499[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding500[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding501[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding502[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding503[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding504[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding505[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding506[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding507[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding508[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding509[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding510[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding511[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding512[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding513[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding514[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding515[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding516[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding517[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding518[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding519[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding520[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding521[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding522[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding523[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding524[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding525[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding526[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding527[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding528[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding529[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding530[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding531[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding532[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding533[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding534[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding535[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding536[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding537[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding538[] = {
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding539[] = {
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding540[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding541[] = {
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding542[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding543[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding544[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding545[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding546[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding547[] = {
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding548[] = {
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding549[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding550[] = {
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding551[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding552[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding553[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding554[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding555[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding556[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ Coding::eot },
};
Coding x64Parser::Coding557[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ Coding::eot },
};
Coding x64Parser::Coding558[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding559[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding560[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding561[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding562[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding563[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 202, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding564[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 203, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding565[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding566[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding567[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding568[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding569[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding570[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding571[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding572[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding573[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding574[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding575[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding576[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding577[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding578[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding579[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding580[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding581[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding582[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding583[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding584[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding585[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding586[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding587[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding588[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding589[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding590[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding591[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding592[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding593[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding594[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding595[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding596[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding597[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding598[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding599[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding600[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding601[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding602[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding603[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding604[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding605[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding606[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding607[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding608[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding609[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding610[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 13, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding611[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding612[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding613[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding614[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding615[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding616[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding617[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding * x64Parser::Codings[617] = {
	x64Parser::Coding1,
	x64Parser::Coding2,
	x64Parser::Coding3,
	x64Parser::Coding4,
	x64Parser::Coding5,
	x64Parser::Coding6,
	x64Parser::Coding7,
	x64Parser::Coding8,
	x64Parser::Coding9,
	x64Parser::Coding10,
	x64Parser::Coding11,
	x64Parser::Coding12,
	x64Parser::Coding13,
	x64Parser::Coding14,
	x64Parser::Coding15,
	x64Parser::Coding16,
	x64Parser::Coding17,
	x64Parser::Coding18,
	x64Parser::Coding19,
	x64Parser::Coding20,
	x64Parser::Coding21,
	x64Parser::Coding22,
	x64Parser::Coding23,
	x64Parser::Coding24,
	x64Parser::Coding25,
	x64Parser::Coding26,
	x64Parser::Coding27,
	x64Parser::Coding28,
	x64Parser::Coding29,
	x64Parser::Coding30,
	x64Parser::Coding31,
	x64Parser::Coding32,
	x64Parser::Coding33,
	x64Parser::Coding34,
	x64Parser::Coding35,
	x64Parser::Coding36,
	x64Parser::Coding37,
	x64Parser::Coding38,
	x64Parser::Coding39,
	x64Parser::Coding40,
	x64Parser::Coding41,
	x64Parser::Coding42,
	x64Parser::Coding43,
	x64Parser::Coding44,
	x64Parser::Coding45,
	x64Parser::Coding46,
	x64Parser::Coding47,
	x64Parser::Coding48,
	x64Parser::Coding49,
	x64Parser::Coding50,
	x64Parser::Coding51,
	x64Parser::Coding52,
	x64Parser::Coding53,
	x64Parser::Coding54,
	x64Parser::Coding55,
	x64Parser::Coding56,
	x64Parser::Coding57,
	x64Parser::Coding58,
	x64Parser::Coding59,
	x64Parser::Coding60,
	x64Parser::Coding61,
	x64Parser::Coding62,
	x64Parser::Coding63,
	x64Parser::Coding64,
	x64Parser::Coding65,
	x64Parser::Coding66,
	x64Parser::Coding67,
	x64Parser::Coding68,
	x64Parser::Coding69,
	x64Parser::Coding70,
	x64Parser::Coding71,
	x64Parser::Coding72,
	x64Parser::Coding73,
	x64Parser::Coding74,
	x64Parser::Coding75,
	x64Parser::Coding76,
	x64Parser::Coding77,
	x64Parser::Coding78,
	x64Parser::Coding79,
	x64Parser::Coding80,
	x64Parser::Coding81,
	x64Parser::Coding82,
	x64Parser::Coding83,
	x64Parser::Coding84,
	x64Parser::Coding85,
	x64Parser::Coding86,
	x64Parser::Coding87,
	x64Parser::Coding88,
	x64Parser::Coding89,
	x64Parser::Coding90,
	x64Parser::Coding91,
	x64Parser::Coding92,
	x64Parser::Coding93,
	x64Parser::Coding94,
	x64Parser::Coding95,
	x64Parser::Coding96,
	x64Parser::Coding97,
	x64Parser::Coding98,
	x64Parser::Coding99,
	x64Parser::Coding100,
	x64Parser::Coding101,
	x64Parser::Coding102,
	x64Parser::Coding103,
	x64Parser::Coding104,
	x64Parser::Coding105,
	x64Parser::Coding106,
	x64Parser::Coding107,
	x64Parser::Coding108,
	x64Parser::Coding109,
	x64Parser::Coding110,
	x64Parser::Coding111,
	x64Parser::Coding112,
	x64Parser::Coding113,
	x64Parser::Coding114,
	x64Parser::Coding115,
	x64Parser::Coding116,
	x64Parser::Coding117,
	x64Parser::Coding118,
	x64Parser::Coding119,
	x64Parser::Coding120,
	x64Parser::Coding121,
	x64Parser::Coding122,
	x64Parser::Coding123,
	x64Parser::Coding124,
	x64Parser::Coding125,
	x64Parser::Coding126,
	x64Parser::Coding127,
	x64Parser::Coding128,
	x64Parser::Coding129,
	x64Parser::Coding130,
	x64Parser::Coding131,
	x64Parser::Coding132,
	x64Parser::Coding133,
	x64Parser::Coding134,
	x64Parser::Coding135,
	x64Parser::Coding136,
	x64Parser::Coding137,
	x64Parser::Coding138,
	x64Parser::Coding139,
	x64Parser::Coding140,
	x64Parser::Coding141,
	x64Parser::Coding142,
	x64Parser::Coding143,
	x64Parser::Coding144,
	x64Parser::Coding145,
	x64Parser::Coding146,
	x64Parser::Coding147,
	x64Parser::Coding148,
	x64Parser::Coding149,
	x64Parser::Coding150,
	x64Parser::Coding151,
	x64Parser::Coding152,
	x64Parser::Coding153,
	x64Parser::Coding154,
	x64Parser::Coding155,
	x64Parser::Coding156,
	x64Parser::Coding157,
	x64Parser::Coding158,
	x64Parser::Coding159,
	x64Parser::Coding160,
	x64Parser::Coding161,
	x64Parser::Coding162,
	x64Parser::Coding163,
	x64Parser::Coding164,
	x64Parser::Coding165,
	x64Parser::Coding166,
	x64Parser::Coding167,
	x64Parser::Coding168,
	x64Parser::Coding169,
	x64Parser::Coding170,
	x64Parser::Coding171,
	x64Parser::Coding172,
	x64Parser::Coding173,
	x64Parser::Coding174,
	x64Parser::Coding175,
	x64Parser::Coding176,
	x64Parser::Coding177,
	x64Parser::Coding178,
	x64Parser::Coding179,
	x64Parser::Coding180,
	x64Parser::Coding181,
	x64Parser::Coding182,
	x64Parser::Coding183,
	x64Parser::Coding184,
	x64Parser::Coding185,
	x64Parser::Coding186,
	x64Parser::Coding187,
	x64Parser::Coding188,
	x64Parser::Coding189,
	x64Parser::Coding190,
	x64Parser::Coding191,
	x64Parser::Coding192,
	x64Parser::Coding193,
	x64Parser::Coding194,
	x64Parser::Coding195,
	x64Parser::Coding196,
	x64Parser::Coding197,
	x64Parser::Coding198,
	x64Parser::Coding199,
	x64Parser::Coding200,
	x64Parser::Coding201,
	x64Parser::Coding202,
	x64Parser::Coding203,
	x64Parser::Coding204,
	x64Parser::Coding205,
	x64Parser::Coding206,
	x64Parser::Coding207,
	x64Parser::Coding208,
	x64Parser::Coding209,
	x64Parser::Coding210,
	x64Parser::Coding211,
	x64Parser::Coding212,
	x64Parser::Coding213,
	x64Parser::Coding214,
	x64Parser::Coding215,
	x64Parser::Coding216,
	x64Parser::Coding217,
	x64Parser::Coding218,
	x64Parser::Coding219,
	x64Parser::Coding220,
	x64Parser::Coding221,
	x64Parser::Coding222,
	x64Parser::Coding223,
	x64Parser::Coding224,
	x64Parser::Coding225,
	x64Parser::Coding226,
	x64Parser::Coding227,
	x64Parser::Coding228,
	x64Parser::Coding229,
	x64Parser::Coding230,
	x64Parser::Coding231,
	x64Parser::Coding232,
	x64Parser::Coding233,
	x64Parser::Coding234,
	x64Parser::Coding235,
	x64Parser::Coding236,
	x64Parser::Coding237,
	x64Parser::Coding238,
	x64Parser::Coding239,
	x64Parser::Coding240,
	x64Parser::Coding241,
	x64Parser::Coding242,
	x64Parser::Coding243,
	x64Parser::Coding244,
	x64Parser::Coding245,
	x64Parser::Coding246,
	x64Parser::Coding247,
	x64Parser::Coding248,
	x64Parser::Coding249,
	x64Parser::Coding250,
	x64Parser::Coding251,
	x64Parser::Coding252,
	x64Parser::Coding253,
	x64Parser::Coding254,
	x64Parser::Coding255,
	x64Parser::Coding256,
	x64Parser::Coding257,
	x64Parser::Coding258,
	x64Parser::Coding259,
	x64Parser::Coding260,
	x64Parser::Coding261,
	x64Parser::Coding262,
	x64Parser::Coding263,
	x64Parser::Coding264,
	x64Parser::Coding265,
	x64Parser::Coding266,
	x64Parser::Coding267,
	x64Parser::Coding268,
	x64Parser::Coding269,
	x64Parser::Coding270,
	x64Parser::Coding271,
	x64Parser::Coding272,
	x64Parser::Coding273,
	x64Parser::Coding274,
	x64Parser::Coding275,
	x64Parser::Coding276,
	x64Parser::Coding277,
	x64Parser::Coding278,
	x64Parser::Coding279,
	x64Parser::Coding280,
	x64Parser::Coding281,
	x64Parser::Coding282,
	x64Parser::Coding283,
	x64Parser::Coding284,
	x64Parser::Coding285,
	x64Parser::Coding286,
	x64Parser::Coding287,
	x64Parser::Coding288,
	x64Parser::Coding289,
	x64Parser::Coding290,
	x64Parser::Coding291,
	x64Parser::Coding292,
	x64Parser::Coding293,
	x64Parser::Coding294,
	x64Parser::Coding295,
	x64Parser::Coding296,
	x64Parser::Coding297,
	x64Parser::Coding298,
	x64Parser::Coding299,
	x64Parser::Coding300,
	x64Parser::Coding301,
	x64Parser::Coding302,
	x64Parser::Coding303,
	x64Parser::Coding304,
	x64Parser::Coding305,
	x64Parser::Coding306,
	x64Parser::Coding307,
	x64Parser::Coding308,
	x64Parser::Coding309,
	x64Parser::Coding310,
	x64Parser::Coding311,
	x64Parser::Coding312,
	x64Parser::Coding313,
	x64Parser::Coding314,
	x64Parser::Coding315,
	x64Parser::Coding316,
	x64Parser::Coding317,
	x64Parser::Coding318,
	x64Parser::Coding319,
	x64Parser::Coding320,
	x64Parser::Coding321,
	x64Parser::Coding322,
	x64Parser::Coding323,
	x64Parser::Coding324,
	x64Parser::Coding325,
	x64Parser::Coding326,
	x64Parser::Coding327,
	x64Parser::Coding328,
	x64Parser::Coding329,
	x64Parser::Coding330,
	x64Parser::Coding331,
	x64Parser::Coding332,
	x64Parser::Coding333,
	x64Parser::Coding334,
	x64Parser::Coding335,
	x64Parser::Coding336,
	x64Parser::Coding337,
	x64Parser::Coding338,
	x64Parser::Coding339,
	x64Parser::Coding340,
	x64Parser::Coding341,
	x64Parser::Coding342,
	x64Parser::Coding343,
	x64Parser::Coding344,
	x64Parser::Coding345,
	x64Parser::Coding346,
	x64Parser::Coding347,
	x64Parser::Coding348,
	x64Parser::Coding349,
	x64Parser::Coding350,
	x64Parser::Coding351,
	x64Parser::Coding352,
	x64Parser::Coding353,
	x64Parser::Coding354,
	x64Parser::Coding355,
	x64Parser::Coding356,
	x64Parser::Coding357,
	x64Parser::Coding358,
	x64Parser::Coding359,
	x64Parser::Coding360,
	x64Parser::Coding361,
	x64Parser::Coding362,
	x64Parser::Coding363,
	x64Parser::Coding364,
	x64Parser::Coding365,
	x64Parser::Coding366,
	x64Parser::Coding367,
	x64Parser::Coding368,
	x64Parser::Coding369,
	x64Parser::Coding370,
	x64Parser::Coding371,
	x64Parser::Coding372,
	x64Parser::Coding373,
	x64Parser::Coding374,
	x64Parser::Coding375,
	x64Parser::Coding376,
	x64Parser::Coding377,
	x64Parser::Coding378,
	x64Parser::Coding379,
	x64Parser::Coding380,
	x64Parser::Coding381,
	x64Parser::Coding382,
	x64Parser::Coding383,
	x64Parser::Coding384,
	x64Parser::Coding385,
	x64Parser::Coding386,
	x64Parser::Coding387,
	x64Parser::Coding388,
	x64Parser::Coding389,
	x64Parser::Coding390,
	x64Parser::Coding391,
	x64Parser::Coding392,
	x64Parser::Coding393,
	x64Parser::Coding394,
	x64Parser::Coding395,
	x64Parser::Coding396,
	x64Parser::Coding397,
	x64Parser::Coding398,
	x64Parser::Coding399,
	x64Parser::Coding400,
	x64Parser::Coding401,
	x64Parser::Coding402,
	x64Parser::Coding403,
	x64Parser::Coding404,
	x64Parser::Coding405,
	x64Parser::Coding406,
	x64Parser::Coding407,
	x64Parser::Coding408,
	x64Parser::Coding409,
	x64Parser::Coding410,
	x64Parser::Coding411,
	x64Parser::Coding412,
	x64Parser::Coding413,
	x64Parser::Coding414,
	x64Parser::Coding415,
	x64Parser::Coding416,
	x64Parser::Coding417,
	x64Parser::Coding418,
	x64Parser::Coding419,
	x64Parser::Coding420,
	x64Parser::Coding421,
	x64Parser::Coding422,
	x64Parser::Coding423,
	x64Parser::Coding424,
	x64Parser::Coding425,
	x64Parser::Coding426,
	x64Parser::Coding427,
	x64Parser::Coding428,
	x64Parser::Coding429,
	x64Parser::Coding430,
	x64Parser::Coding431,
	x64Parser::Coding432,
	x64Parser::Coding433,
	x64Parser::Coding434,
	x64Parser::Coding435,
	x64Parser::Coding436,
	x64Parser::Coding437,
	x64Parser::Coding438,
	x64Parser::Coding439,
	x64Parser::Coding440,
	x64Parser::Coding441,
	x64Parser::Coding442,
	x64Parser::Coding443,
	x64Parser::Coding444,
	x64Parser::Coding445,
	x64Parser::Coding446,
	x64Parser::Coding447,
	x64Parser::Coding448,
	x64Parser::Coding449,
	x64Parser::Coding450,
	x64Parser::Coding451,
	x64Parser::Coding452,
	x64Parser::Coding453,
	x64Parser::Coding454,
	x64Parser::Coding455,
	x64Parser::Coding456,
	x64Parser::Coding457,
	x64Parser::Coding458,
	x64Parser::Coding459,
	x64Parser::Coding460,
	x64Parser::Coding461,
	x64Parser::Coding462,
	x64Parser::Coding463,
	x64Parser::Coding464,
	x64Parser::Coding465,
	x64Parser::Coding466,
	x64Parser::Coding467,
	x64Parser::Coding468,
	x64Parser::Coding469,
	x64Parser::Coding470,
	x64Parser::Coding471,
	x64Parser::Coding472,
	x64Parser::Coding473,
	x64Parser::Coding474,
	x64Parser::Coding475,
	x64Parser::Coding476,
	x64Parser::Coding477,
	x64Parser::Coding478,
	x64Parser::Coding479,
	x64Parser::Coding480,
	x64Parser::Coding481,
	x64Parser::Coding482,
	x64Parser::Coding483,
	x64Parser::Coding484,
	x64Parser::Coding485,
	x64Parser::Coding486,
	x64Parser::Coding487,
	x64Parser::Coding488,
	x64Parser::Coding489,
	x64Parser::Coding490,
	x64Parser::Coding491,
	x64Parser::Coding492,
	x64Parser::Coding493,
	x64Parser::Coding494,
	x64Parser::Coding495,
	x64Parser::Coding496,
	x64Parser::Coding497,
	x64Parser::Coding498,
	x64Parser::Coding499,
	x64Parser::Coding500,
	x64Parser::Coding501,
	x64Parser::Coding502,
	x64Parser::Coding503,
	x64Parser::Coding504,
	x64Parser::Coding505,
	x64Parser::Coding506,
	x64Parser::Coding507,
	x64Parser::Coding508,
	x64Parser::Coding509,
	x64Parser::Coding510,
	x64Parser::Coding511,
	x64Parser::Coding512,
	x64Parser::Coding513,
	x64Parser::Coding514,
	x64Parser::Coding515,
	x64Parser::Coding516,
	x64Parser::Coding517,
	x64Parser::Coding518,
	x64Parser::Coding519,
	x64Parser::Coding520,
	x64Parser::Coding521,
	x64Parser::Coding522,
	x64Parser::Coding523,
	x64Parser::Coding524,
	x64Parser::Coding525,
	x64Parser::Coding526,
	x64Parser::Coding527,
	x64Parser::Coding528,
	x64Parser::Coding529,
	x64Parser::Coding530,
	x64Parser::Coding531,
	x64Parser::Coding532,
	x64Parser::Coding533,
	x64Parser::Coding534,
	x64Parser::Coding535,
	x64Parser::Coding536,
	x64Parser::Coding537,
	x64Parser::Coding538,
	x64Parser::Coding539,
	x64Parser::Coding540,
	x64Parser::Coding541,
	x64Parser::Coding542,
	x64Parser::Coding543,
	x64Parser::Coding544,
	x64Parser::Coding545,
	x64Parser::Coding546,
	x64Parser::Coding547,
	x64Parser::Coding548,
	x64Parser::Coding549,
	x64Parser::Coding550,
	x64Parser::Coding551,
	x64Parser::Coding552,
	x64Parser::Coding553,
	x64Parser::Coding554,
	x64Parser::Coding555,
	x64Parser::Coding556,
	x64Parser::Coding557,
	x64Parser::Coding558,
	x64Parser::Coding559,
	x64Parser::Coding560,
	x64Parser::Coding561,
	x64Parser::Coding562,
	x64Parser::Coding563,
	x64Parser::Coding564,
	x64Parser::Coding565,
	x64Parser::Coding566,
	x64Parser::Coding567,
	x64Parser::Coding568,
	x64Parser::Coding569,
	x64Parser::Coding570,
	x64Parser::Coding571,
	x64Parser::Coding572,
	x64Parser::Coding573,
	x64Parser::Coding574,
	x64Parser::Coding575,
	x64Parser::Coding576,
	x64Parser::Coding577,
	x64Parser::Coding578,
	x64Parser::Coding579,
	x64Parser::Coding580,
	x64Parser::Coding581,
	x64Parser::Coding582,
	x64Parser::Coding583,
	x64Parser::Coding584,
	x64Parser::Coding585,
	x64Parser::Coding586,
	x64Parser::Coding587,
	x64Parser::Coding588,
	x64Parser::Coding589,
	x64Parser::Coding590,
	x64Parser::Coding591,
	x64Parser::Coding592,
	x64Parser::Coding593,
	x64Parser::Coding594,
	x64Parser::Coding595,
	x64Parser::Coding596,
	x64Parser::Coding597,
	x64Parser::Coding598,
	x64Parser::Coding599,
	x64Parser::Coding600,
	x64Parser::Coding601,
	x64Parser::Coding602,
	x64Parser::Coding603,
	x64Parser::Coding604,
	x64Parser::Coding605,
	x64Parser::Coding606,
	x64Parser::Coding607,
	x64Parser::Coding608,
	x64Parser::Coding609,
	x64Parser::Coding610,
	x64Parser::Coding611,
	x64Parser::Coding612,
	x64Parser::Coding613,
	x64Parser::Coding614,
	x64Parser::Coding615,
	x64Parser::Coding616,
	x64Parser::Coding617,
};
Coding x64Parser::prefixCoding1[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding2[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding3[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding4[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding5[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding6[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding7[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding8[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding9[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding10[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding *x64Parser::prefixCodings[] = {
	x64Parser::prefixCoding1,
	x64Parser::prefixCoding2,
	x64Parser::prefixCoding3,
	x64Parser::prefixCoding4,
	x64Parser::prefixCoding5,
	x64Parser::prefixCoding6,
	x64Parser::prefixCoding7,
	x64Parser::prefixCoding8,
	x64Parser::prefixCoding9,
	x64Parser::prefixCoding10,
};
bool x64Parser::MatchesToken(int token, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::TOKEN && inputTokens[tokenPos]->val->ival == token;
}
	bool x64Parser::MatchesRegister(int reg, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER && inputTokens[tokenPos]->val->ival == reg;
}
	bool x64Parser::MatchesRegisterClass(int cclass, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER && (registerDataIndirect[cclass][inputTokens[tokenPos]->val->ival >> 3] & (1 << (inputTokens[tokenPos]->val->ival & 7)));
}
bool x64Parser::ParseAddresses(x64Operand &operand, int addrClass, int &tokenPos)
{
	int level = 0;
	bool rv = false;
	x64Token *t = tokenBranches1;
	while (t->type != x64Token::EOT)
	{
		bool matches = false;
		if (t->addrClass[addrClass >> 3] & (1 << (addrClass & 7)))
		{
			switch (t->type)
			{
				case x64Token::EMPTY:
					matches = true;
					break;
				case x64Token::TOKEN:
					matches = MatchesToken(t->id, tokenPos);
					break;
				case x64Token::REGISTER:
					matches = MatchesRegister(t->id, tokenPos);
					break;
				case x64Token::REGISTERCLASS:
					matches = MatchesRegisterClass(t->id, tokenPos);
					break;
				case x64Token::NUMBER:
					if (tokenPos < inputTokens.size())
						matches = (this->*numberFuncs[t->id])(tokenPos);
					break;
				default:
					matches = false;
					break;
			}
		}
		if (!matches)
		{
			if (t->level > level)
			{
				t = t->next;
				continue;
			}
		}
		else
			level = t->level;
		if (matches)
		{
			if (t->tokenFunc)
				(this->*(t->tokenFunc))(operand, tokenPos);
			if (t->eos && (tokenPos == inputTokens.size()-1 || !t->next))
			{
				rv = true;
				break;
			}
			t = t->next;
			tokenPos++;
		}
		else
		{
			t++;
		}
	}
	return rv;
}

bool x64Parser::ParseOperands2(x64Token *tokenList, x64Operand &operand, int tokenPos, int level)
{
	bool rv = false;
	x64Token *t = tokenList;
	while (t && t->type != x64Token::EOT)
	{
		bool matches = false;
		int last = tokenPos;
		switch (t->type)
		{
			case x64Token::EMPTY:
				matches = true;
				break;
			case x64Token::TOKEN:
				matches = MatchesToken(t->id, tokenPos);
				break;
			case x64Token::REGISTER:
				matches = MatchesRegister(t->id, tokenPos);
				break;
			case x64Token::REGISTERCLASS:
				matches = MatchesRegisterClass(t->id,tokenPos);
				break;
			case x64Token::ADDRESSCLASS:
				matches = ParseAddresses(operand, t->id, tokenPos);
				break;
			case x64Token::NUMBER:
				if (tokenPos < inputTokens.size())
					matches = (this->*numberFuncs[t->id])(tokenPos);
				break;
			default:
				matches = false;
				break;
		}
		if (!matches)
		{
			if (t->level > level)
			{
				if (ParseOperands2(t->next, operand, tokenPos, t->level))
				{
					rv = true;
					break;
				}
			}
		}
		else
		{
			if (t->tokenFunc)
				(this->*(t->tokenFunc))(operand, last);
			if (t->eos && (!t->next || tokenPos == inputTokens.size()-1))
			{
				if (tokenPos >= (int)(inputTokens.size()-1))
					eol = true;
				rv = true;
				break;
			}
			if (tokenPos < inputTokens.size() && ParseOperands2(t->next, operand, tokenPos+1, t->level))
			{
				rv = true;
				break;
			}
		}
		tokenPos = last;
		t++;
	}
	return rv;
}

bool x64Parser::ParseOperands(x64Token *tokenList, x64Operand &operand)
{
	return ParseOperands2(tokenList, operand, 0, 0);
}

bool x64Parser::ProcessCoding(x64Operand &operand, Coding *coding, int field, int bits, int* arr, char* bitcounts, char *func, int &index)
{
	int acc = 0, binary = 0;
	while (coding->type != Coding::eot)
	{
		if (coding->type & Coding::bitSpecified)
			bits = coding->bits;
		if (coding->type & Coding::valSpecified)
		{
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = coding->val;
		}
		else if (coding->type & Coding::reg)
		{
			int n = coding->val;
			if (field != -1)
				n = registerValues[n][field];
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = n;
		}
		else if (coding->type & Coding::stateFunc)
		{
			Coding *c = (this->*stateFuncs[coding->val])();
			int index1 = index;
			if (!ProcessCoding(operand, c, coding->field, bits, arr, bitcounts, func, index))
				return false;
			if (index != index1 && coding->binary)
				func[index - 1] = coding->binary;
		}
		else if (coding->type & Coding::stateVar)
		{
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = stateVars[coding->val];
		}
		else if (coding->type & Coding::number)
		{
			int n = coding->val;
			auto it = operands.begin();
			for (int i = 0; i < n; i++)
			{
				++it;
			}
			(*it)->used = true;
			(*it)->pos = this->bits.GetBits();
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = (*it)->node->ival;
		}
		else if (coding->type & Coding::native)
		{
			if (operand.addressCoding == -1)
				return false;
			int index1 = index;
			if (!ProcessCoding(operand, Codings[operand.addressCoding], coding->field, bits, arr, bitcounts, func, index))
				return false;
			if (index != index1 && coding->binary)
				func[index - 1] = coding->binary;
		}
		else if (coding->type & Coding::indirect)
		{
			if (!operand.values[coding->val])
			{
				if (!(coding->type & Coding::optional))
				{
					return false;
				}
			}
			else
			{
				int index1 = index;
				if (!ProcessCoding(operand, operand.values[coding->val], coding->field, bits, arr, bitcounts, func, index))
					return false;
				if (index != index1 && coding->binary)
					func[index - 1] = coding->binary;
			}
		}
		else if (coding->type & Coding::illegal)
		{
			return false;
		}
		else
		{
			return false;
		}
		coding++;
	}
	return true;
}
bool x64Parser::ProcessCoding(x64Operand &operand, Coding *coding)
{
	int arr[1000];
	char bitcount[1000];
	char func[1000];
	int index = 0;
	if (coding->type == Coding::eot)
		return true;
	int defaultBits = 8;
	bool rv = ProcessCoding(operand, coding, -1, defaultBits, arr, bitcount, func, index);
	if (rv)
	{
		for (int i = 0; i < index; i++)
		{
			if (func[i])
				arr[i + 1] = DoMath(func[i], arr[i], arr[i + 1]);
			else
				bits.Add(arr[i], bitcount[i]);
		}
	}
	return rv;
}
bool x64Parser::DispatchOpcode(int opcode)
{
	bool rv;
	if (opcode == -1)
	{
		rv = true;
		x64Operand operand;
		for (auto& a : prefixes)
			rv &= ProcessCoding(operand, prefixCodings[a]);
	}
	else
	{
		x64Operand operand;
		operand.opcode = opcode;
		rv = (this->*DispatchTable[opcode])(operand);
		if (rv)
		{
			for (auto& a : prefixes)
				rv &= ProcessCoding(operand, prefixCodings[a]);
			if (rv)
			{
				if (operand.operandCoding != -1)
					rv = ProcessCoding(operand, Codings[operand.operandCoding]);
				else if (operand.addressCoding != -1)
					rv = ProcessCoding(operand, Codings[operand.addressCoding]);
				else rv = false;
			}
		}
	}
	return rv;
}
