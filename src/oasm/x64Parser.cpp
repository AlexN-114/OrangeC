#include "InstructionParser.h"
#include "x64Operand.h"
#include "x64Parser.h"

InstructionParser *InstructionParser::GetInstance()
{
	return static_cast<InstructionParser *>(new x64Parser());
}
Coding x64Parser::stateCoding_eot[] = { { Coding::eot } };
Coding x64Parser::stateCoding1_1[] = {
	{ CODING_NAME("addr16")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding1_2[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding2_1[] = {
	{ CODING_NAME("addr32")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding2_2[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding3_1[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding4_1[] = {
	{ CODING_NAME("data16")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding4_2[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding5_1[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding5_2[] = {
	{ CODING_NAME("data32")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding6_1[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding7_1[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding7_2[] = {
	{ CODING_NAME("no64")  Coding::illegal },
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding8_1[] = {
	{ CODING_NAME("only64")  Coding::illegal },
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding8_2[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::stateCoding9_1[] = {
	{ CODING_NAME("rex")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding *x64Parser::StateFunc1()
{
	if (stateVars[0]!=16)
	{
		return stateCoding1_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding1_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc2()
{
	if (stateVars[0]!=32)
	{
		return stateCoding2_1;
	}
	if (stateVars[0]==32)
	{
		return stateCoding2_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc3()
{
	if (true)
	{
		return stateCoding3_1;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc4()
{
	if (stateVars[0]!=16)
	{
		return stateCoding4_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding4_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc5()
{
	if (stateVars[0]!=16)
	{
		return stateCoding5_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding5_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc6()
{
	if (true)
	{
		return stateCoding6_1;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc7()
{
	if (stateVars[0]!=64)
	{
		return stateCoding7_1;
	}
	if (stateVars[0]==64)
	{
		return stateCoding7_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc8()
{
	if (stateVars[0]!=64)
	{
		return stateCoding8_1;
	}
	if (stateVars[0]==64)
	{
		return stateCoding8_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc9()
{
	if (true)
	{
		return stateCoding9_1;
	}
	return stateCoding_eot;
}
x64Parser::StateFuncDispatchType x64Parser::stateFuncs[] = {
	&x64Parser::StateFunc1,
	&x64Parser::StateFunc2,
	&x64Parser::StateFunc3,
	&x64Parser::StateFunc4,
	&x64Parser::StateFunc5,
	&x64Parser::StateFunc6,
	&x64Parser::StateFunc7,
	&x64Parser::StateFunc8,
	&x64Parser::StateFunc9,
};
bool x64Parser::Number1(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 1, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number2(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 1, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number3(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 6, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number4(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number5(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number6(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number7(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(0, 0, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number8(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==32)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number9(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==64)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number10(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(1, 1, 8, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number11(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(-1, 1, 8, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number12(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number13(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(-2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number14(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number15(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(-2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number16(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]!=16)
	{
		rv = ParseNumber(4, 1, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number17(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 1, 0);
	if (!rv)
		rv = SetNumber(tokenPos, 2, 1);
	if (!rv)
		rv = SetNumber(tokenPos, 4, 2);
	if (!rv)
		rv = SetNumber(tokenPos, 8, 3);
	return rv;
}
bool x64Parser::Number18(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 0, 0);
	return rv;
}
bool x64Parser::Number19(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 1, 1);
	return rv;
}
x64Parser::NumberDispatchType x64Parser::numberFuncs[] = {
	&x64Parser::Number1,
	&x64Parser::Number2,
	&x64Parser::Number3,
	&x64Parser::Number4,
	&x64Parser::Number5,
	&x64Parser::Number6,
	&x64Parser::Number7,
	&x64Parser::Number8,
	&x64Parser::Number9,
	&x64Parser::Number10,
	&x64Parser::Number11,
	&x64Parser::Number12,
	&x64Parser::Number13,
	&x64Parser::Number14,
	&x64Parser::Number15,
	&x64Parser::Number16,
	&x64Parser::Number17,
	&x64Parser::Number18,
	&x64Parser::Number19,
};

unsigned char x64Parser::RegClassData1[] = {255, 15, 0, 0, };
unsigned char x64Parser::RegClassData2[] = {127, 0, 0, 0, };
unsigned char x64Parser::RegClassData3[] = {190, 15, 0, 0, };
unsigned char x64Parser::RegClassData4[] = {63, 4, 0, 0, };
unsigned char x64Parser::RegClassData5[] = {191, 12, 0, 0, };
unsigned char x64Parser::RegClassData6[] = {4, 16, 0, 0, };
unsigned char x64Parser::RegClassData7[] = {8, 96, 0, 0, };
unsigned char x64Parser::RegClassData8[] = {16, 128, 1, 0, };
unsigned char x64Parser::RegClassData9[] = {32, 0, 6, 0, };
unsigned char x64Parser::RegClassData10[] = {128, 0, 24, 0, };
unsigned char x64Parser::RegClassData11[] = {0, 1, 224, 0, };
unsigned char x64Parser::RegClassData12[] = {0, 2, 0, 7, };

unsigned char x64Parser::registerData17[] = {0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData13[] = {0, 0, 0, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData6[] = {136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData9[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData22[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 7, 0, 0, };
unsigned char x64Parser::registerData23[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 7, 0, };
unsigned char x64Parser::registerData21[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 7, 0, 0, 0, };
unsigned char x64Parser::registerData1[] = {255, 255, 255, 255, 15, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData4[] = {2, 4, 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData16[] = {0, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData7[] = {136, 16, 33, 66, 4, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData10[] = {16, 33, 66, 132, 8, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData3[] = {33, 66, 132, 8, 17, 17, 17, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData12[] = {0, 0, 0, 120, 0, 0, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData5[] = {68, 136, 16, 33, 34, 34, 34, 34, 2, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData8[] = {136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData11[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData2[] = {35, 70, 140, 24, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData15[] = {0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData19[] = {0, 0, 0, 0, 0, 0, 0, 0, 32, 73, 146, 4, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData18[] = {0, 0, 0, 0, 0, 0, 0, 0, 224, 255, 255, 31, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData20[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 7, 0, 0, 0, 0, };
unsigned char x64Parser::registerData14[] = {0, 0, 0, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData24[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 7, };

unsigned char *x64Parser::registerDataIndirect[] = {
	registerData1,
	registerData2,
	registerData3,
	registerData4,
	registerData5,
	registerData6,
	registerData7,
	registerData8,
	registerData9,
	registerData10,
	registerData11,
	registerData12,
	registerData13,
	registerData14,
	registerData15,
	registerData16,
	registerData17,
	registerData18,
	registerData19,
	registerData20,
	registerData21,
	registerData22,
	registerData23,
	registerData24,
};

int x64Parser::registerValues[][8] = {
	{ 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 8, 0, -1, -1, -1, },
	{ 1, 0, 4, 0, 2, -1, -1, -1, },
	{ 1, 0, 4, 0, 2, -1, -1, -1, },
	{ 1, 0, 4, 0, 2, -1, -1, -1, },
	{ 1, 0, 4, 8, 2, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 8, 0, -1, -1, -1, },
	{ 1, 1, 4, 0, 2, -1, -1, -1, },
	{ 1, 1, 4, 0, 2, -1, -1, -1, },
	{ 1, 1, 4, 0, 2, -1, -1, -1, },
	{ 1, 1, 4, 8, 2, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 8, 0, -1, -1, -1, },
	{ 1, 2, 4, 0, 2, -1, -1, -1, },
	{ 1, 2, 4, 0, 2, -1, -1, -1, },
	{ 1, 2, 4, 0, 2, -1, -1, -1, },
	{ 1, 2, 4, 8, 2, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, 0, -1, -1, },
	{ 0, 3, 0, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 8, 0, -1, -1, -1, },
	{ 1, 3, 4, 0, 2, -1, -1, -1, },
	{ 1, 3, 4, 0, 2, -1, -1, -1, },
	{ 1, 3, 4, 0, 2, -1, -1, -1, },
	{ 1, 3, 4, 8, 2, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 8, 0, -1, -1, -1, },
	{ 1, 4, 4, 0, 2, -1, -1, -1, },
	{ 1, 4, 4, 0, 2, -1, -1, -1, },
	{ 1, 4, 4, 0, 2, -1, -1, -1, },
	{ 1, 4, 4, 8, 2, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, 1, -1, -1, },
	{ 0, 5, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 8, 0, -1, -1, -1, },
	{ 1, 5, 4, 0, 2, -1, -1, -1, },
	{ 1, 5, 4, 0, 2, -1, -1, -1, },
	{ 1, 5, 4, 0, 2, -1, -1, -1, },
	{ 1, 5, 4, 8, 2, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, -1, 0, -1, },
	{ 0, 6, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 8, 0, -1, -1, -1, },
	{ 1, 6, 4, 0, 2, -1, -1, -1, },
	{ 1, 6, 4, 0, 2, -1, -1, -1, },
	{ 1, 6, 4, 0, 2, -1, -1, -1, },
	{ 1, 6, 4, 8, 2, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, -1, 1, -1, },
	{ 0, 7, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 8, 0, -1, -1, -1, },
	{ 1, 7, 4, 0, 2, -1, -1, -1, },
	{ 1, 7, 4, 0, 2, -1, -1, -1, },
	{ 1, 7, 4, 0, 2, -1, -1, -1, },
	{ 1, 7, 4, 8, 2, -1, -1, -1, },
	{ -1, -1, -1, -1, -1, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 0, 4, 0, 2, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, -1, -1, -1, },
	{ 1, 1, 4, 0, 2, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, -1, -1, -1, },
	{ 1, 2, 4, 0, 2, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, -1, -1, -1, },
	{ 1, 3, 4, 0, 2, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 1, 4, 4, 0, 2, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, -1, -1, -1, },
	{ 1, 5, 4, 0, 2, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, -1, -1, -1, },
	{ 1, 6, 4, 0, 2, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, -1, -1, -1, },
	{ 1, 7, 4, 0, 2, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, 38, },
	{ -1, 1, -1, -1, -1, -1, -1, 46, },
	{ -1, 2, -1, -1, -1, -1, -1, 54, },
	{ -1, 3, -1, -1, -1, -1, -1, 62, },
	{ -1, 4, -1, -1, -1, -1, -1, 100, },
	{ -1, 5, -1, -1, -1, -1, -1, 101, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, },
};

void x64Parser::Init()
{
	memset(&stateVars, 0, sizeof(stateVars));
	stateVars[0] = 16;
	tokenTable[""] = 0;
	tokenTable["*"] = 5;
	tokenTable["+"] = 4;
	tokenTable[","] = 7;
	tokenTable[":"] = 3;
	tokenTable["["] = 1;
	tokenTable["]"] = 2;
	tokenTable["byte"] = 11;
	tokenTable["dword"] = 9;
	tokenTable["far"] = 15;
	tokenTable["near"] = 14;
	tokenTable["qword"] = 10;
	tokenTable["short"] = 13;
	tokenTable["tword"] = 12;
	tokenTable["word"] = 8;
	tokenTable["al"] = 1000;
	tokenTable["ah"] = 1001;
	tokenTable["ax"] = 1002;
	tokenTable["eax"] = 1003;
	tokenTable["rax"] = 1004;
	tokenTable["r8b"] = 1005;
	tokenTable["r8w"] = 1006;
	tokenTable["r8d"] = 1007;
	tokenTable["r8"] = 1008;
	tokenTable["cl"] = 1009;
	tokenTable["ch"] = 1010;
	tokenTable["cx"] = 1011;
	tokenTable["ecx"] = 1012;
	tokenTable["rcx"] = 1013;
	tokenTable["r9b"] = 1014;
	tokenTable["r9w"] = 1015;
	tokenTable["r9d"] = 1016;
	tokenTable["r9"] = 1017;
	tokenTable["dl"] = 1018;
	tokenTable["dh"] = 1019;
	tokenTable["dx"] = 1020;
	tokenTable["edx"] = 1021;
	tokenTable["rdx"] = 1022;
	tokenTable["r10b"] = 1023;
	tokenTable["r10w"] = 1024;
	tokenTable["r10d"] = 1025;
	tokenTable["r10"] = 1026;
	tokenTable["bl"] = 1027;
	tokenTable["bh"] = 1028;
	tokenTable["bx"] = 1029;
	tokenTable["ebx"] = 1030;
	tokenTable["rbx"] = 1031;
	tokenTable["r11b"] = 1032;
	tokenTable["r11w"] = 1033;
	tokenTable["r11d"] = 1034;
	tokenTable["r11"] = 1035;
	tokenTable["spl"] = 1036;
	tokenTable["sp"] = 1037;
	tokenTable["esp"] = 1038;
	tokenTable["rsp"] = 1039;
	tokenTable["r12b"] = 1040;
	tokenTable["r12w"] = 1041;
	tokenTable["r12d"] = 1042;
	tokenTable["r12"] = 1043;
	tokenTable["bpl"] = 1044;
	tokenTable["bp"] = 1045;
	tokenTable["ebp"] = 1046;
	tokenTable["rbp"] = 1047;
	tokenTable["r13b"] = 1048;
	tokenTable["r13w"] = 1049;
	tokenTable["r13d"] = 1050;
	tokenTable["r13"] = 1051;
	tokenTable["sil"] = 1052;
	tokenTable["si"] = 1053;
	tokenTable["esi"] = 1054;
	tokenTable["rsi"] = 1055;
	tokenTable["r14b"] = 1056;
	tokenTable["r14w"] = 1057;
	tokenTable["r14d"] = 1058;
	tokenTable["r14"] = 1059;
	tokenTable["dil"] = 1060;
	tokenTable["di"] = 1061;
	tokenTable["edi"] = 1062;
	tokenTable["rdi"] = 1063;
	tokenTable["r15b"] = 1064;
	tokenTable["r15w"] = 1065;
	tokenTable["r15d"] = 1066;
	tokenTable["r15"] = 1067;
	tokenTable["rip"] = 1068;
	tokenTable["mm0"] = 1069;
	tokenTable["xmm0"] = 1070;
	tokenTable["xmm8"] = 1071;
	tokenTable["mm1"] = 1072;
	tokenTable["xmm1"] = 1073;
	tokenTable["xmm9"] = 1074;
	tokenTable["mm2"] = 1075;
	tokenTable["xmm2"] = 1076;
	tokenTable["xmm10"] = 1077;
	tokenTable["mm3"] = 1078;
	tokenTable["xmm3"] = 1079;
	tokenTable["xmm11"] = 1080;
	tokenTable["mm4"] = 1081;
	tokenTable["xmm4"] = 1082;
	tokenTable["xmm12"] = 1083;
	tokenTable["mm5"] = 1084;
	tokenTable["xmm5"] = 1085;
	tokenTable["xmm13"] = 1086;
	tokenTable["mm6"] = 1087;
	tokenTable["xmm6"] = 1088;
	tokenTable["xmm14"] = 1089;
	tokenTable["mm7"] = 1090;
	tokenTable["xmm7"] = 1091;
	tokenTable["xmm15"] = 1092;
	tokenTable["es"] = 1093;
	tokenTable["cs"] = 1094;
	tokenTable["ss"] = 1095;
	tokenTable["ds"] = 1096;
	tokenTable["fs"] = 1097;
	tokenTable["gs"] = 1098;
	tokenTable["st0"] = 1099;
	tokenTable["st1"] = 1100;
	tokenTable["st2"] = 1101;
	tokenTable["st3"] = 1102;
	tokenTable["st4"] = 1103;
	tokenTable["st5"] = 1104;
	tokenTable["st6"] = 1105;
	tokenTable["st7"] = 1106;
	tokenTable["cr0"] = 1107;
	tokenTable["cr1"] = 1108;
	tokenTable["cr2"] = 1109;
	tokenTable["cr3"] = 1110;
	tokenTable["cr4"] = 1111;
	tokenTable["cr5"] = 1112;
	tokenTable["cr6"] = 1113;
	tokenTable["cr7"] = 1114;
	tokenTable["dr0"] = 1115;
	tokenTable["dr1"] = 1116;
	tokenTable["dr2"] = 1117;
	tokenTable["dr3"] = 1118;
	tokenTable["dr4"] = 1119;
	tokenTable["dr5"] = 1120;
	tokenTable["dr6"] = 1121;
	tokenTable["dr7"] = 1122;
	tokenTable["tr0"] = 1123;
	tokenTable["tr1"] = 1124;
	tokenTable["tr2"] = 1125;
	tokenTable["tr3"] = 1126;
	tokenTable["tr4"] = 1127;
	tokenTable["tr5"] = 1128;
	tokenTable["tr6"] = 1129;
	tokenTable["tr7"] = 1130;
	opcodeTable["aaa"] = 32;
	opcodeTable["aad"] = 33;
	opcodeTable["aam"] = 34;
	opcodeTable["aas"] = 35;
	opcodeTable["adc"] = 36;
	opcodeTable["add"] = 37;
	opcodeTable["and"] = 38;
	opcodeTable["arpl"] = 39;
	opcodeTable["bound"] = 40;
	opcodeTable["bsf"] = 41;
	opcodeTable["bsr"] = 42;
	opcodeTable["bswap"] = 43;
	opcodeTable["bt"] = 44;
	opcodeTable["btc"] = 45;
	opcodeTable["btr"] = 46;
	opcodeTable["bts"] = 47;
	opcodeTable["call"] = 48;
	opcodeTable["cbw"] = 49;
	opcodeTable["cdq"] = 50;
	opcodeTable["cdqe"] = 51;
	opcodeTable["clc"] = 52;
	opcodeTable["cld"] = 53;
	opcodeTable["cli"] = 54;
	opcodeTable["clts"] = 55;
	opcodeTable["cmc"] = 56;
	opcodeTable["cmova"] = 57;
	opcodeTable["cmovae"] = 58;
	opcodeTable["cmovb"] = 59;
	opcodeTable["cmovbe"] = 60;
	opcodeTable["cmovc"] = 61;
	opcodeTable["cmove"] = 62;
	opcodeTable["cmovg"] = 63;
	opcodeTable["cmovge"] = 64;
	opcodeTable["cmovl"] = 65;
	opcodeTable["cmovle"] = 66;
	opcodeTable["cmovna"] = 67;
	opcodeTable["cmovnae"] = 68;
	opcodeTable["cmovnb"] = 69;
	opcodeTable["cmovnbe"] = 70;
	opcodeTable["cmovnc"] = 71;
	opcodeTable["cmovne"] = 72;
	opcodeTable["cmovng"] = 73;
	opcodeTable["cmovnge"] = 74;
	opcodeTable["cmovnl"] = 75;
	opcodeTable["cmovnle"] = 76;
	opcodeTable["cmovno"] = 77;
	opcodeTable["cmovnp"] = 78;
	opcodeTable["cmovns"] = 79;
	opcodeTable["cmovnz"] = 80;
	opcodeTable["cmovo"] = 81;
	opcodeTable["cmovp"] = 82;
	opcodeTable["cmovpe"] = 83;
	opcodeTable["cmovpo"] = 84;
	opcodeTable["cmovs"] = 85;
	opcodeTable["cmovz"] = 86;
	opcodeTable["cmp"] = 87;
	opcodeTable["cmps"] = 88;
	opcodeTable["cmpsb"] = 89;
	opcodeTable["cmpsw"] = 90;
	opcodeTable["cmpsd"] = 91;
	opcodeTable["cmpsq"] = 92;
	opcodeTable["cmpxchg"] = 93;
	opcodeTable["cmpxchg8b"] = 94;
	opcodeTable["cmpxchg16b"] = 95;
	opcodeTable["cpuid"] = 96;
	opcodeTable["cqo"] = 97;
	opcodeTable["cwd"] = 98;
	opcodeTable["cwde"] = 99;
	opcodeTable["daa"] = 100;
	opcodeTable["das"] = 101;
	opcodeTable["dec"] = 102;
	opcodeTable["div"] = 103;
	opcodeTable["enter"] = 104;
	opcodeTable["esc"] = 105;
	opcodeTable["f2xm1"] = 106;
	opcodeTable["fabs"] = 107;
	opcodeTable["fadd"] = 108;
	opcodeTable["faddp"] = 109;
	opcodeTable["fbld"] = 110;
	opcodeTable["fbstp"] = 111;
	opcodeTable["fchs"] = 112;
	opcodeTable["fclex"] = 113;
	opcodeTable["fnclex"] = 114;
	opcodeTable["fcmovb"] = 115;
	opcodeTable["fcmovbe"] = 116;
	opcodeTable["fcmove"] = 117;
	opcodeTable["fcmovnb"] = 118;
	opcodeTable["fcmovnbe"] = 119;
	opcodeTable["fcmovne"] = 120;
	opcodeTable["fcmovnu"] = 121;
	opcodeTable["fcmovu"] = 122;
	opcodeTable["fcom"] = 123;
	opcodeTable["fcomi"] = 124;
	opcodeTable["fcomip"] = 125;
	opcodeTable["fcomp"] = 126;
	opcodeTable["fcompp"] = 127;
	opcodeTable["fcos"] = 128;
	opcodeTable["fdecstp"] = 129;
	opcodeTable["fdisi"] = 130;
	opcodeTable["fdiv"] = 131;
	opcodeTable["fdivp"] = 132;
	opcodeTable["fdivr"] = 133;
	opcodeTable["fdivrp"] = 134;
	opcodeTable["feni"] = 135;
	opcodeTable["ffree"] = 136;
	opcodeTable["ffreep"] = 137;
	opcodeTable["fiadd"] = 138;
	opcodeTable["ficom"] = 139;
	opcodeTable["ficomp"] = 140;
	opcodeTable["fidiv"] = 141;
	opcodeTable["fidivr"] = 142;
	opcodeTable["fild"] = 143;
	opcodeTable["fimul"] = 144;
	opcodeTable["fincstp"] = 145;
	opcodeTable["finit"] = 146;
	opcodeTable["fninit"] = 147;
	opcodeTable["fist"] = 148;
	opcodeTable["fistp"] = 149;
	opcodeTable["fisub"] = 150;
	opcodeTable["fisubr"] = 151;
	opcodeTable["fld"] = 152;
	opcodeTable["fld1"] = 153;
	opcodeTable["fldcw"] = 154;
	opcodeTable["fldenv"] = 155;
	opcodeTable["fldl2e"] = 156;
	opcodeTable["fldl2t"] = 157;
	opcodeTable["fldlg2"] = 158;
	opcodeTable["fldln2"] = 159;
	opcodeTable["fldpi"] = 160;
	opcodeTable["fldz"] = 161;
	opcodeTable["fmul"] = 162;
	opcodeTable["fmulp"] = 163;
	opcodeTable["fnop"] = 164;
	opcodeTable["fnsave"] = 165;
	opcodeTable["fpatan"] = 166;
	opcodeTable["fprem"] = 167;
	opcodeTable["fprem1"] = 168;
	opcodeTable["fptan"] = 169;
	opcodeTable["frndint"] = 170;
	opcodeTable["frstor"] = 171;
	opcodeTable["fsave"] = 172;
	opcodeTable["fscale"] = 173;
	opcodeTable["fsetpm"] = 174;
	opcodeTable["fsin"] = 175;
	opcodeTable["fsincos"] = 176;
	opcodeTable["fsqrt"] = 177;
	opcodeTable["fst"] = 178;
	opcodeTable["fstcw"] = 179;
	opcodeTable["fnstcw"] = 180;
	opcodeTable["fstenv"] = 181;
	opcodeTable["fnstenv"] = 182;
	opcodeTable["fstp"] = 183;
	opcodeTable["fstsw"] = 184;
	opcodeTable["fnstsw"] = 185;
	opcodeTable["fsub"] = 186;
	opcodeTable["fsubp"] = 187;
	opcodeTable["fsubr"] = 188;
	opcodeTable["fsubrp"] = 189;
	opcodeTable["ftst"] = 190;
	opcodeTable["fucom"] = 191;
	opcodeTable["fucomi"] = 192;
	opcodeTable["fucomip"] = 193;
	opcodeTable["fucomp"] = 194;
	opcodeTable["fucompp"] = 195;
	opcodeTable["fwait"] = 196;
	opcodeTable["fxam"] = 197;
	opcodeTable["fxch"] = 198;
	opcodeTable["fxch4"] = 199;
	opcodeTable["fxch7"] = 200;
	opcodeTable["fxrstor"] = 201;
	opcodeTable["fxsave"] = 202;
	opcodeTable["fxtract"] = 203;
	opcodeTable["fyl2x"] = 204;
	opcodeTable["fyl2xp1"] = 205;
	opcodeTable["hlt"] = 206;
	opcodeTable["icebp"] = 207;
	opcodeTable["idiv"] = 208;
	opcodeTable["imul"] = 209;
	opcodeTable["in"] = 210;
	opcodeTable["ins"] = 211;
	opcodeTable["insb"] = 212;
	opcodeTable["insw"] = 213;
	opcodeTable["insd"] = 214;
	opcodeTable["inc"] = 215;
	opcodeTable["int"] = 216;
	opcodeTable["int1"] = 217;
	opcodeTable["int3"] = 218;
	opcodeTable["into"] = 219;
	opcodeTable["invd"] = 220;
	opcodeTable["invlpg"] = 221;
	opcodeTable["iret"] = 222;
	opcodeTable["iretw"] = 223;
	opcodeTable["iretd"] = 224;
	opcodeTable["iretq"] = 225;
	opcodeTable["ja"] = 226;
	opcodeTable["jae"] = 227;
	opcodeTable["jb"] = 228;
	opcodeTable["jbe"] = 229;
	opcodeTable["jc"] = 230;
	opcodeTable["jcxz"] = 231;
	opcodeTable["jecxz"] = 232;
	opcodeTable["je"] = 233;
	opcodeTable["jg"] = 234;
	opcodeTable["jge"] = 235;
	opcodeTable["jl"] = 236;
	opcodeTable["jle"] = 237;
	opcodeTable["jmp"] = 238;
	opcodeTable["jna"] = 239;
	opcodeTable["jnae"] = 240;
	opcodeTable["jnb"] = 241;
	opcodeTable["jnbe"] = 242;
	opcodeTable["jnc"] = 243;
	opcodeTable["jne"] = 244;
	opcodeTable["jng"] = 245;
	opcodeTable["jnge"] = 246;
	opcodeTable["jnl"] = 247;
	opcodeTable["jnle"] = 248;
	opcodeTable["jno"] = 249;
	opcodeTable["jnp"] = 250;
	opcodeTable["jns"] = 251;
	opcodeTable["jnz"] = 252;
	opcodeTable["jo"] = 253;
	opcodeTable["jp"] = 254;
	opcodeTable["jpe"] = 255;
	opcodeTable["jpo"] = 256;
	opcodeTable["js"] = 257;
	opcodeTable["jz"] = 258;
	opcodeTable["lahf"] = 259;
	opcodeTable["lar"] = 260;
	opcodeTable["lds"] = 261;
	opcodeTable["lea"] = 262;
	opcodeTable["leave"] = 263;
	opcodeTable["les"] = 264;
	opcodeTable["lfence"] = 265;
	opcodeTable["lfs"] = 266;
	opcodeTable["lgdt"] = 267;
	opcodeTable["lgs"] = 268;
	opcodeTable["lidt"] = 269;
	opcodeTable["lldt"] = 270;
	opcodeTable["lmsw"] = 271;
	opcodeTable["lods"] = 272;
	opcodeTable["lodsb"] = 273;
	opcodeTable["lodsw"] = 274;
	opcodeTable["lodsd"] = 275;
	opcodeTable["lodsq"] = 276;
	opcodeTable["loop"] = 277;
	opcodeTable["loope"] = 278;
	opcodeTable["loopne"] = 279;
	opcodeTable["loopnz"] = 280;
	opcodeTable["loopz"] = 281;
	opcodeTable["lsl"] = 282;
	opcodeTable["lss"] = 283;
	opcodeTable["ltr"] = 284;
	opcodeTable["mov"] = 285;
	opcodeTable["movs"] = 286;
	opcodeTable["movbe"] = 287;
	opcodeTable["movsb"] = 288;
	opcodeTable["movsw"] = 289;
	opcodeTable["movsd"] = 290;
	opcodeTable["movsq"] = 291;
	opcodeTable["movsx"] = 292;
	opcodeTable["movzx"] = 293;
	opcodeTable["movsxd"] = 294;
	opcodeTable["mul"] = 295;
	opcodeTable["neg"] = 296;
	opcodeTable["nop"] = 297;
	opcodeTable["not"] = 298;
	opcodeTable["or"] = 299;
	opcodeTable["out"] = 300;
	opcodeTable["outs"] = 301;
	opcodeTable["outsb"] = 302;
	opcodeTable["outsw"] = 303;
	opcodeTable["outsd"] = 304;
	opcodeTable["pop"] = 305;
	opcodeTable["popa"] = 306;
	opcodeTable["popaw"] = 307;
	opcodeTable["popad"] = 308;
	opcodeTable["popcnt"] = 309;
	opcodeTable["popf"] = 310;
	opcodeTable["popfw"] = 311;
	opcodeTable["popfd"] = 312;
	opcodeTable["popfq"] = 313;
	opcodeTable["prefetchnta"] = 314;
	opcodeTable["prefetcht0"] = 315;
	opcodeTable["prefetcht1"] = 316;
	opcodeTable["prefetcht2"] = 317;
	opcodeTable["push"] = 318;
	opcodeTable["pusha"] = 319;
	opcodeTable["pushaw"] = 320;
	opcodeTable["pushad"] = 321;
	opcodeTable["pushf"] = 322;
	opcodeTable["pushfw"] = 323;
	opcodeTable["pushfd"] = 324;
	opcodeTable["pushfq"] = 325;
	opcodeTable["rcl"] = 326;
	opcodeTable["rcr"] = 327;
	opcodeTable["rdmsr"] = 328;
	opcodeTable["rdpmc"] = 329;
	opcodeTable["rdtsc"] = 330;
	opcodeTable["ret"] = 331;
	opcodeTable["retf"] = 332;
	opcodeTable["rol"] = 333;
	opcodeTable["ror"] = 334;
	opcodeTable["rsm"] = 335;
	opcodeTable["sahf"] = 336;
	opcodeTable["sal"] = 337;
	opcodeTable["sar"] = 338;
	opcodeTable["sbb"] = 339;
	opcodeTable["scas"] = 340;
	opcodeTable["scasb"] = 341;
	opcodeTable["scasw"] = 342;
	opcodeTable["scasd"] = 343;
	opcodeTable["scasq"] = 344;
	opcodeTable["seta"] = 345;
	opcodeTable["setae"] = 346;
	opcodeTable["setb"] = 347;
	opcodeTable["setbe"] = 348;
	opcodeTable["setc"] = 349;
	opcodeTable["sete"] = 350;
	opcodeTable["setg"] = 351;
	opcodeTable["setge"] = 352;
	opcodeTable["setl"] = 353;
	opcodeTable["setle"] = 354;
	opcodeTable["setna"] = 355;
	opcodeTable["setnae"] = 356;
	opcodeTable["setnb"] = 357;
	opcodeTable["setnbe"] = 358;
	opcodeTable["setnc"] = 359;
	opcodeTable["setne"] = 360;
	opcodeTable["setng"] = 361;
	opcodeTable["setnge"] = 362;
	opcodeTable["setnl"] = 363;
	opcodeTable["setnle"] = 364;
	opcodeTable["setno"] = 365;
	opcodeTable["setnp"] = 366;
	opcodeTable["setns"] = 367;
	opcodeTable["setnz"] = 368;
	opcodeTable["seto"] = 369;
	opcodeTable["setp"] = 370;
	opcodeTable["setpe"] = 371;
	opcodeTable["setpo"] = 372;
	opcodeTable["sets"] = 373;
	opcodeTable["setz"] = 374;
	opcodeTable["sfence"] = 375;
	opcodeTable["shl"] = 376;
	opcodeTable["shld"] = 377;
	opcodeTable["shr"] = 378;
	opcodeTable["shrd"] = 379;
	opcodeTable["sidt"] = 380;
	opcodeTable["sldt"] = 381;
	opcodeTable["smsw"] = 382;
	opcodeTable["stc"] = 383;
	opcodeTable["std"] = 384;
	opcodeTable["sti"] = 385;
	opcodeTable["stos"] = 386;
	opcodeTable["stosb"] = 387;
	opcodeTable["stosw"] = 388;
	opcodeTable["stosd"] = 389;
	opcodeTable["stosq"] = 390;
	opcodeTable["str"] = 391;
	opcodeTable["sub"] = 392;
	opcodeTable["syscall"] = 393;
	opcodeTable["sysenter"] = 394;
	opcodeTable["sysexit"] = 395;
	opcodeTable["sysret"] = 396;
	opcodeTable["test"] = 397;
	opcodeTable["ud2"] = 398;
	opcodeTable["verr"] = 399;
	opcodeTable["verw"] = 400;
	opcodeTable["wait"] = 401;
	opcodeTable["wbinvd"] = 402;
	opcodeTable["wrmsr"] = 403;
	opcodeTable["xadd"] = 404;
	opcodeTable["xchg"] = 405;
	opcodeTable["xlat"] = 406;
	opcodeTable["xlatb"] = 407;
	opcodeTable["xor"] = 408;
	opcodeTable["xrstor"] = 409;
	opcodeTable["xrstor64"] = 410;
	opcodeTable["xsave"] = 411;
	opcodeTable["xsave64"] = 412;
	opcodeTable["xsetbv"] = 413;
	opcodeTable["addpd"] = 414;
	opcodeTable["addps"] = 415;
	opcodeTable["addsd"] = 416;
	opcodeTable["addss"] = 417;
	opcodeTable["addsubpd"] = 418;
	opcodeTable["addsubps"] = 419;
	opcodeTable["andnpd"] = 420;
	opcodeTable["andnps"] = 421;
	opcodeTable["andpd"] = 422;
	opcodeTable["andps"] = 423;
	opcodeTable["blendpd"] = 424;
	opcodeTable["blendps"] = 425;
	opcodeTable["cmppd"] = 426;
	opcodeTable["cmpps"] = 427;
	opcodeTable["cvtdq2pd"] = 428;
	opcodeTable["cvtdq2ps"] = 429;
	opcodeTable["cvtpd2dq"] = 430;
	opcodeTable["cvtpd2pi"] = 431;
	opcodeTable["cvtpd2ps"] = 432;
	opcodeTable["cvtpi2pd"] = 433;
	opcodeTable["cvtpi2ps"] = 434;
	opcodeTable["cvtps2dq"] = 435;
	opcodeTable["cvtps2pd"] = 436;
	opcodeTable["cvtps2pi"] = 437;
	opcodeTable["cvtsd2si"] = 438;
	opcodeTable["cvtsd2ss"] = 439;
	opcodeTable["cvtsi2sd"] = 440;
	opcodeTable["cvtsi2ss"] = 441;
	opcodeTable["cvtss2sd"] = 442;
	opcodeTable["cvtss2si"] = 443;
	opcodeTable["cvttpd2dq"] = 444;
	opcodeTable["cvttpd2pi"] = 445;
	opcodeTable["cvttps2dq"] = 446;
	opcodeTable["cvttps2pi"] = 447;
	opcodeTable["cvttsd2si"] = 448;
	opcodeTable["cvttss2si"] = 449;
	opcodeTable["divpd"] = 450;
	opcodeTable["divps"] = 451;
	opcodeTable["divsd"] = 452;
	opcodeTable["divss"] = 453;
	opcodeTable["dppd"] = 454;
	opcodeTable["dpps"] = 455;
	opcodeTable["hsubpd"] = 456;
	opcodeTable["hsubps"] = 457;
	opcodeTable["insertps"] = 458;
	opcodeTable["lddqu"] = 459;
	opcodeTable["maskmovdqu"] = 460;
	opcodeTable["maskmovq"] = 461;
	opcodeTable["maxps"] = 462;
	opcodeTable["maxpd"] = 463;
	opcodeTable["maxps"] = 464;
	opcodeTable["maxsd"] = 465;
	opcodeTable["maxss"] = 466;
	opcodeTable["mfence"] = 467;
	opcodeTable["minpd"] = 468;
	opcodeTable["minps"] = 469;
	opcodeTable["minsd"] = 470;
	opcodeTable["minss"] = 471;
	opcodeTable["monitor"] = 472;
	opcodeTable["movapd"] = 473;
	opcodeTable["movaps"] = 474;
	opcodeTable["movd"] = 475;
	opcodeTable["movq"] = 476;
	opcodeTable["movddup"] = 477;
	opcodeTable["movdq2q"] = 478;
	opcodeTable["movdqa"] = 479;
	opcodeTable["movdqu"] = 480;
	opcodeTable["movhlps"] = 481;
	opcodeTable["movhpd"] = 482;
	opcodeTable["movhps"] = 483;
	opcodeTable["movlhps"] = 484;
	opcodeTable["movlpd"] = 485;
	opcodeTable["movlps"] = 486;
	opcodeTable["movmskpd"] = 487;
	opcodeTable["movmskps"] = 488;
	opcodeTable["movntdq"] = 489;
	opcodeTable["movnti"] = 490;
	opcodeTable["movntpd"] = 491;
	opcodeTable["movntd"] = 492;
	opcodeTable["movntq"] = 493;
	opcodeTable["movq2dq"] = 494;
	opcodeTable["movshdup"] = 495;
	opcodeTable["movsldup"] = 496;
	opcodeTable["movss"] = 497;
	opcodeTable["movupd"] = 498;
	opcodeTable["movups"] = 499;
	opcodeTable["mpsadbw"] = 500;
	opcodeTable["mulpd"] = 501;
	opcodeTable["mulps"] = 502;
	opcodeTable["mulsd"] = 503;
	opcodeTable["mulss"] = 504;
	opcodeTable["orpd"] = 505;
	opcodeTable["orps"] = 506;
	opcodeTable["packssdw"] = 507;
	opcodeTable["packsswb"] = 508;
	opcodeTable["packusdw"] = 509;
	opcodeTable["paddb"] = 510;
	opcodeTable["paddd"] = 511;
	opcodeTable["paddq"] = 512;
	opcodeTable["paddsw"] = 513;
	opcodeTable["paddusb"] = 514;
	opcodeTable["paddusw"] = 515;
	opcodeTable["paddw"] = 516;
	opcodeTable["palignr"] = 517;
	opcodeTable["pand"] = 518;
	opcodeTable["pandn"] = 519;
	opcodeTable["pavgb"] = 520;
	opcodeTable["pavgw"] = 521;
	opcodeTable["pblendw"] = 522;
	opcodeTable["pcmpeqb"] = 523;
	opcodeTable["pcmpeqd"] = 524;
	opcodeTable["pcmpeqw"] = 525;
	opcodeTable["pcmpestri"] = 526;
	opcodeTable["pcmpestrm"] = 527;
	opcodeTable["pcmpgtb"] = 528;
	opcodeTable["pcmpgtd"] = 529;
	opcodeTable["pcmpgtw"] = 530;
	opcodeTable["pextrb"] = 531;
	opcodeTable["pextrd"] = 532;
	opcodeTable["pextrq"] = 533;
	opcodeTable["pextrw"] = 534;
	opcodeTable["pinsrb"] = 535;
	opcodeTable["pinsrd"] = 536;
	opcodeTable["pinsrq"] = 537;
	opcodeTable["pinsrw"] = 538;
	opcodeTable["pmaddwd"] = 539;
	opcodeTable["pmaxsw"] = 540;
	opcodeTable["pmaxub"] = 541;
	opcodeTable["pminsw"] = 542;
	opcodeTable["pminub"] = 543;
	opcodeTable["pmovmskb"] = 544;
	opcodeTable["pmulhuw"] = 545;
	opcodeTable["pmulhw"] = 546;
	opcodeTable["pmullw"] = 547;
	opcodeTable["pmuludq"] = 548;
	opcodeTable["psadbw"] = 549;
	opcodeTable["pshufd"] = 550;
	opcodeTable["pshufhw"] = 551;
	opcodeTable["pshuflw"] = 552;
	opcodeTable["pshufw"] = 553;
	opcodeTable["pslld"] = 554;
	opcodeTable["pslldq"] = 555;
	opcodeTable["psllq"] = 556;
	opcodeTable["psllw"] = 557;
	opcodeTable["psrad"] = 558;
	opcodeTable["psraw"] = 559;
	opcodeTable["psrld"] = 560;
	opcodeTable["psrldq"] = 561;
	opcodeTable["psrlq"] = 562;
	opcodeTable["psrlw"] = 563;
	opcodeTable["psubb"] = 564;
	opcodeTable["psubd"] = 565;
	opcodeTable["psubq"] = 566;
	opcodeTable["psubsb"] = 567;
	opcodeTable["psubsw"] = 568;
	opcodeTable["psubusb"] = 569;
	opcodeTable["psubusw"] = 570;
	opcodeTable["punpckhbw"] = 571;
	opcodeTable["punpckhdq"] = 572;
	opcodeTable["punpckhqdq"] = 573;
	opcodeTable["punpckhwd"] = 574;
	opcodeTable["punpcklbw"] = 575;
	opcodeTable["punpckldq"] = 576;
	opcodeTable["punpcklqdq"] = 577;
	opcodeTable["punpcklwd"] = 578;
	opcodeTable["pxor"] = 579;
	opcodeTable["rcpps"] = 580;
	opcodeTable["rcpss"] = 581;
	opcodeTable["roundpd"] = 582;
	opcodeTable["roundps"] = 583;
	opcodeTable["roundsd"] = 584;
	opcodeTable["roundss"] = 585;
	opcodeTable["rsqrtps"] = 586;
	opcodeTable["rsqrtss"] = 587;
	opcodeTable["shufpd"] = 588;
	opcodeTable["shufps"] = 589;
	opcodeTable["sqrtpd"] = 590;
	opcodeTable["sqrtps"] = 591;
	opcodeTable["sqrtsd"] = 592;
	opcodeTable["sqrtss"] = 593;
	opcodeTable["subpd"] = 594;
	opcodeTable["subps"] = 595;
	opcodeTable["subsd"] = 596;
	opcodeTable["subss"] = 597;
	opcodeTable["unpckhpd"] = 598;
	opcodeTable["unpckhps"] = 599;
	opcodeTable["unpcklpd"] = 600;
	opcodeTable["unpcklps"] = 601;
	opcodeTable["xorpd"] = 602;
	opcodeTable["xorps"] = 603;
	opcodeTable["invept"] = 604;
	opcodeTable["invvpid"] = 605;
	opcodeTable["vmcall"] = 606;
	opcodeTable["vmclear"] = 607;
	opcodeTable["vmlaunch"] = 608;
	opcodeTable["vmptrld"] = 609;
	opcodeTable["vmptrst"] = 610;
	opcodeTable["vmread"] = 611;
	opcodeTable["vmresume"] = 612;
	opcodeTable["vmwrite"] = 613;
	opcodeTable["vmx0ff"] = 614;
	opcodeTable["vmxon"] = 615;
	prefixTable["a16"] = 0;
	prefixTable["a32"] = 1;
	prefixTable["lock"] = 2;
	prefixTable["o16"] = 3;
	prefixTable["o32"] = 4;
	prefixTable["rep"] = 5;
	prefixTable["repe"] = 6;
	prefixTable["repne"] = 7;
	prefixTable["repnz"] = 8;
	prefixTable["repz"] = 9;
}

void x64Parser::TokenFunc4(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 0;
}
x64Token x64Parser::tokenBranches3[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc4,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc9(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 1;
}
x64Token x64Parser::tokenBranches8[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc9,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc200(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 19;
}
x64Token x64Parser::tokenBranches199[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc200,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc346(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 34;
}
x64Token x64Parser::tokenBranches345[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc346,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc199(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc345(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches198[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc199, x64Parser::tokenBranches199 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc345, x64Parser::tokenBranches345 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc36(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 4;
}
x64Token x64Parser::tokenBranches35[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc36,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches198 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc137(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches136[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc137,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc283(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 28;
}
x64Token x64Parser::tokenBranches282[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc283,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc429(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 43;
}
x64Token x64Parser::tokenBranches428[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc429,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc35(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc136(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc282(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc428(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches34[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc35, x64Parser::tokenBranches35 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc136, x64Parser::tokenBranches136 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc282, x64Parser::tokenBranches282 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc428, x64Parser::tokenBranches428 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc97(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches33[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches34 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc97,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc227(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 22;
}
x64Token x64Parser::tokenBranches226[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc227,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc373(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 37;
}
x64Token x64Parser::tokenBranches372[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc373,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc226(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc372(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches225[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc226, x64Parser::tokenBranches226 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc372, x64Parser::tokenBranches372 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc57(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 7;
}
x64Token x64Parser::tokenBranches56[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc57,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches225 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc170(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 17;
}
x64Token x64Parser::tokenBranches169[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc170,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc316(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 32;
}
x64Token x64Parser::tokenBranches315[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc316,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc462(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 47;
}
x64Token x64Parser::tokenBranches461[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc462,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc56(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc169(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc315(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc461(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches55[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc56, x64Parser::tokenBranches56 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc169, x64Parser::tokenBranches169 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc315, x64Parser::tokenBranches315 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc461, x64Parser::tokenBranches461 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc120(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 17;
}
x64Token x64Parser::tokenBranches54[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches55 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc120,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc257(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 25;
}
x64Token x64Parser::tokenBranches256[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc257,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc403(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 40;
}
x64Token x64Parser::tokenBranches402[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc403,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc256(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc402(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches255[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc256, x64Parser::tokenBranches256 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc402, x64Parser::tokenBranches402 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc79(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 10;
}
x64Token x64Parser::tokenBranches78[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc79,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches255 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc606(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 57;
}
x64Token x64Parser::tokenBranches605[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc606,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc702(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 70;
}
x64Token x64Parser::tokenBranches701[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc702,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc826(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 84;
}
x64Token x64Parser::tokenBranches825[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc826,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1227(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1226[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1227,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1786(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 149;
}
x64Token x64Parser::tokenBranches1785[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1786,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2057(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches2056[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2057,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1226(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1785(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2056(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1225[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1226, x64Parser::tokenBranches1226 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1785, x64Parser::tokenBranches1785 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2056, x64Parser::tokenBranches2056 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1509(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1224[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1225 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1509,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1224(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1223[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1224, x64Parser::tokenBranches1224 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 125;
}
x64Token x64Parser::tokenBranches1235[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1795(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 150;
}
x64Token x64Parser::tokenBranches1794[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1795,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2066(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 169;
}
x64Token x64Parser::tokenBranches2065[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2066,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1235(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1794(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2065(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1234[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1235, x64Parser::tokenBranches1235 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1794, x64Parser::tokenBranches1794 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2065, x64Parser::tokenBranches2065 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1516(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 125;
}
x64Token x64Parser::tokenBranches1222[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1223 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1234 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1516,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc605(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc701(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc825(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1222(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches604[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc605, x64Parser::tokenBranches605 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc701, x64Parser::tokenBranches701 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc825, x64Parser::tokenBranches825 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1222, x64Parser::tokenBranches1222 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc506(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 57;
}
x64Token x64Parser::tokenBranches505[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc506,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches604 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc613(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 67;
}
x64Token x64Parser::tokenBranches612[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc613,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc709(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 71;
}
x64Token x64Parser::tokenBranches708[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc709,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc833(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 85;
}
x64Token x64Parser::tokenBranches832[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc833,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1207(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 123;
}
x64Token x64Parser::tokenBranches1206[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1207,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1766(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 147;
}
x64Token x64Parser::tokenBranches1765[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1766,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2037(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 167;
}
x64Token x64Parser::tokenBranches2036[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2037,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1206(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1765(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2036(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1205[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1206, x64Parser::tokenBranches1206 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1765, x64Parser::tokenBranches1765 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2036, x64Parser::tokenBranches2036 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1493(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 123;
}
x64Token x64Parser::tokenBranches1204[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1205 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1493,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1204(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1203[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1204, x64Parser::tokenBranches1204 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1216(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 124;
}
x64Token x64Parser::tokenBranches1215[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1216,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1775(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 148;
}
x64Token x64Parser::tokenBranches1774[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1775,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2046(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 168;
}
x64Token x64Parser::tokenBranches2045[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2046,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1215(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1774(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2045(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1214[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1215, x64Parser::tokenBranches1215 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1774, x64Parser::tokenBranches1774 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2045, x64Parser::tokenBranches2045 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1500(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 124;
}
x64Token x64Parser::tokenBranches1202[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1203 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1214 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1500,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1325(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 129;
}
x64Token x64Parser::tokenBranches1324[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1325,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1737(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 145;
}
x64Token x64Parser::tokenBranches1736[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1737,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2115(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 174;
}
x64Token x64Parser::tokenBranches2114[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2115,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1324(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1736(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2114(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1323[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1324, x64Parser::tokenBranches1324 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1736, x64Parser::tokenBranches1736 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2114, x64Parser::tokenBranches2114 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1555(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 129;
}
x64Token x64Parser::tokenBranches1322[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1323 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1555,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc612(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc708(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc832(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1202(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches611[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1322 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc612, x64Parser::tokenBranches612 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc708, x64Parser::tokenBranches708 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc832, x64Parser::tokenBranches832 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1202, x64Parser::tokenBranches1202 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc961(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 99;
}
x64Token x64Parser::tokenBranches960[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc961,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc960(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches959[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc960, x64Parser::tokenBranches960 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc952(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 98;
}
x64Token x64Parser::tokenBranches951[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc952,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches959 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc951(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches950[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc951, x64Parser::tokenBranches951 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc511(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 58;
}
x64Token x64Parser::tokenBranches510[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc511,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches611 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches950 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc653(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches652[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc653,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc777(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 76;
}
x64Token x64Parser::tokenBranches776[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc777,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc901(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 90;
}
x64Token x64Parser::tokenBranches900[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc901,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc652(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc776(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc900(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches651[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc652, x64Parser::tokenBranches652 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc776, x64Parser::tokenBranches776 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc900, x64Parser::tokenBranches900 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc538(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches537[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc538,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches651 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc644(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches643[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc644,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc768(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 75;
}
x64Token x64Parser::tokenBranches767[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc768,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc892(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 89;
}
x64Token x64Parser::tokenBranches891[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc892,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1406(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1405[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1406,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1938(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 161;
}
x64Token x64Parser::tokenBranches1937[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1938,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 181;
}
x64Token x64Parser::tokenBranches2235[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1405(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1937(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2235(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1404[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1405, x64Parser::tokenBranches1405 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1937, x64Parser::tokenBranches1937 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2235, x64Parser::tokenBranches2235 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1650(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1403[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1404 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1650,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1403(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1402[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1403, x64Parser::tokenBranches1403 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1415(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1414[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1415,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1947(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 158;
}
x64Token x64Parser::tokenBranches1946[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1947,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2245(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 182;
}
x64Token x64Parser::tokenBranches2244[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2245,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1414(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1946(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2244(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1413[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1414, x64Parser::tokenBranches1414 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1946, x64Parser::tokenBranches1946 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2244, x64Parser::tokenBranches2244 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1657(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1401[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1402 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1413 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1657,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc643(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc767(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc891(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1401(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches536[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches537 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc643, x64Parser::tokenBranches643 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc767, x64Parser::tokenBranches767 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc891, x64Parser::tokenBranches891 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1401, x64Parser::tokenBranches1401 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc526(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches525[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc526,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches536 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc565(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 64;
}
x64Token x64Parser::tokenBranches564[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc565,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1065(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 110;
}
x64Token x64Parser::tokenBranches1064[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1065,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1085(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches1084[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1085,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1084(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1083[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1084, x64Parser::tokenBranches1084 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1074(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1073[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1074,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1083 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1064(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1063[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1073 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1064, x64Parser::tokenBranches1064 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1056(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 109;
}
x64Token x64Parser::tokenBranches1055[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1056,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1063 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1055(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1054[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1055, x64Parser::tokenBranches1055 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1053[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1054 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc8(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc78(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc525(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc564(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1053(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches33 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches54 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches505 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches510 },
	{x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc8, x64Parser::tokenBranches8 },
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc78, x64Parser::tokenBranches78 },
	{x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc525, x64Parser::tokenBranches525 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc564, x64Parser::tokenBranches564 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1053, x64Parser::tokenBranches1053 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches7 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc14(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 2;
}
x64Token x64Parser::tokenBranches13[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc14,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc209(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 21;
}
x64Token x64Parser::tokenBranches208[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc209,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc355(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 36;
}
x64Token x64Parser::tokenBranches354[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc355,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc208(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc354(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches207[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc208, x64Parser::tokenBranches208 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc354, x64Parser::tokenBranches354 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc43(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 6;
}
x64Token x64Parser::tokenBranches42[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc43,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches207 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc144(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 14;
}
x64Token x64Parser::tokenBranches143[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc144,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc290(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 29;
}
x64Token x64Parser::tokenBranches289[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc290,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc436(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 44;
}
x64Token x64Parser::tokenBranches435[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc436,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc42(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc143(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc289(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc435(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches41[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc42, x64Parser::tokenBranches42 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc143, x64Parser::tokenBranches143 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc289, x64Parser::tokenBranches289 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc435, x64Parser::tokenBranches435 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc102(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 14;
}
x64Token x64Parser::tokenBranches40[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches41 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc102,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc218(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 20;
}
x64Token x64Parser::tokenBranches217[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc218,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc364(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 35;
}
x64Token x64Parser::tokenBranches363[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc364,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc217(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc363(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches216[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc217, x64Parser::tokenBranches217 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc363, x64Parser::tokenBranches363 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc50(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 5;
}
x64Token x64Parser::tokenBranches49[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc50,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches216 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc163(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches162[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc163,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc309(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 31;
}
x64Token x64Parser::tokenBranches308[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc309,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc455(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 46;
}
x64Token x64Parser::tokenBranches454[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc455,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc49(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc162(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc308(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc454(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches48[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc49, x64Parser::tokenBranches49 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc162, x64Parser::tokenBranches162 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc308, x64Parser::tokenBranches308 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc454, x64Parser::tokenBranches454 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc115(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches47[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches48 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc115,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc264(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 26;
}
x64Token x64Parser::tokenBranches263[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc264,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc410(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 41;
}
x64Token x64Parser::tokenBranches409[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc410,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc263(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc409(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches262[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc263, x64Parser::tokenBranches263 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc409, x64Parser::tokenBranches409 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc84(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 11;
}
x64Token x64Parser::tokenBranches83[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc84,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches262 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc592(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches591[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc592,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc716(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 68;
}
x64Token x64Parser::tokenBranches715[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc716,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc840(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 82;
}
x64Token x64Parser::tokenBranches839[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc840,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1267(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1266[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1267,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1826(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 143;
}
x64Token x64Parser::tokenBranches1825[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1826,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2097(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 172;
}
x64Token x64Parser::tokenBranches2096[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2097,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1266(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1825(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2096(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1265[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1266, x64Parser::tokenBranches1266 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1825, x64Parser::tokenBranches1825 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2096, x64Parser::tokenBranches2096 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1541(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1264[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1265 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1541,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1264(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1263[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1264, x64Parser::tokenBranches1264 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1835(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 144;
}
x64Token x64Parser::tokenBranches1834[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1835,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2106(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 173;
}
x64Token x64Parser::tokenBranches2105[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2106,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1275(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1834(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2105(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1274[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1275, x64Parser::tokenBranches1275 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1834, x64Parser::tokenBranches1834 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2105, x64Parser::tokenBranches2105 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1548(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1262[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1263 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1274 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1548,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc591(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc715(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc839(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1262(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches590[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc591, x64Parser::tokenBranches591 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc715, x64Parser::tokenBranches715 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc839, x64Parser::tokenBranches839 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1262, x64Parser::tokenBranches1262 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc516(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches515[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc516,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches590 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc599(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches598[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc599,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc723(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 69;
}
x64Token x64Parser::tokenBranches722[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc723,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc847(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 83;
}
x64Token x64Parser::tokenBranches846[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc847,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1247(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1246[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1247,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1806(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 141;
}
x64Token x64Parser::tokenBranches1805[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1806,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2077(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 170;
}
x64Token x64Parser::tokenBranches2076[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2077,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1246(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1805(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2076(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1245[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1246, x64Parser::tokenBranches1246 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1805, x64Parser::tokenBranches1805 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2076, x64Parser::tokenBranches2076 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1525(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1244[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1245 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1525,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1244(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1243[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1244, x64Parser::tokenBranches1244 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1256(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1255[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1256,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1815(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 142;
}
x64Token x64Parser::tokenBranches1814[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1815,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2086(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 171;
}
x64Token x64Parser::tokenBranches2085[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2086,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1255(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1814(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2085(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1254[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1255, x64Parser::tokenBranches1255 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1814, x64Parser::tokenBranches1814 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2085, x64Parser::tokenBranches2085 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1532(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1242[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1243 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1254 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1532,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1334(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1333[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1334,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1746(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 140;
}
x64Token x64Parser::tokenBranches1745[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1746,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2124(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 166;
}
x64Token x64Parser::tokenBranches2123[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2124,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1333(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1745(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2123(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1332[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1333, x64Parser::tokenBranches1333 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1745, x64Parser::tokenBranches1745 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2123, x64Parser::tokenBranches2123 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1562(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1331[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1332 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1562,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc598(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc722(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc846(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1242(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches597[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1331 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc598, x64Parser::tokenBranches598 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc722, x64Parser::tokenBranches722 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc846, x64Parser::tokenBranches846 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1242, x64Parser::tokenBranches1242 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc977(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches976[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc977,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc976(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches975[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc976, x64Parser::tokenBranches976 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc968(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches967[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc968,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches975 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc967(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches966[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc967, x64Parser::tokenBranches967 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc521(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches520[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc521,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches597 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches966 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc669(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 60;
}
x64Token x64Parser::tokenBranches668[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc669,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc793(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 79;
}
x64Token x64Parser::tokenBranches792[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc793,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc917(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches916[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc917,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc668(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc792(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc916(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches667[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc668, x64Parser::tokenBranches668 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc792, x64Parser::tokenBranches792 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc916, x64Parser::tokenBranches916 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc545(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 60;
}
x64Token x64Parser::tokenBranches544[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc545,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches667 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc660(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 59;
}
x64Token x64Parser::tokenBranches659[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc660,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc784(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 78;
}
x64Token x64Parser::tokenBranches783[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc784,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc908(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches907[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc908,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1426(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 136;
}
x64Token x64Parser::tokenBranches1425[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1426,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1958(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 162;
}
x64Token x64Parser::tokenBranches1957[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1958,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2256(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 185;
}
x64Token x64Parser::tokenBranches2255[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2256,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1425(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1957(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2255(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1424[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1425, x64Parser::tokenBranches1425 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1957, x64Parser::tokenBranches1957 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2255, x64Parser::tokenBranches2255 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1666(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 136;
}
x64Token x64Parser::tokenBranches1423[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1424 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1666,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1423(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1422[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1423, x64Parser::tokenBranches1423 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1435(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 137;
}
x64Token x64Parser::tokenBranches1434[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1435,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1967(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 163;
}
x64Token x64Parser::tokenBranches1966[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1967,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2265(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 186;
}
x64Token x64Parser::tokenBranches2264[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2265,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1434(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1966(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2264(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1433[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1434, x64Parser::tokenBranches1434 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1966, x64Parser::tokenBranches1966 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2264, x64Parser::tokenBranches2264 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1673(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 137;
}
x64Token x64Parser::tokenBranches1421[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1422 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1433 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1673,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc659(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc783(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc907(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1421(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches543[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches544 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc659, x64Parser::tokenBranches659 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc783, x64Parser::tokenBranches783 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc907, x64Parser::tokenBranches907 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1421, x64Parser::tokenBranches1421 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc531(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 59;
}
x64Token x64Parser::tokenBranches530[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc531,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches543 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc570(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 65;
}
x64Token x64Parser::tokenBranches569[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc570,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1101(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 112;
}
x64Token x64Parser::tokenBranches1100[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1101,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1121(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 114;
}
x64Token x64Parser::tokenBranches1120[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1121,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1120(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1119[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1120, x64Parser::tokenBranches1120 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1110(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1109[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1110,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1119 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1100(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1099[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1109 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1100, x64Parser::tokenBranches1100 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1092(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 111;
}
x64Token x64Parser::tokenBranches1091[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1092,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1099 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1091(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1090[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1091, x64Parser::tokenBranches1091 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1089[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1090 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc13(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc83(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc530(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc569(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1089(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches12[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches40 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches47 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches515 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches520 },
	{x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc13, x64Parser::tokenBranches13 },
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc83, x64Parser::tokenBranches83 },
	{x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc530, x64Parser::tokenBranches530 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc569, x64Parser::tokenBranches569 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1089, x64Parser::tokenBranches1089 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches11[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches12 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc19(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 3;
}
x64Token x64Parser::tokenBranches18[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc19,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 23;
}
x64Token x64Parser::tokenBranches235[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc382(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 38;
}
x64Token x64Parser::tokenBranches381[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc382,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc235(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc381(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches234[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc235, x64Parser::tokenBranches235 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc381, x64Parser::tokenBranches381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc64(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 8;
}
x64Token x64Parser::tokenBranches63[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc64,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches234 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc151(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 15;
}
x64Token x64Parser::tokenBranches150[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc151,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc297(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 30;
}
x64Token x64Parser::tokenBranches296[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc297,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc443(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 45;
}
x64Token x64Parser::tokenBranches442[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc443,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc63(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc150(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc296(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc442(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches62[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc63, x64Parser::tokenBranches63 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc150, x64Parser::tokenBranches150 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc296, x64Parser::tokenBranches296 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc442, x64Parser::tokenBranches442 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc107(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 15;
}
x64Token x64Parser::tokenBranches61[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches62 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc107,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc245(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 24;
}
x64Token x64Parser::tokenBranches244[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc245,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc391(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 39;
}
x64Token x64Parser::tokenBranches390[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc391,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc244(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc390(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches243[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc244, x64Parser::tokenBranches244 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc390, x64Parser::tokenBranches390 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc71(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 9;
}
x64Token x64Parser::tokenBranches70[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc71,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches243 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc177(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 18;
}
x64Token x64Parser::tokenBranches176[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc177,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc323(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 33;
}
x64Token x64Parser::tokenBranches322[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc323,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc469(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 48;
}
x64Token x64Parser::tokenBranches468[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc469,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc70(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc176(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc322(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc468(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches69[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc70, x64Parser::tokenBranches70 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc176, x64Parser::tokenBranches176 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc322, x64Parser::tokenBranches322 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc468, x64Parser::tokenBranches468 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc125(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 18;
}
x64Token x64Parser::tokenBranches68[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches69 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc125,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc271(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 27;
}
x64Token x64Parser::tokenBranches270[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc271,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc417(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 42;
}
x64Token x64Parser::tokenBranches416[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc417,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc270(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc416(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches269[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc270, x64Parser::tokenBranches270 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc416, x64Parser::tokenBranches416 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc89(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 12;
}
x64Token x64Parser::tokenBranches88[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc89,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches269 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc730(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 72;
}
x64Token x64Parser::tokenBranches729[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc730,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc854(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 86;
}
x64Token x64Parser::tokenBranches853[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc854,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1307(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 117;
}
x64Token x64Parser::tokenBranches1306[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1307,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1866(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 153;
}
x64Token x64Parser::tokenBranches1865[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1866,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2164(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 118;
}
x64Token x64Parser::tokenBranches2163[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2164,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1306(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1865(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2163(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1305[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1306, x64Parser::tokenBranches1306 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1865, x64Parser::tokenBranches1865 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2163, x64Parser::tokenBranches2163 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1594(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 117;
}
x64Token x64Parser::tokenBranches1304[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1305 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1594,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1304(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1303[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1304, x64Parser::tokenBranches1304 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1316(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 128;
}
x64Token x64Parser::tokenBranches1315[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1316,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1875(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 154;
}
x64Token x64Parser::tokenBranches1874[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1875,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2173(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 178;
}
x64Token x64Parser::tokenBranches2172[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2173,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1315(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1874(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2172(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1314[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1315, x64Parser::tokenBranches1315 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1874, x64Parser::tokenBranches1874 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2172, x64Parser::tokenBranches2172 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1601(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 128;
}
x64Token x64Parser::tokenBranches1302[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1303 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1314 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1601,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc729(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc853(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1302(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches728[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc729, x64Parser::tokenBranches729 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc853, x64Parser::tokenBranches853 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1302, x64Parser::tokenBranches1302 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc491(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 54;
}
x64Token x64Parser::tokenBranches490[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc491,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches728 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc737(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 73;
}
x64Token x64Parser::tokenBranches736[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc737,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc861(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 87;
}
x64Token x64Parser::tokenBranches860[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc861,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1287(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 126;
}
x64Token x64Parser::tokenBranches1286[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1287,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1846(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 151;
}
x64Token x64Parser::tokenBranches1845[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1846,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2144(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 176;
}
x64Token x64Parser::tokenBranches2143[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2144,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1286(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1845(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2143(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1285[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1286, x64Parser::tokenBranches1286 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1845, x64Parser::tokenBranches1845 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2143, x64Parser::tokenBranches2143 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1578(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 126;
}
x64Token x64Parser::tokenBranches1284[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1285 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1578,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1284(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1283[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1284, x64Parser::tokenBranches1284 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1296(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 127;
}
x64Token x64Parser::tokenBranches1295[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1296,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1855(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 152;
}
x64Token x64Parser::tokenBranches1854[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1855,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2153(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 177;
}
x64Token x64Parser::tokenBranches2152[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2153,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1295(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1854(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2152(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1294[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1295, x64Parser::tokenBranches1295 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1854, x64Parser::tokenBranches1854 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2152, x64Parser::tokenBranches2152 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1585(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 127;
}
x64Token x64Parser::tokenBranches1282[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1283 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1294 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1585,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1343(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 130;
}
x64Token x64Parser::tokenBranches1342[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1343,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1755(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 146;
}
x64Token x64Parser::tokenBranches1754[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1755,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2133(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 175;
}
x64Token x64Parser::tokenBranches2132[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2133,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1342(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1754(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2132(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1341[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1342, x64Parser::tokenBranches1342 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1754, x64Parser::tokenBranches1754 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2132, x64Parser::tokenBranches2132 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1569(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 130;
}
x64Token x64Parser::tokenBranches1340[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1341 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1569,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc736(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc860(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1282(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches735[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1340 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc736, x64Parser::tokenBranches736 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc860, x64Parser::tokenBranches860 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1282, x64Parser::tokenBranches1282 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc993(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 101;
}
x64Token x64Parser::tokenBranches992[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc993,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc992(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches991[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc992, x64Parser::tokenBranches992 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc984(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 100;
}
x64Token x64Parser::tokenBranches983[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc984,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches991 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc983(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches982[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc983, x64Parser::tokenBranches983 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc496(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 55;
}
x64Token x64Parser::tokenBranches495[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc496,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches735 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches982 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc637(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 56;
}
x64Token x64Parser::tokenBranches636[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc637,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc761(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 77;
}
x64Token x64Parser::tokenBranches760[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc761,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc885(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 91;
}
x64Token x64Parser::tokenBranches884[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc885,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1386(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 134;
}
x64Token x64Parser::tokenBranches1385[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1386,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1918(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 159;
}
x64Token x64Parser::tokenBranches1917[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1918,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2216(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 183;
}
x64Token x64Parser::tokenBranches2215[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2216,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1385(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1917(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2215(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1384[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1385, x64Parser::tokenBranches1385 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1917, x64Parser::tokenBranches1917 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2215, x64Parser::tokenBranches2215 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1634(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 134;
}
x64Token x64Parser::tokenBranches1383[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1384 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1634,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1383(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1382[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1383, x64Parser::tokenBranches1383 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1395(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 135;
}
x64Token x64Parser::tokenBranches1394[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1395,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1927(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 160;
}
x64Token x64Parser::tokenBranches1926[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1927,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2225(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 184;
}
x64Token x64Parser::tokenBranches2224[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2225,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1394(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1926(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2224(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1393[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1394, x64Parser::tokenBranches1394 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1926, x64Parser::tokenBranches1926 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2224, x64Parser::tokenBranches2224 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1641(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 135;
}
x64Token x64Parser::tokenBranches1381[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1382 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1393 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1641,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc636(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc760(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc884(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1381(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches635[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc636, x64Parser::tokenBranches636 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc760, x64Parser::tokenBranches760 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc884, x64Parser::tokenBranches884 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1381, x64Parser::tokenBranches1381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1021(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 104;
}
x64Token x64Parser::tokenBranches1020[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1021,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1020(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1019[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1020, x64Parser::tokenBranches1020 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1012(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 103;
}
x64Token x64Parser::tokenBranches1011[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1012,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1019 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1011(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1010[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1011, x64Parser::tokenBranches1011 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc501(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 56;
}
x64Token x64Parser::tokenBranches500[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc501,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches635 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1010 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc685(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 62;
}
x64Token x64Parser::tokenBranches684[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc685,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc809(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 81;
}
x64Token x64Parser::tokenBranches808[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc809,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc926(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches925[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc926,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc684(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc808(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc925(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches683[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc684, x64Parser::tokenBranches684 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc808, x64Parser::tokenBranches808 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc925, x64Parser::tokenBranches925 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc557(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 62;
}
x64Token x64Parser::tokenBranches556[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc557,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches683 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc676(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 61;
}
x64Token x64Parser::tokenBranches675[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc676,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc800(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 80;
}
x64Token x64Parser::tokenBranches799[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc800,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc933(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches932[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc933,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1446(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 138;
}
x64Token x64Parser::tokenBranches1445[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1446,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1978(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 164;
}
x64Token x64Parser::tokenBranches1977[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1978,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 187;
}
x64Token x64Parser::tokenBranches2275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1445(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1977(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2275(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1444[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1445, x64Parser::tokenBranches1445 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1977, x64Parser::tokenBranches1977 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2275, x64Parser::tokenBranches2275 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1682(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 138;
}
x64Token x64Parser::tokenBranches1443[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1444 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1682,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1443(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1442[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1443, x64Parser::tokenBranches1443 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1455(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 139;
}
x64Token x64Parser::tokenBranches1454[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1455,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1987(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 165;
}
x64Token x64Parser::tokenBranches1986[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1987,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2285(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 188;
}
x64Token x64Parser::tokenBranches2284[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2285,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1454(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1986(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2284(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1453[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1454, x64Parser::tokenBranches1454 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1986, x64Parser::tokenBranches1986 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2284, x64Parser::tokenBranches2284 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1689(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 139;
}
x64Token x64Parser::tokenBranches1441[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1442 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1453 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1689,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc675(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc799(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc932(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1441(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches555[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches556 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc675, x64Parser::tokenBranches675 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc799, x64Parser::tokenBranches799 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc932, x64Parser::tokenBranches932 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1441, x64Parser::tokenBranches1441 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc550(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 61;
}
x64Token x64Parser::tokenBranches549[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc550,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches555 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc575(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 66;
}
x64Token x64Parser::tokenBranches574[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc575,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1137(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 116;
}
x64Token x64Parser::tokenBranches1136[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1137,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1157(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 118;
}
x64Token x64Parser::tokenBranches1156[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1157,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1156(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1155[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1156, x64Parser::tokenBranches1156 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1146(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 117;
}
x64Token x64Parser::tokenBranches1145[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1146,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1155 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1136(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1135[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1145 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1136, x64Parser::tokenBranches1136 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1128(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 115;
}
x64Token x64Parser::tokenBranches1127[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1128,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1135 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1127(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1126[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1127, x64Parser::tokenBranches1127 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1125[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1126 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2383(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 193;
}
x64Token x64Parser::tokenBranches2382[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2383,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2474(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 209;
}
x64Token x64Parser::tokenBranches2473[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2474,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2566(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 223;
}
x64Token x64Parser::tokenBranches2565[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2566,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2867(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 247;
}
x64Token x64Parser::tokenBranches2866[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2867,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3243(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 283;
}
x64Token x64Parser::tokenBranches3242[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3243,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3455(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 248;
}
x64Token x64Parser::tokenBranches3454[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3455,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2866(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3242(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3454(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2865[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2866, x64Parser::tokenBranches2866 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3242, x64Parser::tokenBranches3242 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3454, x64Parser::tokenBranches3454 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3053(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 247;
}
x64Token x64Parser::tokenBranches2864[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2865 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3053,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2864(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2863[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2864, x64Parser::tokenBranches2864 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2876(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 260;
}
x64Token x64Parser::tokenBranches2875[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2876,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3252(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 284;
}
x64Token x64Parser::tokenBranches3251[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3252,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3464(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 306;
}
x64Token x64Parser::tokenBranches3463[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3464,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2875(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3251(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3463(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2874[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2875, x64Parser::tokenBranches2875 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3251, x64Parser::tokenBranches3251 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3463, x64Parser::tokenBranches3463 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3060(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 260;
}
x64Token x64Parser::tokenBranches2862[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2863 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2874 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3060,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2382(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2473(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2565(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2862(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2381[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2382, x64Parser::tokenBranches2382 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2473, x64Parser::tokenBranches2473 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2565, x64Parser::tokenBranches2565 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2862, x64Parser::tokenBranches2862 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2302(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 193;
}
x64Token x64Parser::tokenBranches2301[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2302,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2443(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 201;
}
x64Token x64Parser::tokenBranches2442[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2443,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2535(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 218;
}
x64Token x64Parser::tokenBranches2534[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2535,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2627(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 232;
}
x64Token x64Parser::tokenBranches2626[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2627,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2442(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2534(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2626(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2441[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2442, x64Parser::tokenBranches2442 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2534, x64Parser::tokenBranches2534 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2626, x64Parser::tokenBranches2626 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2342(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 201;
}
x64Token x64Parser::tokenBranches2341[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2342,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2441 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2481(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 210;
}
x64Token x64Parser::tokenBranches2480[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2481,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2573(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 224;
}
x64Token x64Parser::tokenBranches2572[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2573,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2887(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 261;
}
x64Token x64Parser::tokenBranches2886[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2887,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3263(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 285;
}
x64Token x64Parser::tokenBranches3262[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3263,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3475(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 307;
}
x64Token x64Parser::tokenBranches3474[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3475,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2886(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3262(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3474(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2885[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2886, x64Parser::tokenBranches2886 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3262, x64Parser::tokenBranches3262 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3474, x64Parser::tokenBranches3474 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3069(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 261;
}
x64Token x64Parser::tokenBranches2884[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2885 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3069,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2884(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2883[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2884, x64Parser::tokenBranches2884 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2896(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 262;
}
x64Token x64Parser::tokenBranches2895[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2896,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3272(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 286;
}
x64Token x64Parser::tokenBranches3271[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3272,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3484(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 308;
}
x64Token x64Parser::tokenBranches3483[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3484,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2895(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3271(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3483(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2894[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2895, x64Parser::tokenBranches2895 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3271, x64Parser::tokenBranches3271 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3483, x64Parser::tokenBranches3483 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3076(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 262;
}
x64Token x64Parser::tokenBranches2882[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2883 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2894 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3076,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2480(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2572(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2882(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2340[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2341 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2480, x64Parser::tokenBranches2480 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2572, x64Parser::tokenBranches2572 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2882, x64Parser::tokenBranches2882 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2389(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 194;
}
x64Token x64Parser::tokenBranches2388[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2389,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2307(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 194;
}
void x64Parser::TokenFunc2388(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2306[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2307,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2340 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2388, x64Parser::tokenBranches2388 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2396(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 195;
}
x64Token x64Parser::tokenBranches2395[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2396,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2488(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 211;
}
x64Token x64Parser::tokenBranches2487[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2488,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2580(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 225;
}
x64Token x64Parser::tokenBranches2579[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2580,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2779(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 251;
}
x64Token x64Parser::tokenBranches2778[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2779,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3155(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 273;
}
x64Token x64Parser::tokenBranches3154[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3155,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3367(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 297;
}
x64Token x64Parser::tokenBranches3366[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3367,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2778(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3154(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3366(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2777[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2778, x64Parser::tokenBranches2778 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3154, x64Parser::tokenBranches3154 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3366, x64Parser::tokenBranches3366 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2985(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 251;
}
x64Token x64Parser::tokenBranches2776[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2777 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2985,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2847(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 258;
}
x64Token x64Parser::tokenBranches2846[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2847,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3223(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 281;
}
x64Token x64Parser::tokenBranches3222[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3223,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3435(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 304;
}
x64Token x64Parser::tokenBranches3434[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3435,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2846(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3222(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3434(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2845[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2846, x64Parser::tokenBranches2846 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3222, x64Parser::tokenBranches3222 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3434, x64Parser::tokenBranches3434 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3037(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 258;
}
x64Token x64Parser::tokenBranches2844[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2845 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3037,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2844(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2843[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2844, x64Parser::tokenBranches2844 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2856(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 259;
}
x64Token x64Parser::tokenBranches2855[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2856,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3232(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 282;
}
x64Token x64Parser::tokenBranches3231[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3232,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3444(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 305;
}
x64Token x64Parser::tokenBranches3443[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3444,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2855(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3231(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3443(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2854[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2855, x64Parser::tokenBranches2855 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3231, x64Parser::tokenBranches3231 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3443, x64Parser::tokenBranches3443 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3044(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 259;
}
x64Token x64Parser::tokenBranches2842[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2843 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2854 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3044,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2395(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2487(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2579(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2842(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2394[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2776 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2395, x64Parser::tokenBranches2395 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2487, x64Parser::tokenBranches2487 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2579, x64Parser::tokenBranches2579 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2842, x64Parser::tokenBranches2842 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2664(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 237;
}
x64Token x64Parser::tokenBranches2663[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2664,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2663(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2662[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2663, x64Parser::tokenBranches2663 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2655(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 236;
}
x64Token x64Parser::tokenBranches2654[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2655,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2662 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2654(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2653[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2654, x64Parser::tokenBranches2654 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2312(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 195;
}
x64Token x64Parser::tokenBranches2311[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2312,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2394 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2653 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2427(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 196;
}
x64Token x64Parser::tokenBranches2426[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2427,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2519(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 216;
}
x64Token x64Parser::tokenBranches2518[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2519,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2611(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 230;
}
x64Token x64Parser::tokenBranches2610[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2611,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2788(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 252;
}
x64Token x64Parser::tokenBranches2787[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2788,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3164(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 274;
}
x64Token x64Parser::tokenBranches3163[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3164,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3376(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 298;
}
x64Token x64Parser::tokenBranches3375[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3376,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2787(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3163(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3375(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2786[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2787, x64Parser::tokenBranches2787 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3163, x64Parser::tokenBranches3163 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3375, x64Parser::tokenBranches3375 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2992(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 252;
}
x64Token x64Parser::tokenBranches2785[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2786 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2992,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2939(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 267;
}
x64Token x64Parser::tokenBranches2938[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2939,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3315(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 291;
}
x64Token x64Parser::tokenBranches3314[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3315,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3527(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 313;
}
x64Token x64Parser::tokenBranches3526[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3527,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2938(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3314(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3526(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2937[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2938, x64Parser::tokenBranches2938 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3314, x64Parser::tokenBranches3314 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3526, x64Parser::tokenBranches3526 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3109(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 267;
}
x64Token x64Parser::tokenBranches2936[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2937 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3109,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2936(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2935[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2936, x64Parser::tokenBranches2936 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2948(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 268;
}
x64Token x64Parser::tokenBranches2947[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2948,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3324(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 292;
}
x64Token x64Parser::tokenBranches3323[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3324,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3536(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 314;
}
x64Token x64Parser::tokenBranches3535[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3536,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2947(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3323(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3535(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2946[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2947, x64Parser::tokenBranches2947 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3323, x64Parser::tokenBranches3323 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3535, x64Parser::tokenBranches3535 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3116(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 268;
}
x64Token x64Parser::tokenBranches2934[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2935 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2946 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3116,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2426(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2518(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2610(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2934(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2425[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2785 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2426, x64Parser::tokenBranches2426 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2518, x64Parser::tokenBranches2518 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2610, x64Parser::tokenBranches2610 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2934, x64Parser::tokenBranches2934 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2692(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 240;
}
x64Token x64Parser::tokenBranches2691[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2692,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2691(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2690[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2691, x64Parser::tokenBranches2691 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2683(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 239;
}
x64Token x64Parser::tokenBranches2682[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2683,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2690 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2682(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2681[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2682, x64Parser::tokenBranches2682 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2317(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 196;
}
x64Token x64Parser::tokenBranches2316[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2317,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2425 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2681 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2452(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 202;
}
x64Token x64Parser::tokenBranches2451[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2452,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2544(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 219;
}
x64Token x64Parser::tokenBranches2543[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2544,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2636(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 233;
}
x64Token x64Parser::tokenBranches2635[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2636,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2451(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2543(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2635(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2450[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2451, x64Parser::tokenBranches2451 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2543, x64Parser::tokenBranches2543 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2635, x64Parser::tokenBranches2635 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2349(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 202;
}
x64Token x64Parser::tokenBranches2348[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2349,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2450 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2434(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 200;
}
x64Token x64Parser::tokenBranches2433[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2434,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2526(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 217;
}
x64Token x64Parser::tokenBranches2525[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2526,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2618(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 231;
}
x64Token x64Parser::tokenBranches2617[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2618,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2959(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 269;
}
x64Token x64Parser::tokenBranches2958[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2959,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3335(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 293;
}
x64Token x64Parser::tokenBranches3334[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3335,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3547(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 315;
}
x64Token x64Parser::tokenBranches3546[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3547,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2958(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3334(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3546(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2957[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2958, x64Parser::tokenBranches2958 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3334, x64Parser::tokenBranches3334 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3546, x64Parser::tokenBranches3546 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3125(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 269;
}
x64Token x64Parser::tokenBranches2956[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2957 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3125,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2956(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2955[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2956, x64Parser::tokenBranches2956 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2968(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 270;
}
x64Token x64Parser::tokenBranches2967[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2968,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3344(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 294;
}
x64Token x64Parser::tokenBranches3343[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3344,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3556(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 316;
}
x64Token x64Parser::tokenBranches3555[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3556,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2967(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3343(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3555(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2966[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2967, x64Parser::tokenBranches2967 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3343, x64Parser::tokenBranches3343 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3555, x64Parser::tokenBranches3555 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3132(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 270;
}
x64Token x64Parser::tokenBranches2954[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2955 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2966 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3132,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2433(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2525(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2617(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2954(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2347[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2348 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2433, x64Parser::tokenBranches2433 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2525, x64Parser::tokenBranches2525 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2617, x64Parser::tokenBranches2617 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2954, x64Parser::tokenBranches2954 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2335(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 200;
}
x64Token x64Parser::tokenBranches2334[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2335,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2347 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2362(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 205;
}
x64Token x64Parser::tokenBranches2361[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2362,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2736(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 246;
}
x64Token x64Parser::tokenBranches2735[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2736,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2756(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 248;
}
x64Token x64Parser::tokenBranches2755[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2756,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2755(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2754[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2755, x64Parser::tokenBranches2755 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2745(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 247;
}
x64Token x64Parser::tokenBranches2744[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2745,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2754 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2735(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2734[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2744 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2735, x64Parser::tokenBranches2735 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2727(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 245;
}
x64Token x64Parser::tokenBranches2726[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2727,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2734 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2726(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2725[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2726, x64Parser::tokenBranches2726 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2724[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2725 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc18(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc88(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc549(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc574(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1125(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc2334(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc2361(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2724(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches17[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches61 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches68 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches490 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches495 },
	{x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches500 },
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2301 },
	{x64Token::REGISTER, 43, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2306 },
	{x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2311 },
	{x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2316 },
	{x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc18, x64Parser::tokenBranches18 },
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc88, x64Parser::tokenBranches88 },
	{x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc549, x64Parser::tokenBranches549 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc574, x64Parser::tokenBranches574 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1125, x64Parser::tokenBranches1125 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2334, x64Parser::tokenBranches2334 },
	{x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2361, x64Parser::tokenBranches2361 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2724, x64Parser::tokenBranches2724 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches16[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches17 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc184(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 19;
}
x64Token x64Parser::tokenBranches183[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc184,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc330(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 34;
}
x64Token x64Parser::tokenBranches329[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc330,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc183(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc329(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches182[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc183, x64Parser::tokenBranches183 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc329, x64Parser::tokenBranches329 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc24(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 4;
}
x64Token x64Parser::tokenBranches23[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc24,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches182 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc130(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches129[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc130,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 28;
}
x64Token x64Parser::tokenBranches275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc422(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 43;
}
x64Token x64Parser::tokenBranches421[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc422,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc23(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc129(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc275(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc421(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches22[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc23, x64Parser::tokenBranches23 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc129, x64Parser::tokenBranches129 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc275, x64Parser::tokenBranches275 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc421, x64Parser::tokenBranches421 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc92(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches21[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches22 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc92,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc191(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 20;
}
x64Token x64Parser::tokenBranches190[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc191,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc337(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 35;
}
x64Token x64Parser::tokenBranches336[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc337,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc190(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc336(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches189[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc190, x64Parser::tokenBranches190 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc336, x64Parser::tokenBranches336 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc29(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 5;
}
x64Token x64Parser::tokenBranches28[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc29,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches189 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc156(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches155[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc156,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc302(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 31;
}
x64Token x64Parser::tokenBranches301[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc302,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc448(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 46;
}
x64Token x64Parser::tokenBranches447[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc448,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc28(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc155(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc301(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc447(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches27[] = {
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc28, x64Parser::tokenBranches28 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc155, x64Parser::tokenBranches155 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc301, x64Parser::tokenBranches301 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc447, x64Parser::tokenBranches447 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc110(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches26[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches27 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc110,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc250(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 25;
}
x64Token x64Parser::tokenBranches249[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc250,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc396(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 40;
}
x64Token x64Parser::tokenBranches395[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc396,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc249(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc395(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches248[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc249, x64Parser::tokenBranches249 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc395, x64Parser::tokenBranches395 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc74(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 10;
}
x64Token x64Parser::tokenBranches73[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc74,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches248 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc580(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches579[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc580,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc690(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 68;
}
x64Token x64Parser::tokenBranches689[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc690,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc814(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 82;
}
x64Token x64Parser::tokenBranches813[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc814,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1189(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1188[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1189,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1721(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 143;
}
x64Token x64Parser::tokenBranches1720[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1721,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2019(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches2018[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2019,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1188(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1720(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2018(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1187[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1188, x64Parser::tokenBranches1188 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1720, x64Parser::tokenBranches1720 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2018, x64Parser::tokenBranches2018 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1479(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1186[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1187 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1479,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1186(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1185[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1186, x64Parser::tokenBranches1186 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1196(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1195[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1196,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1728(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 144;
}
x64Token x64Parser::tokenBranches1727[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1728,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2026(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 169;
}
x64Token x64Parser::tokenBranches2025[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2026,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1195(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1727(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2025(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1194[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1195, x64Parser::tokenBranches1195 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1727, x64Parser::tokenBranches1727 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2025, x64Parser::tokenBranches2025 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1484(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1184[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1185 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1194 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1484,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc579(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc689(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc813(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1184(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches578[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc579, x64Parser::tokenBranches579 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc689, x64Parser::tokenBranches689 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc813, x64Parser::tokenBranches813 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1184, x64Parser::tokenBranches1184 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc472(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches471[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc472,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches578 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc585(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches584[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc585,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc695(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 69;
}
x64Token x64Parser::tokenBranches694[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc695,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc819(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 83;
}
x64Token x64Parser::tokenBranches818[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc819,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1164(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1163[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1164,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1696(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 140;
}
x64Token x64Parser::tokenBranches1695[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1696,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1994(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 166;
}
x64Token x64Parser::tokenBranches1993[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1994,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1163(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1695(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1993(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1162[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1163, x64Parser::tokenBranches1163 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1695, x64Parser::tokenBranches1695 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1993, x64Parser::tokenBranches1993 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1460(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1161[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1162 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1460,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1173(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1172[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1173,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1705(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 141;
}
x64Token x64Parser::tokenBranches1704[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1705,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2003(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 167;
}
x64Token x64Parser::tokenBranches2002[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2003,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1172(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1704(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2002(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1171[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1172, x64Parser::tokenBranches1172 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1704, x64Parser::tokenBranches1704 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2002, x64Parser::tokenBranches2002 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1467(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1170[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1171 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1467,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1170(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1169[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1170, x64Parser::tokenBranches1170 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1180(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1179[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1180,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1712(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 142;
}
x64Token x64Parser::tokenBranches1711[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1712,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2010(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 168;
}
x64Token x64Parser::tokenBranches2009[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2010,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1179(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1711(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2009(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1178[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1179, x64Parser::tokenBranches1179 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1711, x64Parser::tokenBranches1711 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2009, x64Parser::tokenBranches2009 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1472(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1168[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1169 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1178 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1472,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc584(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc694(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc818(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1168(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches583[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1161 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc584, x64Parser::tokenBranches584 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc694, x64Parser::tokenBranches694 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc818, x64Parser::tokenBranches818 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1168, x64Parser::tokenBranches1168 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc945(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches944[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc945,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc944(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches943[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc944, x64Parser::tokenBranches944 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc938(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches937[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc938,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches943 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc937(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches936[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc937, x64Parser::tokenBranches937 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc475(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches474[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc475,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches583 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches936 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc618(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches617[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc618,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc742(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 74;
}
x64Token x64Parser::tokenBranches741[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc742,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc866(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 88;
}
x64Token x64Parser::tokenBranches865[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc866,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1352(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1351[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1352,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1884(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 155;
}
x64Token x64Parser::tokenBranches1883[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1884,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2182(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 179;
}
x64Token x64Parser::tokenBranches2181[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2182,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1351(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1883(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2181(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1350[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1351, x64Parser::tokenBranches1351 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1883, x64Parser::tokenBranches1883 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2181, x64Parser::tokenBranches2181 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1608(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1349[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1350 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1608,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1349(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1348[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1349, x64Parser::tokenBranches1349 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1359(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 131;
}
x64Token x64Parser::tokenBranches1358[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1359,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1891(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 156;
}
x64Token x64Parser::tokenBranches1890[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1891,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2189(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 180;
}
x64Token x64Parser::tokenBranches2188[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2189,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1358(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1890(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2188(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1357[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1358, x64Parser::tokenBranches1358 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1890, x64Parser::tokenBranches1890 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2188, x64Parser::tokenBranches2188 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1613(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 131;
}
x64Token x64Parser::tokenBranches1347[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1348 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1357 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1613,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc617(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc741(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc865(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1347(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches616[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc617, x64Parser::tokenBranches617 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc741, x64Parser::tokenBranches741 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc865, x64Parser::tokenBranches865 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1347, x64Parser::tokenBranches1347 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1005(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches1004[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1005,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1004(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1003[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1004, x64Parser::tokenBranches1004 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc998(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 102;
}
x64Token x64Parser::tokenBranches997[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc998,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1003 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc997(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches996[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc997, x64Parser::tokenBranches997 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc478(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches477[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc478,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches616 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches996 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc630(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches629[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc630,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc754(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 76;
}
x64Token x64Parser::tokenBranches753[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc754,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc878(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 90;
}
x64Token x64Parser::tokenBranches877[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc878,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc629(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc753(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc877(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches628[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc629, x64Parser::tokenBranches629 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc753, x64Parser::tokenBranches753 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc877, x64Parser::tokenBranches877 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc486(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches485[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc486,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches628 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc623(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches622[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc623,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc747(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 75;
}
x64Token x64Parser::tokenBranches746[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc747,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc871(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 89;
}
x64Token x64Parser::tokenBranches870[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc871,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1368(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1367[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1368,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1900(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 157;
}
x64Token x64Parser::tokenBranches1899[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1900,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2198(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 181;
}
x64Token x64Parser::tokenBranches2197[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2198,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1367(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1899(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2197(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1366[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1367, x64Parser::tokenBranches1367 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1899, x64Parser::tokenBranches1899 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2197, x64Parser::tokenBranches2197 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1620(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1365[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1366 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1620,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1365(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1364[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1365, x64Parser::tokenBranches1365 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1375(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1374[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1375,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1907(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 158;
}
x64Token x64Parser::tokenBranches1906[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1907,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2205(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 182;
}
x64Token x64Parser::tokenBranches2204[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2205,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1374(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1906(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2204(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1373[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1374, x64Parser::tokenBranches1374 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1906, x64Parser::tokenBranches1906 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2204, x64Parser::tokenBranches2204 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1625(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1363[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1364 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1373 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1625,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc622(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc746(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc870(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1363(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches484[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches485 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc622, x64Parser::tokenBranches622 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc746, x64Parser::tokenBranches746 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc870, x64Parser::tokenBranches870 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1363, x64Parser::tokenBranches1363 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc481(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches480[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc481,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches484 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc560(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 63;
}
x64Token x64Parser::tokenBranches559[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc560,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1033(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 106;
}
x64Token x64Parser::tokenBranches1032[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1033,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1049(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches1048[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1049,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1048(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1047[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1048, x64Parser::tokenBranches1048 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1040(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1039[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1040,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1047 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1032(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1031[] = {
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1039 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1032, x64Parser::tokenBranches1032 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1026(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 105;
}
x64Token x64Parser::tokenBranches1025[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1026,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1031 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1025(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1024[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1025, x64Parser::tokenBranches1025 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1023[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1024 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2367(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 189;
}
x64Token x64Parser::tokenBranches2366[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2367,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2457(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 206;
}
x64Token x64Parser::tokenBranches2456[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2457,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2549(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 220;
}
x64Token x64Parser::tokenBranches2548[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2549,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2813(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 243;
}
x64Token x64Parser::tokenBranches2812[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2813,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3189(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 277;
}
x64Token x64Parser::tokenBranches3188[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3189,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3401(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 244;
}
x64Token x64Parser::tokenBranches3400[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3401,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2812(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3188(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3400(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2811[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2812, x64Parser::tokenBranches2812 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3188, x64Parser::tokenBranches3188 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3400, x64Parser::tokenBranches3400 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3011(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 243;
}
x64Token x64Parser::tokenBranches2810[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2811 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3011,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2810(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2809[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2810, x64Parser::tokenBranches2810 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2820(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 255;
}
x64Token x64Parser::tokenBranches2819[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2820,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3196(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 278;
}
x64Token x64Parser::tokenBranches3195[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3196,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3408(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 301;
}
x64Token x64Parser::tokenBranches3407[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3408,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2819(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3195(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3407(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2818[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2819, x64Parser::tokenBranches2819 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3195, x64Parser::tokenBranches3195 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3407, x64Parser::tokenBranches3407 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3016(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 255;
}
x64Token x64Parser::tokenBranches2808[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2809 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2818 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3016,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2366(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2456(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2548(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2808(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2365[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2366, x64Parser::tokenBranches2366 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2456, x64Parser::tokenBranches2456 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2548, x64Parser::tokenBranches2548 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2808, x64Parser::tokenBranches2808 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2288(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 189;
}
x64Token x64Parser::tokenBranches2287[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2288,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2365 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2413(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 198;
}
x64Token x64Parser::tokenBranches2412[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2413,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2505(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 214;
}
x64Token x64Parser::tokenBranches2504[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2505,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2597(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 228;
}
x64Token x64Parser::tokenBranches2596[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2597,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2412(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2504(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2596(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2411[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2412, x64Parser::tokenBranches2412 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2504, x64Parser::tokenBranches2504 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2596, x64Parser::tokenBranches2596 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2325(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 198;
}
x64Token x64Parser::tokenBranches2324[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2325,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2411 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2462(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 207;
}
x64Token x64Parser::tokenBranches2461[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2462,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2554(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 221;
}
x64Token x64Parser::tokenBranches2553[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2554,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2829(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 256;
}
x64Token x64Parser::tokenBranches2828[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2829,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3205(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 279;
}
x64Token x64Parser::tokenBranches3204[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3205,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3417(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 302;
}
x64Token x64Parser::tokenBranches3416[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3417,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2828(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3204(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3416(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2827[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2828, x64Parser::tokenBranches2828 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3204, x64Parser::tokenBranches3204 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3416, x64Parser::tokenBranches3416 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3023(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 256;
}
x64Token x64Parser::tokenBranches2826[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2827 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3023,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2826(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2825[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2826, x64Parser::tokenBranches2826 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2836(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 257;
}
x64Token x64Parser::tokenBranches2835[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2836,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3212(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 280;
}
x64Token x64Parser::tokenBranches3211[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3212,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3424(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 303;
}
x64Token x64Parser::tokenBranches3423[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3424,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2835(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3211(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3423(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2834[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2835, x64Parser::tokenBranches2835 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3211, x64Parser::tokenBranches3211 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3423, x64Parser::tokenBranches3423 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3028(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 257;
}
x64Token x64Parser::tokenBranches2824[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2825 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2834 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3028,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2461(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2553(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2824(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2323[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2324 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2461, x64Parser::tokenBranches2461 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2553, x64Parser::tokenBranches2553 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2824, x64Parser::tokenBranches2824 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2371(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 190;
}
x64Token x64Parser::tokenBranches2370[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2371,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2291(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 190;
}
void x64Parser::TokenFunc2370(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2290[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2291,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2323 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2370, x64Parser::tokenBranches2370 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2376(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 191;
}
x64Token x64Parser::tokenBranches2375[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2376,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2467(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 208;
}
x64Token x64Parser::tokenBranches2466[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2467,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2559(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 222;
}
x64Token x64Parser::tokenBranches2558[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2559,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2763(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 249;
}
x64Token x64Parser::tokenBranches2762[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2763,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3139(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 271;
}
x64Token x64Parser::tokenBranches3138[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3139,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3351(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 295;
}
x64Token x64Parser::tokenBranches3350[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3351,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2762(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3138(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3350(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2761[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2762, x64Parser::tokenBranches2762 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3138, x64Parser::tokenBranches3138 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3350, x64Parser::tokenBranches3350 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2973(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 249;
}
x64Token x64Parser::tokenBranches2760[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2761 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2973,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2797(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 253;
}
x64Token x64Parser::tokenBranches2796[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2797,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3173(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 275;
}
x64Token x64Parser::tokenBranches3172[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3173,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3385(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 299;
}
x64Token x64Parser::tokenBranches3384[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3385,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2796(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3172(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3384(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2795[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2796, x64Parser::tokenBranches2796 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3172, x64Parser::tokenBranches3172 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3384, x64Parser::tokenBranches3384 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2999(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 253;
}
x64Token x64Parser::tokenBranches2794[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2795 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2999,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2794(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2793[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2794, x64Parser::tokenBranches2794 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2804(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 254;
}
x64Token x64Parser::tokenBranches2803[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2804,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3180(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 276;
}
x64Token x64Parser::tokenBranches3179[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3180,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3392(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 300;
}
x64Token x64Parser::tokenBranches3391[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3392,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2803(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3179(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3391(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2802[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2803, x64Parser::tokenBranches2803 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3179, x64Parser::tokenBranches3179 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3391, x64Parser::tokenBranches3391 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3004(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 254;
}
x64Token x64Parser::tokenBranches2792[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2793 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2802 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3004,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2375(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2466(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2558(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2792(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2374[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2760 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2375, x64Parser::tokenBranches2375 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2466, x64Parser::tokenBranches2466 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2558, x64Parser::tokenBranches2558 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2792, x64Parser::tokenBranches2792 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2648(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 235;
}
x64Token x64Parser::tokenBranches2647[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2648,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2647(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2646[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2647, x64Parser::tokenBranches2647 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2641(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 234;
}
x64Token x64Parser::tokenBranches2640[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2641,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2646 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2640(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2639[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2640, x64Parser::tokenBranches2640 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2294(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 191;
}
x64Token x64Parser::tokenBranches2293[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2294,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2374 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2639 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2401(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 192;
}
x64Token x64Parser::tokenBranches2400[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2401,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2493(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 212;
}
x64Token x64Parser::tokenBranches2492[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2493,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2585(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 226;
}
x64Token x64Parser::tokenBranches2584[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2585,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2770(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 250;
}
x64Token x64Parser::tokenBranches2769[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2770,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3146(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 272;
}
x64Token x64Parser::tokenBranches3145[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3146,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3358(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 296;
}
x64Token x64Parser::tokenBranches3357[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3358,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2769(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3145(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3357(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2768[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2769, x64Parser::tokenBranches2769 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3145, x64Parser::tokenBranches3145 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3357, x64Parser::tokenBranches3357 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2978(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 250;
}
x64Token x64Parser::tokenBranches2767[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2768 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2978,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2905(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 263;
}
x64Token x64Parser::tokenBranches2904[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2905,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3281(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 287;
}
x64Token x64Parser::tokenBranches3280[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3281,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3493(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 309;
}
x64Token x64Parser::tokenBranches3492[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3493,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2904(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3280(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3492(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2903[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2904, x64Parser::tokenBranches2904 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3280, x64Parser::tokenBranches3280 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3492, x64Parser::tokenBranches3492 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3083(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 263;
}
x64Token x64Parser::tokenBranches2902[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2903 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3083,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2902(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2901[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2902, x64Parser::tokenBranches2902 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2912(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 264;
}
x64Token x64Parser::tokenBranches2911[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2912,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3288(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 288;
}
x64Token x64Parser::tokenBranches3287[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3288,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3500(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 310;
}
x64Token x64Parser::tokenBranches3499[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3500,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2911(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3287(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3499(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2910[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2911, x64Parser::tokenBranches2911 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3287, x64Parser::tokenBranches3287 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3499, x64Parser::tokenBranches3499 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3088(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 264;
}
x64Token x64Parser::tokenBranches2900[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2901 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2910 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3088,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2400(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2492(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2584(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2900(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2399[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2767 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2400, x64Parser::tokenBranches2400 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2492, x64Parser::tokenBranches2492 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2584, x64Parser::tokenBranches2584 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2900, x64Parser::tokenBranches2900 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2676(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 235;
}
x64Token x64Parser::tokenBranches2675[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2676,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2675(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2674[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2675, x64Parser::tokenBranches2675 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2669(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 238;
}
x64Token x64Parser::tokenBranches2668[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2669,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2674 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2668(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2667[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2668, x64Parser::tokenBranches2668 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2297(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 192;
}
x64Token x64Parser::tokenBranches2296[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2297,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2399 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2667 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2420(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 199;
}
x64Token x64Parser::tokenBranches2419[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2420,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2512(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 215;
}
x64Token x64Parser::tokenBranches2511[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2512,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2604(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 229;
}
x64Token x64Parser::tokenBranches2603[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2604,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2419(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2511(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2603(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2418[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2419, x64Parser::tokenBranches2419 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2511, x64Parser::tokenBranches2511 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2603, x64Parser::tokenBranches2603 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2330(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 199;
}
x64Token x64Parser::tokenBranches2329[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2330,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2418 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2406(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 197;
}
x64Token x64Parser::tokenBranches2405[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2406,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2498(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 213;
}
x64Token x64Parser::tokenBranches2497[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2498,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2590(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 227;
}
x64Token x64Parser::tokenBranches2589[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2590,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2921(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 265;
}
x64Token x64Parser::tokenBranches2920[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2921,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3297(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 289;
}
x64Token x64Parser::tokenBranches3296[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3297,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3509(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 311;
}
x64Token x64Parser::tokenBranches3508[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3509,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2920(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3296(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3508(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2919[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2920, x64Parser::tokenBranches2920 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3296, x64Parser::tokenBranches3296 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3508, x64Parser::tokenBranches3508 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3095(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 265;
}
x64Token x64Parser::tokenBranches2918[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2919 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3095,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2918(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2917[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2918, x64Parser::tokenBranches2918 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2928(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 266;
}
x64Token x64Parser::tokenBranches2927[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2928,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3304(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 290;
}
x64Token x64Parser::tokenBranches3303[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3304,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3516(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 312;
}
x64Token x64Parser::tokenBranches3515[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3516,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2927(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3303(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3515(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2926[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2927, x64Parser::tokenBranches2927 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3303, x64Parser::tokenBranches3303 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3515, x64Parser::tokenBranches3515 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3100(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 266;
}
x64Token x64Parser::tokenBranches2916[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2917 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2926 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3100,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2405(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2497(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2589(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2916(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2328[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2329 },
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2405, x64Parser::tokenBranches2405 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2497, x64Parser::tokenBranches2497 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2589, x64Parser::tokenBranches2589 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2916, x64Parser::tokenBranches2916 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2320(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 197;
}
x64Token x64Parser::tokenBranches2319[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2320,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2328 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2354(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 203;
}
x64Token x64Parser::tokenBranches2353[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2354,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2353(x64Operand &operand, int tokenPos)
{
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2352[] = {
	{x64Token::NUMBER, 15, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2353, x64Parser::tokenBranches2353 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2351[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2352 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2357(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 204;
}
x64Token x64Parser::tokenBranches2356[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2357,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2704(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 242;
}
x64Token x64Parser::tokenBranches2703[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2704,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2720(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 244;
}
x64Token x64Parser::tokenBranches2719[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2720,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2719(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2718[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2719, x64Parser::tokenBranches2719 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2711(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 243;
}
x64Token x64Parser::tokenBranches2710[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2711,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2718 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2703(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2702[] = {
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2710 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2703, x64Parser::tokenBranches2703 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2697(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 241;
}
x64Token x64Parser::tokenBranches2696[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2697,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2702 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2696(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2695[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2696, x64Parser::tokenBranches2696 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2694[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2695 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc16(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc73(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc480(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc559(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1023(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc2319(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc2356(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2694(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2[] = {
	{x64Token::REGISTER, 96, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches6 },
	{x64Token::REGISTER, 95, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches11 },
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches21 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches26 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches471 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches474 },
	{x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches477 },
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2287 },
	{x64Token::REGISTER, 43, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2290 },
	{x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2293 },
	{x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches2296 },
	{x64Token::REGISTER, 68, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches2351 },
	{x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc3, x64Parser::tokenBranches3 },
	{x64Token::REGISTERCLASS, 19, 0, 0, x64Parser::RegClassData1, &x64Parser::TokenFunc16, x64Parser::tokenBranches16 },
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc73, x64Parser::tokenBranches73 },
	{x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc480, x64Parser::tokenBranches480 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc559, x64Parser::tokenBranches559 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1023, x64Parser::tokenBranches1023 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2319, x64Parser::tokenBranches2319 },
	{x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2356, x64Parser::tokenBranches2356 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2694, x64Parser::tokenBranches2694 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3557(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3558(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 318;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3559(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 319;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3560(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 318;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3561(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 318;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3562(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 318;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3563(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 320;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3564(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 318;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1[] = {
	{x64Token::TOKEN, 1, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches2 },
	{x64Token::REGISTERCLASS, 20, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3557,  },
	{x64Token::REGISTERCLASS, 1, 1, 0, x64Parser::RegClassData7, &x64Parser::TokenFunc3558,  },
	{x64Token::REGISTERCLASS, 14, 1, 0, x64Parser::RegClassData7, &x64Parser::TokenFunc3559,  },
	{x64Token::REGISTERCLASS, 4, 1, 0, x64Parser::RegClassData8, &x64Parser::TokenFunc3560,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, x64Parser::RegClassData9, &x64Parser::TokenFunc3561,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, x64Parser::RegClassData10, &x64Parser::TokenFunc3562,  },
	{x64Token::REGISTERCLASS, 18, 1, 0, x64Parser::RegClassData11, &x64Parser::TokenFunc3563,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, x64Parser::RegClassData12, &x64Parser::TokenFunc3564,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3566(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 321;
}
x64Token x64Parser::tokenBranches3565[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3566,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3568(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 322;
}
x64Token x64Parser::tokenBranches3567[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3568,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3573_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3573_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3573_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3573_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3573(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3573_10;
	operand.values[11] = tokenCoding3573_11;
	operand.values[12] = tokenCoding3573_12;
	operand.values[13] = tokenCoding3573_13;
}
x64Token x64Parser::tokenBranches3572[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3573,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3571[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3572 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3570[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3571 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3577_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3577_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3577_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3577_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3577(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3577_10;
	operand.values[11] = tokenCoding3577_11;
	operand.values[12] = tokenCoding3577_12;
	operand.values[13] = tokenCoding3577_13;
}
x64Token x64Parser::tokenBranches3576[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3577,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3575[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3576 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3574[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3575 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3581_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3581_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3581_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3581_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3581(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3581_10;
	operand.values[11] = tokenCoding3581_11;
	operand.values[12] = tokenCoding3581_12;
	operand.values[13] = tokenCoding3581_13;
}
x64Token x64Parser::tokenBranches3580[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3581,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3579[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3580 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3578[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3579 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3570(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3574(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3578(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3569[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3570, x64Parser::tokenBranches3570 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3574, x64Parser::tokenBranches3574 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3578, x64Parser::tokenBranches3578 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3586_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3586_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3586_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3586_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3586(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3586_10;
	operand.values[11] = tokenCoding3586_11;
	operand.values[12] = tokenCoding3586_12;
	operand.values[13] = tokenCoding3586_13;
}
x64Token x64Parser::tokenBranches3585[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3586,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3584[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3585 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3583[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3584 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3590_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3590_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3590_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3590_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3590(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3590_10;
	operand.values[11] = tokenCoding3590_11;
	operand.values[12] = tokenCoding3590_12;
	operand.values[13] = tokenCoding3590_13;
}
x64Token x64Parser::tokenBranches3589[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3590,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3588[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3589 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3587[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3588 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3594_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3594_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3594_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3594_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3594(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3594_10;
	operand.values[11] = tokenCoding3594_11;
	operand.values[12] = tokenCoding3594_12;
	operand.values[13] = tokenCoding3594_13;
}
x64Token x64Parser::tokenBranches3593[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3594,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3592[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3593 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3591[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3592 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3583(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3587(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3591(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3582[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3583, x64Parser::tokenBranches3583 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3587, x64Parser::tokenBranches3587 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3591, x64Parser::tokenBranches3591 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3599(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 323;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3598[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3599,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3597[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3598 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3596[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3597 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3603(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 324;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3602[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3603,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3601[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3602 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3600[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3601 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3607(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 325;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3606[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3607,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3605[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3606 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3604[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3605 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3611(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 326;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3610[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3611,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3609[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3610 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3608[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3609 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3615_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3615_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3615_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3615_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3615(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3615_10;
	operand.values[11] = tokenCoding3615_11;
	operand.values[12] = tokenCoding3615_12;
	operand.values[13] = tokenCoding3615_13;
}
x64Token x64Parser::tokenBranches3614[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3615,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3613[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3614 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3612[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3613 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3619_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3619_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3619_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3619_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3619_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3619(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3619_10;
	operand.values[11] = tokenCoding3619_11;
	operand.values[17] = tokenCoding3619_17;
	operand.values[12] = tokenCoding3619_12;
	operand.values[13] = tokenCoding3619_13;
}
x64Token x64Parser::tokenBranches3618[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3619,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3617[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3618 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3616[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3617 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3623_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3623_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3623_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3623_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3623(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3623_10;
	operand.values[11] = tokenCoding3623_11;
	operand.values[12] = tokenCoding3623_12;
	operand.values[13] = tokenCoding3623_13;
}
x64Token x64Parser::tokenBranches3622[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3623,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3621[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3622 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3620[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3621 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3627_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3627_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3627_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3627_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3627(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3627_10;
	operand.values[11] = tokenCoding3627_11;
	operand.values[12] = tokenCoding3627_12;
	operand.values[13] = tokenCoding3627_13;
}
x64Token x64Parser::tokenBranches3626[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3627,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3625[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3626 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3624[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3625 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3631_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3631_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3631_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3631_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3631(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3631_10;
	operand.values[11] = tokenCoding3631_11;
	operand.values[12] = tokenCoding3631_12;
	operand.values[13] = tokenCoding3631_13;
}
x64Token x64Parser::tokenBranches3630[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3631,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3629[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3630 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3628[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3629 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3635_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3635_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3635_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3635_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3635(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3635_10;
	operand.values[11] = tokenCoding3635_11;
	operand.values[12] = tokenCoding3635_12;
	operand.values[13] = tokenCoding3635_13;
}
Coding x64Parser::tokenCoding3639_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3639_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3639_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3639_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3639_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3639(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3639_10;
	operand.values[11] = tokenCoding3639_11;
	operand.values[17] = tokenCoding3639_17;
	operand.values[12] = tokenCoding3639_12;
	operand.values[13] = tokenCoding3639_13;
}
x64Token x64Parser::tokenBranches3634[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3635,  },
	{x64Token::REGISTERCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3639,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3633[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3634 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3632[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3633 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3643_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3643_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3643_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3643_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3643(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3643_10;
	operand.values[11] = tokenCoding3643_11;
	operand.values[12] = tokenCoding3643_12;
	operand.values[13] = tokenCoding3643_13;
}
x64Token x64Parser::tokenBranches3642[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3643,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3641[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3642 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3640[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3641 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3647_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3647_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3647_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3647_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3647(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3647_10;
	operand.values[11] = tokenCoding3647_11;
	operand.values[12] = tokenCoding3647_12;
	operand.values[13] = tokenCoding3647_13;
}
x64Token x64Parser::tokenBranches3646[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3647,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3645[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3646 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3644[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3645 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3651_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3651_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3651_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3651_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 5 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3651(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3651_10;
	operand.values[11] = tokenCoding3651_11;
	operand.values[12] = tokenCoding3651_12;
	operand.values[13] = tokenCoding3651_13;
}
x64Token x64Parser::tokenBranches3650[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc3651,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3649[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3650 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3648[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3649 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3656_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3656_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3656_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3656(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3656_10;
	operand.values[11] = tokenCoding3656_11;
	operand.values[13] = tokenCoding3656_13;
}
x64Token x64Parser::tokenBranches3655[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3656,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3654[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3655 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3653[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3654 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3652[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3653 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3661_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3661_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3661_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3661(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3661_10;
	operand.values[11] = tokenCoding3661_11;
	operand.values[13] = tokenCoding3661_13;
}
x64Token x64Parser::tokenBranches3660[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3661,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3666_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3666_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3666_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3666(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3666_10;
	operand.values[11] = tokenCoding3666_11;
	operand.values[13] = tokenCoding3666_13;
}
Coding x64Parser::tokenCoding3671_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3671_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3671_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3671(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3671_10;
	operand.values[11] = tokenCoding3671_11;
	operand.values[13] = tokenCoding3671_13;
}
x64Token x64Parser::tokenBranches3665[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3666,  },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3671,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3659[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3660 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3665 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3658[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3659 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3657[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3658 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3676_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3676_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3676_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3676(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3676_10;
	operand.values[11] = tokenCoding3676_11;
	operand.values[13] = tokenCoding3676_13;
}
x64Token x64Parser::tokenBranches3675[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3676,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3681_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3681_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3681_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3681(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3681_10;
	operand.values[11] = tokenCoding3681_11;
	operand.values[13] = tokenCoding3681_13;
}
x64Token x64Parser::tokenBranches3680[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3681,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3686_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3686_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3686_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3686(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3686_10;
	operand.values[11] = tokenCoding3686_11;
	operand.values[13] = tokenCoding3686_13;
}
Coding x64Parser::tokenCoding3691_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3691_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3691_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3691(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3691_10;
	operand.values[11] = tokenCoding3691_11;
	operand.values[13] = tokenCoding3691_13;
}
x64Token x64Parser::tokenBranches3685[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3686,  },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3691,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3674[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3675 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3680 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3685 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3673[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3674 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3672[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3673 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3696_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3696_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3696_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3696(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3696_10;
	operand.values[11] = tokenCoding3696_11;
	operand.values[13] = tokenCoding3696_13;
}
x64Token x64Parser::tokenBranches3695[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3696,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3701_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3701_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3701_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3701(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3701_10;
	operand.values[11] = tokenCoding3701_11;
	operand.values[13] = tokenCoding3701_13;
}
x64Token x64Parser::tokenBranches3700[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3701,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3706_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3706_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3706_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3706(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3706_10;
	operand.values[11] = tokenCoding3706_11;
	operand.values[13] = tokenCoding3706_13;
}
x64Token x64Parser::tokenBranches3705[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3706,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3711_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3711_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3711_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3711(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3711_10;
	operand.values[11] = tokenCoding3711_11;
	operand.values[13] = tokenCoding3711_13;
}
Coding x64Parser::tokenCoding3716_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3716_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3716_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3716(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3716_10;
	operand.values[11] = tokenCoding3716_11;
	operand.values[13] = tokenCoding3716_13;
}
x64Token x64Parser::tokenBranches3710[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3711,  },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3716,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3694[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3695 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3700 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3705 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3710 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3693[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3694 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3692[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3693 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3720_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3720_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3720_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3720(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3720_10;
	operand.values[11] = tokenCoding3720_11;
	operand.values[13] = tokenCoding3720_13;
}
x64Token x64Parser::tokenBranches3719[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3720,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3718[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3719 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3717[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3718 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3724_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3724_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3724_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3724(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3724_10;
	operand.values[11] = tokenCoding3724_11;
	operand.values[13] = tokenCoding3724_13;
}
x64Token x64Parser::tokenBranches3723[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3724,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3728_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3728_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3728_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3728(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3728_10;
	operand.values[11] = tokenCoding3728_11;
	operand.values[13] = tokenCoding3728_13;
}
Coding x64Parser::tokenCoding3732_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3732_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3732_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3732(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3732_10;
	operand.values[11] = tokenCoding3732_11;
	operand.values[13] = tokenCoding3732_13;
}
x64Token x64Parser::tokenBranches3727[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3728,  },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3732,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3722[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3723 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3727 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3721[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3722 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3736_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3736_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3736_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3736(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3736_10;
	operand.values[11] = tokenCoding3736_11;
	operand.values[13] = tokenCoding3736_13;
}
x64Token x64Parser::tokenBranches3735[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3736,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3740_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3740_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3740_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3740(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3740_10;
	operand.values[11] = tokenCoding3740_11;
	operand.values[13] = tokenCoding3740_13;
}
x64Token x64Parser::tokenBranches3739[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3740,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3744_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3744_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3744_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3744(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3744_10;
	operand.values[11] = tokenCoding3744_11;
	operand.values[13] = tokenCoding3744_13;
}
Coding x64Parser::tokenCoding3748_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3748_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3748_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3748(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3748_10;
	operand.values[11] = tokenCoding3748_11;
	operand.values[13] = tokenCoding3748_13;
}
x64Token x64Parser::tokenBranches3743[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3744,  },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3748,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3734[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3735 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3739 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3743 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3733[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3734 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3752_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3752_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3752_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3752(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3752_10;
	operand.values[11] = tokenCoding3752_11;
	operand.values[13] = tokenCoding3752_13;
}
x64Token x64Parser::tokenBranches3751[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3752,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3756_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3756_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3756_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3756(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3756_10;
	operand.values[11] = tokenCoding3756_11;
	operand.values[13] = tokenCoding3756_13;
}
x64Token x64Parser::tokenBranches3755[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3756,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3760_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3760_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3760_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3760(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3760_10;
	operand.values[11] = tokenCoding3760_11;
	operand.values[13] = tokenCoding3760_13;
}
x64Token x64Parser::tokenBranches3759[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3760,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3764_10[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3764_11[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3764_13[] = {
	{ CODING_NAME("signedimm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3764(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3764_10;
	operand.values[11] = tokenCoding3764_11;
	operand.values[13] = tokenCoding3764_13;
}
Coding x64Parser::tokenCoding3768_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3768_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3768_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3768(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 333;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3768_10;
	operand.values[11] = tokenCoding3768_11;
	operand.values[13] = tokenCoding3768_13;
}
x64Token x64Parser::tokenBranches3763[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3764,  },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3768,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3750[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3751 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3755 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3759 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3763 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3749[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3750 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3612(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3616(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3620(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3624(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3628(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3595[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches3596 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3600 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3604 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3608 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc3612, x64Parser::tokenBranches3612 },
	{x64Token::REGISTERCLASS, 14, 0, 0, NULL,&x64Parser::TokenFunc3616, x64Parser::tokenBranches3616 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3620, x64Parser::tokenBranches3620 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3624, x64Parser::tokenBranches3624 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3628, x64Parser::tokenBranches3628 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3632 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3640 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3644 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3648 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3652 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3657 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3672 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3692 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3717 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3721 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches3733 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches3749 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3774_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3774_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3774_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3774(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 334;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3774_10;
	operand.values[11] = tokenCoding3774_11;
	operand.values[13] = tokenCoding3774_13;
}
x64Token x64Parser::tokenBranches3773[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3774,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3788_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3788_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3788_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3788_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3788(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3788_10;
	operand.values[11] = tokenCoding3788_11;
	operand.values[12] = tokenCoding3788_12;
	operand.values[13] = tokenCoding3788_13;
}
x64Token x64Parser::tokenBranches3772[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3773 },
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3788,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3771[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3772 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3770[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3771 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3779_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3779_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3779_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3779(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 335;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3779_10;
	operand.values[11] = tokenCoding3779_11;
	operand.values[13] = tokenCoding3779_13;
}
x64Token x64Parser::tokenBranches3778[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3779,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3792_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3792_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3792_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3792_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3792(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3792_10;
	operand.values[11] = tokenCoding3792_11;
	operand.values[12] = tokenCoding3792_12;
	operand.values[13] = tokenCoding3792_13;
}
x64Token x64Parser::tokenBranches3777[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3778 },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3792,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3776[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3777 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3775[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3776 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3784_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3784_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3784_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3784(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 336;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3784_10;
	operand.values[11] = tokenCoding3784_11;
	operand.values[13] = tokenCoding3784_13;
}
x64Token x64Parser::tokenBranches3783[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3784,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3796_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3796_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3796_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3796_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3796(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding3796_10;
	operand.values[11] = tokenCoding3796_11;
	operand.values[12] = tokenCoding3796_12;
	operand.values[13] = tokenCoding3796_13;
}
x64Token x64Parser::tokenBranches3782[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3783 },
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc3796,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3781[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3782 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3780[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3781 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3769[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3770 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3775 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3780 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3806_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3806_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3806_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3806(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3806_10;
	operand.values[11] = tokenCoding3806_11;
	operand.values[13] = tokenCoding3806_13;
}
x64Token x64Parser::tokenBranches3805[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3806,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3808_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3808_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3808_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3808(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3808_10;
	operand.values[11] = tokenCoding3808_11;
	operand.values[13] = tokenCoding3808_13;
}
x64Token x64Parser::tokenBranches3807[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3808,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3810_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3810_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3810_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3810(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3810_10;
	operand.values[11] = tokenCoding3810_11;
	operand.values[13] = tokenCoding3810_13;
}
x64Token x64Parser::tokenBranches3809[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3810,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3812_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3812_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3812_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3812(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3812_10;
	operand.values[11] = tokenCoding3812_11;
	operand.values[13] = tokenCoding3812_13;
}
x64Token x64Parser::tokenBranches3811[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3812,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3798_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3798_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3798_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3798(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3798_10;
	operand.values[11] = tokenCoding3798_11;
	operand.values[13] = tokenCoding3798_13;
}
void x64Parser::TokenFunc3799(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3800(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 338;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3801(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 339;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
Coding x64Parser::tokenCoding3802_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3802_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3802_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3802(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3802_10;
	operand.values[11] = tokenCoding3802_11;
	operand.values[13] = tokenCoding3802_13;
}
Coding x64Parser::tokenCoding3803_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3803_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3803_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3803(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3803_10;
	operand.values[11] = tokenCoding3803_11;
	operand.values[13] = tokenCoding3803_13;
}
Coding x64Parser::tokenCoding3804_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3804_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3804_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 5 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3804(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3804_10;
	operand.values[11] = tokenCoding3804_11;
	operand.values[13] = tokenCoding3804_13;
}
x64Token x64Parser::tokenBranches3797[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3798,  },
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3799,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3800,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc3801,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3802,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3803,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3804,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3805 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3807 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3809 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3811 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3819_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3819_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3819_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3819(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3819_10;
	operand.values[11] = tokenCoding3819_11;
	operand.values[13] = tokenCoding3819_13;
}
x64Token x64Parser::tokenBranches3818[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3819,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3821_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3821_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3821_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3821(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3821_10;
	operand.values[11] = tokenCoding3821_11;
	operand.values[13] = tokenCoding3821_13;
}
x64Token x64Parser::tokenBranches3820[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3821,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3823_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3823_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3823_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3823(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3823_10;
	operand.values[11] = tokenCoding3823_11;
	operand.values[13] = tokenCoding3823_13;
}
x64Token x64Parser::tokenBranches3822[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3823,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3825_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3825_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3825_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3825(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3825_10;
	operand.values[11] = tokenCoding3825_11;
	operand.values[13] = tokenCoding3825_13;
}
x64Token x64Parser::tokenBranches3824[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3825,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3814_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3814_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3814_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3814(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3814_10;
	operand.values[11] = tokenCoding3814_11;
	operand.values[13] = tokenCoding3814_13;
}
Coding x64Parser::tokenCoding3815_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3815_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3815_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3815(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3815_10;
	operand.values[11] = tokenCoding3815_11;
	operand.values[13] = tokenCoding3815_13;
}
Coding x64Parser::tokenCoding3816_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3816_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3816_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3816(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3816_10;
	operand.values[11] = tokenCoding3816_11;
	operand.values[13] = tokenCoding3816_13;
}
Coding x64Parser::tokenCoding3817_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3817_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3817_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3817(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3817_10;
	operand.values[11] = tokenCoding3817_11;
	operand.values[13] = tokenCoding3817_13;
}
x64Token x64Parser::tokenBranches3813[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3814,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3815,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3816,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3817,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3818 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3820 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3822 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3824 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3829(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3828[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3829,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3827[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3828 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3832(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 341;
}
x64Token x64Parser::tokenBranches3831[] = {
	{x64Token::REGISTER, 99, 1, 0, NULL,&x64Parser::TokenFunc3832,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3830[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3831 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3835_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3835_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3835_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3835(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3835_10;
	operand.values[11] = tokenCoding3835_11;
	operand.values[13] = tokenCoding3835_13;
}
x64Token x64Parser::tokenBranches3834[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3835,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3837_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3837_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3837_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3837(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3837_10;
	operand.values[11] = tokenCoding3837_11;
	operand.values[13] = tokenCoding3837_13;
}
x64Token x64Parser::tokenBranches3836[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3837,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3830(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3826[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches3827 },
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3830, x64Parser::tokenBranches3830 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3834 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3836 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3841(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 317;
}
x64Token x64Parser::tokenBranches3840[] = {
	{x64Token::REGISTER, 99, 1, 0, NULL,&x64Parser::TokenFunc3841,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3839[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3840 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3839(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 317;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
void x64Parser::TokenFunc3843(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 342;
}
x64Token x64Parser::tokenBranches3838[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3839, x64Parser::tokenBranches3839 },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3843,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3846_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3846_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3846_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3846(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3846_10;
	operand.values[11] = tokenCoding3846_11;
	operand.values[13] = tokenCoding3846_13;
}
x64Token x64Parser::tokenBranches3845[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3846,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3848_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3848_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3848_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3848(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3848_10;
	operand.values[11] = tokenCoding3848_11;
	operand.values[13] = tokenCoding3848_13;
}
x64Token x64Parser::tokenBranches3847[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3848,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3844[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3845 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3847 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3851_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3851_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3851(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3851_10;
	operand.values[11] = tokenCoding3851_11;
}
x64Token x64Parser::tokenBranches3850[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3851,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3849[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3850 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3854(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 343;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3853[] = {
	{x64Token::NUMBER, 9, 1, 0, NULL,&x64Parser::TokenFunc3854,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3856(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3858(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 345;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3855[] = {
	{x64Token::NUMBER, 12, 1, 0, NULL,&x64Parser::TokenFunc3856,  },
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc3858,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3859(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3860(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 345;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3852[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3853 },
	{x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3855 },
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc3859,  },
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc3860,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3865_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3865_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3865_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3865_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3865(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3865_10;
	operand.values[11] = tokenCoding3865_11;
	operand.values[12] = tokenCoding3865_12;
	operand.values[13] = tokenCoding3865_13;
}
x64Token x64Parser::tokenBranches3864[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3865,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3863[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches3864 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3862[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3863 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3869_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3869_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3869_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3869_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3869(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3869_10;
	operand.values[11] = tokenCoding3869_11;
	operand.values[12] = tokenCoding3869_12;
	operand.values[13] = tokenCoding3869_13;
}
x64Token x64Parser::tokenBranches3868[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3869,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3867[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches3868 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3866[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3867 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3873_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3873_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3873_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3873_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3873(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3873_10;
	operand.values[11] = tokenCoding3873_11;
	operand.values[12] = tokenCoding3873_12;
	operand.values[13] = tokenCoding3873_13;
}
x64Token x64Parser::tokenBranches3872[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3873,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3871[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3872 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3870[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3871 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3862(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3866(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3870(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3861[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3862, x64Parser::tokenBranches3862 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3866, x64Parser::tokenBranches3866 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3870, x64Parser::tokenBranches3870 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3876_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3876_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3876_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3876_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 4, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3876(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3876_10;
	operand.values[11] = tokenCoding3876_11;
	operand.values[12] = tokenCoding3876_12;
	operand.values[13] = tokenCoding3876_13;
}
x64Token x64Parser::tokenBranches3875[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3876,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3874[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3875 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3890_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3890_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3890_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3890_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3890(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3890_10;
	operand.values[11] = tokenCoding3890_11;
	operand.values[12] = tokenCoding3890_12;
	operand.values[13] = tokenCoding3890_13;
}
x64Token x64Parser::tokenBranches3889[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3890,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3880_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3880_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3880_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3880_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3880(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3880_10;
	operand.values[11] = tokenCoding3880_11;
	operand.values[12] = tokenCoding3880_12;
	operand.values[13] = tokenCoding3880_13;
}
x64Token x64Parser::tokenBranches3879[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3880,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3889 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3878[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3879 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3894_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3894_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3894_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3894_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3894(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3894_10;
	operand.values[11] = tokenCoding3894_11;
	operand.values[12] = tokenCoding3894_12;
	operand.values[13] = tokenCoding3894_13;
}
x64Token x64Parser::tokenBranches3893[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3894,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3898_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3898_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3898_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3898_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3898(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3898_10;
	operand.values[11] = tokenCoding3898_11;
	operand.values[12] = tokenCoding3898_12;
	operand.values[13] = tokenCoding3898_13;
}
x64Token x64Parser::tokenBranches3897[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3898,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3883_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3883_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3883_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3883_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3883(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3883_10;
	operand.values[11] = tokenCoding3883_11;
	operand.values[12] = tokenCoding3883_12;
	operand.values[13] = tokenCoding3883_13;
}
Coding x64Parser::tokenCoding3886_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3886_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3886_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3886_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3886(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3886_10;
	operand.values[11] = tokenCoding3886_11;
	operand.values[12] = tokenCoding3886_12;
	operand.values[13] = tokenCoding3886_13;
}
x64Token x64Parser::tokenBranches3882[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3883,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3886,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3893 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3897 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3881[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3882 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3911_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3911_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3911_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3911_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3911(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3911_10;
	operand.values[11] = tokenCoding3911_11;
	operand.values[12] = tokenCoding3911_12;
	operand.values[13] = tokenCoding3911_13;
}
x64Token x64Parser::tokenBranches3910[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3911,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3915_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3915_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3915_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3915_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3915(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3915_10;
	operand.values[11] = tokenCoding3915_11;
	operand.values[12] = tokenCoding3915_12;
	operand.values[13] = tokenCoding3915_13;
}
x64Token x64Parser::tokenBranches3914[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3915,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3919_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3919_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3919_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3919_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3919(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3919_10;
	operand.values[11] = tokenCoding3919_11;
	operand.values[12] = tokenCoding3919_12;
	operand.values[13] = tokenCoding3919_13;
}
x64Token x64Parser::tokenBranches3918[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3919,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3901_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3901_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3901_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3901_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3901(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3901_10;
	operand.values[11] = tokenCoding3901_11;
	operand.values[12] = tokenCoding3901_12;
	operand.values[13] = tokenCoding3901_13;
}
Coding x64Parser::tokenCoding3904_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3904_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3904_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3904_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3904(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3904_10;
	operand.values[11] = tokenCoding3904_11;
	operand.values[12] = tokenCoding3904_12;
	operand.values[13] = tokenCoding3904_13;
}
Coding x64Parser::tokenCoding3907_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3907_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3907_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3907_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3907(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3907_10;
	operand.values[11] = tokenCoding3907_11;
	operand.values[12] = tokenCoding3907_12;
	operand.values[13] = tokenCoding3907_13;
}
x64Token x64Parser::tokenBranches3900[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3901,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3904,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3907,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3910 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3914 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3918 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3899[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3900 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3878(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3881(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc3899(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3877[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3878, x64Parser::tokenBranches3878 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3881, x64Parser::tokenBranches3881 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc3899, x64Parser::tokenBranches3899 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3923_10[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3923_11[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3923_13[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3923(x64Operand &operand, int tokenPos)
{
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3923_10;
	operand.values[11] = tokenCoding3923_11;
	operand.values[13] = tokenCoding3923_13;
}
Coding x64Parser::tokenCoding3926_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3926_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3926_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3926(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3926_10;
	operand.values[11] = tokenCoding3926_11;
	operand.values[13] = tokenCoding3926_13;
}
Coding x64Parser::tokenCoding3929_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3929_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3929_13[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3929(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3929_10;
	operand.values[11] = tokenCoding3929_11;
	operand.values[13] = tokenCoding3929_13;
}
x64Token x64Parser::tokenBranches3922[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3923,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3926,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3929,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3921[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3922 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3934_10[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3934_11[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3934_13[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3934(x64Operand &operand, int tokenPos)
{
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3934_10;
	operand.values[11] = tokenCoding3934_11;
	operand.values[13] = tokenCoding3934_13;
}
Coding x64Parser::tokenCoding3939_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3939_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3939_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3939(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3939_10;
	operand.values[11] = tokenCoding3939_11;
	operand.values[13] = tokenCoding3939_13;
}
x64Token x64Parser::tokenBranches3933[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3934,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3939,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3943_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3943_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3943_13[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3943(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3943_10;
	operand.values[11] = tokenCoding3943_11;
	operand.values[13] = tokenCoding3943_13;
}
x64Token x64Parser::tokenBranches3932[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3933 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3943,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3931[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3932 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3930[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3931 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3946_10[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3946_11[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3946_13[] = {
	{ CODING_NAME("one")  Coding::stateFunc, 3 },
	{ CODING_NAME("one")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3946(x64Operand &operand, int tokenPos)
{
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3946_10;
	operand.values[11] = tokenCoding3946_11;
	operand.values[13] = tokenCoding3946_13;
}
Coding x64Parser::tokenCoding3949_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3949_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3949_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 3 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3949(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3949_10;
	operand.values[11] = tokenCoding3949_11;
	operand.values[13] = tokenCoding3949_13;
}
Coding x64Parser::tokenCoding3952_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3952_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3952_13[] = {
	{ CODING_NAME("")  Coding::stateFunc, 3 },
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3952(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3952_10;
	operand.values[11] = tokenCoding3952_11;
	operand.values[13] = tokenCoding3952_13;
}
x64Token x64Parser::tokenBranches3945[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3946,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3949,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3952,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3944[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3945 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3957_10[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3957_11[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3957_13[] = {
	{ CODING_NAME("one")  Coding::stateFunc, 3 },
	{ CODING_NAME("one")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3957(x64Operand &operand, int tokenPos)
{
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3957_10;
	operand.values[11] = tokenCoding3957_11;
	operand.values[13] = tokenCoding3957_13;
}
Coding x64Parser::tokenCoding3962_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3962_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3962_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 3 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3962(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3962_10;
	operand.values[11] = tokenCoding3962_11;
	operand.values[13] = tokenCoding3962_13;
}
x64Token x64Parser::tokenBranches3956[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3957,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3962,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3966_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3966_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3966_13[] = {
	{ CODING_NAME("")  Coding::stateFunc, 3 },
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3966(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3966_10;
	operand.values[11] = tokenCoding3966_11;
	operand.values[13] = tokenCoding3966_13;
}
x64Token x64Parser::tokenBranches3955[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3956 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3966,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3954[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3955 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3953[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3954 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3973_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3973_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3973_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 4 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3973(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3973_10;
	operand.values[11] = tokenCoding3973_11;
	operand.values[13] = tokenCoding3973_13;
}
x64Token x64Parser::tokenBranches3972[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3973,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3969_10[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3969_11[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3969_13[] = {
	{ CODING_NAME("one")  Coding::stateFunc, 4 },
	{ CODING_NAME("one")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3969(x64Operand &operand, int tokenPos)
{
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3969_10;
	operand.values[11] = tokenCoding3969_11;
	operand.values[13] = tokenCoding3969_13;
}
Coding x64Parser::tokenCoding3976_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3976_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3976_13[] = {
	{ CODING_NAME("")  Coding::stateFunc, 4 },
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3976(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3976_10;
	operand.values[11] = tokenCoding3976_11;
	operand.values[13] = tokenCoding3976_13;
}
x64Token x64Parser::tokenBranches3968[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3969,  },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3972 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3976,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3967[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3968 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3981_10[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3981_11[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3981_13[] = {
	{ CODING_NAME("one")  Coding::stateFunc, 4 },
	{ CODING_NAME("one")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3981(x64Operand &operand, int tokenPos)
{
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3981_10;
	operand.values[11] = tokenCoding3981_11;
	operand.values[13] = tokenCoding3981_13;
}
Coding x64Parser::tokenCoding3986_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3986_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3986_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 4 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3986(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3986_10;
	operand.values[11] = tokenCoding3986_11;
	operand.values[13] = tokenCoding3986_13;
}
x64Token x64Parser::tokenBranches3980[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3981,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3986,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3990_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3990_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3990_13[] = {
	{ CODING_NAME("")  Coding::stateFunc, 4 },
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3990(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3990_10;
	operand.values[11] = tokenCoding3990_11;
	operand.values[13] = tokenCoding3990_13;
}
x64Token x64Parser::tokenBranches3979[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3980 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3990,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3978[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3979 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3977[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3978 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3997_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3997_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3997_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 5 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3997(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3997_10;
	operand.values[11] = tokenCoding3997_11;
	operand.values[13] = tokenCoding3997_13;
}
x64Token x64Parser::tokenBranches3996[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3997,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3993_10[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3993_11[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding3993_13[] = {
	{ CODING_NAME("one")  Coding::stateFunc, 5 },
	{ CODING_NAME("one")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc3993(x64Operand &operand, int tokenPos)
{
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3993_10;
	operand.values[11] = tokenCoding3993_11;
	operand.values[13] = tokenCoding3993_13;
}
Coding x64Parser::tokenCoding4000_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4000_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4000_13[] = {
	{ CODING_NAME("")  Coding::stateFunc, 5 },
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4000(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4000_10;
	operand.values[11] = tokenCoding4000_11;
	operand.values[13] = tokenCoding4000_13;
}
x64Token x64Parser::tokenBranches3992[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc3993,  },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3996 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4000,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3991[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3992 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4005_10[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4005_11[] = {
	{ CODING_NAME("one")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4005_13[] = {
	{ CODING_NAME("one")  Coding::stateFunc, 5 },
	{ CODING_NAME("one")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4005(x64Operand &operand, int tokenPos)
{
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4005_10;
	operand.values[11] = tokenCoding4005_11;
	operand.values[13] = tokenCoding4005_13;
}
Coding x64Parser::tokenCoding4010_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4010_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4010_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 5 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4010(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4010_10;
	operand.values[11] = tokenCoding4010_11;
	operand.values[13] = tokenCoding4010_13;
}
x64Token x64Parser::tokenBranches4004[] = {
	{x64Token::NUMBER, 18, 1, 0, NULL,&x64Parser::TokenFunc4005,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4010,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4014_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4014_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4014_13[] = {
	{ CODING_NAME("")  Coding::stateFunc, 5 },
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4014(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4014_10;
	operand.values[11] = tokenCoding4014_11;
	operand.values[13] = tokenCoding4014_13;
}
x64Token x64Parser::tokenBranches4003[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4004 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4014,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4002[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4003 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4001[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4002 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3920[] = {
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3921 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3930 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3944 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches3953 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches3967 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3977 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches3991 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4001 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4021_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4021_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4021_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4021_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 3 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4021(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4021_10;
	operand.values[11] = tokenCoding4021_11;
	operand.values[12] = tokenCoding4021_12;
	operand.values[13] = tokenCoding4021_13;
}
Coding x64Parser::tokenCoding4027_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4027_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4027_12[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4027_13[] = {
	{ CODING_NAME("")  Coding::stateFunc, 3 },
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4027(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4027_10;
	operand.values[11] = tokenCoding4027_11;
	operand.values[12] = tokenCoding4027_12;
	operand.values[13] = tokenCoding4027_13;
}
x64Token x64Parser::tokenBranches4020[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4021,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4027,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4019[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4020 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4019(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4018[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc4019, x64Parser::tokenBranches4019 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4017[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4018 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4016[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4017 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4033_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4033_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4033_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4033_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 4 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4033(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4033_10;
	operand.values[11] = tokenCoding4033_11;
	operand.values[12] = tokenCoding4033_12;
	operand.values[13] = tokenCoding4033_13;
}
Coding x64Parser::tokenCoding4039_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4039_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4039_12[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4039_13[] = {
	{ CODING_NAME("")  Coding::stateFunc, 4 },
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4039(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4039_10;
	operand.values[11] = tokenCoding4039_11;
	operand.values[12] = tokenCoding4039_12;
	operand.values[13] = tokenCoding4039_13;
}
x64Token x64Parser::tokenBranches4032[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4033,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4039,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4031[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4032 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4031(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4030[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc4031, x64Parser::tokenBranches4031 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4029[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4030 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4028[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches4029 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4045_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4045_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4045_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4045_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 4 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4045(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4045_10;
	operand.values[11] = tokenCoding4045_11;
	operand.values[12] = tokenCoding4045_12;
	operand.values[13] = tokenCoding4045_13;
}
Coding x64Parser::tokenCoding4051_10[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4051_11[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4051_12[] = {
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4051_13[] = {
	{ CODING_NAME("")  Coding::stateFunc, 4 },
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4051(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4051_10;
	operand.values[11] = tokenCoding4051_11;
	operand.values[12] = tokenCoding4051_12;
	operand.values[13] = tokenCoding4051_13;
}
x64Token x64Parser::tokenBranches4044[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4045,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4051,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4043[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4044 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4043(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4042[] = {
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc4043, x64Parser::tokenBranches4043 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4041[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4042 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4040[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4041 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4015[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches4016 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4028 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4040 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4053_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4053_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4053(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4053_10;
	operand.values[11] = tokenCoding4053_11;
}
x64Token x64Parser::tokenBranches4052[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4053,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4057_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4057_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4057_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4057(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4057_10;
	operand.values[11] = tokenCoding4057_11;
	operand.values[12] = tokenCoding4057_12;
}
x64Token x64Parser::tokenBranches4056[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4057,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4055[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4056 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4055(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4054[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4055, x64Parser::tokenBranches4055 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4061_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4061_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4061_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4061_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4061(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4061_10;
	operand.values[11] = tokenCoding4061_11;
	operand.values[12] = tokenCoding4061_12;
	operand.values[13] = tokenCoding4061_13;
}
x64Token x64Parser::tokenBranches4060[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4061,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4059[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4060 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4064_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4064_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4064_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4064_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4064(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4064_10;
	operand.values[11] = tokenCoding4064_11;
	operand.values[12] = tokenCoding4064_12;
	operand.values[13] = tokenCoding4064_13;
}
x64Token x64Parser::tokenBranches4063[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4064,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4062[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4063 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4059(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4058[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4059, x64Parser::tokenBranches4059 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4062 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4068_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4068_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4068_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4068_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4068(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4068_10;
	operand.values[11] = tokenCoding4068_11;
	operand.values[12] = tokenCoding4068_12;
	operand.values[13] = tokenCoding4068_13;
}
x64Token x64Parser::tokenBranches4067[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4068,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4066[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4067 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4071_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4071_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4071_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4071_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4071(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4071_10;
	operand.values[11] = tokenCoding4071_11;
	operand.values[12] = tokenCoding4071_12;
	operand.values[13] = tokenCoding4071_13;
}
x64Token x64Parser::tokenBranches4070[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4071,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4069[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4070 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4066(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4065[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4066, x64Parser::tokenBranches4066 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4069 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4075_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4075_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4075_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4075_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4075(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4075_10;
	operand.values[11] = tokenCoding4075_11;
	operand.values[12] = tokenCoding4075_12;
	operand.values[13] = tokenCoding4075_13;
}
x64Token x64Parser::tokenBranches4074[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4075,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4073[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4074 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4078_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4078_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4078_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4078_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4078(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4078_10;
	operand.values[11] = tokenCoding4078_11;
	operand.values[12] = tokenCoding4078_12;
	operand.values[13] = tokenCoding4078_13;
}
x64Token x64Parser::tokenBranches4077[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4078,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4076[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4077 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4073(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4072[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4073, x64Parser::tokenBranches4073 },
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4076 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4082_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4082_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4082_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4082(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4082_10;
	operand.values[11] = tokenCoding4082_11;
	operand.values[12] = tokenCoding4082_12;
}
x64Token x64Parser::tokenBranches4081[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4082,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4080[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4081 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4080(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4079[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc4080, x64Parser::tokenBranches4080 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4086_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4086_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4086_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4086(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4086_10;
	operand.values[11] = tokenCoding4086_11;
	operand.values[12] = tokenCoding4086_12;
}
x64Token x64Parser::tokenBranches4085[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4086,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4084[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4085 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4084(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4083[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4084, x64Parser::tokenBranches4084 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4090_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4090_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4090_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4090(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4090_10;
	operand.values[11] = tokenCoding4090_11;
	operand.values[12] = tokenCoding4090_12;
}
x64Token x64Parser::tokenBranches4089[] = {
	{x64Token::ADDRESSCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc4090,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4088[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4089 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4093_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4093_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4093_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4093(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4093_10;
	operand.values[11] = tokenCoding4093_11;
	operand.values[12] = tokenCoding4093_12;
}
x64Token x64Parser::tokenBranches4092[] = {
	{x64Token::ADDRESSCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc4093,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4091[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4092 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4088(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc4091(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4087[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc4088, x64Parser::tokenBranches4088 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc4091, x64Parser::tokenBranches4091 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4098_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4098_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4098_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4098(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4098_10;
	operand.values[11] = tokenCoding4098_11;
	operand.values[12] = tokenCoding4098_12;
}
x64Token x64Parser::tokenBranches4097[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4098,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4102_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4102_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4102_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4102(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4102_10;
	operand.values[11] = tokenCoding4102_11;
	operand.values[12] = tokenCoding4102_12;
}
x64Token x64Parser::tokenBranches4101[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4102,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4096[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4097 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4101 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4095[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4096 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4095(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4094[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4095, x64Parser::tokenBranches4095 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4106_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4106_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4106_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4106_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4106(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4106_10;
	operand.values[11] = tokenCoding4106_11;
	operand.values[17] = tokenCoding4106_17;
	operand.values[12] = tokenCoding4106_12;
}
x64Token x64Parser::tokenBranches4105[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4106,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4104[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4105 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4109_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4109_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4109_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4109_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4109(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4109_10;
	operand.values[11] = tokenCoding4109_11;
	operand.values[17] = tokenCoding4109_17;
	operand.values[12] = tokenCoding4109_12;
}
x64Token x64Parser::tokenBranches4108[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4109,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4107[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4108 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4104(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc4107(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4103[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc4104, x64Parser::tokenBranches4104 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4107, x64Parser::tokenBranches4107 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4115_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4115_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4115_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4115(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4115_10;
	operand.values[11] = tokenCoding4115_11;
	operand.values[12] = tokenCoding4115_12;
}
x64Token x64Parser::tokenBranches4114[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4115,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4113[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4114 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4112[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4113 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4111[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4112 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4111(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4110[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4111, x64Parser::tokenBranches4111 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4119_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4119_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4119_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4119_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect), 33, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4119_13[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4119(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4119_10;
	operand.values[11] = tokenCoding4119_11;
	operand.values[17] = tokenCoding4119_17;
	operand.values[12] = tokenCoding4119_12;
	operand.values[13] = tokenCoding4119_13;
}
x64Token x64Parser::tokenBranches4118[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4119,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4117[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4118 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4122_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4122_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4122_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4122_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect), 33, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4122_13[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4122(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4122_10;
	operand.values[11] = tokenCoding4122_11;
	operand.values[17] = tokenCoding4122_17;
	operand.values[12] = tokenCoding4122_12;
	operand.values[13] = tokenCoding4122_13;
}
x64Token x64Parser::tokenBranches4121[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4122,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4120[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4121 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4125_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4125_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4125_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4125_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4125_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4125(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4125_10;
	operand.values[11] = tokenCoding4125_11;
	operand.values[17] = tokenCoding4125_17;
	operand.values[12] = tokenCoding4125_12;
	operand.values[13] = tokenCoding4125_13;
}
x64Token x64Parser::tokenBranches4124[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4125,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4123[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4124 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4128_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4128_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4128_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4128_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4128_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 31, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4128(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4128_10;
	operand.values[11] = tokenCoding4128_11;
	operand.values[17] = tokenCoding4128_17;
	operand.values[12] = tokenCoding4128_12;
	operand.values[13] = tokenCoding4128_13;
}
x64Token x64Parser::tokenBranches4127[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4128,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4126[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4127 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4123(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc4126(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4116[] = {
	{x64Token::ADDRESSCLASS, 23, 0, 0, NULL, NULL, x64Parser::tokenBranches4117 },
	{x64Token::ADDRESSCLASS, 26, 0, 0, NULL, NULL, x64Parser::tokenBranches4120 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc4123, x64Parser::tokenBranches4123 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4126, x64Parser::tokenBranches4126 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4134_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4134_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4134_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4134(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4134_10;
	operand.values[11] = tokenCoding4134_11;
	operand.values[12] = tokenCoding4134_12;
}
x64Token x64Parser::tokenBranches4133[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4134,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4132[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4133 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4131[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4132 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4130[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4131 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4130(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4129[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4130, x64Parser::tokenBranches4130 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4140_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4140_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4140_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4140(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4140_10;
	operand.values[11] = tokenCoding4140_11;
	operand.values[12] = tokenCoding4140_12;
}
x64Token x64Parser::tokenBranches4139[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4140,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4138[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4139 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4137[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4138 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4136[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4137 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4136(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4135[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc4136, x64Parser::tokenBranches4136 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4151_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4151_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4151_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4151_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4151(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4151_10;
	operand.values[11] = tokenCoding4151_11;
	operand.values[12] = tokenCoding4151_12;
	operand.values[13] = tokenCoding4151_13;
}
x64Token x64Parser::tokenBranches4150[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4151,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4149[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4150 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4148[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4149 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4156_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4156_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4156_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4156(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4156_10;
	operand.values[11] = tokenCoding4156_11;
	operand.values[12] = tokenCoding4156_12;
}
Coding x64Parser::tokenCoding4157_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4157_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4157_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4157(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 348;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4157_10;
	operand.values[11] = tokenCoding4157_11;
	operand.values[12] = tokenCoding4157_12;
}
x64Token x64Parser::tokenBranches4155[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4156,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4157,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4166(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 349;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4165[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4166,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4170(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 350;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4169[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4170,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4164[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches4165 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4169 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4163[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4164 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4178_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4178_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4178_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4178_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4178(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4178_10;
	operand.values[11] = tokenCoding4178_11;
	operand.values[12] = tokenCoding4178_12;
	operand.values[13] = tokenCoding4178_13;
}
x64Token x64Parser::tokenBranches4177[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4178,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4180_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4180_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4180_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4180_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4180(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4180_10;
	operand.values[11] = tokenCoding4180_11;
	operand.values[12] = tokenCoding4180_12;
	operand.values[13] = tokenCoding4180_13;
}
x64Token x64Parser::tokenBranches4179[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4180,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4182_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4182_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4182_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4182_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4182(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4182_10;
	operand.values[11] = tokenCoding4182_11;
	operand.values[12] = tokenCoding4182_12;
	operand.values[13] = tokenCoding4182_13;
}
x64Token x64Parser::tokenBranches4181[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4182,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4189_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4189_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4189_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4189_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4189(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4189_10;
	operand.values[11] = tokenCoding4189_11;
	operand.values[12] = tokenCoding4189_12;
	operand.values[13] = tokenCoding4189_13;
}
x64Token x64Parser::tokenBranches4188[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4189,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4192_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4192_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4192_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4192_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4192(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4192_10;
	operand.values[11] = tokenCoding4192_11;
	operand.values[12] = tokenCoding4192_12;
	operand.values[13] = tokenCoding4192_13;
}
x64Token x64Parser::tokenBranches4191[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4192,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4184(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 353;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4186(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 354;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4183[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4184,  },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4186,  },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4188 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4191 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4163(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::number;
	operand.values[1]->val = operands.size();
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4171(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 351;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4172(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 352;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4173_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4173_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4173_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4173_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4173(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4173_10;
	operand.values[11] = tokenCoding4173_11;
	operand.values[12] = tokenCoding4173_12;
	operand.values[13] = tokenCoding4173_13;
}
Coding x64Parser::tokenCoding4174_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4174_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4174_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4174_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4174(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4174_10;
	operand.values[11] = tokenCoding4174_11;
	operand.values[12] = tokenCoding4174_12;
	operand.values[13] = tokenCoding4174_13;
}
Coding x64Parser::tokenCoding4175_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4175_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4175_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4175_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 5 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4175(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4175_10;
	operand.values[11] = tokenCoding4175_11;
	operand.values[12] = tokenCoding4175_12;
	operand.values[13] = tokenCoding4175_13;
}
Coding x64Parser::tokenCoding4176_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4176_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4176_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4176_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4176(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4176_10;
	operand.values[11] = tokenCoding4176_11;
	operand.values[12] = tokenCoding4176_12;
	operand.values[13] = tokenCoding4176_13;
}
x64Token x64Parser::tokenBranches4162[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc4163, x64Parser::tokenBranches4163 },
	{x64Token::NUMBER, 13, 1, 0, NULL,&x64Parser::TokenFunc4171,  },
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc4172,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc4173,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4174,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4175,  },
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4176,  },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4177 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4179 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4181 },
	{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches4183 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4196(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 355;
}
x64Token x64Parser::tokenBranches4195[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4196,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4246(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 356;
}
x64Token x64Parser::tokenBranches4245[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4246,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4244[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4245 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4243[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4244 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4242[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4243 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4241[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4242 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4240[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4241 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4239[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4240 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4238[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4239 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4272(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 358;
}
x64Token x64Parser::tokenBranches4271[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4272,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4270[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4271 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4269[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4270 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4268[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4269 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4267[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4268 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4266[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4267 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4265[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4266 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4264[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4265 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4237[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4238 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4264 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4236[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4237 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4259(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 357;
}
x64Token x64Parser::tokenBranches4258[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4259,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4257[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4258 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4256[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4257 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4255[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4256 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4254[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4255 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4253[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4254 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4252[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4253 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4251[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4252 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4285(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 359;
}
x64Token x64Parser::tokenBranches4284[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4285,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4283[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4284 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4282[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4283 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4281[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4282 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4280[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4281 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4279[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4280 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4278[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4279 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4277[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4278 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4307(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 361;
}
x64Token x64Parser::tokenBranches4306[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4307,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4305[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4306 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4304[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4305 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4303[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4304 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4302[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4303 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4301[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4302 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4300[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4301 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4299[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4300 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4250[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4251 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4277 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4299 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4249[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4250 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4294(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 360;
}
x64Token x64Parser::tokenBranches4293[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4294,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4292[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4293 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4291[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4292 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4290[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4291 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4289[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4290 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4288[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4289 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4249(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4235[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches4236 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4249, x64Parser::tokenBranches4249 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4288 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4234[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4235 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4320(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 362;
}
x64Token x64Parser::tokenBranches4319[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4320,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4318[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4319 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4317[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4318 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4316[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4317 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4315[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4316 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4314[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4315 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4313[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4314 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4312[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4313 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4346(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 364;
}
x64Token x64Parser::tokenBranches4345[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4346,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4344[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4345 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4343[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4344 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4342[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4343 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4341[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4342 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4340[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4341 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4339[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4340 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4338[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4339 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4311[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4312 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4338 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4310[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4311 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4333(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 363;
}
x64Token x64Parser::tokenBranches4332[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4333,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4331[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4332 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4330[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4331 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4329[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4330 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4328[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4329 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4327[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4328 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4326[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4327 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4325[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4326 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4359(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 365;
}
x64Token x64Parser::tokenBranches4358[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4359,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4357[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4358 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4356[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4357 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4355[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4356 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4354[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4355 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4353[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4354 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4352[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4353 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4351[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4352 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4379(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 367;
}
x64Token x64Parser::tokenBranches4378[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4379,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4377[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4378 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4376[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4377 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4375[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4376 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4374[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4375 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4373[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4374 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4324[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4325 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4351 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4373 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4323[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4324 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4368(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 366;
}
x64Token x64Parser::tokenBranches4367[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4368,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4366[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4367 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4365[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4366 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4364[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4365 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4363[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4364 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4362[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4363 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4323(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4309[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches4310 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4323, x64Parser::tokenBranches4323 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4362 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4308[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4309 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4392(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 368;
}
x64Token x64Parser::tokenBranches4391[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4392,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4390[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4391 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4389[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4390 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4388[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4389 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4387[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4388 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4386[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4387 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4385[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4386 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4384[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4385 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4418(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 370;
}
x64Token x64Parser::tokenBranches4417[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4418,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4416[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4417 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4415[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4416 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4414[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4415 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4413[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4414 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4412[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4413 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4411[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4412 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4410[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4411 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4383[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4384 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4410 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4382[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4383 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4405(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 369;
}
x64Token x64Parser::tokenBranches4404[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4405,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4403[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4404 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4402[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4403 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4401[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4402 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4400[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4401 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4399[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4400 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4398[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4399 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4397[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4398 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4431(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 371;
}
x64Token x64Parser::tokenBranches4430[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4431,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4429[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4430 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4428[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4429 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4427[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4428 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4426[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4427 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4425[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4426 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4424[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4425 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4423[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4424 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4451(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 373;
}
x64Token x64Parser::tokenBranches4450[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4451,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4449[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4450 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4448[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4449 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4447[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4448 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4446[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4447 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4445[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4446 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4396[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4397 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4423 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4445 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4395[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4396 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4440(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 372;
}
x64Token x64Parser::tokenBranches4439[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4440,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4438[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4439 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4437[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4438 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4436[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4437 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4435[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4436 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4434[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4435 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4395(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4381[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches4382 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4395, x64Parser::tokenBranches4395 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4434 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4380[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4464(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 374;
}
x64Token x64Parser::tokenBranches4463[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4464,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4462[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4463 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4461[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4462 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4460[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4461 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4459[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4460 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4458[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4459 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4457[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4458 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4456[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4457 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4455[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4456 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4454[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4455 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4477(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 375;
}
x64Token x64Parser::tokenBranches4476[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4477,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4475[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4476 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4474[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4475 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4473[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4474 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4472[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4473 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4471[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4472 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4470[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4471 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4469[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4470 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4497(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 377;
}
x64Token x64Parser::tokenBranches4496[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4497,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4495[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4496 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4494[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4495 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4493[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4494 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4492[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4493 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4491[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4492 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4468[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4469 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4491 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4467[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4468 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4486(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 376;
}
x64Token x64Parser::tokenBranches4485[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4486,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4484[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4485 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4483[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4484 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4482[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4483 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4481[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4482 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4480[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4481 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4467(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4453[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches4454 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4467, x64Parser::tokenBranches4467 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4480 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4452[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4453 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4233[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4234 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4308 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4380 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4452 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4502(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 378;
}
x64Token x64Parser::tokenBranches4501[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4502,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4507_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4507_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4507_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4507_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4507(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4507_10;
	operand.values[11] = tokenCoding4507_11;
	operand.values[12] = tokenCoding4507_12;
	operand.values[13] = tokenCoding4507_13;
}
Coding x64Parser::tokenCoding4511_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4511_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4511_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4511_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4511_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4511(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4511_10;
	operand.values[11] = tokenCoding4511_11;
	operand.values[17] = tokenCoding4511_17;
	operand.values[12] = tokenCoding4511_12;
	operand.values[13] = tokenCoding4511_13;
}
x64Token x64Parser::tokenBranches4506[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4507,  },
	{x64Token::REGISTERCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc4511,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4505[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4506 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4504[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4505 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4515_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4515_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4515_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4515_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4515(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4515_10;
	operand.values[11] = tokenCoding4515_11;
	operand.values[12] = tokenCoding4515_12;
	operand.values[13] = tokenCoding4515_13;
}
x64Token x64Parser::tokenBranches4514[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4515,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4513[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4514 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4512[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4513 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4519_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4519_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4519_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4519_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4519(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4519_10;
	operand.values[11] = tokenCoding4519_11;
	operand.values[12] = tokenCoding4519_12;
	operand.values[13] = tokenCoding4519_13;
}
x64Token x64Parser::tokenBranches4518[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4519,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4517[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4518 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4516[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches4517 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4523_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4523_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4523_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4523_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 5 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4523(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding4523_10;
	operand.values[11] = tokenCoding4523_11;
	operand.values[12] = tokenCoding4523_12;
	operand.values[13] = tokenCoding4523_13;
}
x64Token x64Parser::tokenBranches4522[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4523,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4521[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4522 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4520[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4521 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4503[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4504 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches4512 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4516 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4520 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4525_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4525_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4525_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4525_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4525(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4525_10;
	operand.values[11] = tokenCoding4525_11;
	operand.values[12] = tokenCoding4525_12;
	operand.values[13] = tokenCoding4525_13;
}
x64Token x64Parser::tokenBranches4524[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4525,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4527_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4527_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4527_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4527_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4527(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4527_10;
	operand.values[11] = tokenCoding4527_11;
	operand.values[12] = tokenCoding4527_12;
	operand.values[13] = tokenCoding4527_13;
}
x64Token x64Parser::tokenBranches4526[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4527,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4530(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 379;
}
x64Token x64Parser::tokenBranches4529[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4530,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4542(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 380;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->unary = 0;
	operand.values[21]->binary = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4541[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4542,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4540[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4541 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4539[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4540 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4539(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4538[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc4539, x64Parser::tokenBranches4539 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4537[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches4538 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4546_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4546_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4546_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 16, -1, -1, 0, '&' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4546_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 27, 5, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 16, -1, -1, 0, '>' }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4546(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4546_10;
	operand.values[11] = tokenCoding4546_11;
	operand.values[12] = tokenCoding4546_12;
	operand.values[13] = tokenCoding4546_13;
}
x64Token x64Parser::tokenBranches4545[] = {
	{x64Token::ADDRESSCLASS, 0, 1, 0, NULL,&x64Parser::TokenFunc4546,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4544[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4545 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4544(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4543[] = {
	{x64Token::NUMBER, 2, 0, 0, NULL,&x64Parser::TokenFunc4544, x64Parser::tokenBranches4544 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4559(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4558[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4559,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4557[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4558 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4556[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4557 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4563(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4562[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4563,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4561[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4562 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4560[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4561 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4567(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4566[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4567,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4565[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4566 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4564[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4565 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4571(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4570[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4571,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4569[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4570 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4568[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4569 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4575(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4574[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4575,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4573[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4574 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4572[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4573 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4579(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4578[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4579,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4577[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4578 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4576[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4577 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4583(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4582[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4583,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4581[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4582 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4580[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4581 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4587(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4586[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4587,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4585[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4586 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4584[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4585 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4591(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4590[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4591,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4589[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4590 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4594_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4594_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4594_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4594(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4594_10;
	operand.values[11] = tokenCoding4594_11;
	operand.values[13] = tokenCoding4594_13;
}
x64Token x64Parser::tokenBranches4593[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4594,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4596_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4596_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4596_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4596(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4596_10;
	operand.values[11] = tokenCoding4596_11;
	operand.values[13] = tokenCoding4596_13;
}
x64Token x64Parser::tokenBranches4595[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4596,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4592(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4588[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4589 },
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4592,  },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4593 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4595 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4600(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4599[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4600,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4598[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4599 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4597[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4598 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4604(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4603[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4604,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4602[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4603 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4601[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4602 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4608_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4608_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4608_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4608(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4608_10;
	operand.values[11] = tokenCoding4608_11;
	operand.values[13] = tokenCoding4608_13;
}
x64Token x64Parser::tokenBranches4607[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4608,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4610_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4610_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4610_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4610(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4610_10;
	operand.values[11] = tokenCoding4610_11;
	operand.values[13] = tokenCoding4610_13;
}
x64Token x64Parser::tokenBranches4609[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4610,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4606(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4605[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4606,  },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4607 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4609 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4621_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4621_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4621(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4621_12;
	operand.values[13] = tokenCoding4621_13;
}
x64Token x64Parser::tokenBranches4620[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4621,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4623_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4623_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 223, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4623(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4623_12;
	operand.values[13] = tokenCoding4623_13;
}
x64Token x64Parser::tokenBranches4622[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4623,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4631_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4631_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4631_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4631_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4631(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4631_10;
	operand.values[11] = tokenCoding4631_11;
	operand.values[12] = tokenCoding4631_12;
	operand.values[13] = tokenCoding4631_13;
}
x64Token x64Parser::tokenBranches4630[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4631,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4629[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4630 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4639_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4639_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4639_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4639_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4639(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4639_10;
	operand.values[11] = tokenCoding4639_11;
	operand.values[12] = tokenCoding4639_12;
	operand.values[13] = tokenCoding4639_13;
}
x64Token x64Parser::tokenBranches4638[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4639,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4637[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4638 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4645_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4645_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4645_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4645_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4645(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4645_10;
	operand.values[11] = tokenCoding4645_11;
	operand.values[12] = tokenCoding4645_12;
	operand.values[13] = tokenCoding4645_13;
}
x64Token x64Parser::tokenBranches4644[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4645,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4647_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4647_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4647_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4647_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4647(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4647_10;
	operand.values[11] = tokenCoding4647_11;
	operand.values[12] = tokenCoding4647_12;
	operand.values[13] = tokenCoding4647_13;
}
x64Token x64Parser::tokenBranches4646[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4647,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4649_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4649_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4649_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4649_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 219, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4649(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4649_10;
	operand.values[11] = tokenCoding4649_11;
	operand.values[12] = tokenCoding4649_12;
	operand.values[13] = tokenCoding4649_13;
}
x64Token x64Parser::tokenBranches4648[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4649,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4643_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4643_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4643(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4643_12;
	operand.values[13] = tokenCoding4643_13;
}
x64Token x64Parser::tokenBranches4642[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4643,  },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4644 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4646 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4648 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4653_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4653_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4653_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4653_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4653(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4653_10;
	operand.values[11] = tokenCoding4653_11;
	operand.values[12] = tokenCoding4653_12;
	operand.values[13] = tokenCoding4653_13;
}
x64Token x64Parser::tokenBranches4652[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4653,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4651[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches4652 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4655_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4655_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4655_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4655_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4655(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4655_10;
	operand.values[11] = tokenCoding4655_11;
	operand.values[12] = tokenCoding4655_12;
	operand.values[13] = tokenCoding4655_13;
}
x64Token x64Parser::tokenBranches4654[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4655,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4666_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4666_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4666_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4666_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4666(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4666_10;
	operand.values[11] = tokenCoding4666_11;
	operand.values[12] = tokenCoding4666_12;
	operand.values[13] = tokenCoding4666_13;
}
x64Token x64Parser::tokenBranches4665[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4666,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4673_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4673_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4673_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4673_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4673(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4673_10;
	operand.values[11] = tokenCoding4673_11;
	operand.values[12] = tokenCoding4673_12;
	operand.values[13] = tokenCoding4673_13;
}
x64Token x64Parser::tokenBranches4672[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4673,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4675_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4675_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4675_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4675_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4675(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4675_10;
	operand.values[11] = tokenCoding4675_11;
	operand.values[12] = tokenCoding4675_12;
	operand.values[13] = tokenCoding4675_13;
}
x64Token x64Parser::tokenBranches4674[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4675,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4684_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4684_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4684_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4684_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4684(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4684_10;
	operand.values[11] = tokenCoding4684_11;
	operand.values[12] = tokenCoding4684_12;
	operand.values[13] = tokenCoding4684_13;
}
x64Token x64Parser::tokenBranches4683[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4684,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4686_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4686_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4686_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4686_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4686(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4686_10;
	operand.values[11] = tokenCoding4686_11;
	operand.values[12] = tokenCoding4686_12;
	operand.values[13] = tokenCoding4686_13;
}
x64Token x64Parser::tokenBranches4685[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4686,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4682_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4682_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4682(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4682_12;
	operand.values[13] = tokenCoding4682_13;
}
x64Token x64Parser::tokenBranches4681[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4682,  },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4683 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4685 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4689_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4689_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4689_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4689_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4689(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4689_10;
	operand.values[11] = tokenCoding4689_11;
	operand.values[12] = tokenCoding4689_12;
	operand.values[13] = tokenCoding4689_13;
}
x64Token x64Parser::tokenBranches4688[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4689,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4687[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches4688 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4692_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4692_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4692_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4692_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4692(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4692_10;
	operand.values[11] = tokenCoding4692_11;
	operand.values[12] = tokenCoding4692_12;
	operand.values[13] = tokenCoding4692_13;
}
x64Token x64Parser::tokenBranches4691[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4692,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4690[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches4691 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4694_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4694_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4694_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4694_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4694(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4694_10;
	operand.values[11] = tokenCoding4694_11;
	operand.values[12] = tokenCoding4694_12;
	operand.values[13] = tokenCoding4694_13;
}
x64Token x64Parser::tokenBranches4693[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4694,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4696_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4696_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4696_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4696_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4696(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4696_10;
	operand.values[11] = tokenCoding4696_11;
	operand.values[12] = tokenCoding4696_12;
	operand.values[13] = tokenCoding4696_13;
}
x64Token x64Parser::tokenBranches4695[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4696,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4700_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4700_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4700_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4700_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4700(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4700_10;
	operand.values[11] = tokenCoding4700_11;
	operand.values[12] = tokenCoding4700_12;
	operand.values[13] = tokenCoding4700_13;
}
x64Token x64Parser::tokenBranches4699[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4700,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4702_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4702_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4702_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4702_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4702(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4702_10;
	operand.values[11] = tokenCoding4702_11;
	operand.values[12] = tokenCoding4702_12;
	operand.values[13] = tokenCoding4702_13;
}
x64Token x64Parser::tokenBranches4701[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4702,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4704_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4704_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4704_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4704_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 219, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4704(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4704_10;
	operand.values[11] = tokenCoding4704_11;
	operand.values[12] = tokenCoding4704_12;
	operand.values[13] = tokenCoding4704_13;
}
x64Token x64Parser::tokenBranches4703[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4704,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4698_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4698_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4698(x64Operand &operand, int tokenPos)
{
	operand.values[12] = tokenCoding4698_12;
	operand.values[13] = tokenCoding4698_13;
}
x64Token x64Parser::tokenBranches4697[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4698,  },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4699 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4701 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4703 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4707_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4707_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4707_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4707_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4707(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4707_10;
	operand.values[11] = tokenCoding4707_11;
	operand.values[12] = tokenCoding4707_12;
	operand.values[13] = tokenCoding4707_13;
}
x64Token x64Parser::tokenBranches4706[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4707,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4708(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 381;
}
x64Token x64Parser::tokenBranches4705[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches4706 },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc4708,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4711_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4711_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4711_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4711_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4711(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4711_10;
	operand.values[11] = tokenCoding4711_11;
	operand.values[12] = tokenCoding4711_12;
	operand.values[13] = tokenCoding4711_13;
}
x64Token x64Parser::tokenBranches4710[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4711,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4712(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
}
x64Token x64Parser::tokenBranches4709[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches4710 },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc4712,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4722(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4721[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4722,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4720[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4721 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4719[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4720 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4726(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4725[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4726,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4724[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4725 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4723[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4724 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4735(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4734[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4735,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4733[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4734 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4732[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4733 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4739(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[9] = new Coding[2];
	CleanupValues.push_back(operand.values[9]);
	operand.values[9]->type = Coding::reg;
	operand.values[9]->val = inputTokens[tokenPos]->val->ival;
	operand.values[9]->bits = 0;
	operand.values[9]->field = 0;
	operand.values[9]->unary = 0;
	operand.values[9]->binary = 0;
	operand.values[9][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4738[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4739,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4737[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4738 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4736[] = {
	{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches4737 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4741_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4741_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4741_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4741_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 174, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4741(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4741_10;
	operand.values[11] = tokenCoding4741_11;
	operand.values[12] = tokenCoding4741_12;
	operand.values[13] = tokenCoding4741_13;
}
x64Token x64Parser::tokenBranches4740[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4741,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4743_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4743_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4743_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4743_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 174, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4743(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4743_10;
	operand.values[11] = tokenCoding4743_11;
	operand.values[12] = tokenCoding4743_12;
	operand.values[13] = tokenCoding4743_13;
}
x64Token x64Parser::tokenBranches4742[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4743,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4754(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4753[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4754,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4781_10[] = {
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4781_11[] = {
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4781_12[] = {
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4781_13[] = {
	{ CODING_NAME("isigned")  Coding::stateFunc, 3 },
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4781(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4781_10;
	operand.values[11] = tokenCoding4781_11;
	operand.values[12] = tokenCoding4781_12;
	operand.values[13] = tokenCoding4781_13;
}
x64Token x64Parser::tokenBranches4780[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4781,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4787_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4787_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4787_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4787_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 3 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4787(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 390;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4787_10;
	operand.values[11] = tokenCoding4787_11;
	operand.values[12] = tokenCoding4787_12;
	operand.values[13] = tokenCoding4787_13;
}
x64Token x64Parser::tokenBranches4779[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4780 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4787,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4778[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4779 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4758(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4778_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4778_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4778_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4778_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4778(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4778_10;
	operand.values[11] = tokenCoding4778_11;
	operand.values[12] = tokenCoding4778_12;
	operand.values[13] = tokenCoding4778_13;
}
x64Token x64Parser::tokenBranches4757[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4758,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4778, x64Parser::tokenBranches4778 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4752[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4753 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches4757 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4751[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4752 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4762(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 385;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4761[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4762,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4798_10[] = {
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4798_11[] = {
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4798_12[] = {
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4798_13[] = {
	{ CODING_NAME("isigned")  Coding::stateFunc, 4 },
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4798(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4798_10;
	operand.values[11] = tokenCoding4798_11;
	operand.values[12] = tokenCoding4798_12;
	operand.values[13] = tokenCoding4798_13;
}
x64Token x64Parser::tokenBranches4797[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4798,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4804_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4804_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4804_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4804_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 4 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4804(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4804_10;
	operand.values[11] = tokenCoding4804_11;
	operand.values[12] = tokenCoding4804_12;
	operand.values[13] = tokenCoding4804_13;
}
x64Token x64Parser::tokenBranches4796[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4797 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4804,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4795[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4796 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4766(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 386;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4795_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4795_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4795_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4795_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4795(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4795_10;
	operand.values[11] = tokenCoding4795_11;
	operand.values[12] = tokenCoding4795_12;
	operand.values[13] = tokenCoding4795_13;
}
x64Token x64Parser::tokenBranches4765[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4766,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4795, x64Parser::tokenBranches4795 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4760[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4761 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches4765 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4759[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4760 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4770(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
	operand.values[18] = new Coding[2];
	CleanupValues.push_back(operand.values[18]);
	operand.values[18]->type = Coding::number;
	operand.values[18]->val = operands.size();
	operand.values[18]->bits = 0;
	operand.values[18]->field = 0;
	operand.values[18]->unary = 0;
	operand.values[18]->binary = 0;
	operand.values[18][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4769[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4770,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4815_10[] = {
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4815_11[] = {
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4815_12[] = {
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4815_13[] = {
	{ CODING_NAME("isigned")  Coding::stateFunc, 5 },
	{ CODING_NAME("isigned")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4815(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4815_10;
	operand.values[11] = tokenCoding4815_11;
	operand.values[12] = tokenCoding4815_12;
	operand.values[13] = tokenCoding4815_13;
}
x64Token x64Parser::tokenBranches4814[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4815,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4821_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4821_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4821_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4821_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 5 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4821(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4821_10;
	operand.values[11] = tokenCoding4821_11;
	operand.values[12] = tokenCoding4821_12;
	operand.values[13] = tokenCoding4821_13;
}
x64Token x64Parser::tokenBranches4813[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4814 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4821,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4812[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4813 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4774(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4812_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4812_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4812_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding4812_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc4812(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4812_10;
	operand.values[11] = tokenCoding4812_11;
	operand.values[12] = tokenCoding4812_12;
	operand.values[13] = tokenCoding4812_13;
}
x64Token x64Parser::tokenBranches4773[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4774,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4812, x64Parser::tokenBranches4812 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4768[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4769 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4773 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4767[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4768 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4751(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc4759(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc4767(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4750[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc4751, x64Parser::tokenBranches4751 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc4759, x64Parser::tokenBranches4759 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc4767, x64Parser::tokenBranches4767 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4830(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 392;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4829[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4830,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4845(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 396;
}
x64Token x64Parser::tokenBranches4828[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4829 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4845,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4827[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4828 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4834(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 393;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4833[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4834,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4848(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 397;
}
x64Token x64Parser::tokenBranches4832[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4833 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4848,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4831[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4832 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4838(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 394;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4837[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4838,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4851(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 398;
}
x64Token x64Parser::tokenBranches4836[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4837 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4851,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4835[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4836 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4842(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 395;
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4841[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4842,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4854(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 399;
}
x64Token x64Parser::tokenBranches4840[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4841 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4854,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4839[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4840 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4826[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches4827 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4831 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4835 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4839 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4863(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 400;
}
x64Token x64Parser::tokenBranches4862[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4863,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4861[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4862 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4860[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4861 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4879(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 402;
}
x64Token x64Parser::tokenBranches4878[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4879,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4877[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4878 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4876[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4877 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4859[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4860 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4876 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4858[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4859 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4857[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4858 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4871(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 401;
}
x64Token x64Parser::tokenBranches4870[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4871,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4869[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4870 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4868[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4869 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4887(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 403;
}
x64Token x64Parser::tokenBranches4886[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4887,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4885[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4886 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4884[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4885 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4901(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 405;
}
x64Token x64Parser::tokenBranches4900[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4901,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4899[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4900 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4898[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4899 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4867[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4868 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4884 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4898 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4866[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4867 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4893(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 404;
}
x64Token x64Parser::tokenBranches4892[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4893,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4891[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4892 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4890[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4891 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4866(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4865[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4866, x64Parser::tokenBranches4866 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4890 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4856[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4857 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4865 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4909(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 406;
}
x64Token x64Parser::tokenBranches4908[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4909,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4907[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4908 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4906[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4907 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4925(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 408;
}
x64Token x64Parser::tokenBranches4924[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4925,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4923[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4924 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4922[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4923 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4905[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4906 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4922 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4904[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4905 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4903[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4904 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4917(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 407;
}
x64Token x64Parser::tokenBranches4916[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4917,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4915[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4916 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4914[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4915 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4933(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 409;
}
x64Token x64Parser::tokenBranches4932[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4933,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4931[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4932 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4930[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4931 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4947(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 411;
}
x64Token x64Parser::tokenBranches4946[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4947,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4945[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4946 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4944[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4945 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4913[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4914 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4930 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4944 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4912[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4913 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4939(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 410;
}
x64Token x64Parser::tokenBranches4938[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4939,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4937[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4938 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4936[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4937 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4912(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4911[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4912, x64Parser::tokenBranches4912 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4936 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4902[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4903 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4911 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4955(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 412;
}
x64Token x64Parser::tokenBranches4954[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4955,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4953[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4954 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4952[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4953 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4971(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 414;
}
x64Token x64Parser::tokenBranches4970[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4971,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4969[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4970 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4968[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4969 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4951[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4952 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4968 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4950[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4951 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4949[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4950 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4963(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 413;
}
x64Token x64Parser::tokenBranches4962[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4963,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4961[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4962 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4960[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4961 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4979(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 415;
}
x64Token x64Parser::tokenBranches4978[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4979,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4977[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4978 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4976[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4977 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4993(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 417;
}
x64Token x64Parser::tokenBranches4992[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4993,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4991[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4992 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4990[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4991 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4959[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4960 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4976 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4990 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4958[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4959 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4985(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 416;
}
x64Token x64Parser::tokenBranches4984[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc4985,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4983[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4984 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4982[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4983 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4958(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4957[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4958, x64Parser::tokenBranches4958 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4982 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4948[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches4949 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4957 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4855[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4856 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4902 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4948 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5000(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 418;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4999[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5000,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4998[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4999 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5006_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5006_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5006_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5006_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5006(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5006_10;
	operand.values[11] = tokenCoding5006_11;
	operand.values[12] = tokenCoding5006_12;
	operand.values[13] = tokenCoding5006_13;
}
x64Token x64Parser::tokenBranches5005[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5006,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5010(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 419;
}
x64Token x64Parser::tokenBranches5009[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc5010,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5018(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 420;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5017[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5018,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5020(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 421;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5019[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5020,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5031(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 422;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5030[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc5031,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5036(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 423;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5035[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc5036,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5029[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5030 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5035 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5028[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5029 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5043_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5043_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5043_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5043_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5043(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5043_10;
	operand.values[11] = tokenCoding5043_11;
	operand.values[12] = tokenCoding5043_12;
	operand.values[13] = tokenCoding5043_13;
}
x64Token x64Parser::tokenBranches5042[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5043,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5046_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5046_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5046_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5046_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5046(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5046_10;
	operand.values[11] = tokenCoding5046_11;
	operand.values[12] = tokenCoding5046_12;
	operand.values[13] = tokenCoding5046_13;
}
x64Token x64Parser::tokenBranches5045[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5046,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5028(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::number;
	operand.values[1]->val = operands.size();
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5038(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 424;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5040(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 425;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5027[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc5028, x64Parser::tokenBranches5028 },
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc5038,  },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc5040,  },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5042 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5045 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5048(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 426;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5047[] = {
	{x64Token::NUMBER, 9, 1, 0, NULL,&x64Parser::TokenFunc5048,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5050(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 427;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5052(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 428;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5049[] = {
	{x64Token::NUMBER, 14, 1, 0, NULL,&x64Parser::TokenFunc5050,  },
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc5052,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5060_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5060_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5060_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5060_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5060(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5060_10;
	operand.values[11] = tokenCoding5060_11;
	operand.values[12] = tokenCoding5060_12;
	operand.values[13] = tokenCoding5060_13;
}
x64Token x64Parser::tokenBranches5059[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5060,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5062_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5062_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5062_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5062_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5062(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5062_10;
	operand.values[11] = tokenCoding5062_11;
	operand.values[12] = tokenCoding5062_12;
	operand.values[13] = tokenCoding5062_13;
}
x64Token x64Parser::tokenBranches5061[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5062,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5064_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5064_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5064_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5064_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5064(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5064_10;
	operand.values[11] = tokenCoding5064_11;
	operand.values[12] = tokenCoding5064_12;
	operand.values[13] = tokenCoding5064_13;
}
x64Token x64Parser::tokenBranches5063[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5064,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5053(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 427;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5054(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 428;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5055_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5055_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5055_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5055_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5055(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5055_10;
	operand.values[11] = tokenCoding5055_11;
	operand.values[12] = tokenCoding5055_12;
	operand.values[13] = tokenCoding5055_13;
}
Coding x64Parser::tokenCoding5056_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5056_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5056_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5056_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5056(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5056_10;
	operand.values[11] = tokenCoding5056_11;
	operand.values[12] = tokenCoding5056_12;
	operand.values[13] = tokenCoding5056_13;
}
Coding x64Parser::tokenCoding5057_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5057_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5057_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5057_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 5 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5057(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5057_10;
	operand.values[11] = tokenCoding5057_11;
	operand.values[12] = tokenCoding5057_12;
	operand.values[13] = tokenCoding5057_13;
}
Coding x64Parser::tokenCoding5058_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5058_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5058_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5058_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5058(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5058_10;
	operand.values[11] = tokenCoding5058_11;
	operand.values[12] = tokenCoding5058_12;
	operand.values[13] = tokenCoding5058_13;
}
x64Token x64Parser::tokenBranches5026[] = {
	{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches5027 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5047 },
	{x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches5049 },
	{x64Token::NUMBER, 13, 1, 0, NULL,&x64Parser::TokenFunc5053,  },
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc5054,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc5055,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5056,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc5057,  },
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5058,  },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5059 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5061 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5063 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5098_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5098_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5098_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5098_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5098(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5098_10;
	operand.values[11] = tokenCoding5098_11;
	operand.values[12] = tokenCoding5098_12;
	operand.values[13] = tokenCoding5098_13;
}
x64Token x64Parser::tokenBranches5097[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc5098,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5105(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 429;
}
x64Token x64Parser::tokenBranches5104[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5105,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5117(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 431;
}
x64Token x64Parser::tokenBranches5116[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5117,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5103[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5104 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5116 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5102[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5103 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5111(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 430;
}
x64Token x64Parser::tokenBranches5110[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5111,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5123(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 432;
}
x64Token x64Parser::tokenBranches5122[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5123,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5133(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 434;
}
x64Token x64Parser::tokenBranches5132[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5133,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5109[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5110 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5122 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5132 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5108[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5109 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5127(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 433;
}
x64Token x64Parser::tokenBranches5126[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5127,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5108(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5101[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5102 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5108, x64Parser::tokenBranches5108 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5126 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5100[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5101 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5139(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 435;
}
x64Token x64Parser::tokenBranches5138[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5139,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5151(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 437;
}
x64Token x64Parser::tokenBranches5150[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5151,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5137[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5138 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5150 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5136[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5137 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5145(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 436;
}
x64Token x64Parser::tokenBranches5144[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5145,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5157(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 438;
}
x64Token x64Parser::tokenBranches5156[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5157,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5167(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 440;
}
x64Token x64Parser::tokenBranches5166[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5167,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5143[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5144 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5156 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5166 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5142[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5143 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5161(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 439;
}
x64Token x64Parser::tokenBranches5160[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5161,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5142(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5135[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5136 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5142, x64Parser::tokenBranches5142 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5160 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5134[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5135 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5173(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 441;
}
x64Token x64Parser::tokenBranches5172[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5173,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5185(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 443;
}
x64Token x64Parser::tokenBranches5184[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5185,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5171[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5172 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5184 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5170[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5171 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5179(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 442;
}
x64Token x64Parser::tokenBranches5178[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5179,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5191(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 444;
}
x64Token x64Parser::tokenBranches5190[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5191,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5201(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 446;
}
x64Token x64Parser::tokenBranches5200[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5201,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5177[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5178 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5190 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5200 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5176[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5177 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5195(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 445;
}
x64Token x64Parser::tokenBranches5194[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5195,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5176(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5169[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5170 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5176, x64Parser::tokenBranches5176 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5194 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5168[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5169 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5207(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 447;
}
x64Token x64Parser::tokenBranches5206[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5207,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5205[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5206 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5204[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5205 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5213(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 448;
}
x64Token x64Parser::tokenBranches5212[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5213,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5223(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 450;
}
x64Token x64Parser::tokenBranches5222[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5223,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5211[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5212 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5222 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5210[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5211 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5217(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 449;
}
x64Token x64Parser::tokenBranches5216[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5217,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5210(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5203[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5204 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5210, x64Parser::tokenBranches5210 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5216 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5202[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5203 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5099[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5100 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5134 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5168 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5202 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5228(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 451;
}
x64Token x64Parser::tokenBranches5227[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc5228,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5230(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 452;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5229[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5230,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5232(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 453;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5231[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5232,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5234(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 454;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5233[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5234,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5236(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 454;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5235[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5238(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 453;
	operand.values[8] = new Coding[2];
	CleanupValues.push_back(operand.values[8]);
	operand.values[8]->type = Coding::number;
	operand.values[8]->val = operands.size();
	operand.values[8]->bits = 0;
	operand.values[8]->field = 0;
	operand.values[8]->unary = 0;
	operand.values[8]->binary = 0;
	operand.values[8][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5237[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5238,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5242_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5242_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5242_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5242_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5242(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5242_10;
	operand.values[11] = tokenCoding5242_11;
	operand.values[12] = tokenCoding5242_12;
	operand.values[13] = tokenCoding5242_13;
}
x64Token x64Parser::tokenBranches5241[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5242,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5246_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5246_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5246_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 24, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5246_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 34, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5246(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5246_10;
	operand.values[11] = tokenCoding5246_11;
	operand.values[12] = tokenCoding5246_12;
	operand.values[13] = tokenCoding5246_13;
}
x64Token x64Parser::tokenBranches5245[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5246,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5244[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5245 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5249_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5249_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5249_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 25, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5249_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 35, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5249(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5249_10;
	operand.values[11] = tokenCoding5249_11;
	operand.values[12] = tokenCoding5249_12;
	operand.values[13] = tokenCoding5249_13;
}
x64Token x64Parser::tokenBranches5248[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5249,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5247[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5248 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5252_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5252_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5252_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5252_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 38, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5252(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5252_10;
	operand.values[11] = tokenCoding5252_11;
	operand.values[12] = tokenCoding5252_12;
	operand.values[13] = tokenCoding5252_13;
}
x64Token x64Parser::tokenBranches5251[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5252,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5250[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5251 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5258(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 455;
}
x64Token x64Parser::tokenBranches5257[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5258,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5266(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 456;
}
x64Token x64Parser::tokenBranches5265[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5266,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5280(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 458;
}
x64Token x64Parser::tokenBranches5279[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5280,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5265(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5279(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5264[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5265, x64Parser::tokenBranches5265 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5279, x64Parser::tokenBranches5279 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5263[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5264 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5272(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 457;
}
x64Token x64Parser::tokenBranches5271[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5272,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5257(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5263(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5271(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5256[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5257, x64Parser::tokenBranches5257 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5263, x64Parser::tokenBranches5263 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5271, x64Parser::tokenBranches5271 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5255[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5256 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5254[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5255 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5253[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5254 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5286(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 459;
}
x64Token x64Parser::tokenBranches5285[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5286,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5294(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 460;
}
x64Token x64Parser::tokenBranches5293[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5294,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5308(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 462;
}
x64Token x64Parser::tokenBranches5307[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5308,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5293(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5307(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5292[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5293, x64Parser::tokenBranches5293 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5307, x64Parser::tokenBranches5307 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5291[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5292 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5300(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 461;
}
x64Token x64Parser::tokenBranches5299[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5300,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5285(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5291(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5299(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5284[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5285, x64Parser::tokenBranches5285 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5291, x64Parser::tokenBranches5291 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5299, x64Parser::tokenBranches5299 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5283[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5284 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5282[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5283 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5281[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5282 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5314(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 463;
}
x64Token x64Parser::tokenBranches5313[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5314,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5322(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 464;
}
x64Token x64Parser::tokenBranches5321[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5322,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5336(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 466;
}
x64Token x64Parser::tokenBranches5335[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5336,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5321(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5335(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5320[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5321, x64Parser::tokenBranches5321 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5335, x64Parser::tokenBranches5335 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5319[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5320 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5328(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 465;
}
x64Token x64Parser::tokenBranches5327[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5328,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5313(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5319(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5327(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5312[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5313, x64Parser::tokenBranches5313 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5319, x64Parser::tokenBranches5319 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5327, x64Parser::tokenBranches5327 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5311[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5312 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5310[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5311 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5309[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5310 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5340(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 467;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5360_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5360_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5360_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5360_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 138, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5360(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5360_10;
	operand.values[11] = tokenCoding5360_11;
	operand.values[12] = tokenCoding5360_12;
	operand.values[13] = tokenCoding5360_13;
}
x64Token x64Parser::tokenBranches5339[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5340,  },
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc5360,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5338[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5339 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5337[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5338 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5344(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 468;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5364_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5364_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5364_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5364_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5364_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 138, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5364(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5364_10;
	operand.values[11] = tokenCoding5364_11;
	operand.values[17] = tokenCoding5364_17;
	operand.values[12] = tokenCoding5364_12;
	operand.values[13] = tokenCoding5364_13;
}
x64Token x64Parser::tokenBranches5343[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5344,  },
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc5364,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5342[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5343 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5341[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5342 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5348(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 469;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5368_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5368_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5368_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5368_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5368(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5368_10;
	operand.values[11] = tokenCoding5368_11;
	operand.values[12] = tokenCoding5368_12;
	operand.values[13] = tokenCoding5368_13;
}
x64Token x64Parser::tokenBranches5347[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5348,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5368,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5346[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5347 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5345[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5346 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5352(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 470;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5372_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5372_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5372_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5372_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5372(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5372_10;
	operand.values[11] = tokenCoding5372_11;
	operand.values[12] = tokenCoding5372_12;
	operand.values[13] = tokenCoding5372_13;
}
x64Token x64Parser::tokenBranches5351[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5352,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5372,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5350[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5351 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5349[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5350 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5356(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 471;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5376_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5376_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5376_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5376_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5376(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5376_10;
	operand.values[11] = tokenCoding5376_11;
	operand.values[12] = tokenCoding5376_12;
	operand.values[13] = tokenCoding5376_13;
}
x64Token x64Parser::tokenBranches5355[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5356,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5376,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5354[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5355 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5353[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5354 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5381_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5381_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5381_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5381_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5381(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5381_10;
	operand.values[11] = tokenCoding5381_11;
	operand.values[12] = tokenCoding5381_12;
	operand.values[13] = tokenCoding5381_13;
}
x64Token x64Parser::tokenBranches5380[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5381,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5379[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5380 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5378[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5379 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5377[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5378 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5386_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5386_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5386_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5386_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 3 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5386(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 390;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5386_10;
	operand.values[11] = tokenCoding5386_11;
	operand.values[12] = tokenCoding5386_12;
	operand.values[13] = tokenCoding5386_13;
}
x64Token x64Parser::tokenBranches5385[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5386,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5384[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5385 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5383[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5384 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5382[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5383 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5391_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5391_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5391_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5391_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 4 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5391(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5391_10;
	operand.values[11] = tokenCoding5391_11;
	operand.values[12] = tokenCoding5391_12;
	operand.values[13] = tokenCoding5391_13;
}
x64Token x64Parser::tokenBranches5390[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5391,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5389[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5390 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5388[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5389 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5387[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5388 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5396_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5396_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5396_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5396_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 4 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5396(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5396_10;
	operand.values[11] = tokenCoding5396_11;
	operand.values[12] = tokenCoding5396_12;
	operand.values[13] = tokenCoding5396_13;
}
x64Token x64Parser::tokenBranches5395[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5396,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5394[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5395 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5393[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5394 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5392[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5393 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5547_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5547_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 4 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5547(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5547_12;
	operand.values[13] = tokenCoding5547_13;
}
x64Token x64Parser::tokenBranches5546[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5547,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5399_10[] = {
	{ CODING_NAME("creg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5399_11[] = {
	{ CODING_NAME("creg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5399_12[] = {
	{ CODING_NAME("creg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 24, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5399_13[] = {
	{ CODING_NAME("creg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("creg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 32, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5399(x64Operand &operand, int tokenPos)
{
	operand.values[24] = new Coding[2];
	CleanupValues.push_back(operand.values[24]);
	operand.values[24]->type = Coding::reg;
	operand.values[24]->val = inputTokens[tokenPos]->val->ival;
	operand.values[24]->bits = 0;
	operand.values[24]->field = 0;
	operand.values[24]->unary = 0;
	operand.values[24]->binary = 0;
	operand.values[24][1].type = Coding::eot;
	operand.values[10] = tokenCoding5399_10;
	operand.values[11] = tokenCoding5399_11;
	operand.values[12] = tokenCoding5399_12;
	operand.values[13] = tokenCoding5399_13;
}
Coding x64Parser::tokenCoding5402_10[] = {
	{ CODING_NAME("dreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5402_11[] = {
	{ CODING_NAME("dreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5402_12[] = {
	{ CODING_NAME("dreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 25, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5402_13[] = {
	{ CODING_NAME("dreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("dreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5402(x64Operand &operand, int tokenPos)
{
	operand.values[25] = new Coding[2];
	CleanupValues.push_back(operand.values[25]);
	operand.values[25]->type = Coding::reg;
	operand.values[25]->val = inputTokens[tokenPos]->val->ival;
	operand.values[25]->bits = 0;
	operand.values[25]->field = 0;
	operand.values[25]->unary = 0;
	operand.values[25]->binary = 0;
	operand.values[25][1].type = Coding::eot;
	operand.values[10] = tokenCoding5402_10;
	operand.values[11] = tokenCoding5402_11;
	operand.values[12] = tokenCoding5402_12;
	operand.values[13] = tokenCoding5402_13;
}
Coding x64Parser::tokenCoding5405_10[] = {
	{ CODING_NAME("treg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5405_11[] = {
	{ CODING_NAME("treg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5405_12[] = {
	{ CODING_NAME("treg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5405_13[] = {
	{ CODING_NAME("treg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("treg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5405(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->unary = 0;
	operand.values[26]->binary = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[10] = tokenCoding5405_10;
	operand.values[11] = tokenCoding5405_11;
	operand.values[12] = tokenCoding5405_12;
	operand.values[13] = tokenCoding5405_13;
}
Coding x64Parser::tokenCoding5532_10[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5532_11[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5532_12[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5532_13[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5532(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[10] = tokenCoding5532_10;
	operand.values[11] = tokenCoding5532_11;
	operand.values[12] = tokenCoding5532_12;
	operand.values[13] = tokenCoding5532_13;
}
x64Token x64Parser::tokenBranches5398[] = {
	{x64Token::REGISTERCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5399,  },
	{x64Token::REGISTERCLASS, 22, 1, 0, NULL,&x64Parser::TokenFunc5402,  },
	{x64Token::REGISTERCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc5405,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc5532,  },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5546 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5397[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5398 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5411(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 472;
}
x64Token x64Parser::tokenBranches5410[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5411,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5409[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5410 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5408[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5409 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5419(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 473;
}
x64Token x64Parser::tokenBranches5418[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5419,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5417[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5418 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5416[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5417 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5433(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 475;
}
x64Token x64Parser::tokenBranches5432[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5433,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5431[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5432 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5430[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5431 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5416(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5430(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5415[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5416, x64Parser::tokenBranches5416 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5430, x64Parser::tokenBranches5430 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5414[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5415 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5425(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 474;
}
x64Token x64Parser::tokenBranches5424[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5425,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5423[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5424 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5422[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5423 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5408(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5414(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5422(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5407[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5408, x64Parser::tokenBranches5408 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5414, x64Parser::tokenBranches5414 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5422, x64Parser::tokenBranches5422 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5493_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5493_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5493_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5493_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 136, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5493(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5493_10;
	operand.values[11] = tokenCoding5493_11;
	operand.values[12] = tokenCoding5493_12;
	operand.values[13] = tokenCoding5493_13;
}
Coding x64Parser::tokenCoding5497_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5497_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5497_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5497_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5497_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 136, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5497(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5497_10;
	operand.values[11] = tokenCoding5497_11;
	operand.values[17] = tokenCoding5497_17;
	operand.values[12] = tokenCoding5497_12;
	operand.values[13] = tokenCoding5497_13;
}
x64Token x64Parser::tokenBranches5492[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5493,  },
	{x64Token::REGISTERCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc5497,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5491[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5492 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5406[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5407 },
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5491 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5439(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 476;
}
x64Token x64Parser::tokenBranches5438[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5439,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5437[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5438 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5436[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5437 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5447(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 477;
}
x64Token x64Parser::tokenBranches5446[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5447,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5445[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5446 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5444[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5445 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5461(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 479;
}
x64Token x64Parser::tokenBranches5460[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5461,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5459[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5460 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5458[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5459 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5444(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5458(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5443[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5444, x64Parser::tokenBranches5444 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5458, x64Parser::tokenBranches5458 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5442[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5443 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5453(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 478;
}
x64Token x64Parser::tokenBranches5452[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5453,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5451[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5452 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5450[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5451 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5436(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5442(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5450(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5435[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5436, x64Parser::tokenBranches5436 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5442, x64Parser::tokenBranches5442 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5450, x64Parser::tokenBranches5450 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5501_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5501_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5501_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5501_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5501(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5501_10;
	operand.values[11] = tokenCoding5501_11;
	operand.values[12] = tokenCoding5501_12;
	operand.values[13] = tokenCoding5501_13;
}
Coding x64Parser::tokenCoding5526_10[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5526_11[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5526_12[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5526_13[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5526(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[10] = tokenCoding5526_10;
	operand.values[11] = tokenCoding5526_11;
	operand.values[12] = tokenCoding5526_12;
	operand.values[13] = tokenCoding5526_13;
}
x64Token x64Parser::tokenBranches5500[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5501,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc5526,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5499[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5500 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5434[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5435 },
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5499 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5467(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 480;
}
x64Token x64Parser::tokenBranches5466[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5467,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5465[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5466 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5464[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5465 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5475(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 481;
}
x64Token x64Parser::tokenBranches5474[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5475,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5473[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5474 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5472[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5473 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5489(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 483;
}
x64Token x64Parser::tokenBranches5488[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5489,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5487[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5488 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5486[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5487 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5472(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5486(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5471[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5472, x64Parser::tokenBranches5472 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5486, x64Parser::tokenBranches5486 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5470[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5471 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5481(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 482;
}
x64Token x64Parser::tokenBranches5480[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5481,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5479[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5480 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5478[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5479 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5464(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5470(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5478(x64Operand &operand, int tokenPos)
{
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5463[] = {
	{x64Token::NUMBER, 6, 0, 0, NULL,&x64Parser::TokenFunc5464, x64Parser::tokenBranches5464 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5470, x64Parser::tokenBranches5470 },
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5478, x64Parser::tokenBranches5478 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5505_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5505_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5505_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5505_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5505(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5505_10;
	operand.values[11] = tokenCoding5505_11;
	operand.values[12] = tokenCoding5505_12;
	operand.values[13] = tokenCoding5505_13;
}
x64Token x64Parser::tokenBranches5504[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5505,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5503[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5504 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5462[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5463 },
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5503 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5509_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5509_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5509_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5509_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 5 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5509(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5509_10;
	operand.values[11] = tokenCoding5509_11;
	operand.values[12] = tokenCoding5509_12;
	operand.values[13] = tokenCoding5509_13;
}
x64Token x64Parser::tokenBranches5508[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc5509,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5507[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5508 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5506[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5507 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5513_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5513_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5513_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5513_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5513(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5513_10;
	operand.values[11] = tokenCoding5513_11;
	operand.values[12] = tokenCoding5513_12;
	operand.values[13] = tokenCoding5513_13;
}
x64Token x64Parser::tokenBranches5512[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5513,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5516_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5516_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5516_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5516_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5516(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5516_10;
	operand.values[11] = tokenCoding5516_11;
	operand.values[12] = tokenCoding5516_12;
	operand.values[13] = tokenCoding5516_13;
}
Coding x64Parser::tokenCoding5519_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5519_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5519_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5519_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5519(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5519_10;
	operand.values[11] = tokenCoding5519_11;
	operand.values[12] = tokenCoding5519_12;
	operand.values[13] = tokenCoding5519_13;
}
Coding x64Parser::tokenCoding5522_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5522_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5522_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5522_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5522(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5522_10;
	operand.values[11] = tokenCoding5522_11;
	operand.values[12] = tokenCoding5522_12;
	operand.values[13] = tokenCoding5522_13;
}
x64Token x64Parser::tokenBranches5511[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5512 },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc5516,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5519,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc5522,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5510[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5511 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5543_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5543_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 3 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5543(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 390;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5543_12;
	operand.values[13] = tokenCoding5543_13;
}
x64Token x64Parser::tokenBranches5542[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5543,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5529_10[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5529_11[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5529_12[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5529_13[] = {
	{ CODING_NAME("segm")  Coding::stateFunc, 3 },
	{ CODING_NAME("segm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5529(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[10] = tokenCoding5529_10;
	operand.values[11] = tokenCoding5529_11;
	operand.values[12] = tokenCoding5529_12;
	operand.values[13] = tokenCoding5529_13;
}
x64Token x64Parser::tokenBranches5528[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc5529,  },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5542 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5527[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5528 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5551_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5551_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 5 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5551(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5551_12;
	operand.values[13] = tokenCoding5551_13;
}
x64Token x64Parser::tokenBranches5550[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5551,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5535_10[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5535_11[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5535_12[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 27, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5535_13[] = {
	{ CODING_NAME("segm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5535(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
	operand.values[10] = tokenCoding5535_10;
	operand.values[11] = tokenCoding5535_11;
	operand.values[12] = tokenCoding5535_12;
	operand.values[13] = tokenCoding5535_13;
}
x64Token x64Parser::tokenBranches5534[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc5535,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5550 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5533[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5534 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5539_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5539_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5539(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[12] = tokenCoding5539_12;
	operand.values[13] = tokenCoding5539_13;
}
x64Token x64Parser::tokenBranches5538[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5539,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5537[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5538 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5536[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5537 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5244(x64Operand &operand, int tokenPos)
{
	operand.values[24] = new Coding[2];
	CleanupValues.push_back(operand.values[24]);
	operand.values[24]->type = Coding::reg;
	operand.values[24]->val = inputTokens[tokenPos]->val->ival;
	operand.values[24]->bits = 0;
	operand.values[24]->field = 0;
	operand.values[24]->unary = 0;
	operand.values[24]->binary = 0;
	operand.values[24][1].type = Coding::eot;
}
void x64Parser::TokenFunc5247(x64Operand &operand, int tokenPos)
{
	operand.values[25] = new Coding[2];
	CleanupValues.push_back(operand.values[25]);
	operand.values[25]->type = Coding::reg;
	operand.values[25]->val = inputTokens[tokenPos]->val->ival;
	operand.values[25]->bits = 0;
	operand.values[25]->field = 0;
	operand.values[25]->unary = 0;
	operand.values[25]->binary = 0;
	operand.values[25][1].type = Coding::eot;
}
void x64Parser::TokenFunc5250(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->unary = 0;
	operand.values[26]->binary = 0;
	operand.values[26][1].type = Coding::eot;
}
void x64Parser::TokenFunc5337(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5341(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5345(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5349(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5353(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5510(x64Operand &operand, int tokenPos)
{
	operand.values[27] = new Coding[2];
	CleanupValues.push_back(operand.values[27]);
	operand.values[27]->type = Coding::reg;
	operand.values[27]->val = inputTokens[tokenPos]->val->ival;
	operand.values[27]->bits = 0;
	operand.values[27]->field = 0;
	operand.values[27]->unary = 0;
	operand.values[27]->binary = 0;
	operand.values[27][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5243[] = {
	{x64Token::REGISTERCLASS, 21, 0, 0, NULL,&x64Parser::TokenFunc5244, x64Parser::tokenBranches5244 },
	{x64Token::REGISTERCLASS, 22, 0, 0, NULL,&x64Parser::TokenFunc5247, x64Parser::tokenBranches5247 },
	{x64Token::REGISTERCLASS, 23, 0, 0, NULL,&x64Parser::TokenFunc5250, x64Parser::tokenBranches5250 },
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches5253 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5281 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5309 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc5337, x64Parser::tokenBranches5337 },
	{x64Token::REGISTERCLASS, 14, 0, 0, NULL,&x64Parser::TokenFunc5341, x64Parser::tokenBranches5341 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc5345, x64Parser::tokenBranches5345 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc5349, x64Parser::tokenBranches5349 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc5353, x64Parser::tokenBranches5353 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5377 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5382 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5387 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5392 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches5397 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5406 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5434 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5462 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5506 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5510, x64Parser::tokenBranches5510 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches5527 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches5533 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches5536 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5565(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 484;
}
x64Token x64Parser::tokenBranches5564[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5565,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5563[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5564 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5562[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5563 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5578(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 485;
}
x64Token x64Parser::tokenBranches5577[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5578,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5576[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5577 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5575[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5576 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5575(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5561[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5562 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5575, x64Parser::tokenBranches5575 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5560[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5561 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5559[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5560 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5558[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5559 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5557[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5558 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5591(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 486;
}
x64Token x64Parser::tokenBranches5590[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5591,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5589[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5590 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5588[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5589 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5604(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 487;
}
x64Token x64Parser::tokenBranches5603[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5604,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5602[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5603 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5601[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5602 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5601(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5587[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5588 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5601, x64Parser::tokenBranches5601 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5586[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5587 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5585[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5586 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5584[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5585 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5583[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5584 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5556[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5557 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5583 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5555[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5556 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5554[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5555 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5613(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 488;
}
x64Token x64Parser::tokenBranches5612[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5613,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5624(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 489;
}
x64Token x64Parser::tokenBranches5623[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5624,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5622[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5623 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5621[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5622 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5621(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5611[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5612 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5621, x64Parser::tokenBranches5621 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5610[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5611 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5609[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5610 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5608[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5609 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5607[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5608 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5606[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5607 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5553[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches5554 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5606 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5637(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 490;
}
x64Token x64Parser::tokenBranches5636[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5637,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5635[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5636 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5634[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5635 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5650(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 491;
}
x64Token x64Parser::tokenBranches5649[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5650,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5648[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5649 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5647[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5648 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5647(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5633[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5634 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5647, x64Parser::tokenBranches5647 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5632[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5633 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5631[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5632 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5630[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5631 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5629[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5630 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5663(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 492;
}
x64Token x64Parser::tokenBranches5662[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5663,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5661[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5662 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5660[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5661 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5676(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 493;
}
x64Token x64Parser::tokenBranches5675[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5676,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5674[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5675 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5673[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5674 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5673(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5659[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5660 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5673, x64Parser::tokenBranches5673 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5658[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5659 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5657[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5658 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5656[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5657 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5655[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5656 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5628[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5629 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5655 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5627[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5628 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5626[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5627 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5685(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 494;
}
x64Token x64Parser::tokenBranches5684[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5685,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5696(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 495;
}
x64Token x64Parser::tokenBranches5695[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5696,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5694[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5695 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5693[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5694 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5693(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5683[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5684 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5693, x64Parser::tokenBranches5693 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5682[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5683 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5681[] = {
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5682 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5680[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5681 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5679[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5680 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5678[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5679 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5625[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches5626 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5678 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5709(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 496;
}
x64Token x64Parser::tokenBranches5708[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5709,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5707[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5708 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5706[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5707 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5722(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 497;
}
x64Token x64Parser::tokenBranches5721[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5722,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5720[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5721 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5719[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5720 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5719(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5705[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5706 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5719, x64Parser::tokenBranches5719 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5704[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5705 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5703[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5704 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5702[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5703 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5701[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5702 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5735(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 498;
}
x64Token x64Parser::tokenBranches5734[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5735,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5733[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5734 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5732[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5733 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5748(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 499;
}
x64Token x64Parser::tokenBranches5747[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5748,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5746[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5747 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5745[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5746 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5745(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5731[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5732 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5745, x64Parser::tokenBranches5745 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5730[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5731 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5729[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5730 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5728[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5729 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5727[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5728 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5700[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5701 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5727 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5699[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5700 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5698[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5699 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5757(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 500;
}
x64Token x64Parser::tokenBranches5756[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5757,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5768(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 501;
}
x64Token x64Parser::tokenBranches5767[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5768,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5766[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5767 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5765[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5766 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5765(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5755[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5756 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5765, x64Parser::tokenBranches5765 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5754[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5755 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5753[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5754 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5752[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5753 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5751[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5752 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5750[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5751 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5697[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches5698 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5750 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5781(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 502;
}
x64Token x64Parser::tokenBranches5780[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5781,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5779[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5780 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5778[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5779 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5794(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 503;
}
x64Token x64Parser::tokenBranches5793[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5794,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5792[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5793 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5791[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5792 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5791(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5777[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5778 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5791, x64Parser::tokenBranches5791 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5776[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5777 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5775[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5776 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5774[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5775 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5773[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5774 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5772[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5773 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5771[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5772 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5770[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5771 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5803(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 502;
}
x64Token x64Parser::tokenBranches5802[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5803,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5814(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 503;
}
x64Token x64Parser::tokenBranches5813[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5814,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5812[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5813 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5811[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5812 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5811(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5801[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5802 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5811, x64Parser::tokenBranches5811 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5800[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5801 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5799[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5800 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5798[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5799 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5797[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5798 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5796[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5797 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5769[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches5770 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5796 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5552[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5553 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5625 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5697 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5769 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5819_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5819_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5819_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5819_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5819(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5819_10;
	operand.values[11] = tokenCoding5819_11;
	operand.values[12] = tokenCoding5819_12;
	operand.values[13] = tokenCoding5819_13;
}
x64Token x64Parser::tokenBranches5818[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5819,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5817[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5818 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5816[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5817 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5823_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5823_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5823_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5823_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5823(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5823_10;
	operand.values[11] = tokenCoding5823_11;
	operand.values[12] = tokenCoding5823_12;
	operand.values[13] = tokenCoding5823_13;
}
x64Token x64Parser::tokenBranches5822[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5823,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5821[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5822 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5820[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5821 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5827_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5827_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5827_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5827_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5827(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5827_10;
	operand.values[11] = tokenCoding5827_11;
	operand.values[12] = tokenCoding5827_12;
	operand.values[13] = tokenCoding5827_13;
}
x64Token x64Parser::tokenBranches5826[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5827,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5825[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5826 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5824[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5825 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5831_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5831_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5831_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5831_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5831(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5831_10;
	operand.values[11] = tokenCoding5831_11;
	operand.values[12] = tokenCoding5831_12;
	operand.values[13] = tokenCoding5831_13;
}
x64Token x64Parser::tokenBranches5830[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5831,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5829[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5830 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5828[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5829 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5835_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5835_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5835_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5835_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5835(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5835_10;
	operand.values[11] = tokenCoding5835_11;
	operand.values[12] = tokenCoding5835_12;
	operand.values[13] = tokenCoding5835_13;
}
x64Token x64Parser::tokenBranches5834[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5835,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5833[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5834 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5832[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5833 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5839_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5839_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5839_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5839_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 5 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5839(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5839_10;
	operand.values[11] = tokenCoding5839_11;
	operand.values[12] = tokenCoding5839_12;
	operand.values[13] = tokenCoding5839_13;
}
x64Token x64Parser::tokenBranches5838[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc5839,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5837[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5838 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5836[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5837 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5816(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5820(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5824(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5815[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc5816, x64Parser::tokenBranches5816 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc5820, x64Parser::tokenBranches5820 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc5824, x64Parser::tokenBranches5824 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5828 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5832 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5836 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5846_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5846_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5846_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5846_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5846_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5846(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5846_10;
	operand.values[11] = tokenCoding5846_11;
	operand.values[17] = tokenCoding5846_17;
	operand.values[12] = tokenCoding5846_12;
	operand.values[13] = tokenCoding5846_13;
}
x64Token x64Parser::tokenBranches5845[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc5846,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5844[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5845 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5849_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5849_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5849_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5849_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5849_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 17, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5849(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding5849_10;
	operand.values[11] = tokenCoding5849_11;
	operand.values[17] = tokenCoding5849_17;
	operand.values[12] = tokenCoding5849_12;
	operand.values[13] = tokenCoding5849_13;
}
x64Token x64Parser::tokenBranches5848[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5849,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5847[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5848 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5843(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 504;
}
void x64Parser::TokenFunc5844(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5842[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc5843,  },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5844, x64Parser::tokenBranches5844 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5847 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5851(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 505;
}
x64Token x64Parser::tokenBranches5850[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc5851,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5861_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5861_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5861_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5861_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5861(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5861_10;
	operand.values[11] = tokenCoding5861_11;
	operand.values[12] = tokenCoding5861_12;
	operand.values[13] = tokenCoding5861_13;
}
x64Token x64Parser::tokenBranches5860[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5861,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5857_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5857_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5857_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5857_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5857(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5857_10;
	operand.values[11] = tokenCoding5857_11;
	operand.values[12] = tokenCoding5857_12;
	operand.values[13] = tokenCoding5857_13;
}
x64Token x64Parser::tokenBranches5856[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5857,  },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5860 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5855[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5856 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5868_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5868_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5868_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5868_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5868(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5868_10;
	operand.values[11] = tokenCoding5868_11;
	operand.values[12] = tokenCoding5868_12;
	operand.values[13] = tokenCoding5868_13;
}
x64Token x64Parser::tokenBranches5867[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5868,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5864_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5864_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5864_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding5864_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc5864(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5864_10;
	operand.values[11] = tokenCoding5864_11;
	operand.values[12] = tokenCoding5864_12;
	operand.values[13] = tokenCoding5864_13;
}
x64Token x64Parser::tokenBranches5863[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5864,  },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5867 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5862[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5863 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5855(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5862(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5854[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc5855, x64Parser::tokenBranches5855 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc5862, x64Parser::tokenBranches5862 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5878(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 506;
}
x64Token x64Parser::tokenBranches5877[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5878,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5876[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5877 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5876(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5875[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc5876, x64Parser::tokenBranches5876 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5882(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 507;
}
x64Token x64Parser::tokenBranches5881[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5882,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5880[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5881 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5880(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5879[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc5880, x64Parser::tokenBranches5880 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5886(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 508;
}
x64Token x64Parser::tokenBranches5885[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5886,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5884[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5885 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5884(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5883[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc5884, x64Parser::tokenBranches5884 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5890(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 509;
}
x64Token x64Parser::tokenBranches5889[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5890,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5888[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5889 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5888(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::number;
	operand.values[23]->val = operands.size();
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5887[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc5888, x64Parser::tokenBranches5888 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5893(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 510;
}
void x64Parser::TokenFunc5896(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 511;
}
void x64Parser::TokenFunc5899(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 512;
}
void x64Parser::TokenFunc5902(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 513;
}
x64Token x64Parser::tokenBranches5892[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5893,  },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5896,  },
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5899,  },
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5902,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5891[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5892 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5874[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5875 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5879 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5883 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5887 },
	{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches5891 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5911(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 514;
}
x64Token x64Parser::tokenBranches5910[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5911,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5927(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 516;
}
x64Token x64Parser::tokenBranches5926[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5927,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5909[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5910 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5926 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5908[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5909 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5919(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 515;
}
x64Token x64Parser::tokenBranches5918[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5919,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5935(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 517;
}
x64Token x64Parser::tokenBranches5934[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5935,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5949(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 519;
}
x64Token x64Parser::tokenBranches5948[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5949,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5917[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5918 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5934 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5948 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5916[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5917 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5941(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 518;
}
x64Token x64Parser::tokenBranches5940[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5941,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5916(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5907[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5908 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5916, x64Parser::tokenBranches5916 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5940 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5906[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5907 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5957(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 520;
}
x64Token x64Parser::tokenBranches5956[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5957,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5973(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 522;
}
x64Token x64Parser::tokenBranches5972[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5973,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5955[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5956 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5972 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5954[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5955 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5965(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 521;
}
x64Token x64Parser::tokenBranches5964[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5965,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5981(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 523;
}
x64Token x64Parser::tokenBranches5980[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5981,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5995(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 525;
}
x64Token x64Parser::tokenBranches5994[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5995,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5963[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5964 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5980 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5994 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5962[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5963 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5987(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 524;
}
x64Token x64Parser::tokenBranches5986[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5987,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5962(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5953[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5954 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5962, x64Parser::tokenBranches5962 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5986 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5952[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5953 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6003(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 526;
}
x64Token x64Parser::tokenBranches6002[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6003,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6019(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 528;
}
x64Token x64Parser::tokenBranches6018[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6019,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6001[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6002 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6018 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6000[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6001 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6011(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 527;
}
x64Token x64Parser::tokenBranches6010[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6011,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6027(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 529;
}
x64Token x64Parser::tokenBranches6026[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6027,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6041(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 531;
}
x64Token x64Parser::tokenBranches6040[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6041,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6009[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6010 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6026 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6040 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6008[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6009 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6033(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 530;
}
x64Token x64Parser::tokenBranches6032[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6033,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6008(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5999[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches6000 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6008, x64Parser::tokenBranches6008 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6032 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5998[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5999 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5905[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5906 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5952 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5998 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5904[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5905 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5903[] = {
	{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches5904 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6050_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6050_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6050_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6050_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6050(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6050_10;
	operand.values[11] = tokenCoding6050_11;
	operand.values[12] = tokenCoding6050_12;
	operand.values[13] = tokenCoding6050_13;
}
x64Token x64Parser::tokenBranches6049[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6050,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6052_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6052_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6052_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6052_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6052(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6052_10;
	operand.values[11] = tokenCoding6052_11;
	operand.values[12] = tokenCoding6052_12;
	operand.values[13] = tokenCoding6052_13;
}
x64Token x64Parser::tokenBranches6051[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6052,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6054_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6054_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6054_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6054_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6054(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6054_10;
	operand.values[11] = tokenCoding6054_11;
	operand.values[12] = tokenCoding6054_12;
	operand.values[13] = tokenCoding6054_13;
}
x64Token x64Parser::tokenBranches6053[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6054,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6046(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 532;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6047(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 533;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6048(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 534;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6055(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 535;
}
void x64Parser::TokenFunc6056(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 536;
}
void x64Parser::TokenFunc6057(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 537;
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6045[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6046,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6047,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6048,  },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6049 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6051 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6053 },
	{x64Token::REGISTER, 97, 1, 0, NULL,&x64Parser::TokenFunc6055,  },
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc6056,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc6057,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6067_28[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6067_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6067_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6067_29[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6067_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6067_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6067(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6067_28;
	operand.values[10] = tokenCoding6067_10;
	operand.values[11] = tokenCoding6067_11;
	operand.values[29] = tokenCoding6067_29;
	operand.values[12] = tokenCoding6067_12;
	operand.values[13] = tokenCoding6067_13;
}
x64Token x64Parser::tokenBranches6066[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6067,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6069_28[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6069_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6069_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6069_29[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6069_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6069_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6069(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6069_28;
	operand.values[10] = tokenCoding6069_10;
	operand.values[11] = tokenCoding6069_11;
	operand.values[29] = tokenCoding6069_29;
	operand.values[12] = tokenCoding6069_12;
	operand.values[13] = tokenCoding6069_13;
}
x64Token x64Parser::tokenBranches6068[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6069,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6071_28[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6071_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6071_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6071_29[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6071_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6071_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6071(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6071_28;
	operand.values[10] = tokenCoding6071_10;
	operand.values[11] = tokenCoding6071_11;
	operand.values[29] = tokenCoding6071_29;
	operand.values[12] = tokenCoding6071_12;
	operand.values[13] = tokenCoding6071_13;
}
x64Token x64Parser::tokenBranches6070[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6071,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6073_28[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6073_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6073_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6073_29[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6073_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6073_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6073(x64Operand &operand, int tokenPos)
{
	operand.values[28] = tokenCoding6073_28;
	operand.values[10] = tokenCoding6073_10;
	operand.values[11] = tokenCoding6073_11;
	operand.values[29] = tokenCoding6073_29;
	operand.values[12] = tokenCoding6073_12;
	operand.values[13] = tokenCoding6073_13;
}
x64Token x64Parser::tokenBranches6072[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6073,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6079(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 541;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6078[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc6079,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6084(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 542;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6090_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6090_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6090_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6090_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6090(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 545;
	operand.values[10] = tokenCoding6090_10;
	operand.values[11] = tokenCoding6090_11;
	operand.values[12] = tokenCoding6090_12;
	operand.values[13] = tokenCoding6090_13;
}
x64Token x64Parser::tokenBranches6083[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6084,  },
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6090,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6086(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 543;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6092_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6092_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6092_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6092_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6092(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 546;
	operand.values[10] = tokenCoding6092_10;
	operand.values[11] = tokenCoding6092_11;
	operand.values[12] = tokenCoding6092_12;
	operand.values[13] = tokenCoding6092_13;
}
x64Token x64Parser::tokenBranches6085[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6086,  },
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6092,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6088(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 544;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6094_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6094_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6094_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6094_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6094(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 546;
	operand.values[10] = tokenCoding6094_10;
	operand.values[11] = tokenCoding6094_11;
	operand.values[12] = tokenCoding6094_12;
	operand.values[13] = tokenCoding6094_13;
}
x64Token x64Parser::tokenBranches6087[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6088,  },
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6094,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6075(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 538;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6076(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 539;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6077(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 540;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6080(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 542;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6081(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 543;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6082(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 544;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6095(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 547;
}
void x64Parser::TokenFunc6096(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 548;
}
void x64Parser::TokenFunc6097(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 549;
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6074[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6075,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6076,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6077,  },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6078 },
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6080,  },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc6081,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc6082,  },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6083 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6085 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6087 },
	{x64Token::REGISTER, 97, 1, 0, NULL,&x64Parser::TokenFunc6095,  },
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc6096,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc6097,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6111(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 550;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6112(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 551;
}
x64Token x64Parser::tokenBranches6110[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6111,  },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6112,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6114(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 552;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6115(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 553;
}
x64Token x64Parser::tokenBranches6113[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6114,  },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6115,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6129(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 554;
}
x64Token x64Parser::tokenBranches6128[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6129,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6141(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 556;
}
x64Token x64Parser::tokenBranches6140[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6141,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6127[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6128 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6140 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6126[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6127 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6125[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6126 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6135(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 555;
}
x64Token x64Parser::tokenBranches6134[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6135,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6147(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 557;
}
x64Token x64Parser::tokenBranches6146[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6147,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6157(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 559;
}
x64Token x64Parser::tokenBranches6156[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6157,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6133[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6134 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6146 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6156 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6132[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6133 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6151(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 558;
}
x64Token x64Parser::tokenBranches6150[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6151,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6132(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6131[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6132, x64Parser::tokenBranches6132 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6150 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6124[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6125 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6131 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6163(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 560;
}
x64Token x64Parser::tokenBranches6162[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6163,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6175(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 562;
}
x64Token x64Parser::tokenBranches6174[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6175,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6161[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6162 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6174 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6160[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6161 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6159[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6160 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6169(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 561;
}
x64Token x64Parser::tokenBranches6168[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6169,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6181(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 563;
}
x64Token x64Parser::tokenBranches6180[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6181,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6191(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 565;
}
x64Token x64Parser::tokenBranches6190[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6191,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6167[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6168 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6180 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6190 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6166[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6167 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6185(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 564;
}
x64Token x64Parser::tokenBranches6184[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6185,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6166(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6165[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6166, x64Parser::tokenBranches6166 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6184 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6158[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6159 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6165 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6197(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 566;
}
x64Token x64Parser::tokenBranches6196[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6197,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6209(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 568;
}
x64Token x64Parser::tokenBranches6208[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6209,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6195[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6196 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6208 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6194[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6195 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6193[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6194 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6203(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 567;
}
x64Token x64Parser::tokenBranches6202[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6203,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6215(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 569;
}
x64Token x64Parser::tokenBranches6214[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6215,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6225(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 571;
}
x64Token x64Parser::tokenBranches6224[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6225,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6201[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6202 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6214 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6224 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6200[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6201 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6219(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 570;
}
x64Token x64Parser::tokenBranches6218[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6219,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6200(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6199[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6200, x64Parser::tokenBranches6200 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6218 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6192[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6193 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6199 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6231(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 572;
}
x64Token x64Parser::tokenBranches6230[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6231,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6229[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6230 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6228[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6229 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6227[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6228 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6237(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 573;
}
x64Token x64Parser::tokenBranches6236[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6237,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6247(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 573;
}
x64Token x64Parser::tokenBranches6246[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6247,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6235[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6236 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6246 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6234[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6235 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6241(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 572;
}
x64Token x64Parser::tokenBranches6240[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6241,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6234(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6233[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6234, x64Parser::tokenBranches6234 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6240 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6226[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6227 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6233 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6123[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6124 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6158 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6192 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6226 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6252(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 574;
}
x64Token x64Parser::tokenBranches6251[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6252,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6291_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6291_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6291_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6291_13[] = {
	{ CODING_NAME("reg")  Coding::stateFunc, 3 },
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6291(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6291_10;
	operand.values[11] = tokenCoding6291_11;
	operand.values[12] = tokenCoding6291_12;
	operand.values[13] = tokenCoding6291_13;
}
x64Token x64Parser::tokenBranches6290[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6291,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6301(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 575;
}
x64Token x64Parser::tokenBranches6300[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6301,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6313(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 577;
}
x64Token x64Parser::tokenBranches6312[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6313,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6299[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6300 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6312 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6298[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6299 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6297[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6298 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6307(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 576;
}
x64Token x64Parser::tokenBranches6306[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6307,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6319(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 578;
}
x64Token x64Parser::tokenBranches6318[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6319,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6329(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 580;
}
x64Token x64Parser::tokenBranches6328[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6329,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6305[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6306 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6318 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6328 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6304[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6305 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6323(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 579;
}
x64Token x64Parser::tokenBranches6322[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6323,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6304(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6303[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6304, x64Parser::tokenBranches6304 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6322 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6296[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6297 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6303 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6335(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 581;
}
x64Token x64Parser::tokenBranches6334[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6335,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6347(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 583;
}
x64Token x64Parser::tokenBranches6346[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6347,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6333[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6334 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6346 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6332[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6333 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6331[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6332 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6341(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 582;
}
x64Token x64Parser::tokenBranches6340[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6341,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6353(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 584;
}
x64Token x64Parser::tokenBranches6352[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6353,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6363(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 586;
}
x64Token x64Parser::tokenBranches6362[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6363,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6339[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6340 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6352 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6362 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6338[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6339 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6357(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 585;
}
x64Token x64Parser::tokenBranches6356[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6357,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6338(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6337[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6338, x64Parser::tokenBranches6338 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6356 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6330[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6331 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6337 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6369(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 587;
}
x64Token x64Parser::tokenBranches6368[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6369,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6381(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 589;
}
x64Token x64Parser::tokenBranches6380[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6381,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6367[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6368 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6380 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6366[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6367 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6365[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6366 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6375(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 588;
}
x64Token x64Parser::tokenBranches6374[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6375,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6387(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 590;
}
x64Token x64Parser::tokenBranches6386[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6387,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6397(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 592;
}
x64Token x64Parser::tokenBranches6396[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6397,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6373[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6374 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6386 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6396 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6372[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6373 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6391(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 591;
}
x64Token x64Parser::tokenBranches6390[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6391,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6372(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6371[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6372, x64Parser::tokenBranches6372 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6390 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6364[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6365 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6371 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6403(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 593;
}
x64Token x64Parser::tokenBranches6402[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6403,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6401[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6402 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6400[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6401 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6399[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6400 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6409(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 594;
}
x64Token x64Parser::tokenBranches6408[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6409,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6419(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 594;
}
x64Token x64Parser::tokenBranches6418[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6419,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6407[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6408 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6418 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6406[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6407 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6413(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 593;
}
x64Token x64Parser::tokenBranches6412[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6413,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6406(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6405[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6406, x64Parser::tokenBranches6406 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6412 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6398[] = {
	{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6399 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6405 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6295[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6296 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6330 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6364 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6398 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6424(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 595;
}
x64Token x64Parser::tokenBranches6423[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6424,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6426_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6426_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6426_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6426_13[] = {
	{ CODING_NAME("reg")  Coding::stateFunc, 3 },
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6426(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6426_10;
	operand.values[11] = tokenCoding6426_11;
	operand.values[12] = tokenCoding6426_12;
	operand.values[13] = tokenCoding6426_13;
}
Coding x64Parser::tokenCoding6427_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6427_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6427_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6427_13[] = {
	{ CODING_NAME("reg")  Coding::stateFunc, 4 },
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6427(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6427_10;
	operand.values[11] = tokenCoding6427_11;
	operand.values[12] = tokenCoding6427_12;
	operand.values[13] = tokenCoding6427_13;
}
Coding x64Parser::tokenCoding6428_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6428_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6428_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6428_13[] = {
	{ CODING_NAME("reg")  Coding::stateFunc, 5 },
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6428(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6428_10;
	operand.values[11] = tokenCoding6428_11;
	operand.values[12] = tokenCoding6428_12;
	operand.values[13] = tokenCoding6428_13;
}
x64Token x64Parser::tokenBranches6425[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6426,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6427,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6428,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6438(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 596;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6437[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6438,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6436[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6437 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6435[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6436 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6442(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 597;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6441[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6442,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6440[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6441 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6439[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6440 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6446(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 598;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6445[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6446,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6444[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6445 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6443[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6444 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6450(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 599;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6449[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6450,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6448[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6449 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6447[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6448 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6454_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6454_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6454_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6454_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6454(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6454_10;
	operand.values[11] = tokenCoding6454_11;
	operand.values[12] = tokenCoding6454_12;
	operand.values[13] = tokenCoding6454_13;
}
Coding x64Parser::tokenCoding6458_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6458_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6458_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6458_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6458_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6458(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6458_10;
	operand.values[11] = tokenCoding6458_11;
	operand.values[17] = tokenCoding6458_17;
	operand.values[12] = tokenCoding6458_12;
	operand.values[13] = tokenCoding6458_13;
}
x64Token x64Parser::tokenBranches6453[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6454,  },
	{x64Token::REGISTERCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6458,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6452[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6453 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6451[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6452 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6462_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6462_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6462_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6462_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6462(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6462_10;
	operand.values[11] = tokenCoding6462_11;
	operand.values[12] = tokenCoding6462_12;
	operand.values[13] = tokenCoding6462_13;
}
x64Token x64Parser::tokenBranches6461[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6462,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6460[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6461 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6459[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6460 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6466_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6466_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6466_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6466_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6466(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6466_10;
	operand.values[11] = tokenCoding6466_11;
	operand.values[12] = tokenCoding6466_12;
	operand.values[13] = tokenCoding6466_13;
}
x64Token x64Parser::tokenBranches6465[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6466,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6464[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6465 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6463[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6464 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6470_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6470_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6470_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6470_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 5 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6470(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6470_10;
	operand.values[11] = tokenCoding6470_11;
	operand.values[12] = tokenCoding6470_12;
	operand.values[13] = tokenCoding6470_13;
}
x64Token x64Parser::tokenBranches6469[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6470,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6468[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6469 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6467[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6468 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6474_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6474_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6474_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6474_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6474(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6474_10;
	operand.values[11] = tokenCoding6474_11;
	operand.values[12] = tokenCoding6474_12;
	operand.values[13] = tokenCoding6474_13;
}
x64Token x64Parser::tokenBranches6473[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6474,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6472[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6473 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6471[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6472 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6478_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6478_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6478_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6478_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6478_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6478(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6478_10;
	operand.values[11] = tokenCoding6478_11;
	operand.values[17] = tokenCoding6478_17;
	operand.values[12] = tokenCoding6478_12;
	operand.values[13] = tokenCoding6478_13;
}
x64Token x64Parser::tokenBranches6477[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6478,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6476[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6477 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6475[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6476 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6482_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6482_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6482_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6482_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6482(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6482_10;
	operand.values[11] = tokenCoding6482_11;
	operand.values[12] = tokenCoding6482_12;
	operand.values[13] = tokenCoding6482_13;
}
x64Token x64Parser::tokenBranches6481[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6482,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6480[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6481 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6479[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6480 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6486_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6486_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6486_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6486_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6486(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6486_10;
	operand.values[11] = tokenCoding6486_11;
	operand.values[12] = tokenCoding6486_12;
	operand.values[13] = tokenCoding6486_13;
}
x64Token x64Parser::tokenBranches6485[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6486,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6484[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6485 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6483[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6484 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6490_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6490_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6490_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6490_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6490(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6490_10;
	operand.values[11] = tokenCoding6490_11;
	operand.values[12] = tokenCoding6490_12;
	operand.values[13] = tokenCoding6490_13;
}
x64Token x64Parser::tokenBranches6489[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6490,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6488[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6489 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6487[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6488 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6494_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6494_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6494_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6494_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6494(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6494_10;
	operand.values[11] = tokenCoding6494_11;
	operand.values[12] = tokenCoding6494_12;
	operand.values[13] = tokenCoding6494_13;
}
x64Token x64Parser::tokenBranches6493[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6494,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6492[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6493 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6491[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6492 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6498_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6498_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6498_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6498_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 3 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6498(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 390;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6498_10;
	operand.values[11] = tokenCoding6498_11;
	operand.values[12] = tokenCoding6498_12;
	operand.values[13] = tokenCoding6498_13;
}
x64Token x64Parser::tokenBranches6497[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6498,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6496[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6497 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6495[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6496 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6502_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6502_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6502_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6502_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 4 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6502(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6502_10;
	operand.values[11] = tokenCoding6502_11;
	operand.values[12] = tokenCoding6502_12;
	operand.values[13] = tokenCoding6502_13;
}
x64Token x64Parser::tokenBranches6501[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6502,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6500[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6501 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6499[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6500 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6506_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6506_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6506_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6506_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 5 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6506(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6506_10;
	operand.values[11] = tokenCoding6506_11;
	operand.values[12] = tokenCoding6506_12;
	operand.values[13] = tokenCoding6506_13;
}
x64Token x64Parser::tokenBranches6505[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6506,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6504[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6505 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6503[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6504 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6511_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6511_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6511_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6511_13[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6511(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6511_10;
	operand.values[11] = tokenCoding6511_11;
	operand.values[12] = tokenCoding6511_12;
	operand.values[13] = tokenCoding6511_13;
}
x64Token x64Parser::tokenBranches6510[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6511,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6509[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6510 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6508[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6509 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6507[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6508 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6516_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6516_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6516_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6516_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 3 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6516(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 390;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6516_10;
	operand.values[11] = tokenCoding6516_11;
	operand.values[12] = tokenCoding6516_12;
	operand.values[13] = tokenCoding6516_13;
}
x64Token x64Parser::tokenBranches6515[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6516,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6514[] = {
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6515 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6513[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6514 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6512[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6513 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6521_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6521_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6521_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6521_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 4 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6521(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6521_10;
	operand.values[11] = tokenCoding6521_11;
	operand.values[12] = tokenCoding6521_12;
	operand.values[13] = tokenCoding6521_13;
}
x64Token x64Parser::tokenBranches6520[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6521,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6519[] = {
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6520 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6518[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6519 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6517[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6518 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6526_10[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6526_11[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6526_12[] = {
	{ CODING_NAME("omem")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6526_13[] = {
	{ CODING_NAME("omem")  Coding::stateFunc, 5 },
	{ CODING_NAME("omem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6526(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6526_10;
	operand.values[11] = tokenCoding6526_11;
	operand.values[12] = tokenCoding6526_12;
	operand.values[13] = tokenCoding6526_13;
}
x64Token x64Parser::tokenBranches6525[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6526,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6524[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6525 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6523[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6524 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6522[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6523 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6471(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6475(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6479(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6483(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6487(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6434[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches6435 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6439 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6443 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6447 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6451 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6459 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6463 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6467 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc6471, x64Parser::tokenBranches6471 },
	{x64Token::REGISTERCLASS, 14, 0, 0, NULL,&x64Parser::TokenFunc6475, x64Parser::tokenBranches6475 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc6479, x64Parser::tokenBranches6479 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc6483, x64Parser::tokenBranches6483 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc6487, x64Parser::tokenBranches6487 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6491 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches6495 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches6499 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches6503 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6507 },
	{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6512 },
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6517 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6522 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6529_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6529_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6529_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6529_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6529(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6529_10;
	operand.values[11] = tokenCoding6529_11;
	operand.values[12] = tokenCoding6529_12;
	operand.values[13] = tokenCoding6529_13;
}
x64Token x64Parser::tokenBranches6528[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6529,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6531_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6531_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6531_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6531_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6531(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6531_10;
	operand.values[11] = tokenCoding6531_11;
	operand.values[12] = tokenCoding6531_12;
	operand.values[13] = tokenCoding6531_13;
}
x64Token x64Parser::tokenBranches6530[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6531,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6539_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6539_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6539_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6539_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6539(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6539_10;
	operand.values[11] = tokenCoding6539_11;
	operand.values[12] = tokenCoding6539_12;
	operand.values[13] = tokenCoding6539_13;
}
Coding x64Parser::tokenCoding6543_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6543_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6543_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6543_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6543_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6543(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6543_10;
	operand.values[11] = tokenCoding6543_11;
	operand.values[17] = tokenCoding6543_17;
	operand.values[12] = tokenCoding6543_12;
	operand.values[13] = tokenCoding6543_13;
}
x64Token x64Parser::tokenBranches6538[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6539,  },
	{x64Token::REGISTERCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6543,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6537[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6538 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6536[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6537 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6547_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6547_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6547_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6547_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6547(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6547_10;
	operand.values[11] = tokenCoding6547_11;
	operand.values[12] = tokenCoding6547_12;
	operand.values[13] = tokenCoding6547_13;
}
x64Token x64Parser::tokenBranches6546[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6547,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6545[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6546 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6544[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6545 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6551_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6551_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6551_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6551_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6551(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6551_10;
	operand.values[11] = tokenCoding6551_11;
	operand.values[12] = tokenCoding6551_12;
	operand.values[13] = tokenCoding6551_13;
}
x64Token x64Parser::tokenBranches6550[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6551,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6549[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6550 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6548[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6549 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6555_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6555_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6555_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6555_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 5 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6555(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6555_10;
	operand.values[11] = tokenCoding6555_11;
	operand.values[12] = tokenCoding6555_12;
	operand.values[13] = tokenCoding6555_13;
}
x64Token x64Parser::tokenBranches6554[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6555,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6553[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6554 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6552[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6553 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6535[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6536 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6544 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6548 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6552 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6559(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 600;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6558[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6559,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6557[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6558 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6562(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 601;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6561[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6562,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6560[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6561 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6565(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 602;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6564[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6565,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6563[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6564 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6586_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6586_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6586_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6586_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 3 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6586(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6586_10;
	operand.values[11] = tokenCoding6586_11;
	operand.values[12] = tokenCoding6586_12;
	operand.values[13] = tokenCoding6586_13;
}
x64Token x64Parser::tokenBranches6585[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6586,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6568(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 600;
}
x64Token x64Parser::tokenBranches6567[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc6568,  },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6585 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6566[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6567 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6590_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6590_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6590_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6590_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 4 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6590(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6590_10;
	operand.values[11] = tokenCoding6590_11;
	operand.values[12] = tokenCoding6590_12;
	operand.values[13] = tokenCoding6590_13;
}
x64Token x64Parser::tokenBranches6589[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6590,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6571(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 601;
}
x64Token x64Parser::tokenBranches6570[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc6571,  },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6589 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6569[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6570 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6594_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6594_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6594_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6594_13[] = {
	{ CODING_NAME("rm")  Coding::stateFunc, 5 },
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6594(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6594_10;
	operand.values[11] = tokenCoding6594_11;
	operand.values[12] = tokenCoding6594_12;
	operand.values[13] = tokenCoding6594_13;
}
x64Token x64Parser::tokenBranches6593[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6594,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6574(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 602;
}
x64Token x64Parser::tokenBranches6573[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc6574,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6593 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6572[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6573 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6578_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6578_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6578_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6578_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6578(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6578_10;
	operand.values[11] = tokenCoding6578_11;
	operand.values[12] = tokenCoding6578_12;
	operand.values[13] = tokenCoding6578_13;
}
x64Token x64Parser::tokenBranches6577[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc6578,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6576[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6577 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6575[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6576 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6582_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6582_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6582_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6582_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6582_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6582(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6582_10;
	operand.values[11] = tokenCoding6582_11;
	operand.values[17] = tokenCoding6582_17;
	operand.values[12] = tokenCoding6582_12;
	operand.values[13] = tokenCoding6582_13;
}
x64Token x64Parser::tokenBranches6581[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc6582,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6580[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6581 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6579[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6580 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6598_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6598_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6598_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6598_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6598(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6598_10;
	operand.values[11] = tokenCoding6598_11;
	operand.values[12] = tokenCoding6598_12;
	operand.values[13] = tokenCoding6598_13;
}
Coding x64Parser::tokenCoding6602_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6602_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6602_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6602_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6602_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6602(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6602_10;
	operand.values[11] = tokenCoding6602_11;
	operand.values[17] = tokenCoding6602_17;
	operand.values[12] = tokenCoding6602_12;
	operand.values[13] = tokenCoding6602_13;
}
x64Token x64Parser::tokenBranches6597[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6598,  },
	{x64Token::REGISTERCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6602,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6596[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6597 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6595[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6596 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6606_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6606_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6606_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6606_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 3 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6606(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6606_10;
	operand.values[11] = tokenCoding6606_11;
	operand.values[12] = tokenCoding6606_12;
	operand.values[13] = tokenCoding6606_13;
}
x64Token x64Parser::tokenBranches6605[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6606,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6604[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6605 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6603[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6604 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6610_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6610_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6610_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6610_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 4 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6610(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6610_10;
	operand.values[11] = tokenCoding6610_11;
	operand.values[12] = tokenCoding6610_12;
	operand.values[13] = tokenCoding6610_13;
}
x64Token x64Parser::tokenBranches6609[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6610,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6608[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6609 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6607[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6608 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6614_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6614_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6614_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6614_13[] = {
	{ CODING_NAME("modreg")  Coding::stateFunc, 5 },
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6614(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6614_10;
	operand.values[11] = tokenCoding6614_11;
	operand.values[12] = tokenCoding6614_12;
	operand.values[13] = tokenCoding6614_13;
}
x64Token x64Parser::tokenBranches6613[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6614,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6612[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6613 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6611[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6612 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6566(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6569(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6572(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6575(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6579(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6556[] = {
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6557 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6560 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6563 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc6566, x64Parser::tokenBranches6566 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc6569, x64Parser::tokenBranches6569 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc6572, x64Parser::tokenBranches6572 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc6575, x64Parser::tokenBranches6575 },
	{x64Token::REGISTERCLASS, 14, 0, 0, NULL,&x64Parser::TokenFunc6579, x64Parser::tokenBranches6579 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6595 },
	{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6603 },
	{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6607 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6611 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6621(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 603;
}
x64Token x64Parser::tokenBranches6620[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6621,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6633(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 605;
}
x64Token x64Parser::tokenBranches6632[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6633,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6645(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 607;
}
x64Token x64Parser::tokenBranches6644[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6645,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6619[] = {
	{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches6620 },
	{x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches6632 },
	{x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches6644 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6618[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6619 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6627(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 604;
}
x64Token x64Parser::tokenBranches6626[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6627,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6639(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 606;
}
x64Token x64Parser::tokenBranches6638[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6639,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6651(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 608;
}
x64Token x64Parser::tokenBranches6650[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6651,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6625[] = {
	{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches6626 },
	{x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches6638 },
	{x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches6650 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6624[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6625 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6624(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6617[] = {
	{x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches6618 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6624, x64Parser::tokenBranches6624 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6616[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6617 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6652(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 609;
}
x64Token x64Parser::tokenBranches6615[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6616 },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6652,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6656_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6656_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6656_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6656_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6656(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6656_10;
	operand.values[11] = tokenCoding6656_11;
	operand.values[12] = tokenCoding6656_12;
	operand.values[13] = tokenCoding6656_13;
}
x64Token x64Parser::tokenBranches6655[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6656,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6658_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6658_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6658_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6658_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6658(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6658_10;
	operand.values[11] = tokenCoding6658_11;
	operand.values[12] = tokenCoding6658_12;
	operand.values[13] = tokenCoding6658_13;
}
x64Token x64Parser::tokenBranches6657[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6658,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6660_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6660_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6660_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6660_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6660(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6660_10;
	operand.values[11] = tokenCoding6660_11;
	operand.values[12] = tokenCoding6660_12;
	operand.values[13] = tokenCoding6660_13;
}
x64Token x64Parser::tokenBranches6659[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6660,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6662_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6662_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6662_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6662_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6662(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6662_10;
	operand.values[11] = tokenCoding6662_11;
	operand.values[12] = tokenCoding6662_12;
	operand.values[13] = tokenCoding6662_13;
}
x64Token x64Parser::tokenBranches6661[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6662,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6713_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6713_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6713_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6713_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6713_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6713(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6713_10;
	operand.values[11] = tokenCoding6713_11;
	operand.values[17] = tokenCoding6713_17;
	operand.values[12] = tokenCoding6713_12;
	operand.values[13] = tokenCoding6713_13;
}
x64Token x64Parser::tokenBranches6712[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6713,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6711[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6712 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6711(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6710[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6711, x64Parser::tokenBranches6711 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6717_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6717_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6717_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6717_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6717_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6717(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6717_10;
	operand.values[11] = tokenCoding6717_11;
	operand.values[17] = tokenCoding6717_17;
	operand.values[12] = tokenCoding6717_12;
	operand.values[13] = tokenCoding6717_13;
}
x64Token x64Parser::tokenBranches6716[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6717,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6715[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6716 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6715(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6714[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc6715, x64Parser::tokenBranches6715 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6734_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6734_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6734_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6734_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6734_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6734(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6734_10;
	operand.values[11] = tokenCoding6734_11;
	operand.values[17] = tokenCoding6734_17;
	operand.values[12] = tokenCoding6734_12;
	operand.values[13] = tokenCoding6734_13;
}
x64Token x64Parser::tokenBranches6733[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6734,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6732[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6733 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6737_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6737_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6737_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6737_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6737_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6737(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6737_10;
	operand.values[11] = tokenCoding6737_11;
	operand.values[17] = tokenCoding6737_17;
	operand.values[12] = tokenCoding6737_12;
	operand.values[13] = tokenCoding6737_13;
}
x64Token x64Parser::tokenBranches6736[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6737,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6735[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6736 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6740_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6740_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6740_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6740_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6740_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6740(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6740_10;
	operand.values[11] = tokenCoding6740_11;
	operand.values[17] = tokenCoding6740_17;
	operand.values[12] = tokenCoding6740_12;
	operand.values[13] = tokenCoding6740_13;
}
Coding x64Parser::tokenCoding6743_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6743_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6743_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6743_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6743_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6743(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6743_10;
	operand.values[11] = tokenCoding6743_11;
	operand.values[17] = tokenCoding6743_17;
	operand.values[12] = tokenCoding6743_12;
	operand.values[13] = tokenCoding6743_13;
}
x64Token x64Parser::tokenBranches6739[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6740,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6743,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6738[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6739 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6732(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6735(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6731[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc6732, x64Parser::tokenBranches6732 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6735, x64Parser::tokenBranches6735 },
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6738 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6747_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6747_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6747_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6747_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6747_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6747(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6747_10;
	operand.values[11] = tokenCoding6747_11;
	operand.values[17] = tokenCoding6747_17;
	operand.values[12] = tokenCoding6747_12;
	operand.values[13] = tokenCoding6747_13;
}
x64Token x64Parser::tokenBranches6746[] = {
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6747,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6745[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6746 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6750_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6750_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6750_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6750_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6750_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6750(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6750_10;
	operand.values[11] = tokenCoding6750_11;
	operand.values[17] = tokenCoding6750_17;
	operand.values[12] = tokenCoding6750_12;
	operand.values[13] = tokenCoding6750_13;
}
x64Token x64Parser::tokenBranches6749[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6750,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6748[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6749 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6753_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6753_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6753_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6753_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6753_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6753(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6753_10;
	operand.values[11] = tokenCoding6753_11;
	operand.values[17] = tokenCoding6753_17;
	operand.values[12] = tokenCoding6753_12;
	operand.values[13] = tokenCoding6753_13;
}
Coding x64Parser::tokenCoding6756_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6756_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6756_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6756_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6756_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6756(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6756_10;
	operand.values[11] = tokenCoding6756_11;
	operand.values[17] = tokenCoding6756_17;
	operand.values[12] = tokenCoding6756_12;
	operand.values[13] = tokenCoding6756_13;
}
x64Token x64Parser::tokenBranches6752[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6753,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6756,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6751[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6752 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6759_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6759_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6759_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6759_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6759_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6759(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6759_10;
	operand.values[11] = tokenCoding6759_11;
	operand.values[17] = tokenCoding6759_17;
	operand.values[12] = tokenCoding6759_12;
	operand.values[13] = tokenCoding6759_13;
}
Coding x64Parser::tokenCoding6765_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6765_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6765_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6765_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6765_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6765(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6765_10;
	operand.values[11] = tokenCoding6765_11;
	operand.values[17] = tokenCoding6765_17;
	operand.values[12] = tokenCoding6765_12;
	operand.values[13] = tokenCoding6765_13;
}
x64Token x64Parser::tokenBranches6758[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6759,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6765,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6757[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6758 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6762_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6762_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6762_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6762_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6762_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 127, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6762(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6762_10;
	operand.values[11] = tokenCoding6762_11;
	operand.values[17] = tokenCoding6762_17;
	operand.values[12] = tokenCoding6762_12;
	operand.values[13] = tokenCoding6762_13;
}
Coding x64Parser::tokenCoding6768_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6768_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6768_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6768_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6768_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6768(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6768_10;
	operand.values[11] = tokenCoding6768_11;
	operand.values[17] = tokenCoding6768_17;
	operand.values[12] = tokenCoding6768_12;
	operand.values[13] = tokenCoding6768_13;
}
x64Token x64Parser::tokenBranches6761[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6762,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6768,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6760[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6761 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6748(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6751(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6744[] = {
	{x64Token::ADDRESSCLASS, 23, 0, 0, NULL, NULL, x64Parser::tokenBranches6745 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc6748, x64Parser::tokenBranches6748 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6751, x64Parser::tokenBranches6751 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches6757 },
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6760 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6776_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6776_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6776_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6776_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6776_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6776(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6776_10;
	operand.values[11] = tokenCoding6776_11;
	operand.values[17] = tokenCoding6776_17;
	operand.values[12] = tokenCoding6776_12;
	operand.values[13] = tokenCoding6776_13;
}
x64Token x64Parser::tokenBranches6775[] = {
	{x64Token::ADDRESSCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc6776,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6774[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6775 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6774(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6773[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6774, x64Parser::tokenBranches6774 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6782_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6782_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6782_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6782_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6782_13[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6782(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6782_10;
	operand.values[11] = tokenCoding6782_11;
	operand.values[17] = tokenCoding6782_17;
	operand.values[12] = tokenCoding6782_12;
	operand.values[13] = tokenCoding6782_13;
}
x64Token x64Parser::tokenBranches6781[] = {
	{x64Token::ADDRESSCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc6782,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6780[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6781 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6780(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6779[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6780, x64Parser::tokenBranches6780 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6790_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6790_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6790_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6790_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6790_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6790(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6790_10;
	operand.values[11] = tokenCoding6790_11;
	operand.values[17] = tokenCoding6790_17;
	operand.values[12] = tokenCoding6790_12;
	operand.values[13] = tokenCoding6790_13;
}
x64Token x64Parser::tokenBranches6789[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6790,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6788[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6789 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6787[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6788 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6794_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6794_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6794_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6794(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6794_10;
	operand.values[11] = tokenCoding6794_11;
	operand.values[12] = tokenCoding6794_12;
}
Coding x64Parser::tokenCoding6797_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6797_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6797_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6797(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6797_10;
	operand.values[11] = tokenCoding6797_11;
	operand.values[12] = tokenCoding6797_12;
}
x64Token x64Parser::tokenBranches6793[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc6794,  },
	{x64Token::REGISTERCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc6797,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6792[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6793 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6791[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6792 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6801_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6801_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6801_17[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6801_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6801_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6801(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6801_10;
	operand.values[11] = tokenCoding6801_11;
	operand.values[17] = tokenCoding6801_17;
	operand.values[12] = tokenCoding6801_12;
	operand.values[13] = tokenCoding6801_13;
}
x64Token x64Parser::tokenBranches6800[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6801,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6799[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6800 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6798[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6799 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6805_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6805_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6805_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6805_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6805_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6805(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6805_10;
	operand.values[11] = tokenCoding6805_11;
	operand.values[17] = tokenCoding6805_17;
	operand.values[12] = tokenCoding6805_12;
	operand.values[13] = tokenCoding6805_13;
}
x64Token x64Parser::tokenBranches6804[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6805,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6803[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6804 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6802[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6803 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6809_10[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6809_11[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6809_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6809_12[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6809_13[] = {
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("modreg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6809(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operand.values[10] = tokenCoding6809_10;
	operand.values[11] = tokenCoding6809_11;
	operand.values[17] = tokenCoding6809_17;
	operand.values[12] = tokenCoding6809_12;
	operand.values[13] = tokenCoding6809_13;
}
x64Token x64Parser::tokenBranches6808[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc6809,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6807[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6808 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6806[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6807 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6813_10[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6813_11[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6813_17[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6813_12[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6813_13[] = {
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("reg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6813(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6813_10;
	operand.values[11] = tokenCoding6813_11;
	operand.values[17] = tokenCoding6813_17;
	operand.values[12] = tokenCoding6813_12;
	operand.values[13] = tokenCoding6813_13;
}
x64Token x64Parser::tokenBranches6812[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc6813,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6811[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6812 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6811(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6810[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6811, x64Parser::tokenBranches6811 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6841_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6841_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6841_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6841_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6841(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6841_10;
	operand.values[11] = tokenCoding6841_11;
	operand.values[17] = tokenCoding6841_17;
	operand.values[12] = tokenCoding6841_12;
}
x64Token x64Parser::tokenBranches6840[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6841,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6839[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6840 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6838[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6839 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6837[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6838 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6846_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6846_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6846_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6846_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6846(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6846_10;
	operand.values[11] = tokenCoding6846_11;
	operand.values[17] = tokenCoding6846_17;
	operand.values[12] = tokenCoding6846_12;
}
x64Token x64Parser::tokenBranches6845[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6846,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6844[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6845 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6843[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6844 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6842[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6843 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6837(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6842(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6836[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc6837, x64Parser::tokenBranches6837 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6842, x64Parser::tokenBranches6842 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6865_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6865_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6865_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6865_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6865(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6865_10;
	operand.values[11] = tokenCoding6865_11;
	operand.values[17] = tokenCoding6865_17;
	operand.values[12] = tokenCoding6865_12;
}
x64Token x64Parser::tokenBranches6864[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6865,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6863[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6864 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6863(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6862[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6863, x64Parser::tokenBranches6863 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6861[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6862 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6860[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6861 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6871_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6871_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6871_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6871_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6871(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6871_10;
	operand.values[11] = tokenCoding6871_11;
	operand.values[17] = tokenCoding6871_17;
	operand.values[12] = tokenCoding6871_12;
}
x64Token x64Parser::tokenBranches6870[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6871,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6869[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6870 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6869(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6868[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6869, x64Parser::tokenBranches6869 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6867[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6868 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6866[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6867 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6877_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6877_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6877_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6877_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6877(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6877_10;
	operand.values[11] = tokenCoding6877_11;
	operand.values[17] = tokenCoding6877_17;
	operand.values[12] = tokenCoding6877_12;
}
x64Token x64Parser::tokenBranches6876[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6877,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6875[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6876 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6875(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6874[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6875, x64Parser::tokenBranches6875 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6873[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6874 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6872[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6873 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6883_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6883_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6883_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6883_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6883_13[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 197, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6883(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6883_10;
	operand.values[11] = tokenCoding6883_11;
	operand.values[17] = tokenCoding6883_17;
	operand.values[12] = tokenCoding6883_12;
	operand.values[13] = tokenCoding6883_13;
}
x64Token x64Parser::tokenBranches6882[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6883,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6881[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6882 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6881(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6880[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc6881, x64Parser::tokenBranches6881 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6879[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6880 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6888_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6888_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6888_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6888_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6888_13[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 197, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6888(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6888_10;
	operand.values[11] = tokenCoding6888_11;
	operand.values[17] = tokenCoding6888_17;
	operand.values[12] = tokenCoding6888_12;
	operand.values[13] = tokenCoding6888_13;
}
x64Token x64Parser::tokenBranches6887[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6888,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6886[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6887 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6885[] = {
	{x64Token::ADDRESSCLASS, 26, 0, 0, NULL, NULL, x64Parser::tokenBranches6886 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6884[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6885 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6893_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6893_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6893_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6893_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6893_13[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 197, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6893(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6893_10;
	operand.values[11] = tokenCoding6893_11;
	operand.values[17] = tokenCoding6893_17;
	operand.values[12] = tokenCoding6893_12;
	operand.values[13] = tokenCoding6893_13;
}
x64Token x64Parser::tokenBranches6892[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6893,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6891[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6892 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6890[] = {
	{x64Token::ADDRESSCLASS, 26, 0, 0, NULL, NULL, x64Parser::tokenBranches6891 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6889[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6890 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6898_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6898_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6898_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6898_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6898_13[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6898(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6898_10;
	operand.values[11] = tokenCoding6898_11;
	operand.values[17] = tokenCoding6898_17;
	operand.values[12] = tokenCoding6898_12;
	operand.values[13] = tokenCoding6898_13;
}
x64Token x64Parser::tokenBranches6897[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6898,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6896[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6897 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6896(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6895[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6896, x64Parser::tokenBranches6896 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6894[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6895 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6884(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6889(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6878[] = {
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches6879 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc6884, x64Parser::tokenBranches6884 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc6889, x64Parser::tokenBranches6889 },
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6894 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6904_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6904_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6904_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6904_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6904(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6904_10;
	operand.values[11] = tokenCoding6904_11;
	operand.values[17] = tokenCoding6904_17;
	operand.values[12] = tokenCoding6904_12;
}
x64Token x64Parser::tokenBranches6903[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6904,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6902[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6903 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6901[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6902 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6900[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6901 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6900(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6899[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6900, x64Parser::tokenBranches6900 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6910_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6910_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6910_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6910_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6910(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6910_10;
	operand.values[11] = tokenCoding6910_11;
	operand.values[17] = tokenCoding6910_17;
	operand.values[12] = tokenCoding6910_12;
}
x64Token x64Parser::tokenBranches6909[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6910,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6908[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6909 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6907[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6908 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6906[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6907 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6906(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6905[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6906, x64Parser::tokenBranches6906 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6916_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6916_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6916_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6916_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6916(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6916_10;
	operand.values[11] = tokenCoding6916_11;
	operand.values[17] = tokenCoding6916_17;
	operand.values[12] = tokenCoding6916_12;
}
x64Token x64Parser::tokenBranches6915[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6916,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6914[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6915 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6913[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6914 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6912[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6913 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6912(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6911[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6912, x64Parser::tokenBranches6912 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6922_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6922_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6922_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6922_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6922_13[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6922(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6922_10;
	operand.values[11] = tokenCoding6922_11;
	operand.values[17] = tokenCoding6922_17;
	operand.values[12] = tokenCoding6922_12;
	operand.values[13] = tokenCoding6922_13;
}
x64Token x64Parser::tokenBranches6921[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6922,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6920[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6921 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6919[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6920 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6918[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6919 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6927_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6927_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6927_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6927_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6927_13[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6927(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6927_10;
	operand.values[11] = tokenCoding6927_11;
	operand.values[17] = tokenCoding6927_17;
	operand.values[12] = tokenCoding6927_12;
	operand.values[13] = tokenCoding6927_13;
}
x64Token x64Parser::tokenBranches6926[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6927,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6925[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6926 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6932_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6932_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6932_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6932_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6932_13[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6932(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6932_10;
	operand.values[11] = tokenCoding6932_11;
	operand.values[17] = tokenCoding6932_17;
	operand.values[12] = tokenCoding6932_12;
	operand.values[13] = tokenCoding6932_13;
}
x64Token x64Parser::tokenBranches6931[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6932,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6930[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6931 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6937_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6937_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6937_17[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6937_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6937_13[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("imm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6937(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6937_10;
	operand.values[11] = tokenCoding6937_11;
	operand.values[17] = tokenCoding6937_17;
	operand.values[12] = tokenCoding6937_12;
	operand.values[13] = tokenCoding6937_13;
}
x64Token x64Parser::tokenBranches6936[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6937,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6935[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6936 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6924[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6925 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches6930 },
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6935 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6923[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6924 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6918(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6923(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6917[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc6918, x64Parser::tokenBranches6918 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6923, x64Parser::tokenBranches6923 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6946_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6946_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6946_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6946_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6946(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6946_10;
	operand.values[11] = tokenCoding6946_11;
	operand.values[17] = tokenCoding6946_17;
	operand.values[12] = tokenCoding6946_12;
}
Coding x64Parser::tokenCoding6952_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6952_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6952_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6952_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6952(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6952_10;
	operand.values[11] = tokenCoding6952_11;
	operand.values[17] = tokenCoding6952_17;
	operand.values[12] = tokenCoding6952_12;
}
x64Token x64Parser::tokenBranches6945[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6946,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6952,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6944[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6945 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6949_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6949_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6949_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6949_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6949(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6949_10;
	operand.values[11] = tokenCoding6949_11;
	operand.values[17] = tokenCoding6949_17;
	operand.values[12] = tokenCoding6949_12;
}
Coding x64Parser::tokenCoding6955_10[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6955_11[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6955_17[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6955_12[] = {
	{ CODING_NAME("rm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6955(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6955_10;
	operand.values[11] = tokenCoding6955_11;
	operand.values[17] = tokenCoding6955_17;
	operand.values[12] = tokenCoding6955_12;
}
x64Token x64Parser::tokenBranches6948[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6949,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6955,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6947[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6948 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6944(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc6947(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6943[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc6944, x64Parser::tokenBranches6944 },
	{x64Token::REGISTERCLASS, 10, 0, 0, NULL,&x64Parser::TokenFunc6947, x64Parser::tokenBranches6947 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6969_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6969_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 3, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6969_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6969(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6969_10;
	operand.values[11] = tokenCoding6969_11;
	operand.values[12] = tokenCoding6969_12;
}
x64Token x64Parser::tokenBranches6968[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6969,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6967[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6968 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6966[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6967 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6965[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6966 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6965(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::reg;
	operand.values[14]->val = inputTokens[tokenPos]->val->ival;
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6964[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc6965, x64Parser::tokenBranches6965 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6974_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6974_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6974_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6974(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6974_10;
	operand.values[11] = tokenCoding6974_11;
	operand.values[12] = tokenCoding6974_12;
}
x64Token x64Parser::tokenBranches6973[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6974,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6972[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6973 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6971[] = {
	{x64Token::ADDRESSCLASS, 26, 0, 0, NULL, NULL, x64Parser::tokenBranches6972 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6983_10[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6983_11[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::tokenCoding6983_12[] = {
	{ CODING_NAME("imm")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
void x64Parser::TokenFunc6983(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6983_10;
	operand.values[11] = tokenCoding6983_11;
	operand.values[12] = tokenCoding6983_12;
}
x64Token x64Parser::tokenBranches6982[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6983,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6981[] = {
	{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6982 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6980[] = {
	{x64Token::ADDRESSCLASS, 26, 0, 0, NULL, NULL, x64Parser::tokenBranches6981 },
	{x64Token::EOT }
};
asmError x64Parser::Opcode0(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3565, operand);
	return rv;
}
asmError x64Parser::Opcode1(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3567, operand);
	return rv;
}
asmError x64Parser::Opcode2(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3569, operand);
	return rv;
}
asmError x64Parser::Opcode3(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3582, operand);
	return rv;
}
asmError x64Parser::Opcode4(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3595, operand);
	return rv;
}
asmError x64Parser::Opcode5(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3769, operand);
	return rv;
}
asmError x64Parser::Opcode6(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3797, operand);
	return rv;
}
asmError x64Parser::Opcode7(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3813, operand);
	return rv;
}
asmError x64Parser::Opcode8(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3826, operand);
	return rv;
}
asmError x64Parser::Opcode9(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3838, operand);
	return rv;
}
asmError x64Parser::Opcode10(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3844, operand);
	return rv;
}
asmError x64Parser::Opcode11(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3849, operand);
	return rv;
}
asmError x64Parser::Opcode12(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3852, operand);
	return rv;
}
asmError x64Parser::Opcode13(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3861, operand);
	return rv;
}
asmError x64Parser::Opcode14(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3874, operand);
	return rv;
}
asmError x64Parser::Opcode15(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3877, operand);
	return rv;
}
asmError x64Parser::Opcode16(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches3920, operand);
	return rv;
}
asmError x64Parser::Opcode17(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4015, operand);
	return rv;
}
asmError x64Parser::Opcode18(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4052, operand);
	return rv;
}
asmError x64Parser::Opcode19(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4054, operand);
	return rv;
}
asmError x64Parser::Opcode20(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4058, operand);
	return rv;
}
asmError x64Parser::Opcode21(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4065, operand);
	return rv;
}
asmError x64Parser::Opcode22(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4072, operand);
	return rv;
}
asmError x64Parser::Opcode23(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4079, operand);
	return rv;
}
asmError x64Parser::Opcode24(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4083, operand);
	return rv;
}
asmError x64Parser::Opcode25(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4087, operand);
	return rv;
}
asmError x64Parser::Opcode26(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4094, operand);
	return rv;
}
asmError x64Parser::Opcode27(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4103, operand);
	return rv;
}
asmError x64Parser::Opcode28(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4110, operand);
	return rv;
}
asmError x64Parser::Opcode29(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4116, operand);
	return rv;
}
asmError x64Parser::Opcode30(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4129, operand);
	return rv;
}
asmError x64Parser::Opcode31(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4135, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings32_13[] = {
	{ CODING_NAME("aaa")  Coding::stateFunc, 6 },
	{ CODING_NAME("aaa")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 55, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode32(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings32_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings33_13[] = {
	{ CODING_NAME("aad")  Coding::stateFunc, 6 },
	{ CODING_NAME("aad")  (Coding::Type)(Coding::valSpecified), 213, -1, -1, 0, 0 }, 
	{ CODING_NAME("aad")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode33(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings33_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings34_13[] = {
	{ CODING_NAME("aam")  Coding::stateFunc, 6 },
	{ CODING_NAME("aam")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ CODING_NAME("aam")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode34(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings34_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings35_13[] = {
	{ CODING_NAME("aas")  Coding::stateFunc, 6 },
	{ CODING_NAME("aas")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 63, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode35(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings35_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings36_12[] = {
	{ CODING_NAME("adc")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings36_30[] = {
	{ CODING_NAME("adc")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings36_31[] = {
	{ CODING_NAME("adc")  (Coding::Type)(Coding::valSpecified), 16, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode36(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings36_12;
	operand.values[30] = OpcodeCodings36_30;
	operand.values[31] = OpcodeCodings36_31;
	asmError rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings37_12[] = {
	{ CODING_NAME("add")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings37_30[] = {
	{ CODING_NAME("add")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings37_31[] = {
	{ CODING_NAME("add")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode37(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings37_12;
	operand.values[30] = OpcodeCodings37_30;
	operand.values[31] = OpcodeCodings37_31;
	asmError rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings38_12[] = {
	{ CODING_NAME("and")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings38_30[] = {
	{ CODING_NAME("and")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings38_31[] = {
	{ CODING_NAME("and")  (Coding::Type)(Coding::valSpecified), 32, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode38(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings38_12;
	operand.values[30] = OpcodeCodings38_30;
	operand.values[31] = OpcodeCodings38_31;
	asmError rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
asmError x64Parser::Opcode39(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4148, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings40_30[] = {
	{ CODING_NAME("bound")  Coding::stateFunc, 6 },
	{ CODING_NAME("bound")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode40(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings40_30;
	asmError rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings41_30[] = {
	{ CODING_NAME("bsf")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("bsf")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 188, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode41(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings41_30;
	asmError rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings42_30[] = {
	{ CODING_NAME("bsr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("bsr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 189, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode42(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings42_30;
	asmError rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
asmError x64Parser::Opcode43(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4155, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings44_12[] = {
	{ CODING_NAME("bt")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings44_30[] = {
	{ CODING_NAME("bt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("bt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings44_31[] = {
	{ CODING_NAME("bt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("bt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode44(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings44_12;
	operand.values[30] = OpcodeCodings44_30;
	operand.values[31] = OpcodeCodings44_31;
	asmError rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings45_12[] = {
	{ CODING_NAME("btc")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings45_30[] = {
	{ CODING_NAME("btc")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("btc")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings45_31[] = {
	{ CODING_NAME("btc")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("btc")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 187, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode45(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings45_12;
	operand.values[30] = OpcodeCodings45_30;
	operand.values[31] = OpcodeCodings45_31;
	asmError rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings46_12[] = {
	{ CODING_NAME("btr")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings46_30[] = {
	{ CODING_NAME("btr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("btr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings46_31[] = {
	{ CODING_NAME("btr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("btr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 179, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode46(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings46_12;
	operand.values[30] = OpcodeCodings46_30;
	operand.values[31] = OpcodeCodings46_31;
	asmError rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings47_12[] = {
	{ CODING_NAME("bts")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings47_30[] = {
	{ CODING_NAME("bts")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("bts")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings47_31[] = {
	{ CODING_NAME("bts")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("bts")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode47(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings47_12;
	operand.values[30] = OpcodeCodings47_30;
	operand.values[31] = OpcodeCodings47_31;
	asmError rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
asmError x64Parser::Opcode48(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4162, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings49_13[] = {
	{ CODING_NAME("cbw")  Coding::stateFunc, 3 },
	{ CODING_NAME("cbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode49(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings49_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings50_13[] = {
	{ CODING_NAME("cdq")  Coding::stateFunc, 4 },
	{ CODING_NAME("cdq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode50(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings50_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode51(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4195, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings52_13[] = {
	{ CODING_NAME("clc")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode52(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings52_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings53_13[] = {
	{ CODING_NAME("cld")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode53(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings53_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings54_13[] = {
	{ CODING_NAME("cli")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode54(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings54_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings55_13[] = {
	{ CODING_NAME("clts")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode55(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings55_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings56_13[] = {
	{ CODING_NAME("cmc")  (Coding::Type)(Coding::valSpecified), 245, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode56(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings56_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings57_32[] = {
	{ CODING_NAME("cmova")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode57(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings57_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings58_32[] = {
	{ CODING_NAME("cmovae")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode58(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings58_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings59_32[] = {
	{ CODING_NAME("cmovb")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode59(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings59_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings60_32[] = {
	{ CODING_NAME("cmovbe")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode60(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings60_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings61_32[] = {
	{ CODING_NAME("cmovc")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode61(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings61_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings62_32[] = {
	{ CODING_NAME("cmove")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode62(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings62_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings63_32[] = {
	{ CODING_NAME("cmovg")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode63(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings63_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings64_32[] = {
	{ CODING_NAME("cmovge")  (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode64(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings64_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings65_32[] = {
	{ CODING_NAME("cmovl")  (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode65(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings65_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings66_32[] = {
	{ CODING_NAME("cmovle")  (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode66(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings66_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings67_32[] = {
	{ CODING_NAME("cmovna")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode67(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings67_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings68_32[] = {
	{ CODING_NAME("cmovnae")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode68(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings68_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings69_32[] = {
	{ CODING_NAME("cmovnb")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode69(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings69_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings70_32[] = {
	{ CODING_NAME("cmovnbe")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode70(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings70_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings71_32[] = {
	{ CODING_NAME("cmovnc")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode71(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings71_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings72_32[] = {
	{ CODING_NAME("cmovne")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode72(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings72_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings73_32[] = {
	{ CODING_NAME("cmovng")  (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode73(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings73_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings74_32[] = {
	{ CODING_NAME("cmovnge")  (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode74(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings74_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings75_32[] = {
	{ CODING_NAME("cmovnl")  (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode75(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings75_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings76_32[] = {
	{ CODING_NAME("cmovnle")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode76(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings76_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings77_32[] = {
	{ CODING_NAME("cmovno")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode77(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings77_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings78_32[] = {
	{ CODING_NAME("cmovnp")  (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode78(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings78_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings79_32[] = {
	{ CODING_NAME("cmovns")  (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode79(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings79_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings80_32[] = {
	{ CODING_NAME("cmovnz")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode80(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings80_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings81_32[] = {
	{ CODING_NAME("cmovo")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode81(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings81_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings82_32[] = {
	{ CODING_NAME("cmovp")  (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode82(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings82_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings83_32[] = {
	{ CODING_NAME("cmovpe")  (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode83(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings83_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings84_32[] = {
	{ CODING_NAME("cmovpo")  (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode84(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings84_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings85_32[] = {
	{ CODING_NAME("cmovs")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode85(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings85_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings86_32[] = {
	{ CODING_NAME("cmovz")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode86(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings86_32;
	asmError rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings87_12[] = {
	{ CODING_NAME("cmp")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings87_30[] = {
	{ CODING_NAME("cmp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 60, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings87_31[] = {
	{ CODING_NAME("cmp")  (Coding::Type)(Coding::valSpecified), 56, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode87(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings87_12;
	operand.values[30] = OpcodeCodings87_30;
	operand.values[31] = OpcodeCodings87_31;
	asmError rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
asmError x64Parser::Opcode88(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4233, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings89_13[] = {
	{ CODING_NAME("cmpsb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode89(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings89_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings90_13[] = {
	{ CODING_NAME("cmpsw")  Coding::stateFunc, 3 },
	{ CODING_NAME("cmpsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode90(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings90_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings91_13[] = {
	{ CODING_NAME("cmpsd")  Coding::stateFunc, 4 },
	{ CODING_NAME("cmpsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode91(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings91_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode92(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4501, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings93_30[] = {
	{ CODING_NAME("cmpxchg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cmpxchg")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 176, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode93(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings93_30;
	asmError rv = ParseOperands(tokenBranches4503, operand);
	return rv;
}
asmError x64Parser::Opcode94(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4524, operand);
	return rv;
}
asmError x64Parser::Opcode95(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4526, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings96_13[] = {
	{ CODING_NAME("cpuid")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode96(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings96_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
asmError x64Parser::Opcode97(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4529, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings98_13[] = {
	{ CODING_NAME("cwd")  Coding::stateFunc, 3 },
	{ CODING_NAME("cwd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode98(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings98_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings99_13[] = {
	{ CODING_NAME("cwde")  Coding::stateFunc, 4 },
	{ CODING_NAME("cwde")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode99(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings99_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings100_13[] = {
	{ CODING_NAME("daa")  Coding::stateFunc, 6 },
	{ CODING_NAME("daa")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 39, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode100(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings100_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings101_13[] = {
	{ CODING_NAME("das")  Coding::stateFunc, 6 },
	{ CODING_NAME("das")  (Coding::Type)(Coding::valSpecified), 47, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode101(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings101_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings102_12[] = {
	{ CODING_NAME("dec")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings102_13[] = {
	{ CODING_NAME("dec")  (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode102(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings102_12;
	operand.values[13] = OpcodeCodings102_13;
	asmError rv;
	{
		rv = Opcode6(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings103_12[] = {
	{ CODING_NAME("div")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode103(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings103_12;
	asmError rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
asmError x64Parser::Opcode104(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4537, operand);
	return rv;
}
asmError x64Parser::Opcode105(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4543, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings106_13[] = {
	{ CODING_NAME("f2xm1")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("f2xm1")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode106(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings106_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings107_13[] = {
	{ CODING_NAME("fabs")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fabs")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode107(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings107_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings108_12[] = {
	{ CODING_NAME("fadd")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings108_33[] = {
	{ CODING_NAME("fadd")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings108_30[] = {
	{ CODING_NAME("fadd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode108(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings108_12;
	operand.values[33] = OpcodeCodings108_33;
	operand.values[30] = OpcodeCodings108_30;
	asmError rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings109_12[] = {
	{ CODING_NAME("faddp")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings109_13[] = {
	{ CODING_NAME("faddp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode109(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings109_12;
	operand.values[13] = OpcodeCodings109_13;
	asmError rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings110_12[] = {
	{ CODING_NAME("fbld")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings110_13[] = {
	{ CODING_NAME("fbld")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode110(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings110_12;
	operand.values[13] = OpcodeCodings110_13;
	asmError rv;
	{
		rv = Opcode11(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings111_12[] = {
	{ CODING_NAME("fbstp")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings111_13[] = {
	{ CODING_NAME("fbstp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode111(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings111_12;
	operand.values[13] = OpcodeCodings111_13;
	asmError rv;
	{
		rv = Opcode11(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings112_13[] = {
	{ CODING_NAME("fchs")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fchs")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode112(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings112_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings113_13[] = {
	{ CODING_NAME("fclex")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("fclex")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("fclex")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode113(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings113_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings114_13[] = {
	{ CODING_NAME("fnclex")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("fnclex")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode114(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings114_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings115_12[] = {
	{ CODING_NAME("fcmovb")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings115_30[] = {
	{ CODING_NAME("fcmovb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode115(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings115_12;
	operand.values[30] = OpcodeCodings115_30;
	asmError rv = ParseOperands(tokenBranches4556, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings116_12[] = {
	{ CODING_NAME("fcmovbe")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings116_30[] = {
	{ CODING_NAME("fcmovbe")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode116(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings116_12;
	operand.values[30] = OpcodeCodings116_30;
	asmError rv = ParseOperands(tokenBranches4560, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings117_12[] = {
	{ CODING_NAME("fcmove")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings117_30[] = {
	{ CODING_NAME("fcmove")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode117(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings117_12;
	operand.values[30] = OpcodeCodings117_30;
	asmError rv = ParseOperands(tokenBranches4564, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings118_12[] = {
	{ CODING_NAME("fcmovnb")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings118_30[] = {
	{ CODING_NAME("fcmovnb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode118(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings118_12;
	operand.values[30] = OpcodeCodings118_30;
	asmError rv = ParseOperands(tokenBranches4568, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings119_12[] = {
	{ CODING_NAME("fcmovnbe")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings119_30[] = {
	{ CODING_NAME("fcmovnbe")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode119(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings119_12;
	operand.values[30] = OpcodeCodings119_30;
	asmError rv = ParseOperands(tokenBranches4572, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings120_12[] = {
	{ CODING_NAME("fcmovne")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings120_30[] = {
	{ CODING_NAME("fcmovne")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode120(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings120_12;
	operand.values[30] = OpcodeCodings120_30;
	asmError rv = ParseOperands(tokenBranches4576, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings121_12[] = {
	{ CODING_NAME("fcmovnu")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings121_30[] = {
	{ CODING_NAME("fcmovnu")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode121(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings121_12;
	operand.values[30] = OpcodeCodings121_30;
	asmError rv = ParseOperands(tokenBranches4580, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings122_12[] = {
	{ CODING_NAME("fcmovu")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings122_30[] = {
	{ CODING_NAME("fcmovu")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode122(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings122_12;
	operand.values[30] = OpcodeCodings122_30;
	asmError rv = ParseOperands(tokenBranches4584, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings123_12[] = {
	{ CODING_NAME("fcom")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings123_30[] = {
	{ CODING_NAME("fcom")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode123(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings123_12;
	operand.values[30] = OpcodeCodings123_30;
	asmError rv = ParseOperands(tokenBranches4588, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings124_12[] = {
	{ CODING_NAME("fcomi")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings124_30[] = {
	{ CODING_NAME("fcomi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode124(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings124_12;
	operand.values[30] = OpcodeCodings124_30;
	asmError rv = ParseOperands(tokenBranches4597, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings125_12[] = {
	{ CODING_NAME("fcomip")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings125_30[] = {
	{ CODING_NAME("fcomip")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode125(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings125_12;
	operand.values[30] = OpcodeCodings125_30;
	asmError rv = ParseOperands(tokenBranches4601, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings126_12[] = {
	{ CODING_NAME("fcomp")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings126_30[] = {
	{ CODING_NAME("fcomp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode126(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings126_12;
	operand.values[30] = OpcodeCodings126_30;
	asmError rv = ParseOperands(tokenBranches4605, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings127_13[] = {
	{ CODING_NAME("fcompp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ CODING_NAME("fcompp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode127(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings127_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings128_13[] = {
	{ CODING_NAME("fcos")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fcos")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode128(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings128_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings129_13[] = {
	{ CODING_NAME("fdecstp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fdecstp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode129(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings129_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings130_13[] = {
	{ CODING_NAME("fdisi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("fdisi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("fdisi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode130(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings130_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings131_12[] = {
	{ CODING_NAME("fdiv")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings131_33[] = {
	{ CODING_NAME("fdiv")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings131_30[] = {
	{ CODING_NAME("fdiv")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode131(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings131_12;
	operand.values[33] = OpcodeCodings131_33;
	operand.values[30] = OpcodeCodings131_30;
	asmError rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings132_12[] = {
	{ CODING_NAME("fdivp")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings132_13[] = {
	{ CODING_NAME("fdivp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode132(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings132_12;
	operand.values[13] = OpcodeCodings132_13;
	asmError rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings133_12[] = {
	{ CODING_NAME("fdivr")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings133_33[] = {
	{ CODING_NAME("fdivr")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings133_30[] = {
	{ CODING_NAME("fdivr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode133(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings133_12;
	operand.values[33] = OpcodeCodings133_33;
	operand.values[30] = OpcodeCodings133_30;
	asmError rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings134_12[] = {
	{ CODING_NAME("fdivrp")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings134_13[] = {
	{ CODING_NAME("fdivrp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode134(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings134_12;
	operand.values[13] = OpcodeCodings134_13;
	asmError rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings135_13[] = {
	{ CODING_NAME("feni")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("feni")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("feni")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode135(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings135_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode136(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4620, operand);
	return rv;
}
asmError x64Parser::Opcode137(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4622, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings138_12[] = {
	{ CODING_NAME("fiadd")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings138_30[] = {
	{ CODING_NAME("fiadd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode138(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings138_12;
	operand.values[30] = OpcodeCodings138_30;
	asmError rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings139_12[] = {
	{ CODING_NAME("ficom")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings139_30[] = {
	{ CODING_NAME("ficom")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode139(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings139_12;
	operand.values[30] = OpcodeCodings139_30;
	asmError rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings140_12[] = {
	{ CODING_NAME("ficomp")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings140_30[] = {
	{ CODING_NAME("ficomp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode140(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings140_12;
	operand.values[30] = OpcodeCodings140_30;
	asmError rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings141_12[] = {
	{ CODING_NAME("fidiv")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings141_30[] = {
	{ CODING_NAME("fidiv")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode141(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings141_12;
	operand.values[30] = OpcodeCodings141_30;
	asmError rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings142_12[] = {
	{ CODING_NAME("fidivr")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings142_30[] = {
	{ CODING_NAME("fidivr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode142(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings142_12;
	operand.values[30] = OpcodeCodings142_30;
	asmError rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings143_12[] = {
	{ CODING_NAME("fild")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings143_30[] = {
	{ CODING_NAME("fild")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode143(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings143_12;
	operand.values[30] = OpcodeCodings143_30;
	asmError rv = ParseOperands(tokenBranches4629, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings144_12[] = {
	{ CODING_NAME("fimul")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings144_30[] = {
	{ CODING_NAME("fimul")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode144(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings144_12;
	operand.values[30] = OpcodeCodings144_30;
	asmError rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings145_13[] = {
	{ CODING_NAME("fincstp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fincstp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode145(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings145_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings146_13[] = {
	{ CODING_NAME("finit")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("finit")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("finit")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode146(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings146_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings147_13[] = {
	{ CODING_NAME("fninit")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("fninit")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode147(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings147_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings148_12[] = {
	{ CODING_NAME("fist")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings148_30[] = {
	{ CODING_NAME("fist")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode148(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings148_12;
	operand.values[30] = OpcodeCodings148_30;
	asmError rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings149_12[] = {
	{ CODING_NAME("fistp")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings149_30[] = {
	{ CODING_NAME("fistp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode149(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings149_12;
	operand.values[30] = OpcodeCodings149_30;
	asmError rv = ParseOperands(tokenBranches4637, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings150_12[] = {
	{ CODING_NAME("fisub")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings150_30[] = {
	{ CODING_NAME("fisub")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode150(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings150_12;
	operand.values[30] = OpcodeCodings150_30;
	asmError rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings151_12[] = {
	{ CODING_NAME("fisubr")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings151_30[] = {
	{ CODING_NAME("fisubr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode151(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings151_12;
	operand.values[30] = OpcodeCodings151_30;
	asmError rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
asmError x64Parser::Opcode152(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4642, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings153_13[] = {
	{ CODING_NAME("fld1")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fld1")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode153(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings153_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode154(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4651, operand);
	return rv;
}
asmError x64Parser::Opcode155(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4654, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings156_13[] = {
	{ CODING_NAME("fldl2e")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fldl2e")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode156(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings156_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings157_13[] = {
	{ CODING_NAME("fldl2t")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fldl2t")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode157(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings157_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings158_13[] = {
	{ CODING_NAME("fldlg2")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fldlg2")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode158(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings158_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings159_13[] = {
	{ CODING_NAME("fldln2")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fldln2")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode159(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings159_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings160_13[] = {
	{ CODING_NAME("fldpi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fldpi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode160(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings160_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings161_13[] = {
	{ CODING_NAME("fldz")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fldz")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode161(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings161_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings162_12[] = {
	{ CODING_NAME("fmul")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings162_33[] = {
	{ CODING_NAME("fmul")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings162_30[] = {
	{ CODING_NAME("fmul")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode162(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings162_12;
	operand.values[33] = OpcodeCodings162_33;
	operand.values[30] = OpcodeCodings162_30;
	asmError rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings163_12[] = {
	{ CODING_NAME("fmulp")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings163_13[] = {
	{ CODING_NAME("fmulp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode163(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings163_12;
	operand.values[13] = OpcodeCodings163_13;
	asmError rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings164_13[] = {
	{ CODING_NAME("fnop")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fnop")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode164(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings164_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode165(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4665, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings166_13[] = {
	{ CODING_NAME("fpatan")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fpatan")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode166(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings166_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings167_13[] = {
	{ CODING_NAME("fprem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fprem")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode167(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings167_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings168_13[] = {
	{ CODING_NAME("fprem1")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fprem1")  (Coding::Type)(Coding::valSpecified), 245, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode168(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings168_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings169_13[] = {
	{ CODING_NAME("fptan")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fptan")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode169(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings169_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings170_13[] = {
	{ CODING_NAME("frndint")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("frndint")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode170(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings170_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode171(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4672, operand);
	return rv;
}
asmError x64Parser::Opcode172(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4674, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings173_13[] = {
	{ CODING_NAME("fscale")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fscale")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode173(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings173_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings174_13[] = {
	{ CODING_NAME("fsetpm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("fsetpm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode174(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings174_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings175_13[] = {
	{ CODING_NAME("fsin")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fsin")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode175(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings175_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings176_13[] = {
	{ CODING_NAME("fsincos")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fsincos")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode176(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings176_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings177_13[] = {
	{ CODING_NAME("fsqrt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fsqrt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode177(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings177_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode178(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4681, operand);
	return rv;
}
asmError x64Parser::Opcode179(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4687, operand);
	return rv;
}
asmError x64Parser::Opcode180(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4690, operand);
	return rv;
}
asmError x64Parser::Opcode181(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4693, operand);
	return rv;
}
asmError x64Parser::Opcode182(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4695, operand);
	return rv;
}
asmError x64Parser::Opcode183(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4697, operand);
	return rv;
}
asmError x64Parser::Opcode184(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4705, operand);
	return rv;
}
asmError x64Parser::Opcode185(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4709, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings186_12[] = {
	{ CODING_NAME("fsub")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings186_33[] = {
	{ CODING_NAME("fsub")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings186_30[] = {
	{ CODING_NAME("fsub")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode186(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings186_12;
	operand.values[33] = OpcodeCodings186_33;
	operand.values[30] = OpcodeCodings186_30;
	asmError rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings187_12[] = {
	{ CODING_NAME("fsubp")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings187_13[] = {
	{ CODING_NAME("fsubp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode187(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings187_12;
	operand.values[13] = OpcodeCodings187_13;
	asmError rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings188_12[] = {
	{ CODING_NAME("fsubr")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings188_33[] = {
	{ CODING_NAME("fsubr")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings188_30[] = {
	{ CODING_NAME("fsubr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode188(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings188_12;
	operand.values[33] = OpcodeCodings188_33;
	operand.values[30] = OpcodeCodings188_30;
	asmError rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings189_12[] = {
	{ CODING_NAME("fsubrp")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings189_13[] = {
	{ CODING_NAME("fsubrp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode189(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings189_12;
	operand.values[13] = OpcodeCodings189_13;
	asmError rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings190_13[] = {
	{ CODING_NAME("ftst")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("ftst")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode190(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings190_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings191_12[] = {
	{ CODING_NAME("fucom")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings191_13[] = {
	{ CODING_NAME("fucom")  (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode191(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings191_12;
	operand.values[13] = OpcodeCodings191_13;
	asmError rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings192_12[] = {
	{ CODING_NAME("fucomi")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings192_30[] = {
	{ CODING_NAME("fucomi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode192(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings192_12;
	operand.values[30] = OpcodeCodings192_30;
	asmError rv = ParseOperands(tokenBranches4719, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings193_12[] = {
	{ CODING_NAME("fucomip")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings193_30[] = {
	{ CODING_NAME("fucomip")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode193(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings193_12;
	operand.values[30] = OpcodeCodings193_30;
	asmError rv = ParseOperands(tokenBranches4723, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings194_12[] = {
	{ CODING_NAME("fucomp")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings194_13[] = {
	{ CODING_NAME("fucomp")  (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode194(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings194_12;
	operand.values[13] = OpcodeCodings194_13;
	asmError rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings195_13[] = {
	{ CODING_NAME("fucompp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("fucompp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode195(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings195_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings196_13[] = {
	{ CODING_NAME("fwait")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode196(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings196_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings197_13[] = {
	{ CODING_NAME("fxam")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fxam")  (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode197(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings197_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings198_12[] = {
	{ CODING_NAME("fxch")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings198_13[] = {
	{ CODING_NAME("fxch")  (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode198(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings198_12;
	operand.values[13] = OpcodeCodings198_13;
	asmError rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings199_12[] = {
	{ CODING_NAME("fxch4")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings199_30[] = {
	{ CODING_NAME("fxch4")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode199(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings199_12;
	operand.values[30] = OpcodeCodings199_30;
	asmError rv = ParseOperands(tokenBranches4732, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings200_12[] = {
	{ CODING_NAME("fxch7")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings200_30[] = {
	{ CODING_NAME("fxch7")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode200(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings200_12;
	operand.values[30] = OpcodeCodings200_30;
	asmError rv = ParseOperands(tokenBranches4736, operand);
	return rv;
}
asmError x64Parser::Opcode201(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4740, operand);
	return rv;
}
asmError x64Parser::Opcode202(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4742, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings203_13[] = {
	{ CODING_NAME("fxtract")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fxtract")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode203(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings203_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings204_13[] = {
	{ CODING_NAME("fyl2x")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fyl2x")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode204(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings204_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings205_13[] = {
	{ CODING_NAME("fyl2xp1")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("fyl2xp1")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode205(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings205_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings206_13[] = {
	{ CODING_NAME("hlt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode206(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings206_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings207_13[] = {
	{ CODING_NAME("icebp")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode207(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings207_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings208_12[] = {
	{ CODING_NAME("idiv")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode208(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings208_12;
	asmError rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
asmError x64Parser::Opcode209(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4750, operand);
	return rv;
}
asmError x64Parser::Opcode210(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4826, operand);
	return rv;
}
asmError x64Parser::Opcode211(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4855, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings212_13[] = {
	{ CODING_NAME("insb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode212(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings212_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings213_13[] = {
	{ CODING_NAME("insw")  Coding::stateFunc, 3 },
	{ CODING_NAME("insw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode213(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings213_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings214_13[] = {
	{ CODING_NAME("insd")  Coding::stateFunc, 4 },
	{ CODING_NAME("insd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode214(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings214_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings215_12[] = {
	{ CODING_NAME("inc")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings215_13[] = {
	{ CODING_NAME("inc")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode215(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings215_12;
	operand.values[13] = OpcodeCodings215_13;
	asmError rv;
	{
		rv = Opcode6(operand);
	}
	return rv;
}
asmError x64Parser::Opcode216(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches4998, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings217_13[] = {
	{ CODING_NAME("int1")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode217(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings217_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings218_13[] = {
	{ CODING_NAME("int3")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 204, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode218(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings218_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings219_13[] = {
	{ CODING_NAME("into")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 206, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode219(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings219_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings220_13[] = {
	{ CODING_NAME("invd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode220(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings220_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
asmError x64Parser::Opcode221(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5005, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings222_13[] = {
	{ CODING_NAME("iret")  (Coding::Type)(Coding::valSpecified), 207, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode222(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings222_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings223_13[] = {
	{ CODING_NAME("iretw")  Coding::stateFunc, 3 },
	{ CODING_NAME("iretw")  (Coding::Type)(Coding::valSpecified), 207, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode223(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings223_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode224(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5009, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings225_13[] = {
	{ CODING_NAME("iretq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("iretq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 207, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode225(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings225_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings226_32[] = {
	{ CODING_NAME("ja")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode226(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings226_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings227_32[] = {
	{ CODING_NAME("jae")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode227(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings227_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings228_32[] = {
	{ CODING_NAME("jb")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode228(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings228_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings229_32[] = {
	{ CODING_NAME("jbe")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode229(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings229_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings230_32[] = {
	{ CODING_NAME("jc")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode230(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings230_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
asmError x64Parser::Opcode231(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5017, operand);
	return rv;
}
asmError x64Parser::Opcode232(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5019, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings233_32[] = {
	{ CODING_NAME("je")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode233(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings233_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings234_32[] = {
	{ CODING_NAME("jg")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode234(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings234_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings235_32[] = {
	{ CODING_NAME("jge")  (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode235(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings235_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings236_32[] = {
	{ CODING_NAME("jl")  (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode236(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings236_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings237_32[] = {
	{ CODING_NAME("jle")  (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode237(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings237_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
asmError x64Parser::Opcode238(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5026, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings239_32[] = {
	{ CODING_NAME("jna")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode239(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings239_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings240_32[] = {
	{ CODING_NAME("jnae")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode240(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings240_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings241_32[] = {
	{ CODING_NAME("jnb")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode241(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings241_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings242_32[] = {
	{ CODING_NAME("jnbe")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode242(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings242_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings243_32[] = {
	{ CODING_NAME("jnc")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode243(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings243_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings244_32[] = {
	{ CODING_NAME("jne")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode244(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings244_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings245_32[] = {
	{ CODING_NAME("jng")  (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode245(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings245_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings246_32[] = {
	{ CODING_NAME("jnge")  (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode246(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings246_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings247_32[] = {
	{ CODING_NAME("jnl")  (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode247(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings247_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings248_32[] = {
	{ CODING_NAME("jnle")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode248(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings248_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings249_32[] = {
	{ CODING_NAME("jno")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode249(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings249_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings250_32[] = {
	{ CODING_NAME("jnp")  (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode250(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings250_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings251_32[] = {
	{ CODING_NAME("jns")  (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode251(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings251_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings252_32[] = {
	{ CODING_NAME("jnz")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode252(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings252_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings253_32[] = {
	{ CODING_NAME("jo")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode253(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings253_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings254_32[] = {
	{ CODING_NAME("jp")  (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode254(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings254_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings255_32[] = {
	{ CODING_NAME("jpe")  (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode255(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings255_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings256_32[] = {
	{ CODING_NAME("jpo")  (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode256(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings256_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings257_32[] = {
	{ CODING_NAME("js")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode257(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings257_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings258_32[] = {
	{ CODING_NAME("jz")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode258(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings258_32;
	asmError rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings259_13[] = {
	{ CODING_NAME("lahf")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 159, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode259(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings259_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings260_30[] = {
	{ CODING_NAME("lar")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lar")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode260(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings260_30;
	asmError rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings261_30[] = {
	{ CODING_NAME("lds")  Coding::stateFunc, 6 },
	{ CODING_NAME("lds")  (Coding::Type)(Coding::valSpecified), 197, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode261(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings261_30;
	asmError rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings262_30[] = {
	{ CODING_NAME("lea")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 141, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode262(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings262_30;
	asmError rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings263_13[] = {
	{ CODING_NAME("leave")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 201, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode263(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings263_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings264_30[] = {
	{ CODING_NAME("les")  Coding::stateFunc, 6 },
	{ CODING_NAME("les")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode264(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings264_30;
	asmError rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings265_13[] = {
	{ CODING_NAME("lfence")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lfence")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("lfence")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode265(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings265_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings266_30[] = {
	{ CODING_NAME("lfs")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lfs")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 180, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode266(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings266_30;
	asmError rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings267_12[] = {
	{ CODING_NAME("lgdt")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings267_13[] = {
	{ CODING_NAME("lgdt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lgdt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode267(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings267_12;
	operand.values[13] = OpcodeCodings267_13;
	asmError rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings268_30[] = {
	{ CODING_NAME("lgs")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lgs")  (Coding::Type)(Coding::valSpecified), 181, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode268(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings268_30;
	asmError rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings269_12[] = {
	{ CODING_NAME("lidt")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings269_13[] = {
	{ CODING_NAME("lidt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lidt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode269(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings269_12;
	operand.values[13] = OpcodeCodings269_13;
	asmError rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings270_12[] = {
	{ CODING_NAME("lldt")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings270_13[] = {
	{ CODING_NAME("lldt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lldt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode270(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings270_12;
	operand.values[13] = OpcodeCodings270_13;
	asmError rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings271_12[] = {
	{ CODING_NAME("lmsw")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings271_13[] = {
	{ CODING_NAME("lmsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lmsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode271(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings271_12;
	operand.values[13] = OpcodeCodings271_13;
	asmError rv = ParseOperands(tokenBranches5097, operand);
	return rv;
}
asmError x64Parser::Opcode272(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5099, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings273_13[] = {
	{ CODING_NAME("lodsb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode273(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings273_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings274_13[] = {
	{ CODING_NAME("lodsw")  Coding::stateFunc, 3 },
	{ CODING_NAME("lodsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode274(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings274_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings275_13[] = {
	{ CODING_NAME("lodsd")  Coding::stateFunc, 4 },
	{ CODING_NAME("lodsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode275(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings275_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode276(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5227, operand);
	return rv;
}
asmError x64Parser::Opcode277(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5229, operand);
	return rv;
}
asmError x64Parser::Opcode278(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5231, operand);
	return rv;
}
asmError x64Parser::Opcode279(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5233, operand);
	return rv;
}
asmError x64Parser::Opcode280(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5235, operand);
	return rv;
}
asmError x64Parser::Opcode281(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5237, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings282_30[] = {
	{ CODING_NAME("lsl")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lsl")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode282(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings282_30;
	asmError rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings283_30[] = {
	{ CODING_NAME("lss")  Coding::stateFunc, 6 },
	{ CODING_NAME("lss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 178, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode283(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings283_30;
	asmError rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings284_12[] = {
	{ CODING_NAME("ltr")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings284_13[] = {
	{ CODING_NAME("ltr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("ltr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode284(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings284_12;
	operand.values[13] = OpcodeCodings284_13;
	asmError rv = ParseOperands(tokenBranches5241, operand);
	if (rv == AERR_NONE)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
asmError x64Parser::Opcode285(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5243, operand);
	return rv;
}
asmError x64Parser::Opcode286(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5552, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings287_30[] = {
	{ CODING_NAME("movbe")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("movbe")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 56, 8, -1, 0, 0 }, 
	{ CODING_NAME("movbe")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode287(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings287_30;
	asmError rv = ParseOperands(tokenBranches5815, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings288_13[] = {
	{ CODING_NAME("movsb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode288(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings288_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings289_13[] = {
	{ CODING_NAME("movsw")  Coding::stateFunc, 3 },
	{ CODING_NAME("movsw")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode289(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings289_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode290(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5842, operand);
	return rv;
}
asmError x64Parser::Opcode291(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5850, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings292_30[] = {
	{ CODING_NAME("movsx")  (Coding::Type)(Coding::valSpecified), 190, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode292(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings292_30;
	asmError rv;
	{
		rv = Opcode15(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings293_30[] = {
	{ CODING_NAME("movzx")  (Coding::Type)(Coding::valSpecified), 182, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode293(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings293_30;
	asmError rv;
	{
		rv = Opcode15(operand);
	}
	return rv;
}
asmError x64Parser::Opcode294(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5854, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings295_12[] = {
	{ CODING_NAME("mul")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode295(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings295_12;
	asmError rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings296_12[] = {
	{ CODING_NAME("neg")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode296(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings296_12;
	asmError rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings297_13[] = {
	{ CODING_NAME("nop")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 144, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode297(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings297_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings298_12[] = {
	{ CODING_NAME("not")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode298(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings298_12;
	asmError rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings299_12[] = {
	{ CODING_NAME("or")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings299_30[] = {
	{ CODING_NAME("or")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 12, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings299_31[] = {
	{ CODING_NAME("or")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode299(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings299_12;
	operand.values[30] = OpcodeCodings299_30;
	operand.values[31] = OpcodeCodings299_31;
	asmError rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
asmError x64Parser::Opcode300(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5874, operand);
	return rv;
}
asmError x64Parser::Opcode301(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches5903, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings302_13[] = {
	{ CODING_NAME("outsb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode302(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings302_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings303_13[] = {
	{ CODING_NAME("outsw")  Coding::stateFunc, 3 },
	{ CODING_NAME("outsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode303(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings303_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings304_13[] = {
	{ CODING_NAME("outsd")  Coding::stateFunc, 4 },
	{ CODING_NAME("outsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode304(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings304_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode305(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6045, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings306_13[] = {
	{ CODING_NAME("popa")  Coding::stateFunc, 6 },
	{ CODING_NAME("popa")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode306(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings306_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings307_13[] = {
	{ CODING_NAME("popaw")  Coding::stateFunc, 6 },
	{ CODING_NAME("popaw")  Coding::stateFunc, 3 },
	{ CODING_NAME("popaw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode307(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings307_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings308_13[] = {
	{ CODING_NAME("popad")  Coding::stateFunc, 6 },
	{ CODING_NAME("popad")  Coding::stateFunc, 4 },
	{ CODING_NAME("popad")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode308(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings308_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings309_17[] = {
	{ CODING_NAME("popcnt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings309_30[] = {
	{ CODING_NAME("popcnt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("popcnt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 184, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode309(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings309_17;
	operand.values[30] = OpcodeCodings309_30;
	asmError rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings310_13[] = {
	{ CODING_NAME("popf")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode310(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings310_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings311_13[] = {
	{ CODING_NAME("popfw")  Coding::stateFunc, 3 },
	{ CODING_NAME("popfw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode311(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings311_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings312_13[] = {
	{ CODING_NAME("popfd")  Coding::stateFunc, 4 },
	{ CODING_NAME("popfd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode312(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings312_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings313_13[] = {
	{ CODING_NAME("popfq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode313(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings313_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode314(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6066, operand);
	return rv;
}
asmError x64Parser::Opcode315(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6068, operand);
	return rv;
}
asmError x64Parser::Opcode316(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6070, operand);
	return rv;
}
asmError x64Parser::Opcode317(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6072, operand);
	return rv;
}
asmError x64Parser::Opcode318(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6074, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings319_13[] = {
	{ CODING_NAME("pusha")  Coding::stateFunc, 6 },
	{ CODING_NAME("pusha")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode319(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings319_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings320_13[] = {
	{ CODING_NAME("pushaw")  Coding::stateFunc, 6 },
	{ CODING_NAME("pushaw")  Coding::stateFunc, 3 },
	{ CODING_NAME("pushaw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode320(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings320_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings321_13[] = {
	{ CODING_NAME("pushad")  Coding::stateFunc, 6 },
	{ CODING_NAME("pushad")  Coding::stateFunc, 4 },
	{ CODING_NAME("pushad")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode321(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings321_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings322_13[] = {
	{ CODING_NAME("pushf")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode322(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings322_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings323_13[] = {
	{ CODING_NAME("pushfw")  Coding::stateFunc, 3 },
	{ CODING_NAME("pushfw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode323(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings323_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings324_13[] = {
	{ CODING_NAME("pushfd")  Coding::stateFunc, 4 },
	{ CODING_NAME("pushfd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode324(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings324_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings325_13[] = {
	{ CODING_NAME("pushfq")  (Coding::Type)(Coding::valSpecified), 156, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode325(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings325_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings326_12[] = {
	{ CODING_NAME("rcl")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode326(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings326_12;
	asmError rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings327_12[] = {
	{ CODING_NAME("rcr")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode327(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings327_12;
	asmError rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings328_13[] = {
	{ CODING_NAME("rdmsr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 50, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode328(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings328_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings329_13[] = {
	{ CODING_NAME("rdpmc")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 51, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode329(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings329_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings330_13[] = {
	{ CODING_NAME("rdtsc")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 49, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode330(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings330_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
asmError x64Parser::Opcode331(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6110, operand);
	return rv;
}
asmError x64Parser::Opcode332(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6113, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings333_12[] = {
	{ CODING_NAME("rol")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode333(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings333_12;
	asmError rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings334_12[] = {
	{ CODING_NAME("ror")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode334(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings334_12;
	asmError rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings335_13[] = {
	{ CODING_NAME("rsm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode335(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings335_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings336_13[] = {
	{ CODING_NAME("sahf")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 158, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode336(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings336_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings337_12[] = {
	{ CODING_NAME("sal")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode337(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings337_12;
	asmError rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings338_12[] = {
	{ CODING_NAME("sar")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode338(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings338_12;
	asmError rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings339_12[] = {
	{ CODING_NAME("sbb")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings339_30[] = {
	{ CODING_NAME("sbb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 28, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings339_31[] = {
	{ CODING_NAME("sbb")  (Coding::Type)(Coding::valSpecified), 24, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode339(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings339_12;
	operand.values[30] = OpcodeCodings339_30;
	operand.values[31] = OpcodeCodings339_31;
	asmError rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
asmError x64Parser::Opcode340(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6123, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings341_13[] = {
	{ CODING_NAME("scasb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode341(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings341_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings342_13[] = {
	{ CODING_NAME("scasw")  Coding::stateFunc, 3 },
	{ CODING_NAME("scasw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode342(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings342_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings343_13[] = {
	{ CODING_NAME("scasd")  Coding::stateFunc, 4 },
	{ CODING_NAME("scasd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode343(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings343_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode344(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6251, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings345_32[] = {
	{ CODING_NAME("seta")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode345(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings345_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings346_32[] = {
	{ CODING_NAME("setae")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode346(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings346_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings347_32[] = {
	{ CODING_NAME("setb")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode347(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings347_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings348_32[] = {
	{ CODING_NAME("setbe")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode348(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings348_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings349_32[] = {
	{ CODING_NAME("setc")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode349(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings349_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings350_32[] = {
	{ CODING_NAME("sete")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode350(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings350_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings351_32[] = {
	{ CODING_NAME("setg")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode351(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings351_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings352_32[] = {
	{ CODING_NAME("setge")  (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode352(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings352_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings353_32[] = {
	{ CODING_NAME("setl")  (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode353(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings353_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings354_32[] = {
	{ CODING_NAME("setle")  (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode354(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings354_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings355_32[] = {
	{ CODING_NAME("setna")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode355(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings355_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings356_32[] = {
	{ CODING_NAME("setnae")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode356(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings356_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings357_32[] = {
	{ CODING_NAME("setnb")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode357(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings357_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings358_32[] = {
	{ CODING_NAME("setnbe")  (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode358(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings358_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings359_32[] = {
	{ CODING_NAME("setnc")  (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode359(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings359_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings360_32[] = {
	{ CODING_NAME("setne")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode360(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings360_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings361_32[] = {
	{ CODING_NAME("setng")  (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode361(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings361_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings362_32[] = {
	{ CODING_NAME("setnge")  (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode362(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings362_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings363_32[] = {
	{ CODING_NAME("setnl")  (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode363(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings363_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings364_32[] = {
	{ CODING_NAME("setnle")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode364(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings364_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings365_32[] = {
	{ CODING_NAME("setno")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode365(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings365_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings366_32[] = {
	{ CODING_NAME("setnp")  (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode366(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings366_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings367_32[] = {
	{ CODING_NAME("setns")  (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode367(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings367_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings368_32[] = {
	{ CODING_NAME("setnz")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode368(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings368_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings369_32[] = {
	{ CODING_NAME("seto")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode369(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings369_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings370_32[] = {
	{ CODING_NAME("setp")  (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode370(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings370_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings371_32[] = {
	{ CODING_NAME("setpe")  (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode371(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings371_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings372_32[] = {
	{ CODING_NAME("setpo")  (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode372(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings372_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings373_32[] = {
	{ CODING_NAME("sets")  (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode373(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings373_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings374_32[] = {
	{ CODING_NAME("setz")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode374(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings374_32;
	asmError rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings375_13[] = {
	{ CODING_NAME("sfence")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("sfence")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("sfence")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode375(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings375_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings376_12[] = {
	{ CODING_NAME("shl")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode376(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings376_12;
	asmError rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings377_30[] = {
	{ CODING_NAME("shld")  (Coding::Type)(Coding::valSpecified), 164, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode377(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings377_30;
	asmError rv;
	{
		rv = Opcode17(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings378_12[] = {
	{ CODING_NAME("shr")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode378(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings378_12;
	asmError rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings379_30[] = {
	{ CODING_NAME("shrd")  (Coding::Type)(Coding::valSpecified), 172, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode379(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings379_30;
	asmError rv;
	{
		rv = Opcode17(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings380_12[] = {
	{ CODING_NAME("sidt")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings380_13[] = {
	{ CODING_NAME("sidt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("sidt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode380(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings380_12;
	operand.values[13] = OpcodeCodings380_13;
	asmError rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings381_12[] = {
	{ CODING_NAME("sldt")  (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings381_13[] = {
	{ CODING_NAME("sldt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("sldt")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode381(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings381_12;
	operand.values[13] = OpcodeCodings381_13;
	asmError rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings382_12[] = {
	{ CODING_NAME("smsw")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings382_13[] = {
	{ CODING_NAME("smsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("smsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode382(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings382_12;
	operand.values[13] = OpcodeCodings382_13;
	asmError rv = ParseOperands(tokenBranches6290, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings383_13[] = {
	{ CODING_NAME("stc")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode383(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings383_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings384_13[] = {
	{ CODING_NAME("std")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode384(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings384_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings385_13[] = {
	{ CODING_NAME("sti")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode385(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings385_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode386(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6295, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings387_13[] = {
	{ CODING_NAME("stosb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode387(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings387_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings388_13[] = {
	{ CODING_NAME("stosw")  Coding::stateFunc, 3 },
	{ CODING_NAME("stosw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode388(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings388_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings389_13[] = {
	{ CODING_NAME("stosd")  Coding::stateFunc, 4 },
	{ CODING_NAME("stosd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode389(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings389_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
asmError x64Parser::Opcode390(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6423, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings391_12[] = {
	{ CODING_NAME("str")  (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings391_13[] = {
	{ CODING_NAME("str")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("str")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode391(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings391_12;
	operand.values[13] = OpcodeCodings391_13;
	asmError rv = ParseOperands(tokenBranches6425, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings392_12[] = {
	{ CODING_NAME("sub")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings392_30[] = {
	{ CODING_NAME("sub")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings392_31[] = {
	{ CODING_NAME("sub")  (Coding::Type)(Coding::valSpecified), 40, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode392(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings392_12;
	operand.values[30] = OpcodeCodings392_30;
	operand.values[31] = OpcodeCodings392_31;
	asmError rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings393_13[] = {
	{ CODING_NAME("syscall")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode393(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings393_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings394_13[] = {
	{ CODING_NAME("sysenter")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode394(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings394_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings395_13[] = {
	{ CODING_NAME("sysexit")  (Coding::Type)(Coding::valSpecified), 53, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode395(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings395_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings396_13[] = {
	{ CODING_NAME("sysret")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode396(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings396_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
asmError x64Parser::Opcode397(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6434, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings398_13[] = {
	{ CODING_NAME("ud2")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode398(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings398_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings399_12[] = {
	{ CODING_NAME("verr")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings399_13[] = {
	{ CODING_NAME("verr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("verr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode399(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings399_12;
	operand.values[13] = OpcodeCodings399_13;
	asmError rv = ParseOperands(tokenBranches6528, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings400_12[] = {
	{ CODING_NAME("verw")  (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings400_13[] = {
	{ CODING_NAME("verw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("verw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode400(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings400_12;
	operand.values[13] = OpcodeCodings400_13;
	asmError rv = ParseOperands(tokenBranches6530, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings401_13[] = {
	{ CODING_NAME("wait")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode401(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings401_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings402_13[] = {
	{ CODING_NAME("wbinvd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode402(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings402_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings403_13[] = {
	{ CODING_NAME("wrmsr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 48, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode403(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings403_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
asmError x64Parser::Opcode404(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6535, operand);
	return rv;
}
asmError x64Parser::Opcode405(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6556, operand);
	return rv;
}
asmError x64Parser::Opcode406(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6615, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings407_13[] = {
	{ CODING_NAME("xlatb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode407(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings407_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings408_12[] = {
	{ CODING_NAME("xor")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings408_30[] = {
	{ CODING_NAME("xor")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings408_31[] = {
	{ CODING_NAME("xor")  (Coding::Type)(Coding::valSpecified), 48, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode408(x64Operand &operand)
{
	operand.values[12] = OpcodeCodings408_12;
	operand.values[30] = OpcodeCodings408_30;
	operand.values[31] = OpcodeCodings408_31;
	asmError rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
asmError x64Parser::Opcode409(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6655, operand);
	return rv;
}
asmError x64Parser::Opcode410(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6657, operand);
	return rv;
}
asmError x64Parser::Opcode411(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6659, operand);
	return rv;
}
asmError x64Parser::Opcode412(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6661, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings413_13[] = {
	{ CODING_NAME("xsetbv")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("xsetbv")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode413(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings413_13;
	asmError rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings414_17[] = {
	{ CODING_NAME("addpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings414_13[] = {
	{ CODING_NAME("addpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("addpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode414(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings414_17;
	operand.values[13] = OpcodeCodings414_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings415_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings415_13[] = {
	{ CODING_NAME("addps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("addps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode415(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings415_17;
	operand.values[13] = OpcodeCodings415_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings416_17[] = {
	{ CODING_NAME("addsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings416_13[] = {
	{ CODING_NAME("addsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("addsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode416(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings416_17;
	operand.values[13] = OpcodeCodings416_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings417_17[] = {
	{ CODING_NAME("addss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings417_13[] = {
	{ CODING_NAME("addss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("addss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode417(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings417_17;
	operand.values[13] = OpcodeCodings417_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings418_17[] = {
	{ CODING_NAME("addsubpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings418_13[] = {
	{ CODING_NAME("addsubpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("addsubpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode418(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings418_17;
	operand.values[13] = OpcodeCodings418_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings419_17[] = {
	{ CODING_NAME("addsubps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings419_13[] = {
	{ CODING_NAME("addsubps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("addsubps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode419(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings419_17;
	operand.values[13] = OpcodeCodings419_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings420_17[] = {
	{ CODING_NAME("andnpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings420_13[] = {
	{ CODING_NAME("andnpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("andnpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode420(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings420_17;
	operand.values[13] = OpcodeCodings420_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings421_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings421_13[] = {
	{ CODING_NAME("andnps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("andnps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode421(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings421_17;
	operand.values[13] = OpcodeCodings421_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings422_17[] = {
	{ CODING_NAME("andpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings422_13[] = {
	{ CODING_NAME("andpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("andpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode422(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings422_17;
	operand.values[13] = OpcodeCodings422_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings423_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings423_13[] = {
	{ CODING_NAME("andps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("andps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode423(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings423_17;
	operand.values[13] = OpcodeCodings423_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings424_17[] = {
	{ CODING_NAME("blendpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings424_13[] = {
	{ CODING_NAME("blendpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("blendpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("blendpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 13, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode424(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings424_17;
	operand.values[13] = OpcodeCodings424_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings425_17[] = {
	{ CODING_NAME("blendps")  (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings425_13[] = {
	{ CODING_NAME("blendps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("blendps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("blendps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 12, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode425(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings425_17;
	operand.values[13] = OpcodeCodings425_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings426_17[] = {
	{ CODING_NAME("cmppd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings426_13[] = {
	{ CODING_NAME("cmppd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cmppd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode426(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings426_17;
	operand.values[13] = OpcodeCodings426_13;
	asmError rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings427_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings427_13[] = {
	{ CODING_NAME("cmpps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cmpps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode427(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings427_17;
	operand.values[13] = OpcodeCodings427_13;
	asmError rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings428_17[] = {
	{ CODING_NAME("cvtdq2pd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings428_13[] = {
	{ CODING_NAME("cvtdq2pd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtdq2pd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode428(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings428_17;
	operand.values[13] = OpcodeCodings428_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings429_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings429_13[] = {
	{ CODING_NAME("cvtdq2ps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtdq2ps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode429(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings429_17;
	operand.values[13] = OpcodeCodings429_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings430_17[] = {
	{ CODING_NAME("cvtpd2dq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings430_13[] = {
	{ CODING_NAME("cvtpd2dq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtpd2dq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode430(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings430_17;
	operand.values[13] = OpcodeCodings430_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings431_17[] = {
	{ CODING_NAME("cvtpd2pi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings431_13[] = {
	{ CODING_NAME("cvtpd2pi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtpd2pi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode431(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings431_17;
	operand.values[13] = OpcodeCodings431_13;
	asmError rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings432_17[] = {
	{ CODING_NAME("cvtpd2ps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings432_13[] = {
	{ CODING_NAME("cvtpd2ps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtpd2ps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode432(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings432_17;
	operand.values[13] = OpcodeCodings432_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings433_17[] = {
	{ CODING_NAME("cvtpi2pd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings433_13[] = {
	{ CODING_NAME("cvtpi2pd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtpi2pd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode433(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings433_17;
	operand.values[13] = OpcodeCodings433_13;
	asmError rv;
	{
		rv = Opcode24(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings434_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings434_13[] = {
	{ CODING_NAME("cvtpi2ps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtpi2ps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode434(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings434_17;
	operand.values[13] = OpcodeCodings434_13;
	asmError rv;
	{
		rv = Opcode24(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings435_17[] = {
	{ CODING_NAME("cvtps2dq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings435_13[] = {
	{ CODING_NAME("cvtps2dq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtps2dq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode435(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings435_17;
	operand.values[13] = OpcodeCodings435_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings436_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings436_13[] = {
	{ CODING_NAME("cvtps2pd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtps2pd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode436(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings436_17;
	operand.values[13] = OpcodeCodings436_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings437_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings437_13[] = {
	{ CODING_NAME("cvtps2pi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtps2pi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode437(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings437_17;
	operand.values[13] = OpcodeCodings437_13;
	asmError rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings438_17[] = {
	{ CODING_NAME("cvtsd2si")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings438_13[] = {
	{ CODING_NAME("cvtsd2si")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtsd2si")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode438(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings438_17;
	operand.values[13] = OpcodeCodings438_13;
	asmError rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings439_17[] = {
	{ CODING_NAME("cvtsd2ss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings439_13[] = {
	{ CODING_NAME("cvtsd2ss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtsd2ss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode439(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings439_17;
	operand.values[13] = OpcodeCodings439_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings440_17[] = {
	{ CODING_NAME("cvtsi2sd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings440_13[] = {
	{ CODING_NAME("cvtsi2sd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtsi2sd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode440(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings440_17;
	operand.values[13] = OpcodeCodings440_13;
	asmError rv;
	{
		rv = Opcode26(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings441_17[] = {
	{ CODING_NAME("cvtsi2ss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings441_13[] = {
	{ CODING_NAME("cvtsi2ss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtsi2ss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode441(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings441_17;
	operand.values[13] = OpcodeCodings441_13;
	asmError rv;
	{
		rv = Opcode26(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings442_17[] = {
	{ CODING_NAME("cvtss2sd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings442_13[] = {
	{ CODING_NAME("cvtss2sd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtss2sd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode442(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings442_17;
	operand.values[13] = OpcodeCodings442_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings443_17[] = {
	{ CODING_NAME("cvtss2si")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings443_13[] = {
	{ CODING_NAME("cvtss2si")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvtss2si")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode443(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings443_17;
	operand.values[13] = OpcodeCodings443_13;
	asmError rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings444_17[] = {
	{ CODING_NAME("cvttpd2dq")  (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings444_13[] = {
	{ CODING_NAME("cvttpd2dq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvttpd2dq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode444(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings444_17;
	operand.values[13] = OpcodeCodings444_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings445_17[] = {
	{ CODING_NAME("cvttpd2pi")  (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings445_13[] = {
	{ CODING_NAME("cvttpd2pi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvttpd2pi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode445(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings445_17;
	operand.values[13] = OpcodeCodings445_13;
	asmError rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings446_17[] = {
	{ CODING_NAME("cvttps2dq")  (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings446_13[] = {
	{ CODING_NAME("cvttps2dq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvttps2dq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode446(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings446_17;
	operand.values[13] = OpcodeCodings446_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings447_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings447_13[] = {
	{ CODING_NAME("cvttps2pi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvttps2pi")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode447(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings447_17;
	operand.values[13] = OpcodeCodings447_13;
	asmError rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings448_17[] = {
	{ CODING_NAME("cvttsd2si")  (Coding::Type)(Coding::valSpecified), 242, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings448_13[] = {
	{ CODING_NAME("cvttsd2si")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvttsd2si")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode448(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings448_17;
	operand.values[13] = OpcodeCodings448_13;
	asmError rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings449_17[] = {
	{ CODING_NAME("cvttss2si")  (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings449_13[] = {
	{ CODING_NAME("cvttss2si")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("cvttss2si")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode449(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings449_17;
	operand.values[13] = OpcodeCodings449_13;
	asmError rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings450_17[] = {
	{ CODING_NAME("divpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings450_13[] = {
	{ CODING_NAME("divpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("divpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode450(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings450_17;
	operand.values[13] = OpcodeCodings450_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings451_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings451_13[] = {
	{ CODING_NAME("divps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("divps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode451(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings451_17;
	operand.values[13] = OpcodeCodings451_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings452_17[] = {
	{ CODING_NAME("divsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings452_13[] = {
	{ CODING_NAME("divsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("divsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode452(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings452_17;
	operand.values[13] = OpcodeCodings452_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings453_17[] = {
	{ CODING_NAME("divss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings453_13[] = {
	{ CODING_NAME("divss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("divss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode453(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings453_17;
	operand.values[13] = OpcodeCodings453_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings454_17[] = {
	{ CODING_NAME("dppd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings454_13[] = {
	{ CODING_NAME("dppd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("dppd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("dppd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode454(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings454_17;
	operand.values[13] = OpcodeCodings454_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings455_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings455_13[] = {
	{ CODING_NAME("dpps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("dpps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("dpps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode455(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings455_17;
	operand.values[13] = OpcodeCodings455_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings456_17[] = {
	{ CODING_NAME("hsubpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings456_13[] = {
	{ CODING_NAME("hsubpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("hsubpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode456(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings456_17;
	operand.values[13] = OpcodeCodings456_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings457_17[] = {
	{ CODING_NAME("hsubps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings457_13[] = {
	{ CODING_NAME("hsubps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("hsubps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode457(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings457_17;
	operand.values[13] = OpcodeCodings457_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings458_17[] = {
	{ CODING_NAME("insertps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings458_13[] = {
	{ CODING_NAME("insertps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("insertps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("insertps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode458(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings458_17;
	operand.values[13] = OpcodeCodings458_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings459_17[] = {
	{ CODING_NAME("lddqu")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings459_13[] = {
	{ CODING_NAME("lddqu")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("lddqu")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode459(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings459_17;
	operand.values[13] = OpcodeCodings459_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
asmError x64Parser::Opcode460(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6710, operand);
	return rv;
}
asmError x64Parser::Opcode461(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6714, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings462_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings462_13[] = {
	{ CODING_NAME("maxps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("maxps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode462(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings462_17;
	operand.values[13] = OpcodeCodings462_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings463_17[] = {
	{ CODING_NAME("maxpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings463_13[] = {
	{ CODING_NAME("maxpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("maxpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode463(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings463_17;
	operand.values[13] = OpcodeCodings463_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings464_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings464_13[] = {
	{ CODING_NAME("maxps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("maxps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode464(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings464_17;
	operand.values[13] = OpcodeCodings464_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings465_17[] = {
	{ CODING_NAME("maxsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings465_13[] = {
	{ CODING_NAME("maxsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("maxsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode465(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings465_17;
	operand.values[13] = OpcodeCodings465_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings466_17[] = {
	{ CODING_NAME("maxss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings466_13[] = {
	{ CODING_NAME("maxss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("maxss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode466(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings466_17;
	operand.values[13] = OpcodeCodings466_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings467_13[] = {
	{ CODING_NAME("mfence")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("mfence")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("mfence")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode467(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings467_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings468_17[] = {
	{ CODING_NAME("minpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings468_13[] = {
	{ CODING_NAME("minpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("minpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode468(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings468_17;
	operand.values[13] = OpcodeCodings468_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings469_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings469_13[] = {
	{ CODING_NAME("minps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("minps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode469(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings469_17;
	operand.values[13] = OpcodeCodings469_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings470_17[] = {
	{ CODING_NAME("minsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings470_13[] = {
	{ CODING_NAME("minsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("minsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode470(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings470_17;
	operand.values[13] = OpcodeCodings470_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings471_17[] = {
	{ CODING_NAME("minss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings471_13[] = {
	{ CODING_NAME("minss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("minss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode471(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings471_17;
	operand.values[13] = OpcodeCodings471_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings472_13[] = {
	{ CODING_NAME("monitor")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("monitor")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("monitor")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode472(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings472_13;
	asmError rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings473_17[] = {
	{ CODING_NAME("movapd")  (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings473_30[] = {
	{ CODING_NAME("movapd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode473(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings473_17;
	operand.values[30] = OpcodeCodings473_30;
	asmError rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings474_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings474_30[] = {
	{ CODING_NAME("movaps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode474(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings474_17;
	operand.values[30] = OpcodeCodings474_30;
	asmError rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
asmError x64Parser::Opcode475(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6731, operand);
	return rv;
}
asmError x64Parser::Opcode476(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6744, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings477_17[] = {
	{ CODING_NAME("movddup")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings477_13[] = {
	{ CODING_NAME("movddup")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("movddup")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode477(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings477_17;
	operand.values[13] = OpcodeCodings477_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings478_17[] = {
	{ CODING_NAME("movdq2q")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings478_13[] = {
	{ CODING_NAME("movdq2q")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("movdq2q")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode478(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings478_17;
	operand.values[13] = OpcodeCodings478_13;
	asmError rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings479_17[] = {
	{ CODING_NAME("movdqa")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings479_30[] = {
	{ CODING_NAME("movdqa")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode479(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings479_17;
	operand.values[30] = OpcodeCodings479_30;
	asmError rv;
	{
		rv = Opcode21(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings480_17[] = {
	{ CODING_NAME("movdqu")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings480_30[] = {
	{ CODING_NAME("movdqu")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode480(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings480_17;
	operand.values[30] = OpcodeCodings480_30;
	asmError rv;
	{
		rv = Opcode21(operand);
	}
	return rv;
}
asmError x64Parser::Opcode481(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6773, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings482_17[] = {
	{ CODING_NAME("movhpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings482_30[] = {
	{ CODING_NAME("movhpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode482(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings482_17;
	operand.values[30] = OpcodeCodings482_30;
	asmError rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings483_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings483_30[] = {
	{ CODING_NAME("movhps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode483(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings483_17;
	operand.values[30] = OpcodeCodings483_30;
	asmError rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
asmError x64Parser::Opcode484(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6779, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings485_17[] = {
	{ CODING_NAME("movlpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings485_30[] = {
	{ CODING_NAME("movlpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode485(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings485_17;
	operand.values[30] = OpcodeCodings485_30;
	asmError rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings486_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings486_30[] = {
	{ CODING_NAME("movlps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode486(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings486_17;
	operand.values[30] = OpcodeCodings486_30;
	asmError rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings487_17[] = {
	{ CODING_NAME("movmskpd")  (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings487_13[] = {
	{ CODING_NAME("movmskpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("movmskpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode487(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings487_17;
	operand.values[13] = OpcodeCodings487_13;
	asmError rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings488_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings488_13[] = {
	{ CODING_NAME("movmskps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("movmskps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode488(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings488_17;
	operand.values[13] = OpcodeCodings488_13;
	asmError rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
asmError x64Parser::Opcode489(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6787, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings490_13[] = {
	{ CODING_NAME("movnti")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("movnti")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode490(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings490_13;
	asmError rv = ParseOperands(tokenBranches6791, operand);
	return rv;
}
asmError x64Parser::Opcode491(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6798, operand);
	return rv;
}
asmError x64Parser::Opcode492(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6802, operand);
	return rv;
}
asmError x64Parser::Opcode493(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6806, operand);
	return rv;
}
asmError x64Parser::Opcode494(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6810, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings495_17[] = {
	{ CODING_NAME("movshdup")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings495_13[] = {
	{ CODING_NAME("movshdup")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("movshdup")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode495(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings495_17;
	operand.values[13] = OpcodeCodings495_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings496_17[] = {
	{ CODING_NAME("movsldup")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings496_13[] = {
	{ CODING_NAME("movsldup")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("movsldup")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode496(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings496_17;
	operand.values[13] = OpcodeCodings496_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings497_17[] = {
	{ CODING_NAME("movss")  (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings497_30[] = {
	{ CODING_NAME("movss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode497(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings497_17;
	operand.values[30] = OpcodeCodings497_30;
	asmError rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings498_17[] = {
	{ CODING_NAME("movupd")  (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings498_30[] = {
	{ CODING_NAME("movupd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode498(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings498_17;
	operand.values[30] = OpcodeCodings498_30;
	asmError rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings499_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings499_30[] = {
	{ CODING_NAME("movups")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode499(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings499_17;
	operand.values[30] = OpcodeCodings499_30;
	asmError rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings500_17[] = {
	{ CODING_NAME("mpsadbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings500_13[] = {
	{ CODING_NAME("mpsadbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("mpsadbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("mpsadbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 66, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode500(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings500_17;
	operand.values[13] = OpcodeCodings500_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings501_17[] = {
	{ CODING_NAME("mulpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings501_13[] = {
	{ CODING_NAME("mulpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("mulpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode501(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings501_17;
	operand.values[13] = OpcodeCodings501_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings502_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings502_13[] = {
	{ CODING_NAME("mulps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("mulps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode502(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings502_17;
	operand.values[13] = OpcodeCodings502_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings503_17[] = {
	{ CODING_NAME("mulsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings503_13[] = {
	{ CODING_NAME("mulsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("mulsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode503(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings503_17;
	operand.values[13] = OpcodeCodings503_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings504_17[] = {
	{ CODING_NAME("mulss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings504_13[] = {
	{ CODING_NAME("mulss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("mulss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode504(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings504_17;
	operand.values[13] = OpcodeCodings504_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings505_17[] = {
	{ CODING_NAME("orpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings505_13[] = {
	{ CODING_NAME("orpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("orpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode505(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings505_17;
	operand.values[13] = OpcodeCodings505_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings506_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings506_13[] = {
	{ CODING_NAME("orps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("orps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode506(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings506_17;
	operand.values[13] = OpcodeCodings506_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings507_13[] = {
	{ CODING_NAME("packssdw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("packssdw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode507(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings507_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings508_13[] = {
	{ CODING_NAME("packsswb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("packsswb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode508(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings508_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings509_17[] = {
	{ CODING_NAME("packusdw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings509_13[] = {
	{ CODING_NAME("packusdw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("packusdw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 56, 8, -1, 0, 0 }, 
	{ CODING_NAME("packusdw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode509(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings509_17;
	operand.values[13] = OpcodeCodings509_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings510_13[] = {
	{ CODING_NAME("paddb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("paddb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode510(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings510_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings511_13[] = {
	{ CODING_NAME("paddd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("paddd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode511(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings511_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings512_13[] = {
	{ CODING_NAME("paddq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("paddq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode512(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings512_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings513_13[] = {
	{ CODING_NAME("paddsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("paddsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode513(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings513_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings514_13[] = {
	{ CODING_NAME("paddusb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("paddusb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode514(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings514_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings515_13[] = {
	{ CODING_NAME("paddusw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("paddusw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode515(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings515_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings516_13[] = {
	{ CODING_NAME("paddw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("paddw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode516(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings516_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings517_13[] = {
	{ CODING_NAME("palignr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("palignr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("palignr")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode517(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings517_13;
	asmError rv = ParseOperands(tokenBranches6836, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings518_13[] = {
	{ CODING_NAME("pand")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pand")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode518(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings518_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings519_13[] = {
	{ CODING_NAME("pandn")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pandn")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode519(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings519_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings520_13[] = {
	{ CODING_NAME("pavgb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pavgb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode520(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings520_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings521_13[] = {
	{ CODING_NAME("pavgw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pavgw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode521(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings521_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings522_17[] = {
	{ CODING_NAME("pblendw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings522_13[] = {
	{ CODING_NAME("pblendw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pblendw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("pblendw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 14, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode522(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings522_17;
	operand.values[13] = OpcodeCodings522_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings523_13[] = {
	{ CODING_NAME("pcmpeqb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pcmpeqb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 116, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode523(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings523_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings524_13[] = {
	{ CODING_NAME("pcmpeqd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pcmpeqd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 118, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode524(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings524_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings525_13[] = {
	{ CODING_NAME("pcmpeqw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pcmpeqw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 117, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode525(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings525_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings526_17[] = {
	{ CODING_NAME("pcmpestri")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings526_13[] = {
	{ CODING_NAME("pcmpestri")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pcmpestri")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("pcmpestri")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode526(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings526_17;
	operand.values[13] = OpcodeCodings526_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings527_17[] = {
	{ CODING_NAME("pcmpestrm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings527_13[] = {
	{ CODING_NAME("pcmpestrm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pcmpestrm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("pcmpestrm")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode527(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings527_17;
	operand.values[13] = OpcodeCodings527_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings528_13[] = {
	{ CODING_NAME("pcmpgtb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pcmpgtb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 100, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode528(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings528_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings529_13[] = {
	{ CODING_NAME("pcmpgtd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pcmpgtd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode529(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings529_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings530_13[] = {
	{ CODING_NAME("pcmpgtw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pcmpgtw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 101, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode530(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings530_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings531_13[] = {
	{ CODING_NAME("pextrb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pextrb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("pextrb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode531(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings531_13;
	asmError rv = ParseOperands(tokenBranches6860, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings532_13[] = {
	{ CODING_NAME("pextrd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pextrd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("pextrd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode532(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings532_13;
	asmError rv = ParseOperands(tokenBranches6866, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings533_13[] = {
	{ CODING_NAME("pextrq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pextrq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("pextrq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode533(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings533_13;
	asmError rv = ParseOperands(tokenBranches6872, operand);
	return rv;
}
asmError x64Parser::Opcode534(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6878, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings535_13[] = {
	{ CODING_NAME("pinsrb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pinsrb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("pinsrb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 32, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode535(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings535_13;
	asmError rv = ParseOperands(tokenBranches6899, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings536_13[] = {
	{ CODING_NAME("pinsrd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pinsrd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("pinsrd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 34, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode536(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings536_13;
	asmError rv = ParseOperands(tokenBranches6905, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings537_13[] = {
	{ CODING_NAME("pinsrq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pinsrq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("pinsrq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 34, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode537(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings537_13;
	asmError rv = ParseOperands(tokenBranches6911, operand);
	return rv;
}
asmError x64Parser::Opcode538(x64Operand &operand)
{
	asmError rv = ParseOperands(tokenBranches6917, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings539_13[] = {
	{ CODING_NAME("pmaddwd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pmaddwd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 245, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode539(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings539_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings540_13[] = {
	{ CODING_NAME("pmaxsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pmaxsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode540(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings540_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings541_13[] = {
	{ CODING_NAME("pmaxub")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pmaxub")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode541(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings541_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings542_13[] = {
	{ CODING_NAME("pminsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pminsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode542(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings542_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings543_13[] = {
	{ CODING_NAME("pminub")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pminub")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode543(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings543_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings544_13[] = {
	{ CODING_NAME("pmovmskb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pmovmskb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode544(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings544_13;
	asmError rv = ParseOperands(tokenBranches6943, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings545_13[] = {
	{ CODING_NAME("pmulhuw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pmulhuw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode545(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings545_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings546_13[] = {
	{ CODING_NAME("pmulhw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pmulhw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 229, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode546(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings546_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings547_13[] = {
	{ CODING_NAME("pmullw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pmullw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 213, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode547(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings547_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings548_13[] = {
	{ CODING_NAME("pmuludq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pmuludq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode548(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings548_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings549_13[] = {
	{ CODING_NAME("psadbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("psadbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode549(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings549_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings550_17[] = {
	{ CODING_NAME("pshufd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings550_13[] = {
	{ CODING_NAME("pshufd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pshufd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode550(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings550_17;
	operand.values[13] = OpcodeCodings550_13;
	asmError rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings551_17[] = {
	{ CODING_NAME("pshufhw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings551_13[] = {
	{ CODING_NAME("pshufhw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pshufhw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode551(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings551_17;
	operand.values[13] = OpcodeCodings551_13;
	asmError rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings552_17[] = {
	{ CODING_NAME("pshuflw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings552_13[] = {
	{ CODING_NAME("pshuflw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pshuflw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode552(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings552_17;
	operand.values[13] = OpcodeCodings552_13;
	asmError rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings553_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings553_13[] = {
	{ CODING_NAME("pshufw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pshufw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode553(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings553_17;
	operand.values[13] = OpcodeCodings553_13;
	asmError rv = ParseOperands(tokenBranches6964, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings554_33[] = {
	{ CODING_NAME("pslld")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings554_30[] = {
	{ CODING_NAME("pslld")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings554_31[] = {
	{ CODING_NAME("pslld")  (Coding::Type)(Coding::valSpecified), 242, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode554(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings554_33;
	operand.values[30] = OpcodeCodings554_30;
	operand.values[31] = OpcodeCodings554_31;
	asmError rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings555_17[] = {
	{ CODING_NAME("pslldq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings555_13[] = {
	{ CODING_NAME("pslldq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pslldq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode555(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings555_17;
	operand.values[13] = OpcodeCodings555_13;
	asmError rv = ParseOperands(tokenBranches6971, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings556_33[] = {
	{ CODING_NAME("psllq")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings556_30[] = {
	{ CODING_NAME("psllq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings556_31[] = {
	{ CODING_NAME("psllq")  (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode556(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings556_33;
	operand.values[30] = OpcodeCodings556_30;
	operand.values[31] = OpcodeCodings556_31;
	asmError rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings557_33[] = {
	{ CODING_NAME("psllw")  (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings557_30[] = {
	{ CODING_NAME("psllw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings557_31[] = {
	{ CODING_NAME("psllw")  (Coding::Type)(Coding::valSpecified), 241, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode557(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings557_33;
	operand.values[30] = OpcodeCodings557_30;
	operand.values[31] = OpcodeCodings557_31;
	asmError rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings558_33[] = {
	{ CODING_NAME("psrad")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings558_30[] = {
	{ CODING_NAME("psrad")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings558_31[] = {
	{ CODING_NAME("psrad")  (Coding::Type)(Coding::valSpecified), 226, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode558(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings558_33;
	operand.values[30] = OpcodeCodings558_30;
	operand.values[31] = OpcodeCodings558_31;
	asmError rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings559_33[] = {
	{ CODING_NAME("psraw")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings559_30[] = {
	{ CODING_NAME("psraw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings559_31[] = {
	{ CODING_NAME("psraw")  (Coding::Type)(Coding::valSpecified), 225, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode559(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings559_33;
	operand.values[30] = OpcodeCodings559_30;
	operand.values[31] = OpcodeCodings559_31;
	asmError rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings560_33[] = {
	{ CODING_NAME("psrld")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings560_30[] = {
	{ CODING_NAME("psrld")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings560_31[] = {
	{ CODING_NAME("psrld")  (Coding::Type)(Coding::valSpecified), 210, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode560(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings560_33;
	operand.values[30] = OpcodeCodings560_30;
	operand.values[31] = OpcodeCodings560_31;
	asmError rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings561_17[] = {
	{ CODING_NAME("psrldq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings561_13[] = {
	{ CODING_NAME("psrldq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("psrldq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode561(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings561_17;
	operand.values[13] = OpcodeCodings561_13;
	asmError rv = ParseOperands(tokenBranches6980, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings562_33[] = {
	{ CODING_NAME("psrlq")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings562_30[] = {
	{ CODING_NAME("psrlq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings562_31[] = {
	{ CODING_NAME("psrlq")  (Coding::Type)(Coding::valSpecified), 211, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode562(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings562_33;
	operand.values[30] = OpcodeCodings562_30;
	operand.values[31] = OpcodeCodings562_31;
	asmError rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings563_33[] = {
	{ CODING_NAME("psrlw")  (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings563_30[] = {
	{ CODING_NAME("psrlw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings563_31[] = {
	{ CODING_NAME("psrlw")  (Coding::Type)(Coding::valSpecified), 209, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode563(x64Operand &operand)
{
	operand.values[33] = OpcodeCodings563_33;
	operand.values[30] = OpcodeCodings563_30;
	operand.values[31] = OpcodeCodings563_31;
	asmError rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings564_13[] = {
	{ CODING_NAME("psubb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("psubb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode564(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings564_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings565_13[] = {
	{ CODING_NAME("psubd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("psubd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode565(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings565_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings566_13[] = {
	{ CODING_NAME("psubq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("psubq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode566(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings566_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings567_13[] = {
	{ CODING_NAME("psubsb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("psubsb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode567(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings567_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings568_13[] = {
	{ CODING_NAME("psubsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("psubsw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode568(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings568_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings569_13[] = {
	{ CODING_NAME("psubusb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("psubusb")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode569(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings569_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings570_13[] = {
	{ CODING_NAME("psubusw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("psubusw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode570(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings570_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings571_13[] = {
	{ CODING_NAME("punpckhbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("punpckhbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode571(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings571_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings572_13[] = {
	{ CODING_NAME("punpckhdq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("punpckhdq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode572(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings572_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings573_17[] = {
	{ CODING_NAME("punpckhqdq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings573_13[] = {
	{ CODING_NAME("punpckhqdq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("punpckhqdq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode573(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings573_17;
	operand.values[13] = OpcodeCodings573_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings574_13[] = {
	{ CODING_NAME("punpckhwd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("punpckhwd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode574(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings574_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings575_13[] = {
	{ CODING_NAME("punpcklbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("punpcklbw")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode575(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings575_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings576_13[] = {
	{ CODING_NAME("punpckldq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("punpckldq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode576(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings576_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings577_17[] = {
	{ CODING_NAME("punpcklqdq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings577_13[] = {
	{ CODING_NAME("punpcklqdq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("punpcklqdq")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode577(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings577_17;
	operand.values[13] = OpcodeCodings577_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings578_13[] = {
	{ CODING_NAME("punpcklwd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("punpcklwd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode578(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings578_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings579_13[] = {
	{ CODING_NAME("pxor")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("pxor")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode579(x64Operand &operand)
{
	operand.values[13] = OpcodeCodings579_13;
	asmError rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings580_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings580_13[] = {
	{ CODING_NAME("rcpps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rcpps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode580(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings580_17;
	operand.values[13] = OpcodeCodings580_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings581_17[] = {
	{ CODING_NAME("rcpss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings581_13[] = {
	{ CODING_NAME("rcpss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rcpss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode581(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings581_17;
	operand.values[13] = OpcodeCodings581_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings582_17[] = {
	{ CODING_NAME("roundpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings582_13[] = {
	{ CODING_NAME("roundpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("roundpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("roundpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode582(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings582_17;
	operand.values[13] = OpcodeCodings582_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings583_17[] = {
	{ CODING_NAME("roundps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings583_13[] = {
	{ CODING_NAME("roundps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("roundps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("roundps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode583(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings583_17;
	operand.values[13] = OpcodeCodings583_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings584_17[] = {
	{ CODING_NAME("roundsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings584_13[] = {
	{ CODING_NAME("roundsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("roundsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("roundsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode584(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings584_17;
	operand.values[13] = OpcodeCodings584_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings585_17[] = {
	{ CODING_NAME("roundss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings585_13[] = {
	{ CODING_NAME("roundss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("roundss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ CODING_NAME("roundss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode585(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings585_17;
	operand.values[13] = OpcodeCodings585_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings586_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings586_13[] = {
	{ CODING_NAME("rsqrtps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rsqrtps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode586(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings586_17;
	operand.values[13] = OpcodeCodings586_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings587_17[] = {
	{ CODING_NAME("rsqrtss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings587_13[] = {
	{ CODING_NAME("rsqrtss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("rsqrtss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode587(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings587_17;
	operand.values[13] = OpcodeCodings587_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings588_17[] = {
	{ CODING_NAME("shufpd")  (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings588_13[] = {
	{ CODING_NAME("shufpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("shufpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode588(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings588_17;
	operand.values[13] = OpcodeCodings588_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings589_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings589_13[] = {
	{ CODING_NAME("shufps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("shufps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode589(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings589_17;
	operand.values[13] = OpcodeCodings589_13;
	asmError rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings590_17[] = {
	{ CODING_NAME("sqrtpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings590_13[] = {
	{ CODING_NAME("sqrtpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("sqrtpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 81, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode590(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings590_17;
	operand.values[13] = OpcodeCodings590_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings591_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings591_13[] = {
	{ CODING_NAME("sqrtps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("sqrtps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 81, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode591(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings591_17;
	operand.values[13] = OpcodeCodings591_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings592_17[] = {
	{ CODING_NAME("sqrtsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings592_13[] = {
	{ CODING_NAME("sqrtsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("sqrtsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 81, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode592(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings592_17;
	operand.values[13] = OpcodeCodings592_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings593_17[] = {
	{ CODING_NAME("sqrtss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings593_13[] = {
	{ CODING_NAME("sqrtss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("sqrtss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 81, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode593(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings593_17;
	operand.values[13] = OpcodeCodings593_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings594_17[] = {
	{ CODING_NAME("subpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings594_13[] = {
	{ CODING_NAME("subpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("subpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode594(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings594_17;
	operand.values[13] = OpcodeCodings594_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings595_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings595_13[] = {
	{ CODING_NAME("subps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("subps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode595(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings595_17;
	operand.values[13] = OpcodeCodings595_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings596_17[] = {
	{ CODING_NAME("subsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings596_13[] = {
	{ CODING_NAME("subsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("subsd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode596(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings596_17;
	operand.values[13] = OpcodeCodings596_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings597_17[] = {
	{ CODING_NAME("subss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings597_13[] = {
	{ CODING_NAME("subss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("subss")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode597(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings597_17;
	operand.values[13] = OpcodeCodings597_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings598_17[] = {
	{ CODING_NAME("unpckhpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings598_13[] = {
	{ CODING_NAME("unpckhpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unpckhpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode598(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings598_17;
	operand.values[13] = OpcodeCodings598_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings599_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings599_13[] = {
	{ CODING_NAME("unpckhps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unpckhps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode599(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings599_17;
	operand.values[13] = OpcodeCodings599_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings600_17[] = {
	{ CODING_NAME("unpcklpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings600_13[] = {
	{ CODING_NAME("unpcklpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unpcklpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode600(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings600_17;
	operand.values[13] = OpcodeCodings600_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings601_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings601_13[] = {
	{ CODING_NAME("unpcklps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unpcklps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode601(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings601_17;
	operand.values[13] = OpcodeCodings601_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings602_17[] = {
	{ CODING_NAME("xorpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings602_13[] = {
	{ CODING_NAME("xorpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("xorpd")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode602(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings602_17;
	operand.values[13] = OpcodeCodings602_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings603_17[] = {
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::OpcodeCodings603_13[] = {
	{ CODING_NAME("xorps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("xorps")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
asmError x64Parser::Opcode603(x64Operand &operand)
{
	operand.values[17] = OpcodeCodings603_17;
	operand.values[13] = OpcodeCodings603_13;
	asmError rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
asmError x64Parser::Opcode604(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode605(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode606(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode607(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode608(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode609(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode610(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode611(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode612(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode613(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode614(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
asmError x64Parser::Opcode615(x64Operand &operand)
{
	asmError rv = AERR_NONE;
	return rv;
}
x64Parser::DispatchType x64Parser::DispatchTable[616] = {
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&x64Parser::Opcode32,
	&x64Parser::Opcode33,
	&x64Parser::Opcode34,
	&x64Parser::Opcode35,
	&x64Parser::Opcode36,
	&x64Parser::Opcode37,
	&x64Parser::Opcode38,
	&x64Parser::Opcode39,
	&x64Parser::Opcode40,
	&x64Parser::Opcode41,
	&x64Parser::Opcode42,
	&x64Parser::Opcode43,
	&x64Parser::Opcode44,
	&x64Parser::Opcode45,
	&x64Parser::Opcode46,
	&x64Parser::Opcode47,
	&x64Parser::Opcode48,
	&x64Parser::Opcode49,
	&x64Parser::Opcode50,
	&x64Parser::Opcode51,
	&x64Parser::Opcode52,
	&x64Parser::Opcode53,
	&x64Parser::Opcode54,
	&x64Parser::Opcode55,
	&x64Parser::Opcode56,
	&x64Parser::Opcode57,
	&x64Parser::Opcode58,
	&x64Parser::Opcode59,
	&x64Parser::Opcode60,
	&x64Parser::Opcode61,
	&x64Parser::Opcode62,
	&x64Parser::Opcode63,
	&x64Parser::Opcode64,
	&x64Parser::Opcode65,
	&x64Parser::Opcode66,
	&x64Parser::Opcode67,
	&x64Parser::Opcode68,
	&x64Parser::Opcode69,
	&x64Parser::Opcode70,
	&x64Parser::Opcode71,
	&x64Parser::Opcode72,
	&x64Parser::Opcode73,
	&x64Parser::Opcode74,
	&x64Parser::Opcode75,
	&x64Parser::Opcode76,
	&x64Parser::Opcode77,
	&x64Parser::Opcode78,
	&x64Parser::Opcode79,
	&x64Parser::Opcode80,
	&x64Parser::Opcode81,
	&x64Parser::Opcode82,
	&x64Parser::Opcode83,
	&x64Parser::Opcode84,
	&x64Parser::Opcode85,
	&x64Parser::Opcode86,
	&x64Parser::Opcode87,
	&x64Parser::Opcode88,
	&x64Parser::Opcode89,
	&x64Parser::Opcode90,
	&x64Parser::Opcode91,
	&x64Parser::Opcode92,
	&x64Parser::Opcode93,
	&x64Parser::Opcode94,
	&x64Parser::Opcode95,
	&x64Parser::Opcode96,
	&x64Parser::Opcode97,
	&x64Parser::Opcode98,
	&x64Parser::Opcode99,
	&x64Parser::Opcode100,
	&x64Parser::Opcode101,
	&x64Parser::Opcode102,
	&x64Parser::Opcode103,
	&x64Parser::Opcode104,
	&x64Parser::Opcode105,
	&x64Parser::Opcode106,
	&x64Parser::Opcode107,
	&x64Parser::Opcode108,
	&x64Parser::Opcode109,
	&x64Parser::Opcode110,
	&x64Parser::Opcode111,
	&x64Parser::Opcode112,
	&x64Parser::Opcode113,
	&x64Parser::Opcode114,
	&x64Parser::Opcode115,
	&x64Parser::Opcode116,
	&x64Parser::Opcode117,
	&x64Parser::Opcode118,
	&x64Parser::Opcode119,
	&x64Parser::Opcode120,
	&x64Parser::Opcode121,
	&x64Parser::Opcode122,
	&x64Parser::Opcode123,
	&x64Parser::Opcode124,
	&x64Parser::Opcode125,
	&x64Parser::Opcode126,
	&x64Parser::Opcode127,
	&x64Parser::Opcode128,
	&x64Parser::Opcode129,
	&x64Parser::Opcode130,
	&x64Parser::Opcode131,
	&x64Parser::Opcode132,
	&x64Parser::Opcode133,
	&x64Parser::Opcode134,
	&x64Parser::Opcode135,
	&x64Parser::Opcode136,
	&x64Parser::Opcode137,
	&x64Parser::Opcode138,
	&x64Parser::Opcode139,
	&x64Parser::Opcode140,
	&x64Parser::Opcode141,
	&x64Parser::Opcode142,
	&x64Parser::Opcode143,
	&x64Parser::Opcode144,
	&x64Parser::Opcode145,
	&x64Parser::Opcode146,
	&x64Parser::Opcode147,
	&x64Parser::Opcode148,
	&x64Parser::Opcode149,
	&x64Parser::Opcode150,
	&x64Parser::Opcode151,
	&x64Parser::Opcode152,
	&x64Parser::Opcode153,
	&x64Parser::Opcode154,
	&x64Parser::Opcode155,
	&x64Parser::Opcode156,
	&x64Parser::Opcode157,
	&x64Parser::Opcode158,
	&x64Parser::Opcode159,
	&x64Parser::Opcode160,
	&x64Parser::Opcode161,
	&x64Parser::Opcode162,
	&x64Parser::Opcode163,
	&x64Parser::Opcode164,
	&x64Parser::Opcode165,
	&x64Parser::Opcode166,
	&x64Parser::Opcode167,
	&x64Parser::Opcode168,
	&x64Parser::Opcode169,
	&x64Parser::Opcode170,
	&x64Parser::Opcode171,
	&x64Parser::Opcode172,
	&x64Parser::Opcode173,
	&x64Parser::Opcode174,
	&x64Parser::Opcode175,
	&x64Parser::Opcode176,
	&x64Parser::Opcode177,
	&x64Parser::Opcode178,
	&x64Parser::Opcode179,
	&x64Parser::Opcode180,
	&x64Parser::Opcode181,
	&x64Parser::Opcode182,
	&x64Parser::Opcode183,
	&x64Parser::Opcode184,
	&x64Parser::Opcode185,
	&x64Parser::Opcode186,
	&x64Parser::Opcode187,
	&x64Parser::Opcode188,
	&x64Parser::Opcode189,
	&x64Parser::Opcode190,
	&x64Parser::Opcode191,
	&x64Parser::Opcode192,
	&x64Parser::Opcode193,
	&x64Parser::Opcode194,
	&x64Parser::Opcode195,
	&x64Parser::Opcode196,
	&x64Parser::Opcode197,
	&x64Parser::Opcode198,
	&x64Parser::Opcode199,
	&x64Parser::Opcode200,
	&x64Parser::Opcode201,
	&x64Parser::Opcode202,
	&x64Parser::Opcode203,
	&x64Parser::Opcode204,
	&x64Parser::Opcode205,
	&x64Parser::Opcode206,
	&x64Parser::Opcode207,
	&x64Parser::Opcode208,
	&x64Parser::Opcode209,
	&x64Parser::Opcode210,
	&x64Parser::Opcode211,
	&x64Parser::Opcode212,
	&x64Parser::Opcode213,
	&x64Parser::Opcode214,
	&x64Parser::Opcode215,
	&x64Parser::Opcode216,
	&x64Parser::Opcode217,
	&x64Parser::Opcode218,
	&x64Parser::Opcode219,
	&x64Parser::Opcode220,
	&x64Parser::Opcode221,
	&x64Parser::Opcode222,
	&x64Parser::Opcode223,
	&x64Parser::Opcode224,
	&x64Parser::Opcode225,
	&x64Parser::Opcode226,
	&x64Parser::Opcode227,
	&x64Parser::Opcode228,
	&x64Parser::Opcode229,
	&x64Parser::Opcode230,
	&x64Parser::Opcode231,
	&x64Parser::Opcode232,
	&x64Parser::Opcode233,
	&x64Parser::Opcode234,
	&x64Parser::Opcode235,
	&x64Parser::Opcode236,
	&x64Parser::Opcode237,
	&x64Parser::Opcode238,
	&x64Parser::Opcode239,
	&x64Parser::Opcode240,
	&x64Parser::Opcode241,
	&x64Parser::Opcode242,
	&x64Parser::Opcode243,
	&x64Parser::Opcode244,
	&x64Parser::Opcode245,
	&x64Parser::Opcode246,
	&x64Parser::Opcode247,
	&x64Parser::Opcode248,
	&x64Parser::Opcode249,
	&x64Parser::Opcode250,
	&x64Parser::Opcode251,
	&x64Parser::Opcode252,
	&x64Parser::Opcode253,
	&x64Parser::Opcode254,
	&x64Parser::Opcode255,
	&x64Parser::Opcode256,
	&x64Parser::Opcode257,
	&x64Parser::Opcode258,
	&x64Parser::Opcode259,
	&x64Parser::Opcode260,
	&x64Parser::Opcode261,
	&x64Parser::Opcode262,
	&x64Parser::Opcode263,
	&x64Parser::Opcode264,
	&x64Parser::Opcode265,
	&x64Parser::Opcode266,
	&x64Parser::Opcode267,
	&x64Parser::Opcode268,
	&x64Parser::Opcode269,
	&x64Parser::Opcode270,
	&x64Parser::Opcode271,
	&x64Parser::Opcode272,
	&x64Parser::Opcode273,
	&x64Parser::Opcode274,
	&x64Parser::Opcode275,
	&x64Parser::Opcode276,
	&x64Parser::Opcode277,
	&x64Parser::Opcode278,
	&x64Parser::Opcode279,
	&x64Parser::Opcode280,
	&x64Parser::Opcode281,
	&x64Parser::Opcode282,
	&x64Parser::Opcode283,
	&x64Parser::Opcode284,
	&x64Parser::Opcode285,
	&x64Parser::Opcode286,
	&x64Parser::Opcode287,
	&x64Parser::Opcode288,
	&x64Parser::Opcode289,
	&x64Parser::Opcode290,
	&x64Parser::Opcode291,
	&x64Parser::Opcode292,
	&x64Parser::Opcode293,
	&x64Parser::Opcode294,
	&x64Parser::Opcode295,
	&x64Parser::Opcode296,
	&x64Parser::Opcode297,
	&x64Parser::Opcode298,
	&x64Parser::Opcode299,
	&x64Parser::Opcode300,
	&x64Parser::Opcode301,
	&x64Parser::Opcode302,
	&x64Parser::Opcode303,
	&x64Parser::Opcode304,
	&x64Parser::Opcode305,
	&x64Parser::Opcode306,
	&x64Parser::Opcode307,
	&x64Parser::Opcode308,
	&x64Parser::Opcode309,
	&x64Parser::Opcode310,
	&x64Parser::Opcode311,
	&x64Parser::Opcode312,
	&x64Parser::Opcode313,
	&x64Parser::Opcode314,
	&x64Parser::Opcode315,
	&x64Parser::Opcode316,
	&x64Parser::Opcode317,
	&x64Parser::Opcode318,
	&x64Parser::Opcode319,
	&x64Parser::Opcode320,
	&x64Parser::Opcode321,
	&x64Parser::Opcode322,
	&x64Parser::Opcode323,
	&x64Parser::Opcode324,
	&x64Parser::Opcode325,
	&x64Parser::Opcode326,
	&x64Parser::Opcode327,
	&x64Parser::Opcode328,
	&x64Parser::Opcode329,
	&x64Parser::Opcode330,
	&x64Parser::Opcode331,
	&x64Parser::Opcode332,
	&x64Parser::Opcode333,
	&x64Parser::Opcode334,
	&x64Parser::Opcode335,
	&x64Parser::Opcode336,
	&x64Parser::Opcode337,
	&x64Parser::Opcode338,
	&x64Parser::Opcode339,
	&x64Parser::Opcode340,
	&x64Parser::Opcode341,
	&x64Parser::Opcode342,
	&x64Parser::Opcode343,
	&x64Parser::Opcode344,
	&x64Parser::Opcode345,
	&x64Parser::Opcode346,
	&x64Parser::Opcode347,
	&x64Parser::Opcode348,
	&x64Parser::Opcode349,
	&x64Parser::Opcode350,
	&x64Parser::Opcode351,
	&x64Parser::Opcode352,
	&x64Parser::Opcode353,
	&x64Parser::Opcode354,
	&x64Parser::Opcode355,
	&x64Parser::Opcode356,
	&x64Parser::Opcode357,
	&x64Parser::Opcode358,
	&x64Parser::Opcode359,
	&x64Parser::Opcode360,
	&x64Parser::Opcode361,
	&x64Parser::Opcode362,
	&x64Parser::Opcode363,
	&x64Parser::Opcode364,
	&x64Parser::Opcode365,
	&x64Parser::Opcode366,
	&x64Parser::Opcode367,
	&x64Parser::Opcode368,
	&x64Parser::Opcode369,
	&x64Parser::Opcode370,
	&x64Parser::Opcode371,
	&x64Parser::Opcode372,
	&x64Parser::Opcode373,
	&x64Parser::Opcode374,
	&x64Parser::Opcode375,
	&x64Parser::Opcode376,
	&x64Parser::Opcode377,
	&x64Parser::Opcode378,
	&x64Parser::Opcode379,
	&x64Parser::Opcode380,
	&x64Parser::Opcode381,
	&x64Parser::Opcode382,
	&x64Parser::Opcode383,
	&x64Parser::Opcode384,
	&x64Parser::Opcode385,
	&x64Parser::Opcode386,
	&x64Parser::Opcode387,
	&x64Parser::Opcode388,
	&x64Parser::Opcode389,
	&x64Parser::Opcode390,
	&x64Parser::Opcode391,
	&x64Parser::Opcode392,
	&x64Parser::Opcode393,
	&x64Parser::Opcode394,
	&x64Parser::Opcode395,
	&x64Parser::Opcode396,
	&x64Parser::Opcode397,
	&x64Parser::Opcode398,
	&x64Parser::Opcode399,
	&x64Parser::Opcode400,
	&x64Parser::Opcode401,
	&x64Parser::Opcode402,
	&x64Parser::Opcode403,
	&x64Parser::Opcode404,
	&x64Parser::Opcode405,
	&x64Parser::Opcode406,
	&x64Parser::Opcode407,
	&x64Parser::Opcode408,
	&x64Parser::Opcode409,
	&x64Parser::Opcode410,
	&x64Parser::Opcode411,
	&x64Parser::Opcode412,
	&x64Parser::Opcode413,
	&x64Parser::Opcode414,
	&x64Parser::Opcode415,
	&x64Parser::Opcode416,
	&x64Parser::Opcode417,
	&x64Parser::Opcode418,
	&x64Parser::Opcode419,
	&x64Parser::Opcode420,
	&x64Parser::Opcode421,
	&x64Parser::Opcode422,
	&x64Parser::Opcode423,
	&x64Parser::Opcode424,
	&x64Parser::Opcode425,
	&x64Parser::Opcode426,
	&x64Parser::Opcode427,
	&x64Parser::Opcode428,
	&x64Parser::Opcode429,
	&x64Parser::Opcode430,
	&x64Parser::Opcode431,
	&x64Parser::Opcode432,
	&x64Parser::Opcode433,
	&x64Parser::Opcode434,
	&x64Parser::Opcode435,
	&x64Parser::Opcode436,
	&x64Parser::Opcode437,
	&x64Parser::Opcode438,
	&x64Parser::Opcode439,
	&x64Parser::Opcode440,
	&x64Parser::Opcode441,
	&x64Parser::Opcode442,
	&x64Parser::Opcode443,
	&x64Parser::Opcode444,
	&x64Parser::Opcode445,
	&x64Parser::Opcode446,
	&x64Parser::Opcode447,
	&x64Parser::Opcode448,
	&x64Parser::Opcode449,
	&x64Parser::Opcode450,
	&x64Parser::Opcode451,
	&x64Parser::Opcode452,
	&x64Parser::Opcode453,
	&x64Parser::Opcode454,
	&x64Parser::Opcode455,
	&x64Parser::Opcode456,
	&x64Parser::Opcode457,
	&x64Parser::Opcode458,
	&x64Parser::Opcode459,
	&x64Parser::Opcode460,
	&x64Parser::Opcode461,
	&x64Parser::Opcode462,
	&x64Parser::Opcode463,
	&x64Parser::Opcode464,
	&x64Parser::Opcode465,
	&x64Parser::Opcode466,
	&x64Parser::Opcode467,
	&x64Parser::Opcode468,
	&x64Parser::Opcode469,
	&x64Parser::Opcode470,
	&x64Parser::Opcode471,
	&x64Parser::Opcode472,
	&x64Parser::Opcode473,
	&x64Parser::Opcode474,
	&x64Parser::Opcode475,
	&x64Parser::Opcode476,
	&x64Parser::Opcode477,
	&x64Parser::Opcode478,
	&x64Parser::Opcode479,
	&x64Parser::Opcode480,
	&x64Parser::Opcode481,
	&x64Parser::Opcode482,
	&x64Parser::Opcode483,
	&x64Parser::Opcode484,
	&x64Parser::Opcode485,
	&x64Parser::Opcode486,
	&x64Parser::Opcode487,
	&x64Parser::Opcode488,
	&x64Parser::Opcode489,
	&x64Parser::Opcode490,
	&x64Parser::Opcode491,
	&x64Parser::Opcode492,
	&x64Parser::Opcode493,
	&x64Parser::Opcode494,
	&x64Parser::Opcode495,
	&x64Parser::Opcode496,
	&x64Parser::Opcode497,
	&x64Parser::Opcode498,
	&x64Parser::Opcode499,
	&x64Parser::Opcode500,
	&x64Parser::Opcode501,
	&x64Parser::Opcode502,
	&x64Parser::Opcode503,
	&x64Parser::Opcode504,
	&x64Parser::Opcode505,
	&x64Parser::Opcode506,
	&x64Parser::Opcode507,
	&x64Parser::Opcode508,
	&x64Parser::Opcode509,
	&x64Parser::Opcode510,
	&x64Parser::Opcode511,
	&x64Parser::Opcode512,
	&x64Parser::Opcode513,
	&x64Parser::Opcode514,
	&x64Parser::Opcode515,
	&x64Parser::Opcode516,
	&x64Parser::Opcode517,
	&x64Parser::Opcode518,
	&x64Parser::Opcode519,
	&x64Parser::Opcode520,
	&x64Parser::Opcode521,
	&x64Parser::Opcode522,
	&x64Parser::Opcode523,
	&x64Parser::Opcode524,
	&x64Parser::Opcode525,
	&x64Parser::Opcode526,
	&x64Parser::Opcode527,
	&x64Parser::Opcode528,
	&x64Parser::Opcode529,
	&x64Parser::Opcode530,
	&x64Parser::Opcode531,
	&x64Parser::Opcode532,
	&x64Parser::Opcode533,
	&x64Parser::Opcode534,
	&x64Parser::Opcode535,
	&x64Parser::Opcode536,
	&x64Parser::Opcode537,
	&x64Parser::Opcode538,
	&x64Parser::Opcode539,
	&x64Parser::Opcode540,
	&x64Parser::Opcode541,
	&x64Parser::Opcode542,
	&x64Parser::Opcode543,
	&x64Parser::Opcode544,
	&x64Parser::Opcode545,
	&x64Parser::Opcode546,
	&x64Parser::Opcode547,
	&x64Parser::Opcode548,
	&x64Parser::Opcode549,
	&x64Parser::Opcode550,
	&x64Parser::Opcode551,
	&x64Parser::Opcode552,
	&x64Parser::Opcode553,
	&x64Parser::Opcode554,
	&x64Parser::Opcode555,
	&x64Parser::Opcode556,
	&x64Parser::Opcode557,
	&x64Parser::Opcode558,
	&x64Parser::Opcode559,
	&x64Parser::Opcode560,
	&x64Parser::Opcode561,
	&x64Parser::Opcode562,
	&x64Parser::Opcode563,
	&x64Parser::Opcode564,
	&x64Parser::Opcode565,
	&x64Parser::Opcode566,
	&x64Parser::Opcode567,
	&x64Parser::Opcode568,
	&x64Parser::Opcode569,
	&x64Parser::Opcode570,
	&x64Parser::Opcode571,
	&x64Parser::Opcode572,
	&x64Parser::Opcode573,
	&x64Parser::Opcode574,
	&x64Parser::Opcode575,
	&x64Parser::Opcode576,
	&x64Parser::Opcode577,
	&x64Parser::Opcode578,
	&x64Parser::Opcode579,
	&x64Parser::Opcode580,
	&x64Parser::Opcode581,
	&x64Parser::Opcode582,
	&x64Parser::Opcode583,
	&x64Parser::Opcode584,
	&x64Parser::Opcode585,
	&x64Parser::Opcode586,
	&x64Parser::Opcode587,
	&x64Parser::Opcode588,
	&x64Parser::Opcode589,
	&x64Parser::Opcode590,
	&x64Parser::Opcode591,
	&x64Parser::Opcode592,
	&x64Parser::Opcode593,
	&x64Parser::Opcode594,
	&x64Parser::Opcode595,
	&x64Parser::Opcode596,
	&x64Parser::Opcode597,
	&x64Parser::Opcode598,
	&x64Parser::Opcode599,
	&x64Parser::Opcode600,
	&x64Parser::Opcode601,
	&x64Parser::Opcode602,
	&x64Parser::Opcode603,
	&x64Parser::Opcode604,
	&x64Parser::Opcode605,
	&x64Parser::Opcode606,
	&x64Parser::Opcode607,
	&x64Parser::Opcode608,
	&x64Parser::Opcode609,
	&x64Parser::Opcode610,
	&x64Parser::Opcode611,
	&x64Parser::Opcode612,
	&x64Parser::Opcode613,
	&x64Parser::Opcode614,
	&x64Parser::Opcode615,
};

x64Token *x64Parser::addressTable[] = {
	&x64Parser::tokenBranches3[0],
	&x64Parser::tokenBranches8[0],
	&x64Parser::tokenBranches199[0],
	&x64Parser::tokenBranches345[0],
	&x64Parser::tokenBranches198[0],
	&x64Parser::tokenBranches35[0],
	&x64Parser::tokenBranches136[0],
	&x64Parser::tokenBranches282[0],
	&x64Parser::tokenBranches428[0],
	&x64Parser::tokenBranches34[0],
	&x64Parser::tokenBranches33[0],
	&x64Parser::tokenBranches226[0],
	&x64Parser::tokenBranches372[0],
	&x64Parser::tokenBranches225[0],
	&x64Parser::tokenBranches56[0],
	&x64Parser::tokenBranches169[0],
	&x64Parser::tokenBranches315[0],
	&x64Parser::tokenBranches461[0],
	&x64Parser::tokenBranches55[0],
	&x64Parser::tokenBranches54[0],
	&x64Parser::tokenBranches256[0],
	&x64Parser::tokenBranches402[0],
	&x64Parser::tokenBranches255[0],
	&x64Parser::tokenBranches78[0],
	&x64Parser::tokenBranches605[0],
	&x64Parser::tokenBranches701[0],
	&x64Parser::tokenBranches825[0],
	&x64Parser::tokenBranches1226[0],
	&x64Parser::tokenBranches1785[0],
	&x64Parser::tokenBranches2056[0],
	&x64Parser::tokenBranches1225[0],
	&x64Parser::tokenBranches1224[0],
	&x64Parser::tokenBranches1223[0],
	&x64Parser::tokenBranches1235[0],
	&x64Parser::tokenBranches1794[0],
	&x64Parser::tokenBranches2065[0],
	&x64Parser::tokenBranches1234[0],
	&x64Parser::tokenBranches1222[0],
	&x64Parser::tokenBranches604[0],
	&x64Parser::tokenBranches505[0],
	&x64Parser::tokenBranches612[0],
	&x64Parser::tokenBranches708[0],
	&x64Parser::tokenBranches832[0],
	&x64Parser::tokenBranches1206[0],
	&x64Parser::tokenBranches1765[0],
	&x64Parser::tokenBranches2036[0],
	&x64Parser::tokenBranches1205[0],
	&x64Parser::tokenBranches1204[0],
	&x64Parser::tokenBranches1203[0],
	&x64Parser::tokenBranches1215[0],
	&x64Parser::tokenBranches1774[0],
	&x64Parser::tokenBranches2045[0],
	&x64Parser::tokenBranches1214[0],
	&x64Parser::tokenBranches1202[0],
	&x64Parser::tokenBranches1324[0],
	&x64Parser::tokenBranches1736[0],
	&x64Parser::tokenBranches2114[0],
	&x64Parser::tokenBranches1323[0],
	&x64Parser::tokenBranches1322[0],
	&x64Parser::tokenBranches611[0],
	&x64Parser::tokenBranches960[0],
	&x64Parser::tokenBranches959[0],
	&x64Parser::tokenBranches951[0],
	&x64Parser::tokenBranches950[0],
	&x64Parser::tokenBranches510[0],
	&x64Parser::tokenBranches652[0],
	&x64Parser::tokenBranches776[0],
	&x64Parser::tokenBranches900[0],
	&x64Parser::tokenBranches651[0],
	&x64Parser::tokenBranches537[0],
	&x64Parser::tokenBranches643[0],
	&x64Parser::tokenBranches767[0],
	&x64Parser::tokenBranches891[0],
	&x64Parser::tokenBranches1405[0],
	&x64Parser::tokenBranches1937[0],
	&x64Parser::tokenBranches2235[0],
	&x64Parser::tokenBranches1404[0],
	&x64Parser::tokenBranches1403[0],
	&x64Parser::tokenBranches1402[0],
	&x64Parser::tokenBranches1414[0],
	&x64Parser::tokenBranches1946[0],
	&x64Parser::tokenBranches2244[0],
	&x64Parser::tokenBranches1413[0],
	&x64Parser::tokenBranches1401[0],
	&x64Parser::tokenBranches536[0],
	&x64Parser::tokenBranches525[0],
	&x64Parser::tokenBranches564[0],
	&x64Parser::tokenBranches1064[0],
	&x64Parser::tokenBranches1084[0],
	&x64Parser::tokenBranches1083[0],
	&x64Parser::tokenBranches1073[0],
	&x64Parser::tokenBranches1063[0],
	&x64Parser::tokenBranches1055[0],
	&x64Parser::tokenBranches1054[0],
	&x64Parser::tokenBranches1053[0],
	&x64Parser::tokenBranches7[0],
	&x64Parser::tokenBranches6[0],
	&x64Parser::tokenBranches13[0],
	&x64Parser::tokenBranches208[0],
	&x64Parser::tokenBranches354[0],
	&x64Parser::tokenBranches207[0],
	&x64Parser::tokenBranches42[0],
	&x64Parser::tokenBranches143[0],
	&x64Parser::tokenBranches289[0],
	&x64Parser::tokenBranches435[0],
	&x64Parser::tokenBranches41[0],
	&x64Parser::tokenBranches40[0],
	&x64Parser::tokenBranches217[0],
	&x64Parser::tokenBranches363[0],
	&x64Parser::tokenBranches216[0],
	&x64Parser::tokenBranches49[0],
	&x64Parser::tokenBranches162[0],
	&x64Parser::tokenBranches308[0],
	&x64Parser::tokenBranches454[0],
	&x64Parser::tokenBranches48[0],
	&x64Parser::tokenBranches47[0],
	&x64Parser::tokenBranches263[0],
	&x64Parser::tokenBranches409[0],
	&x64Parser::tokenBranches262[0],
	&x64Parser::tokenBranches83[0],
	&x64Parser::tokenBranches591[0],
	&x64Parser::tokenBranches715[0],
	&x64Parser::tokenBranches839[0],
	&x64Parser::tokenBranches1266[0],
	&x64Parser::tokenBranches1825[0],
	&x64Parser::tokenBranches2096[0],
	&x64Parser::tokenBranches1265[0],
	&x64Parser::tokenBranches1264[0],
	&x64Parser::tokenBranches1263[0],
	&x64Parser::tokenBranches1275[0],
	&x64Parser::tokenBranches1834[0],
	&x64Parser::tokenBranches2105[0],
	&x64Parser::tokenBranches1274[0],
	&x64Parser::tokenBranches1262[0],
	&x64Parser::tokenBranches590[0],
	&x64Parser::tokenBranches515[0],
	&x64Parser::tokenBranches598[0],
	&x64Parser::tokenBranches722[0],
	&x64Parser::tokenBranches846[0],
	&x64Parser::tokenBranches1246[0],
	&x64Parser::tokenBranches1805[0],
	&x64Parser::tokenBranches2076[0],
	&x64Parser::tokenBranches1245[0],
	&x64Parser::tokenBranches1244[0],
	&x64Parser::tokenBranches1243[0],
	&x64Parser::tokenBranches1255[0],
	&x64Parser::tokenBranches1814[0],
	&x64Parser::tokenBranches2085[0],
	&x64Parser::tokenBranches1254[0],
	&x64Parser::tokenBranches1242[0],
	&x64Parser::tokenBranches1333[0],
	&x64Parser::tokenBranches1745[0],
	&x64Parser::tokenBranches2123[0],
	&x64Parser::tokenBranches1332[0],
	&x64Parser::tokenBranches1331[0],
	&x64Parser::tokenBranches597[0],
	&x64Parser::tokenBranches976[0],
	&x64Parser::tokenBranches975[0],
	&x64Parser::tokenBranches967[0],
	&x64Parser::tokenBranches966[0],
	&x64Parser::tokenBranches520[0],
	&x64Parser::tokenBranches668[0],
	&x64Parser::tokenBranches792[0],
	&x64Parser::tokenBranches916[0],
	&x64Parser::tokenBranches667[0],
	&x64Parser::tokenBranches544[0],
	&x64Parser::tokenBranches659[0],
	&x64Parser::tokenBranches783[0],
	&x64Parser::tokenBranches907[0],
	&x64Parser::tokenBranches1425[0],
	&x64Parser::tokenBranches1957[0],
	&x64Parser::tokenBranches2255[0],
	&x64Parser::tokenBranches1424[0],
	&x64Parser::tokenBranches1423[0],
	&x64Parser::tokenBranches1422[0],
	&x64Parser::tokenBranches1434[0],
	&x64Parser::tokenBranches1966[0],
	&x64Parser::tokenBranches2264[0],
	&x64Parser::tokenBranches1433[0],
	&x64Parser::tokenBranches1421[0],
	&x64Parser::tokenBranches543[0],
	&x64Parser::tokenBranches530[0],
	&x64Parser::tokenBranches569[0],
	&x64Parser::tokenBranches1100[0],
	&x64Parser::tokenBranches1120[0],
	&x64Parser::tokenBranches1119[0],
	&x64Parser::tokenBranches1109[0],
	&x64Parser::tokenBranches1099[0],
	&x64Parser::tokenBranches1091[0],
	&x64Parser::tokenBranches1090[0],
	&x64Parser::tokenBranches1089[0],
	&x64Parser::tokenBranches12[0],
	&x64Parser::tokenBranches11[0],
	&x64Parser::tokenBranches18[0],
	&x64Parser::tokenBranches235[0],
	&x64Parser::tokenBranches381[0],
	&x64Parser::tokenBranches234[0],
	&x64Parser::tokenBranches63[0],
	&x64Parser::tokenBranches150[0],
	&x64Parser::tokenBranches296[0],
	&x64Parser::tokenBranches442[0],
	&x64Parser::tokenBranches62[0],
	&x64Parser::tokenBranches61[0],
	&x64Parser::tokenBranches244[0],
	&x64Parser::tokenBranches390[0],
	&x64Parser::tokenBranches243[0],
	&x64Parser::tokenBranches70[0],
	&x64Parser::tokenBranches176[0],
	&x64Parser::tokenBranches322[0],
	&x64Parser::tokenBranches468[0],
	&x64Parser::tokenBranches69[0],
	&x64Parser::tokenBranches68[0],
	&x64Parser::tokenBranches270[0],
	&x64Parser::tokenBranches416[0],
	&x64Parser::tokenBranches269[0],
	&x64Parser::tokenBranches88[0],
	&x64Parser::tokenBranches729[0],
	&x64Parser::tokenBranches853[0],
	&x64Parser::tokenBranches1306[0],
	&x64Parser::tokenBranches1865[0],
	&x64Parser::tokenBranches2163[0],
	&x64Parser::tokenBranches1305[0],
	&x64Parser::tokenBranches1304[0],
	&x64Parser::tokenBranches1303[0],
	&x64Parser::tokenBranches1315[0],
	&x64Parser::tokenBranches1874[0],
	&x64Parser::tokenBranches2172[0],
	&x64Parser::tokenBranches1314[0],
	&x64Parser::tokenBranches1302[0],
	&x64Parser::tokenBranches728[0],
	&x64Parser::tokenBranches490[0],
	&x64Parser::tokenBranches736[0],
	&x64Parser::tokenBranches860[0],
	&x64Parser::tokenBranches1286[0],
	&x64Parser::tokenBranches1845[0],
	&x64Parser::tokenBranches2143[0],
	&x64Parser::tokenBranches1285[0],
	&x64Parser::tokenBranches1284[0],
	&x64Parser::tokenBranches1283[0],
	&x64Parser::tokenBranches1295[0],
	&x64Parser::tokenBranches1854[0],
	&x64Parser::tokenBranches2152[0],
	&x64Parser::tokenBranches1294[0],
	&x64Parser::tokenBranches1282[0],
	&x64Parser::tokenBranches1342[0],
	&x64Parser::tokenBranches1754[0],
	&x64Parser::tokenBranches2132[0],
	&x64Parser::tokenBranches1341[0],
	&x64Parser::tokenBranches1340[0],
	&x64Parser::tokenBranches735[0],
	&x64Parser::tokenBranches992[0],
	&x64Parser::tokenBranches991[0],
	&x64Parser::tokenBranches983[0],
	&x64Parser::tokenBranches982[0],
	&x64Parser::tokenBranches495[0],
	&x64Parser::tokenBranches636[0],
	&x64Parser::tokenBranches760[0],
	&x64Parser::tokenBranches884[0],
	&x64Parser::tokenBranches1385[0],
	&x64Parser::tokenBranches1917[0],
	&x64Parser::tokenBranches2215[0],
	&x64Parser::tokenBranches1384[0],
	&x64Parser::tokenBranches1383[0],
	&x64Parser::tokenBranches1382[0],
	&x64Parser::tokenBranches1394[0],
	&x64Parser::tokenBranches1926[0],
	&x64Parser::tokenBranches2224[0],
	&x64Parser::tokenBranches1393[0],
	&x64Parser::tokenBranches1381[0],
	&x64Parser::tokenBranches635[0],
	&x64Parser::tokenBranches1020[0],
	&x64Parser::tokenBranches1019[0],
	&x64Parser::tokenBranches1011[0],
	&x64Parser::tokenBranches1010[0],
	&x64Parser::tokenBranches500[0],
	&x64Parser::tokenBranches684[0],
	&x64Parser::tokenBranches808[0],
	&x64Parser::tokenBranches925[0],
	&x64Parser::tokenBranches683[0],
	&x64Parser::tokenBranches556[0],
	&x64Parser::tokenBranches675[0],
	&x64Parser::tokenBranches799[0],
	&x64Parser::tokenBranches932[0],
	&x64Parser::tokenBranches1445[0],
	&x64Parser::tokenBranches1977[0],
	&x64Parser::tokenBranches2275[0],
	&x64Parser::tokenBranches1444[0],
	&x64Parser::tokenBranches1443[0],
	&x64Parser::tokenBranches1442[0],
	&x64Parser::tokenBranches1454[0],
	&x64Parser::tokenBranches1986[0],
	&x64Parser::tokenBranches2284[0],
	&x64Parser::tokenBranches1453[0],
	&x64Parser::tokenBranches1441[0],
	&x64Parser::tokenBranches555[0],
	&x64Parser::tokenBranches549[0],
	&x64Parser::tokenBranches574[0],
	&x64Parser::tokenBranches1136[0],
	&x64Parser::tokenBranches1156[0],
	&x64Parser::tokenBranches1155[0],
	&x64Parser::tokenBranches1145[0],
	&x64Parser::tokenBranches1135[0],
	&x64Parser::tokenBranches1127[0],
	&x64Parser::tokenBranches1126[0],
	&x64Parser::tokenBranches1125[0],
	&x64Parser::tokenBranches2382[0],
	&x64Parser::tokenBranches2473[0],
	&x64Parser::tokenBranches2565[0],
	&x64Parser::tokenBranches2866[0],
	&x64Parser::tokenBranches3242[0],
	&x64Parser::tokenBranches3454[0],
	&x64Parser::tokenBranches2865[0],
	&x64Parser::tokenBranches2864[0],
	&x64Parser::tokenBranches2863[0],
	&x64Parser::tokenBranches2875[0],
	&x64Parser::tokenBranches3251[0],
	&x64Parser::tokenBranches3463[0],
	&x64Parser::tokenBranches2874[0],
	&x64Parser::tokenBranches2862[0],
	&x64Parser::tokenBranches2381[0],
	&x64Parser::tokenBranches2301[0],
	&x64Parser::tokenBranches2442[0],
	&x64Parser::tokenBranches2534[0],
	&x64Parser::tokenBranches2626[0],
	&x64Parser::tokenBranches2441[0],
	&x64Parser::tokenBranches2341[0],
	&x64Parser::tokenBranches2480[0],
	&x64Parser::tokenBranches2572[0],
	&x64Parser::tokenBranches2886[0],
	&x64Parser::tokenBranches3262[0],
	&x64Parser::tokenBranches3474[0],
	&x64Parser::tokenBranches2885[0],
	&x64Parser::tokenBranches2884[0],
	&x64Parser::tokenBranches2883[0],
	&x64Parser::tokenBranches2895[0],
	&x64Parser::tokenBranches3271[0],
	&x64Parser::tokenBranches3483[0],
	&x64Parser::tokenBranches2894[0],
	&x64Parser::tokenBranches2882[0],
	&x64Parser::tokenBranches2340[0],
	&x64Parser::tokenBranches2388[0],
	&x64Parser::tokenBranches2306[0],
	&x64Parser::tokenBranches2395[0],
	&x64Parser::tokenBranches2487[0],
	&x64Parser::tokenBranches2579[0],
	&x64Parser::tokenBranches2778[0],
	&x64Parser::tokenBranches3154[0],
	&x64Parser::tokenBranches3366[0],
	&x64Parser::tokenBranches2777[0],
	&x64Parser::tokenBranches2776[0],
	&x64Parser::tokenBranches2846[0],
	&x64Parser::tokenBranches3222[0],
	&x64Parser::tokenBranches3434[0],
	&x64Parser::tokenBranches2845[0],
	&x64Parser::tokenBranches2844[0],
	&x64Parser::tokenBranches2843[0],
	&x64Parser::tokenBranches2855[0],
	&x64Parser::tokenBranches3231[0],
	&x64Parser::tokenBranches3443[0],
	&x64Parser::tokenBranches2854[0],
	&x64Parser::tokenBranches2842[0],
	&x64Parser::tokenBranches2394[0],
	&x64Parser::tokenBranches2663[0],
	&x64Parser::tokenBranches2662[0],
	&x64Parser::tokenBranches2654[0],
	&x64Parser::tokenBranches2653[0],
	&x64Parser::tokenBranches2311[0],
	&x64Parser::tokenBranches2426[0],
	&x64Parser::tokenBranches2518[0],
	&x64Parser::tokenBranches2610[0],
	&x64Parser::tokenBranches2787[0],
	&x64Parser::tokenBranches3163[0],
	&x64Parser::tokenBranches3375[0],
	&x64Parser::tokenBranches2786[0],
	&x64Parser::tokenBranches2785[0],
	&x64Parser::tokenBranches2938[0],
	&x64Parser::tokenBranches3314[0],
	&x64Parser::tokenBranches3526[0],
	&x64Parser::tokenBranches2937[0],
	&x64Parser::tokenBranches2936[0],
	&x64Parser::tokenBranches2935[0],
	&x64Parser::tokenBranches2947[0],
	&x64Parser::tokenBranches3323[0],
	&x64Parser::tokenBranches3535[0],
	&x64Parser::tokenBranches2946[0],
	&x64Parser::tokenBranches2934[0],
	&x64Parser::tokenBranches2425[0],
	&x64Parser::tokenBranches2691[0],
	&x64Parser::tokenBranches2690[0],
	&x64Parser::tokenBranches2682[0],
	&x64Parser::tokenBranches2681[0],
	&x64Parser::tokenBranches2316[0],
	&x64Parser::tokenBranches2451[0],
	&x64Parser::tokenBranches2543[0],
	&x64Parser::tokenBranches2635[0],
	&x64Parser::tokenBranches2450[0],
	&x64Parser::tokenBranches2348[0],
	&x64Parser::tokenBranches2433[0],
	&x64Parser::tokenBranches2525[0],
	&x64Parser::tokenBranches2617[0],
	&x64Parser::tokenBranches2958[0],
	&x64Parser::tokenBranches3334[0],
	&x64Parser::tokenBranches3546[0],
	&x64Parser::tokenBranches2957[0],
	&x64Parser::tokenBranches2956[0],
	&x64Parser::tokenBranches2955[0],
	&x64Parser::tokenBranches2967[0],
	&x64Parser::tokenBranches3343[0],
	&x64Parser::tokenBranches3555[0],
	&x64Parser::tokenBranches2966[0],
	&x64Parser::tokenBranches2954[0],
	&x64Parser::tokenBranches2347[0],
	&x64Parser::tokenBranches2334[0],
	&x64Parser::tokenBranches2361[0],
	&x64Parser::tokenBranches2735[0],
	&x64Parser::tokenBranches2755[0],
	&x64Parser::tokenBranches2754[0],
	&x64Parser::tokenBranches2744[0],
	&x64Parser::tokenBranches2734[0],
	&x64Parser::tokenBranches2726[0],
	&x64Parser::tokenBranches2725[0],
	&x64Parser::tokenBranches2724[0],
	&x64Parser::tokenBranches17[0],
	&x64Parser::tokenBranches16[0],
	&x64Parser::tokenBranches183[0],
	&x64Parser::tokenBranches329[0],
	&x64Parser::tokenBranches182[0],
	&x64Parser::tokenBranches23[0],
	&x64Parser::tokenBranches129[0],
	&x64Parser::tokenBranches275[0],
	&x64Parser::tokenBranches421[0],
	&x64Parser::tokenBranches22[0],
	&x64Parser::tokenBranches21[0],
	&x64Parser::tokenBranches190[0],
	&x64Parser::tokenBranches336[0],
	&x64Parser::tokenBranches189[0],
	&x64Parser::tokenBranches28[0],
	&x64Parser::tokenBranches155[0],
	&x64Parser::tokenBranches301[0],
	&x64Parser::tokenBranches447[0],
	&x64Parser::tokenBranches27[0],
	&x64Parser::tokenBranches26[0],
	&x64Parser::tokenBranches249[0],
	&x64Parser::tokenBranches395[0],
	&x64Parser::tokenBranches248[0],
	&x64Parser::tokenBranches73[0],
	&x64Parser::tokenBranches579[0],
	&x64Parser::tokenBranches689[0],
	&x64Parser::tokenBranches813[0],
	&x64Parser::tokenBranches1188[0],
	&x64Parser::tokenBranches1720[0],
	&x64Parser::tokenBranches2018[0],
	&x64Parser::tokenBranches1187[0],
	&x64Parser::tokenBranches1186[0],
	&x64Parser::tokenBranches1185[0],
	&x64Parser::tokenBranches1195[0],
	&x64Parser::tokenBranches1727[0],
	&x64Parser::tokenBranches2025[0],
	&x64Parser::tokenBranches1194[0],
	&x64Parser::tokenBranches1184[0],
	&x64Parser::tokenBranches578[0],
	&x64Parser::tokenBranches471[0],
	&x64Parser::tokenBranches584[0],
	&x64Parser::tokenBranches694[0],
	&x64Parser::tokenBranches818[0],
	&x64Parser::tokenBranches1163[0],
	&x64Parser::tokenBranches1695[0],
	&x64Parser::tokenBranches1993[0],
	&x64Parser::tokenBranches1162[0],
	&x64Parser::tokenBranches1161[0],
	&x64Parser::tokenBranches1172[0],
	&x64Parser::tokenBranches1704[0],
	&x64Parser::tokenBranches2002[0],
	&x64Parser::tokenBranches1171[0],
	&x64Parser::tokenBranches1170[0],
	&x64Parser::tokenBranches1169[0],
	&x64Parser::tokenBranches1179[0],
	&x64Parser::tokenBranches1711[0],
	&x64Parser::tokenBranches2009[0],
	&x64Parser::tokenBranches1178[0],
	&x64Parser::tokenBranches1168[0],
	&x64Parser::tokenBranches583[0],
	&x64Parser::tokenBranches944[0],
	&x64Parser::tokenBranches943[0],
	&x64Parser::tokenBranches937[0],
	&x64Parser::tokenBranches936[0],
	&x64Parser::tokenBranches474[0],
	&x64Parser::tokenBranches617[0],
	&x64Parser::tokenBranches741[0],
	&x64Parser::tokenBranches865[0],
	&x64Parser::tokenBranches1351[0],
	&x64Parser::tokenBranches1883[0],
	&x64Parser::tokenBranches2181[0],
	&x64Parser::tokenBranches1350[0],
	&x64Parser::tokenBranches1349[0],
	&x64Parser::tokenBranches1348[0],
	&x64Parser::tokenBranches1358[0],
	&x64Parser::tokenBranches1890[0],
	&x64Parser::tokenBranches2188[0],
	&x64Parser::tokenBranches1357[0],
	&x64Parser::tokenBranches1347[0],
	&x64Parser::tokenBranches616[0],
	&x64Parser::tokenBranches1004[0],
	&x64Parser::tokenBranches1003[0],
	&x64Parser::tokenBranches997[0],
	&x64Parser::tokenBranches996[0],
	&x64Parser::tokenBranches477[0],
	&x64Parser::tokenBranches629[0],
	&x64Parser::tokenBranches753[0],
	&x64Parser::tokenBranches877[0],
	&x64Parser::tokenBranches628[0],
	&x64Parser::tokenBranches485[0],
	&x64Parser::tokenBranches622[0],
	&x64Parser::tokenBranches746[0],
	&x64Parser::tokenBranches870[0],
	&x64Parser::tokenBranches1367[0],
	&x64Parser::tokenBranches1899[0],
	&x64Parser::tokenBranches2197[0],
	&x64Parser::tokenBranches1366[0],
	&x64Parser::tokenBranches1365[0],
	&x64Parser::tokenBranches1364[0],
	&x64Parser::tokenBranches1374[0],
	&x64Parser::tokenBranches1906[0],
	&x64Parser::tokenBranches2204[0],
	&x64Parser::tokenBranches1373[0],
	&x64Parser::tokenBranches1363[0],
	&x64Parser::tokenBranches484[0],
	&x64Parser::tokenBranches480[0],
	&x64Parser::tokenBranches559[0],
	&x64Parser::tokenBranches1032[0],
	&x64Parser::tokenBranches1048[0],
	&x64Parser::tokenBranches1047[0],
	&x64Parser::tokenBranches1039[0],
	&x64Parser::tokenBranches1031[0],
	&x64Parser::tokenBranches1025[0],
	&x64Parser::tokenBranches1024[0],
	&x64Parser::tokenBranches1023[0],
	&x64Parser::tokenBranches2366[0],
	&x64Parser::tokenBranches2456[0],
	&x64Parser::tokenBranches2548[0],
	&x64Parser::tokenBranches2812[0],
	&x64Parser::tokenBranches3188[0],
	&x64Parser::tokenBranches3400[0],
	&x64Parser::tokenBranches2811[0],
	&x64Parser::tokenBranches2810[0],
	&x64Parser::tokenBranches2809[0],
	&x64Parser::tokenBranches2819[0],
	&x64Parser::tokenBranches3195[0],
	&x64Parser::tokenBranches3407[0],
	&x64Parser::tokenBranches2818[0],
	&x64Parser::tokenBranches2808[0],
	&x64Parser::tokenBranches2365[0],
	&x64Parser::tokenBranches2287[0],
	&x64Parser::tokenBranches2412[0],
	&x64Parser::tokenBranches2504[0],
	&x64Parser::tokenBranches2596[0],
	&x64Parser::tokenBranches2411[0],
	&x64Parser::tokenBranches2324[0],
	&x64Parser::tokenBranches2461[0],
	&x64Parser::tokenBranches2553[0],
	&x64Parser::tokenBranches2828[0],
	&x64Parser::tokenBranches3204[0],
	&x64Parser::tokenBranches3416[0],
	&x64Parser::tokenBranches2827[0],
	&x64Parser::tokenBranches2826[0],
	&x64Parser::tokenBranches2825[0],
	&x64Parser::tokenBranches2835[0],
	&x64Parser::tokenBranches3211[0],
	&x64Parser::tokenBranches3423[0],
	&x64Parser::tokenBranches2834[0],
	&x64Parser::tokenBranches2824[0],
	&x64Parser::tokenBranches2323[0],
	&x64Parser::tokenBranches2370[0],
	&x64Parser::tokenBranches2290[0],
	&x64Parser::tokenBranches2375[0],
	&x64Parser::tokenBranches2466[0],
	&x64Parser::tokenBranches2558[0],
	&x64Parser::tokenBranches2762[0],
	&x64Parser::tokenBranches3138[0],
	&x64Parser::tokenBranches3350[0],
	&x64Parser::tokenBranches2761[0],
	&x64Parser::tokenBranches2760[0],
	&x64Parser::tokenBranches2796[0],
	&x64Parser::tokenBranches3172[0],
	&x64Parser::tokenBranches3384[0],
	&x64Parser::tokenBranches2795[0],
	&x64Parser::tokenBranches2794[0],
	&x64Parser::tokenBranches2793[0],
	&x64Parser::tokenBranches2803[0],
	&x64Parser::tokenBranches3179[0],
	&x64Parser::tokenBranches3391[0],
	&x64Parser::tokenBranches2802[0],
	&x64Parser::tokenBranches2792[0],
	&x64Parser::tokenBranches2374[0],
	&x64Parser::tokenBranches2647[0],
	&x64Parser::tokenBranches2646[0],
	&x64Parser::tokenBranches2640[0],
	&x64Parser::tokenBranches2639[0],
	&x64Parser::tokenBranches2293[0],
	&x64Parser::tokenBranches2400[0],
	&x64Parser::tokenBranches2492[0],
	&x64Parser::tokenBranches2584[0],
	&x64Parser::tokenBranches2769[0],
	&x64Parser::tokenBranches3145[0],
	&x64Parser::tokenBranches3357[0],
	&x64Parser::tokenBranches2768[0],
	&x64Parser::tokenBranches2767[0],
	&x64Parser::tokenBranches2904[0],
	&x64Parser::tokenBranches3280[0],
	&x64Parser::tokenBranches3492[0],
	&x64Parser::tokenBranches2903[0],
	&x64Parser::tokenBranches2902[0],
	&x64Parser::tokenBranches2901[0],
	&x64Parser::tokenBranches2911[0],
	&x64Parser::tokenBranches3287[0],
	&x64Parser::tokenBranches3499[0],
	&x64Parser::tokenBranches2910[0],
	&x64Parser::tokenBranches2900[0],
	&x64Parser::tokenBranches2399[0],
	&x64Parser::tokenBranches2675[0],
	&x64Parser::tokenBranches2674[0],
	&x64Parser::tokenBranches2668[0],
	&x64Parser::tokenBranches2667[0],
	&x64Parser::tokenBranches2296[0],
	&x64Parser::tokenBranches2419[0],
	&x64Parser::tokenBranches2511[0],
	&x64Parser::tokenBranches2603[0],
	&x64Parser::tokenBranches2418[0],
	&x64Parser::tokenBranches2329[0],
	&x64Parser::tokenBranches2405[0],
	&x64Parser::tokenBranches2497[0],
	&x64Parser::tokenBranches2589[0],
	&x64Parser::tokenBranches2920[0],
	&x64Parser::tokenBranches3296[0],
	&x64Parser::tokenBranches3508[0],
	&x64Parser::tokenBranches2919[0],
	&x64Parser::tokenBranches2918[0],
	&x64Parser::tokenBranches2917[0],
	&x64Parser::tokenBranches2927[0],
	&x64Parser::tokenBranches3303[0],
	&x64Parser::tokenBranches3515[0],
	&x64Parser::tokenBranches2926[0],
	&x64Parser::tokenBranches2916[0],
	&x64Parser::tokenBranches2328[0],
	&x64Parser::tokenBranches2319[0],
	&x64Parser::tokenBranches2353[0],
	&x64Parser::tokenBranches2352[0],
	&x64Parser::tokenBranches2351[0],
	&x64Parser::tokenBranches2356[0],
	&x64Parser::tokenBranches2703[0],
	&x64Parser::tokenBranches2719[0],
	&x64Parser::tokenBranches2718[0],
	&x64Parser::tokenBranches2710[0],
	&x64Parser::tokenBranches2702[0],
	&x64Parser::tokenBranches2696[0],
	&x64Parser::tokenBranches2695[0],
	&x64Parser::tokenBranches2694[0],
	&x64Parser::tokenBranches2[0],
	&x64Parser::tokenBranches1[0],
};

Coding x64Parser::Coding1[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding2[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding3[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding4[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding5[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding6[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding7[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding8[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding9[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding10[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding11[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding12[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding13[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding14[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding15[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding16[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding17[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding18[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding19[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding20[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding21[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding22[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding23[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding24[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding25[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding26[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding27[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding28[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding29[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding30[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding31[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding32[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding33[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding34[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding35[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding36[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding37[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding38[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding39[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding40[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding41[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding42[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding43[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding44[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding45[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding46[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding47[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding48[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding49[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding50[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding51[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding52[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding53[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding54[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding55[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding56[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding57[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding58[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding59[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding60[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding61[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding62[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding63[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding64[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding65[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding66[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding67[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding68[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding69[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding70[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding71[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding72[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding73[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding74[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding75[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding76[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding77[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding78[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding79[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding80[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding81[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding82[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding83[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding84[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding85[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding86[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding87[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding88[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding89[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding90[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding91[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding92[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding93[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding94[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding95[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding96[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding97[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding98[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding99[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding100[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding101[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding102[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding103[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding104[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding105[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding106[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 1056, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding107[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding108[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding109[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding110[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding111[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding112[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding113[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding114[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding115[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding116[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding117[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding118[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding119[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding120[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding121[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding122[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding123[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding124[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding125[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding126[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding127[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding128[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding129[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding130[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding131[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding132[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding133[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding134[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding135[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding136[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding137[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding138[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding139[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding140[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding141[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding142[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding143[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding144[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding145[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding146[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding147[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding148[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding149[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding150[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding151[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding152[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding153[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding154[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding155[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding156[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding157[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding158[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding159[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding160[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding161[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding162[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding163[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding164[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding165[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding166[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding167[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding168[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding169[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding170[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding171[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding172[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding173[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding174[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding175[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 62, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding176[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding177[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding178[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding179[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding180[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding181[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding182[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding183[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding184[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 1057, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding185[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding186[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding187[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding188[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding189[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding190[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding191[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding192[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding193[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding194[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding195[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding196[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding197[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding198[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding199[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding200[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding201[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding202[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding203[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding204[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding205[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding206[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding207[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding208[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding209[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding210[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding211[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding212[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding213[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding214[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding215[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding216[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding217[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding218[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding219[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding220[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding221[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding222[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding223[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding224[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding225[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding226[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding227[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding228[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding229[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding230[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding231[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding232[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding233[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding234[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding235[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding236[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding237[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding238[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding239[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding240[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding241[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding242[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 1056, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding243[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding244[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding245[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding246[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding247[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding248[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding249[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding250[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding251[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding252[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding253[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding254[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding255[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding256[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding257[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding258[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding259[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding260[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding261[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding262[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding263[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding264[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding265[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding266[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding267[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding268[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding269[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding270[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding271[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding272[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding273[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding274[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding275[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding276[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding277[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding278[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding279[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding280[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding281[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding282[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding283[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding284[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding285[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding286[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding287[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding288[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding289[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding290[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding291[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding292[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding293[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding294[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding295[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding296[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding297[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding298[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding299[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding300[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding301[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding302[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding303[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding304[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding305[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding306[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding307[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding308[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding309[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding310[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding311[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding312[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding313[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding314[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding315[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding316[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding317[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 11, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding318[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding319[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 9, -1, 0, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding320[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 9, -1, 0, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding321[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::optional | Coding::indirect), 17, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 10, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding322[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding323[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding324[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding325[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding326[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding327[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding328[] = {
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding329[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding330[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding331[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding332[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding333[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding334[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding335[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding336[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding337[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding338[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 6 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 13, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding339[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 6 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 13, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding340[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 6 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 2, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 13, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding341[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding342[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 33, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 9, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding343[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect), 13, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 12, 3, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding344[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 4, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding345[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding346[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 4, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding347[] = {
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 20, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding348[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding349[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding350[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding351[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding352[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding353[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding354[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding355[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding356[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding357[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding358[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding359[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding360[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding361[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding362[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding363[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding364[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding365[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding366[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding367[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding368[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding369[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding370[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding371[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding372[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding373[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding374[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding375[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding376[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding377[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding378[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding379[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding380[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding381[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding382[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding383[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding384[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding385[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding386[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding387[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding388[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 18, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding389[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, -1, 2, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding390[] = {
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding391[] = {
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding392[] = {
	{ Coding::native },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding393[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding394[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding395[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding396[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding397[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding398[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding399[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding400[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding401[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding402[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding403[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding404[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding405[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding406[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding407[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding408[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding409[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding410[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding411[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding412[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding413[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding414[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding415[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding416[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding417[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding418[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding419[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 205, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding420[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 207, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding421[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding422[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding423[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding424[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding425[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding426[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding427[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding428[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding429[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding430[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding431[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding432[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding433[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding434[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding435[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding436[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding437[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding438[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding439[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding440[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding441[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding442[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding443[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding444[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding445[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding446[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding447[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding448[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding449[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding450[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding451[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding452[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding453[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding454[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding455[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding456[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding457[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding458[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding459[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding460[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding461[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding462[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding463[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding464[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding465[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding466[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding467[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding468[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding469[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding470[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding471[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding472[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding473[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding474[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding475[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding476[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding477[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding478[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding479[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding480[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding481[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding482[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding483[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding484[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding485[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding486[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding487[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding488[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding489[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding490[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding491[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding492[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding493[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding494[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding495[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding496[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding497[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding498[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding499[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding500[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding501[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding502[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding503[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding504[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding505[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding506[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 165, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding507[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding508[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding509[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding510[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding511[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding512[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding513[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding514[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding515[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding516[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding517[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding518[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding519[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding520[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding521[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding522[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding523[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding524[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding525[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding526[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding527[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding528[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding529[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding530[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding531[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding532[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding533[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding534[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding535[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding536[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding537[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding538[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding539[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding540[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding541[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding542[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding543[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding544[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding545[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding546[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ Coding::native },
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding547[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ Coding::native },
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding548[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding549[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding550[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 3, 1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding551[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding552[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding553[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 202, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding554[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 203, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding555[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding556[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding557[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding558[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding559[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding560[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding561[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding562[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding563[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding564[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding565[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding566[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding567[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding568[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding569[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding570[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding571[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding572[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding573[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding574[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding575[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding576[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding577[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding578[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding579[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding580[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding581[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding582[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding583[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding584[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding585[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding586[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding587[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding588[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding589[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding590[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding591[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding592[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding593[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding594[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding595[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding596[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding597[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding598[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding599[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding600[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding601[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 3 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding602[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 4 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding603[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 5 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 8, 0, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding604[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding605[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 0 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding606[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding607[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 1 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding608[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding609[] = {
	{ CODING_NAME("unknown")  Coding::stateFunc, 2 },
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::Coding610[] = {
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ CODING_NAME("unknown")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding * x64Parser::Codings[610] = {
	x64Parser::Coding1,
	x64Parser::Coding2,
	x64Parser::Coding3,
	x64Parser::Coding4,
	x64Parser::Coding5,
	x64Parser::Coding6,
	x64Parser::Coding7,
	x64Parser::Coding8,
	x64Parser::Coding9,
	x64Parser::Coding10,
	x64Parser::Coding11,
	x64Parser::Coding12,
	x64Parser::Coding13,
	x64Parser::Coding14,
	x64Parser::Coding15,
	x64Parser::Coding16,
	x64Parser::Coding17,
	x64Parser::Coding18,
	x64Parser::Coding19,
	x64Parser::Coding20,
	x64Parser::Coding21,
	x64Parser::Coding22,
	x64Parser::Coding23,
	x64Parser::Coding24,
	x64Parser::Coding25,
	x64Parser::Coding26,
	x64Parser::Coding27,
	x64Parser::Coding28,
	x64Parser::Coding29,
	x64Parser::Coding30,
	x64Parser::Coding31,
	x64Parser::Coding32,
	x64Parser::Coding33,
	x64Parser::Coding34,
	x64Parser::Coding35,
	x64Parser::Coding36,
	x64Parser::Coding37,
	x64Parser::Coding38,
	x64Parser::Coding39,
	x64Parser::Coding40,
	x64Parser::Coding41,
	x64Parser::Coding42,
	x64Parser::Coding43,
	x64Parser::Coding44,
	x64Parser::Coding45,
	x64Parser::Coding46,
	x64Parser::Coding47,
	x64Parser::Coding48,
	x64Parser::Coding49,
	x64Parser::Coding50,
	x64Parser::Coding51,
	x64Parser::Coding52,
	x64Parser::Coding53,
	x64Parser::Coding54,
	x64Parser::Coding55,
	x64Parser::Coding56,
	x64Parser::Coding57,
	x64Parser::Coding58,
	x64Parser::Coding59,
	x64Parser::Coding60,
	x64Parser::Coding61,
	x64Parser::Coding62,
	x64Parser::Coding63,
	x64Parser::Coding64,
	x64Parser::Coding65,
	x64Parser::Coding66,
	x64Parser::Coding67,
	x64Parser::Coding68,
	x64Parser::Coding69,
	x64Parser::Coding70,
	x64Parser::Coding71,
	x64Parser::Coding72,
	x64Parser::Coding73,
	x64Parser::Coding74,
	x64Parser::Coding75,
	x64Parser::Coding76,
	x64Parser::Coding77,
	x64Parser::Coding78,
	x64Parser::Coding79,
	x64Parser::Coding80,
	x64Parser::Coding81,
	x64Parser::Coding82,
	x64Parser::Coding83,
	x64Parser::Coding84,
	x64Parser::Coding85,
	x64Parser::Coding86,
	x64Parser::Coding87,
	x64Parser::Coding88,
	x64Parser::Coding89,
	x64Parser::Coding90,
	x64Parser::Coding91,
	x64Parser::Coding92,
	x64Parser::Coding93,
	x64Parser::Coding94,
	x64Parser::Coding95,
	x64Parser::Coding96,
	x64Parser::Coding97,
	x64Parser::Coding98,
	x64Parser::Coding99,
	x64Parser::Coding100,
	x64Parser::Coding101,
	x64Parser::Coding102,
	x64Parser::Coding103,
	x64Parser::Coding104,
	x64Parser::Coding105,
	x64Parser::Coding106,
	x64Parser::Coding107,
	x64Parser::Coding108,
	x64Parser::Coding109,
	x64Parser::Coding110,
	x64Parser::Coding111,
	x64Parser::Coding112,
	x64Parser::Coding113,
	x64Parser::Coding114,
	x64Parser::Coding115,
	x64Parser::Coding116,
	x64Parser::Coding117,
	x64Parser::Coding118,
	x64Parser::Coding119,
	x64Parser::Coding120,
	x64Parser::Coding121,
	x64Parser::Coding122,
	x64Parser::Coding123,
	x64Parser::Coding124,
	x64Parser::Coding125,
	x64Parser::Coding126,
	x64Parser::Coding127,
	x64Parser::Coding128,
	x64Parser::Coding129,
	x64Parser::Coding130,
	x64Parser::Coding131,
	x64Parser::Coding132,
	x64Parser::Coding133,
	x64Parser::Coding134,
	x64Parser::Coding135,
	x64Parser::Coding136,
	x64Parser::Coding137,
	x64Parser::Coding138,
	x64Parser::Coding139,
	x64Parser::Coding140,
	x64Parser::Coding141,
	x64Parser::Coding142,
	x64Parser::Coding143,
	x64Parser::Coding144,
	x64Parser::Coding145,
	x64Parser::Coding146,
	x64Parser::Coding147,
	x64Parser::Coding148,
	x64Parser::Coding149,
	x64Parser::Coding150,
	x64Parser::Coding151,
	x64Parser::Coding152,
	x64Parser::Coding153,
	x64Parser::Coding154,
	x64Parser::Coding155,
	x64Parser::Coding156,
	x64Parser::Coding157,
	x64Parser::Coding158,
	x64Parser::Coding159,
	x64Parser::Coding160,
	x64Parser::Coding161,
	x64Parser::Coding162,
	x64Parser::Coding163,
	x64Parser::Coding164,
	x64Parser::Coding165,
	x64Parser::Coding166,
	x64Parser::Coding167,
	x64Parser::Coding168,
	x64Parser::Coding169,
	x64Parser::Coding170,
	x64Parser::Coding171,
	x64Parser::Coding172,
	x64Parser::Coding173,
	x64Parser::Coding174,
	x64Parser::Coding175,
	x64Parser::Coding176,
	x64Parser::Coding177,
	x64Parser::Coding178,
	x64Parser::Coding179,
	x64Parser::Coding180,
	x64Parser::Coding181,
	x64Parser::Coding182,
	x64Parser::Coding183,
	x64Parser::Coding184,
	x64Parser::Coding185,
	x64Parser::Coding186,
	x64Parser::Coding187,
	x64Parser::Coding188,
	x64Parser::Coding189,
	x64Parser::Coding190,
	x64Parser::Coding191,
	x64Parser::Coding192,
	x64Parser::Coding193,
	x64Parser::Coding194,
	x64Parser::Coding195,
	x64Parser::Coding196,
	x64Parser::Coding197,
	x64Parser::Coding198,
	x64Parser::Coding199,
	x64Parser::Coding200,
	x64Parser::Coding201,
	x64Parser::Coding202,
	x64Parser::Coding203,
	x64Parser::Coding204,
	x64Parser::Coding205,
	x64Parser::Coding206,
	x64Parser::Coding207,
	x64Parser::Coding208,
	x64Parser::Coding209,
	x64Parser::Coding210,
	x64Parser::Coding211,
	x64Parser::Coding212,
	x64Parser::Coding213,
	x64Parser::Coding214,
	x64Parser::Coding215,
	x64Parser::Coding216,
	x64Parser::Coding217,
	x64Parser::Coding218,
	x64Parser::Coding219,
	x64Parser::Coding220,
	x64Parser::Coding221,
	x64Parser::Coding222,
	x64Parser::Coding223,
	x64Parser::Coding224,
	x64Parser::Coding225,
	x64Parser::Coding226,
	x64Parser::Coding227,
	x64Parser::Coding228,
	x64Parser::Coding229,
	x64Parser::Coding230,
	x64Parser::Coding231,
	x64Parser::Coding232,
	x64Parser::Coding233,
	x64Parser::Coding234,
	x64Parser::Coding235,
	x64Parser::Coding236,
	x64Parser::Coding237,
	x64Parser::Coding238,
	x64Parser::Coding239,
	x64Parser::Coding240,
	x64Parser::Coding241,
	x64Parser::Coding242,
	x64Parser::Coding243,
	x64Parser::Coding244,
	x64Parser::Coding245,
	x64Parser::Coding246,
	x64Parser::Coding247,
	x64Parser::Coding248,
	x64Parser::Coding249,
	x64Parser::Coding250,
	x64Parser::Coding251,
	x64Parser::Coding252,
	x64Parser::Coding253,
	x64Parser::Coding254,
	x64Parser::Coding255,
	x64Parser::Coding256,
	x64Parser::Coding257,
	x64Parser::Coding258,
	x64Parser::Coding259,
	x64Parser::Coding260,
	x64Parser::Coding261,
	x64Parser::Coding262,
	x64Parser::Coding263,
	x64Parser::Coding264,
	x64Parser::Coding265,
	x64Parser::Coding266,
	x64Parser::Coding267,
	x64Parser::Coding268,
	x64Parser::Coding269,
	x64Parser::Coding270,
	x64Parser::Coding271,
	x64Parser::Coding272,
	x64Parser::Coding273,
	x64Parser::Coding274,
	x64Parser::Coding275,
	x64Parser::Coding276,
	x64Parser::Coding277,
	x64Parser::Coding278,
	x64Parser::Coding279,
	x64Parser::Coding280,
	x64Parser::Coding281,
	x64Parser::Coding282,
	x64Parser::Coding283,
	x64Parser::Coding284,
	x64Parser::Coding285,
	x64Parser::Coding286,
	x64Parser::Coding287,
	x64Parser::Coding288,
	x64Parser::Coding289,
	x64Parser::Coding290,
	x64Parser::Coding291,
	x64Parser::Coding292,
	x64Parser::Coding293,
	x64Parser::Coding294,
	x64Parser::Coding295,
	x64Parser::Coding296,
	x64Parser::Coding297,
	x64Parser::Coding298,
	x64Parser::Coding299,
	x64Parser::Coding300,
	x64Parser::Coding301,
	x64Parser::Coding302,
	x64Parser::Coding303,
	x64Parser::Coding304,
	x64Parser::Coding305,
	x64Parser::Coding306,
	x64Parser::Coding307,
	x64Parser::Coding308,
	x64Parser::Coding309,
	x64Parser::Coding310,
	x64Parser::Coding311,
	x64Parser::Coding312,
	x64Parser::Coding313,
	x64Parser::Coding314,
	x64Parser::Coding315,
	x64Parser::Coding316,
	x64Parser::Coding317,
	x64Parser::Coding318,
	x64Parser::Coding319,
	x64Parser::Coding320,
	x64Parser::Coding321,
	x64Parser::Coding322,
	x64Parser::Coding323,
	x64Parser::Coding324,
	x64Parser::Coding325,
	x64Parser::Coding326,
	x64Parser::Coding327,
	x64Parser::Coding328,
	x64Parser::Coding329,
	x64Parser::Coding330,
	x64Parser::Coding331,
	x64Parser::Coding332,
	x64Parser::Coding333,
	x64Parser::Coding334,
	x64Parser::Coding335,
	x64Parser::Coding336,
	x64Parser::Coding337,
	x64Parser::Coding338,
	x64Parser::Coding339,
	x64Parser::Coding340,
	x64Parser::Coding341,
	x64Parser::Coding342,
	x64Parser::Coding343,
	x64Parser::Coding344,
	x64Parser::Coding345,
	x64Parser::Coding346,
	x64Parser::Coding347,
	x64Parser::Coding348,
	x64Parser::Coding349,
	x64Parser::Coding350,
	x64Parser::Coding351,
	x64Parser::Coding352,
	x64Parser::Coding353,
	x64Parser::Coding354,
	x64Parser::Coding355,
	x64Parser::Coding356,
	x64Parser::Coding357,
	x64Parser::Coding358,
	x64Parser::Coding359,
	x64Parser::Coding360,
	x64Parser::Coding361,
	x64Parser::Coding362,
	x64Parser::Coding363,
	x64Parser::Coding364,
	x64Parser::Coding365,
	x64Parser::Coding366,
	x64Parser::Coding367,
	x64Parser::Coding368,
	x64Parser::Coding369,
	x64Parser::Coding370,
	x64Parser::Coding371,
	x64Parser::Coding372,
	x64Parser::Coding373,
	x64Parser::Coding374,
	x64Parser::Coding375,
	x64Parser::Coding376,
	x64Parser::Coding377,
	x64Parser::Coding378,
	x64Parser::Coding379,
	x64Parser::Coding380,
	x64Parser::Coding381,
	x64Parser::Coding382,
	x64Parser::Coding383,
	x64Parser::Coding384,
	x64Parser::Coding385,
	x64Parser::Coding386,
	x64Parser::Coding387,
	x64Parser::Coding388,
	x64Parser::Coding389,
	x64Parser::Coding390,
	x64Parser::Coding391,
	x64Parser::Coding392,
	x64Parser::Coding393,
	x64Parser::Coding394,
	x64Parser::Coding395,
	x64Parser::Coding396,
	x64Parser::Coding397,
	x64Parser::Coding398,
	x64Parser::Coding399,
	x64Parser::Coding400,
	x64Parser::Coding401,
	x64Parser::Coding402,
	x64Parser::Coding403,
	x64Parser::Coding404,
	x64Parser::Coding405,
	x64Parser::Coding406,
	x64Parser::Coding407,
	x64Parser::Coding408,
	x64Parser::Coding409,
	x64Parser::Coding410,
	x64Parser::Coding411,
	x64Parser::Coding412,
	x64Parser::Coding413,
	x64Parser::Coding414,
	x64Parser::Coding415,
	x64Parser::Coding416,
	x64Parser::Coding417,
	x64Parser::Coding418,
	x64Parser::Coding419,
	x64Parser::Coding420,
	x64Parser::Coding421,
	x64Parser::Coding422,
	x64Parser::Coding423,
	x64Parser::Coding424,
	x64Parser::Coding425,
	x64Parser::Coding426,
	x64Parser::Coding427,
	x64Parser::Coding428,
	x64Parser::Coding429,
	x64Parser::Coding430,
	x64Parser::Coding431,
	x64Parser::Coding432,
	x64Parser::Coding433,
	x64Parser::Coding434,
	x64Parser::Coding435,
	x64Parser::Coding436,
	x64Parser::Coding437,
	x64Parser::Coding438,
	x64Parser::Coding439,
	x64Parser::Coding440,
	x64Parser::Coding441,
	x64Parser::Coding442,
	x64Parser::Coding443,
	x64Parser::Coding444,
	x64Parser::Coding445,
	x64Parser::Coding446,
	x64Parser::Coding447,
	x64Parser::Coding448,
	x64Parser::Coding449,
	x64Parser::Coding450,
	x64Parser::Coding451,
	x64Parser::Coding452,
	x64Parser::Coding453,
	x64Parser::Coding454,
	x64Parser::Coding455,
	x64Parser::Coding456,
	x64Parser::Coding457,
	x64Parser::Coding458,
	x64Parser::Coding459,
	x64Parser::Coding460,
	x64Parser::Coding461,
	x64Parser::Coding462,
	x64Parser::Coding463,
	x64Parser::Coding464,
	x64Parser::Coding465,
	x64Parser::Coding466,
	x64Parser::Coding467,
	x64Parser::Coding468,
	x64Parser::Coding469,
	x64Parser::Coding470,
	x64Parser::Coding471,
	x64Parser::Coding472,
	x64Parser::Coding473,
	x64Parser::Coding474,
	x64Parser::Coding475,
	x64Parser::Coding476,
	x64Parser::Coding477,
	x64Parser::Coding478,
	x64Parser::Coding479,
	x64Parser::Coding480,
	x64Parser::Coding481,
	x64Parser::Coding482,
	x64Parser::Coding483,
	x64Parser::Coding484,
	x64Parser::Coding485,
	x64Parser::Coding486,
	x64Parser::Coding487,
	x64Parser::Coding488,
	x64Parser::Coding489,
	x64Parser::Coding490,
	x64Parser::Coding491,
	x64Parser::Coding492,
	x64Parser::Coding493,
	x64Parser::Coding494,
	x64Parser::Coding495,
	x64Parser::Coding496,
	x64Parser::Coding497,
	x64Parser::Coding498,
	x64Parser::Coding499,
	x64Parser::Coding500,
	x64Parser::Coding501,
	x64Parser::Coding502,
	x64Parser::Coding503,
	x64Parser::Coding504,
	x64Parser::Coding505,
	x64Parser::Coding506,
	x64Parser::Coding507,
	x64Parser::Coding508,
	x64Parser::Coding509,
	x64Parser::Coding510,
	x64Parser::Coding511,
	x64Parser::Coding512,
	x64Parser::Coding513,
	x64Parser::Coding514,
	x64Parser::Coding515,
	x64Parser::Coding516,
	x64Parser::Coding517,
	x64Parser::Coding518,
	x64Parser::Coding519,
	x64Parser::Coding520,
	x64Parser::Coding521,
	x64Parser::Coding522,
	x64Parser::Coding523,
	x64Parser::Coding524,
	x64Parser::Coding525,
	x64Parser::Coding526,
	x64Parser::Coding527,
	x64Parser::Coding528,
	x64Parser::Coding529,
	x64Parser::Coding530,
	x64Parser::Coding531,
	x64Parser::Coding532,
	x64Parser::Coding533,
	x64Parser::Coding534,
	x64Parser::Coding535,
	x64Parser::Coding536,
	x64Parser::Coding537,
	x64Parser::Coding538,
	x64Parser::Coding539,
	x64Parser::Coding540,
	x64Parser::Coding541,
	x64Parser::Coding542,
	x64Parser::Coding543,
	x64Parser::Coding544,
	x64Parser::Coding545,
	x64Parser::Coding546,
	x64Parser::Coding547,
	x64Parser::Coding548,
	x64Parser::Coding549,
	x64Parser::Coding550,
	x64Parser::Coding551,
	x64Parser::Coding552,
	x64Parser::Coding553,
	x64Parser::Coding554,
	x64Parser::Coding555,
	x64Parser::Coding556,
	x64Parser::Coding557,
	x64Parser::Coding558,
	x64Parser::Coding559,
	x64Parser::Coding560,
	x64Parser::Coding561,
	x64Parser::Coding562,
	x64Parser::Coding563,
	x64Parser::Coding564,
	x64Parser::Coding565,
	x64Parser::Coding566,
	x64Parser::Coding567,
	x64Parser::Coding568,
	x64Parser::Coding569,
	x64Parser::Coding570,
	x64Parser::Coding571,
	x64Parser::Coding572,
	x64Parser::Coding573,
	x64Parser::Coding574,
	x64Parser::Coding575,
	x64Parser::Coding576,
	x64Parser::Coding577,
	x64Parser::Coding578,
	x64Parser::Coding579,
	x64Parser::Coding580,
	x64Parser::Coding581,
	x64Parser::Coding582,
	x64Parser::Coding583,
	x64Parser::Coding584,
	x64Parser::Coding585,
	x64Parser::Coding586,
	x64Parser::Coding587,
	x64Parser::Coding588,
	x64Parser::Coding589,
	x64Parser::Coding590,
	x64Parser::Coding591,
	x64Parser::Coding592,
	x64Parser::Coding593,
	x64Parser::Coding594,
	x64Parser::Coding595,
	x64Parser::Coding596,
	x64Parser::Coding597,
	x64Parser::Coding598,
	x64Parser::Coding599,
	x64Parser::Coding600,
	x64Parser::Coding601,
	x64Parser::Coding602,
	x64Parser::Coding603,
	x64Parser::Coding604,
	x64Parser::Coding605,
	x64Parser::Coding606,
	x64Parser::Coding607,
	x64Parser::Coding608,
	x64Parser::Coding609,
	x64Parser::Coding610,
};
Coding x64Parser::prefixCoding1[] = {
	{ CODING_NAME("a16")  Coding::stateFunc, 0 },
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::prefixCoding2[] = {
	{ CODING_NAME("a32")  Coding::stateFunc, 1 },
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::prefixCoding3[] = {
	{ CODING_NAME("lock")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::prefixCoding4[] = {
	{ CODING_NAME("o16")  Coding::stateFunc, 3 },
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::prefixCoding5[] = {
	{ CODING_NAME("o32")  Coding::stateFunc, 4 },
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::prefixCoding6[] = {
	{ CODING_NAME("rep")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::prefixCoding7[] = {
	{ CODING_NAME("repe")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::prefixCoding8[] = {
	{ CODING_NAME("repne")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::prefixCoding9[] = {
	{ CODING_NAME("repnz")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding x64Parser::prefixCoding10[] = {
	{ CODING_NAME("repz")  (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ CODING_NAME("eot") Coding::eot },
};
Coding *x64Parser::prefixCodings[] = {
	x64Parser::prefixCoding1,
	x64Parser::prefixCoding2,
	x64Parser::prefixCoding3,
	x64Parser::prefixCoding4,
	x64Parser::prefixCoding5,
	x64Parser::prefixCoding6,
	x64Parser::prefixCoding7,
	x64Parser::prefixCoding8,
	x64Parser::prefixCoding9,
	x64Parser::prefixCoding10,
};
bool x64Parser::MatchesToken(int token, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::TOKEN && inputTokens[tokenPos]->val->ival == token;
}
	bool x64Parser::MatchesRegister(int reg, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER && inputTokens[tokenPos]->val->ival == reg;
}
	bool x64Parser::MatchesRegisterClass(int cclass, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER && (registerDataIndirect[cclass][inputTokens[tokenPos]->val->ival >> 3] & (1 << (inputTokens[tokenPos]->val->ival & 7)));
}
bool x64Parser::ParseAddresses(x64Operand &operand, int addrClass, int &tokenPos)
{
	int level = 0;
	bool rv = false;
	x64Token *t = tokenBranches1;
	while (t->type != x64Token::EOT)
	{
		bool matches = false;
		if (t->addrClass[addrClass >> 3] & (1 << (addrClass & 7)))
		{
			switch (t->type)
			{
				case x64Token::EMPTY:
					matches = true;
					break;
				case x64Token::TOKEN:
					matches = MatchesToken(t->id, tokenPos);
					break;
				case x64Token::REGISTER:
					matches = MatchesRegister(t->id, tokenPos);
					break;
				case x64Token::REGISTERCLASS:
					matches = MatchesRegisterClass(t->id, tokenPos);
					break;
				case x64Token::NUMBER:
					if (tokenPos < inputTokens.size())
						matches = (this->*numberFuncs[t->id])(tokenPos);
					break;
				default:
					matches = false;
					break;
			}
		}
		if (!matches)
		{
			if (t->level > level)
			{
				t = t->next;
				continue;
			}
		}
		else
			level = t->level;
		if (matches)
		{
			if (t->tokenFunc)
				(this->*(t->tokenFunc))(operand, tokenPos);
			if (t->eos && (tokenPos == inputTokens.size()-1 || !t->next))
			{
				rv = true;
				break;
			}
			t = t->next;
			tokenPos++;
		}
		else
		{
			t++;
		}
	}
	return rv;
}

asmError x64Parser::ParseOperands2(x64Token *tokenList, x64Operand &operand, int tokenPos, int level)
{
	asmError rv = AERR_OPERAND;
	x64Token *t = tokenList;
	while (t && t->type != x64Token::EOT)
	{
		bool matches = false;
		int last = tokenPos;
		switch (t->type)
		{
			case x64Token::EMPTY:
				matches = true;
				break;
			case x64Token::TOKEN:
				matches = MatchesToken(t->id, tokenPos);
				break;
			case x64Token::REGISTER:
				matches = MatchesRegister(t->id, tokenPos);
				break;
			case x64Token::REGISTERCLASS:
				matches = MatchesRegisterClass(t->id,tokenPos);
				break;
			case x64Token::ADDRESSCLASS:
				matches = ParseAddresses(operand, t->id, tokenPos);
				break;
			case x64Token::NUMBER:
				if (tokenPos < inputTokens.size())
					matches = (this->*numberFuncs[t->id])(tokenPos);
				break;
			default:
				matches = false;
				break;
		}
		if (!matches)
		{
			if (t->level > level)
			{
				rv = ParseOperands2(t->next, operand, tokenPos, t->level);
				if (rv == AERR_NONE)
					break;
			}
		}
		else
		{
			if (t->tokenFunc)
				(this->*(t->tokenFunc))(operand, last);
			if (t->eos && (!t->next || tokenPos == inputTokens.size()-1))
			{
				bool ok = false;
				if (operand.operandCoding != -1)
					ok = CheckCoding(operand, Codings[operand.operandCoding]);
				else if (operand.addressCoding != -1)
					ok = CheckCoding(operand, Codings[operand.addressCoding]);
				if (ok)
				{
					if (tokenPos >= (int)(inputTokens.size()-1))
						eol = true;
					rv = AERR_NONE;
					break;
				}
				operand.operandCoding = -1;
				operand.addressCoding = -1;
			}
			if (tokenPos < inputTokens.size())
			{
				rv = ParseOperands2(t->next, operand, tokenPos + 1, t->level);
				if (rv == AERR_NONE)
					break;
			}
		}
		tokenPos = last;
		t++;
	}
	return rv;
}

asmError x64Parser::ParseOperands(x64Token *tokenList, x64Operand &operand)
{
	asmError rv = ParseOperands2(tokenList, operand, 0, 0);
	if (rv != AERR_NONE)
	{
		int n = tokenTable[","];
		std::vector<InputToken* >fullList = inputTokens;
		for (int i = 0; i < fullList.size();)
		{
			inputTokens.clear();
			while (i < fullList.size() && (fullList[i]->type != InputToken::TOKEN || fullList[i]->val->ival != n))
				inputTokens.push_back(fullList[i++]);
			int j;
			for (j = 0; j < sizeof(addressTable) / sizeof(addressTable[0]); j++)
			{
				if (ParseOperands2(addressTable[j], operand, 0, 0) == AERR_NONE)
					break;
			}
			if (j == sizeof(addressTable) / sizeof(addressTable[0]))
			{
				return AERR_OPERAND;
			}
			if (i < fullList.size())
			{
				i++;
				if (i == fullList.size())
					return AERR_SYNTAX;
			}
		}
		return AERR_BADCOMBINATIONOFOPERANDS;
	}
	return rv;
}

bool x64Parser::CheckCoding(x64Operand &operand,Coding *coding)
{
	while (coding->type != Coding::eot)
	{
		if (coding->type & Coding::stateFunc)
		{
			Coding *c = (this->*stateFuncs[coding->val])();
			if (!CheckCoding(operand, c))
				return false;
		}
		else if (coding->type & Coding::native)
		{
			if (operand.addressCoding == -1)
				return false;
			if (!CheckCoding(operand, Codings[operand.addressCoding]))
				return false;
		}
		else if (coding->type & Coding::indirect)
		{
			if (!operand.values[coding->val])
			{
				if (!(coding->type & Coding::optional))
				{
					return false;
				}
			}
			else
			{
				if (!CheckCoding(operand, operand.values[coding->val]))
					return false;
			}
		}
		else if (coding->type & Coding::illegal)
		{
			return false;
		}
		coding++;
	}
	return true;
}
bool x64Parser::ProcessCoding(x64Operand &operand, Coding *coding, int field, int bits, int* arr, char* bitcounts, char *func, int &index)
{
	int acc = 0, binary = 0;
	while (coding->type != Coding::eot)
	{
		if (coding->type & Coding::bitSpecified)
			bits = coding->bits;
		if (coding->type & Coding::valSpecified)
		{
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = coding->val;
		}
		else if (coding->type & Coding::reg)
		{
			int n = coding->val;
			if (field != -1)
				n = registerValues[n][field];
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = n;
		}
		else if (coding->type & Coding::stateFunc)
		{
			Coding *c = (this->*stateFuncs[coding->val])();
			int index1 = index;
			if (!ProcessCoding(operand, c, coding->field, bits, arr, bitcounts, func, index))
				return false;
			if (index != index1 && coding->binary)
				func[index - 1] = coding->binary;
		}
		else if (coding->type & Coding::stateVar)
		{
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = stateVars[coding->val];
		}
		else if (coding->type & Coding::number)
		{
			int n = coding->val;
			auto it = operands.begin();
			for (int i = 0; i < n; i++)
			{
				++it;
			}
			(*it)->used = true;
			n = 0;
			for (int i = 0; i < index; i++)
				if (!func[i])
					n += bitcounts[i];
			(*it)->pos = n;
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = (*it)->node->ival;
		}
		else if (coding->type & Coding::native)
		{
			if (operand.addressCoding == -1)
				return false;
			int index1 = index;
			if (!ProcessCoding(operand, Codings[operand.addressCoding], coding->field, bits, arr, bitcounts, func, index))
				return false;
			if (index != index1 && coding->binary)
				func[index - 1] = coding->binary;
		}
		else if (coding->type & Coding::indirect)
		{
			if (!operand.values[coding->val])
			{
				if (!(coding->type & Coding::optional))
				{
					return false;
				}
			}
			else
			{
				int index1 = index;
				if (!ProcessCoding(operand, operand.values[coding->val], coding->field, bits, arr, bitcounts, func, index))
					return false;
				if (index != index1 && coding->binary)
					func[index - 1] = coding->binary;
			}
		}
		else if (coding->type & Coding::illegal)
		{
			return false;
		}
		else
		{
			return false;
		}
		coding++;
	}
	return true;
}
bool x64Parser::ProcessCoding(x64Operand &operand, Coding *coding)
{
	int arr[1000];
	char bitcount[1000];
	char func[1000];
	int index = 0;
	if (coding->type == Coding::eot)
		return true;
	int defaultBits = 8;
	bool rv = ProcessCoding(operand, coding, -1, defaultBits, arr, bitcount, func, index);
	if (rv)
	{
		for (int i = 0; i < index; i++)
		{
			if (func[i])
				arr[i + 1] = DoMath(func[i], arr[i], arr[i + 1]);
			else
				bits.Add(arr[i], bitcount[i]);
		}
	}
	return rv;
}
asmError x64Parser::DispatchOpcode(int opcode)
{
	bool rv=true;
	if (opcode == -1)
	{
		x64Operand operand;
		for (auto& a : prefixes)
			rv &= ProcessCoding(operand, prefixCodings[a]);
		if (!rv)
			return AERR_UNKNOWNOPCODE;
	}
	else
	{
		x64Operand operand;
		operand.opcode = opcode;
		auto err = (this->*DispatchTable[opcode])(operand);
		if (err == AERR_NONE)
		{
			for (auto& a : prefixes)
				rv &= ProcessCoding(operand, prefixCodings[a]);
			if (rv)
			{
				if (operand.operandCoding != -1)
					rv = ProcessCoding(operand, Codings[operand.operandCoding]);
				else if (operand.addressCoding != -1)
					rv = ProcessCoding(operand, Codings[operand.addressCoding]);
				else rv = false;
				if (!rv)
					return AERR_INVALIDINSTRUCTIONUSE;
			}
		}
		else
		{
			 return err;
		}
	}
	return AERR_NONE;
}
