#include "InstructionParser.h"
#include "x64Operand.h"
#include "x64Parser.h"

InstructionParser *InstructionParser::GetInstance()
{
	return static_cast<InstructionParser *>(new x64Parser());
}
Coding x64Parser::stateCoding_eot[] = { { Coding::eot } };
Coding x64Parser::stateCoding1_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding1_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding2_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding2_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding3_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding4_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding4_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding5_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding5_2[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::stateCoding6_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding7_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding *x64Parser::StateFunc1()
{
	if (stateVars[0]!=16)
	{
		return stateCoding1_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding1_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc2()
{
	if (stateVars[0]!=32)
	{
		return stateCoding2_1;
	}
	if (stateVars[0]==32)
	{
		return stateCoding2_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc3()
{
	if (true)
	{
		return stateCoding3_1;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc4()
{
	if (stateVars[0]!=16)
	{
		return stateCoding4_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding4_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc5()
{
	if (stateVars[0]!=16)
	{
		return stateCoding5_1;
	}
	if (stateVars[0]==16)
	{
		return stateCoding5_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc6()
{
	if (true)
	{
		return stateCoding6_1;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc7()
{
	if (true)
	{
		return stateCoding7_1;
	}
	return stateCoding_eot;
}
x64Parser::StateFuncDispatchType x64Parser::stateFuncs[] = {
	&x64Parser::StateFunc1,
	&x64Parser::StateFunc2,
	&x64Parser::StateFunc3,
	&x64Parser::StateFunc4,
	&x64Parser::StateFunc5,
	&x64Parser::StateFunc6,
	&x64Parser::StateFunc7,
};
bool x64Parser::Number1(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 1, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number2(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 1, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number3(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 6, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number4(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number5(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number6(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number7(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 64, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number8(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(0, 0, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number9(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==32)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number10(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==32)
	{
		rv = ParseNumber(0, 0, 64, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number11(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(1, 1, 8, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number12(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(-1, 1, 8, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number13(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number14(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(-2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number15(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number16(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(-2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number17(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]!=16)
	{
		rv = ParseNumber(4, 1, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number18(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 1, 0);
	if (!rv)
		rv = SetNumber(tokenPos, 2, 1);
	if (!rv)
		rv = SetNumber(tokenPos, 4, 2);
	if (!rv)
		rv = SetNumber(tokenPos, 8, 3);
	return rv;
}
bool x64Parser::Number19(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 0, 0);
	return rv;
}
bool x64Parser::Number20(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 1, 1);
	return rv;
}
x64Parser::NumberDispatchType x64Parser::numberFuncs[] = {
	&x64Parser::Number1,
	&x64Parser::Number2,
	&x64Parser::Number3,
	&x64Parser::Number4,
	&x64Parser::Number5,
	&x64Parser::Number6,
	&x64Parser::Number7,
	&x64Parser::Number8,
	&x64Parser::Number9,
	&x64Parser::Number10,
	&x64Parser::Number11,
	&x64Parser::Number12,
	&x64Parser::Number13,
	&x64Parser::Number14,
	&x64Parser::Number15,
	&x64Parser::Number16,
	&x64Parser::Number17,
	&x64Parser::Number18,
	&x64Parser::Number19,
	&x64Parser::Number20,
};

unsigned char x64Parser::RegClassData1[] = {255, 15, 0, 0, };
unsigned char x64Parser::RegClassData2[] = {127, 0, 0, 0, };
unsigned char x64Parser::RegClassData3[] = {190, 15, 0, 0, };
unsigned char x64Parser::RegClassData4[] = {4, 16, 0, 0, };
unsigned char x64Parser::RegClassData5[] = {8, 96, 0, 0, };
unsigned char x64Parser::RegClassData6[] = {16, 128, 1, 0, };
unsigned char x64Parser::RegClassData7[] = {32, 0, 6, 0, };
unsigned char x64Parser::RegClassData8[] = {128, 0, 24, 0, };
unsigned char x64Parser::RegClassData9[] = {0, 0, 96, 0, };
unsigned char x64Parser::RegClassData10[] = {0, 0, 128, 1, };

unsigned char x64Parser::registerData15[] = {0, 0, 0, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData6[] = {136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData9[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData22[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, 0, };
unsigned char x64Parser::registerData23[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, };
unsigned char x64Parser::registerData21[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, 0, 0, };
unsigned char x64Parser::registerData1[] = {255, 255, 255, 255, 15, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData4[] = {2, 4, 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData17[] = {0, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData7[] = {136, 16, 33, 66, 4, 64, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData10[] = {16, 33, 66, 132, 8, 128, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData3[] = {33, 66, 132, 8, 17, 17, 17, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData14[] = {0, 0, 0, 120, 0, 0, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData11[] = {16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData5[] = {68, 136, 16, 33, 34, 34, 34, 34, 2, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData8[] = {136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData13[] = {0, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData12[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData2[] = {35, 70, 140, 24, 17, 17, 17, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData19[] = {0, 0, 0, 0, 0, 0, 0, 0, 144, 36, 73, 2, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData18[] = {0, 0, 0, 0, 0, 0, 0, 0, 240, 255, 255, 15, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData20[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 3, 0, 0, 0, 0, };
unsigned char x64Parser::registerData16[] = {0, 0, 0, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData24[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, };

unsigned char *x64Parser::registerDataIndirect[] = {
	registerData1,
	registerData2,
	registerData3,
	registerData4,
	registerData5,
	registerData6,
	registerData7,
	registerData8,
	registerData9,
	registerData10,
	registerData11,
	registerData12,
	registerData13,
	registerData14,
	registerData15,
	registerData16,
	registerData17,
	registerData18,
	registerData19,
	registerData20,
	registerData21,
	registerData22,
	registerData23,
	registerData24,
};

int x64Parser::registerValues[][8] = {
	{ 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 8, 0, -1, -1, -1, },
	{ 1, 0, 4, 0, 2, -1, -1, -1, },
	{ 1, 0, 4, 0, 2, -1, -1, -1, },
	{ 1, 0, 4, 0, 2, -1, -1, -1, },
	{ 1, 0, 4, 8, 2, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 8, 0, -1, -1, -1, },
	{ 1, 1, 4, 0, 2, -1, -1, -1, },
	{ 1, 1, 4, 0, 2, -1, -1, -1, },
	{ 1, 1, 4, 0, 2, -1, -1, -1, },
	{ 1, 1, 4, 8, 2, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 8, 0, -1, -1, -1, },
	{ 1, 2, 4, 0, 2, -1, -1, -1, },
	{ 1, 2, 4, 0, 2, -1, -1, -1, },
	{ 1, 2, 4, 0, 2, -1, -1, -1, },
	{ 1, 2, 4, 8, 2, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, 0, -1, -1, },
	{ 0, 3, 0, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 8, 0, -1, -1, -1, },
	{ 1, 3, 4, 0, 2, -1, -1, -1, },
	{ 1, 3, 4, 0, 2, -1, -1, -1, },
	{ 1, 3, 4, 0, 2, -1, -1, -1, },
	{ 1, 3, 4, 8, 2, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 8, 0, -1, -1, -1, },
	{ 1, 4, 4, 0, 2, -1, -1, -1, },
	{ 1, 4, 4, 0, 2, -1, -1, -1, },
	{ 1, 4, 4, 0, 2, -1, -1, -1, },
	{ 1, 4, 4, 8, 2, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, 1, -1, -1, },
	{ 0, 5, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 8, 0, -1, -1, -1, },
	{ 1, 5, 4, 0, 2, -1, -1, -1, },
	{ 1, 5, 4, 0, 2, -1, -1, -1, },
	{ 1, 5, 4, 0, 2, -1, -1, -1, },
	{ 1, 5, 4, 8, 2, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, -1, 0, -1, },
	{ 0, 6, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 8, 0, -1, -1, -1, },
	{ 1, 6, 4, 0, 2, -1, -1, -1, },
	{ 1, 6, 4, 0, 2, -1, -1, -1, },
	{ 1, 6, 4, 0, 2, -1, -1, -1, },
	{ 1, 6, 4, 8, 2, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, -1, 1, -1, },
	{ 0, 7, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 8, 0, -1, -1, -1, },
	{ 1, 7, 4, 0, 2, -1, -1, -1, },
	{ 1, 7, 4, 0, 2, -1, -1, -1, },
	{ 1, 7, 4, 0, 2, -1, -1, -1, },
	{ 1, 7, 4, 8, 2, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, 0, 0, -1, -1, -1, },
	{ 1, 0, 4, 0, 2, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, -1, -1, -1, },
	{ 0, 1, 0, 0, 0, -1, -1, -1, },
	{ 1, 1, 4, 0, 2, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, -1, -1, -1, },
	{ 0, 2, 0, 0, 0, -1, -1, -1, },
	{ 1, 2, 4, 0, 2, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, -1, -1, -1, },
	{ 0, 3, 0, 0, 0, -1, -1, -1, },
	{ 1, 3, 4, 0, 2, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, 0, 0, -1, -1, -1, },
	{ 1, 4, 4, 0, 2, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, -1, -1, -1, },
	{ 0, 5, 0, 0, 0, -1, -1, -1, },
	{ 1, 5, 4, 0, 2, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, -1, -1, -1, },
	{ 0, 6, 0, 0, 0, -1, -1, -1, },
	{ 1, 6, 4, 0, 2, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, -1, -1, -1, },
	{ 0, 7, 0, 0, 0, -1, -1, -1, },
	{ 1, 7, 4, 0, 2, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, 38, },
	{ -1, 1, -1, -1, -1, -1, -1, 46, },
	{ -1, 2, -1, -1, -1, -1, -1, 54, },
	{ -1, 3, -1, -1, -1, -1, -1, 62, },
	{ -1, 4, -1, -1, -1, -1, -1, 100, },
	{ -1, 5, -1, -1, -1, -1, -1, 101, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, },
	{ -1, 0, -1, -1, -1, -1, -1, -1, },
	{ -1, 1, -1, -1, -1, -1, -1, -1, },
	{ -1, 2, -1, -1, -1, -1, -1, -1, },
	{ -1, 3, -1, -1, -1, -1, -1, -1, },
	{ -1, 4, -1, -1, -1, -1, -1, -1, },
	{ -1, 5, -1, -1, -1, -1, -1, -1, },
	{ -1, 6, -1, -1, -1, -1, -1, -1, },
	{ -1, 7, -1, -1, -1, -1, -1, -1, },
};

void x64Parser::Init()
{
	memset(&stateVars, 0, sizeof(stateVars));
	stateVars[0] = 16;
	tokenTable[""] = 0;
	tokenTable["*"] = 6;
	tokenTable["+"] = 4;
	tokenTable[","] = 9;
	tokenTable[":"] = 3;
	tokenTable["["] = 1;
	tokenTable["]"] = 2;
	tokenTable["byte"] = 13;
	tokenTable["dword"] = 11;
	tokenTable["eip"] = 5;
	tokenTable["far"] = 17;
	tokenTable["near"] = 16;
	tokenTable["qword"] = 12;
	tokenTable["rip"] = 7;
	tokenTable["short"] = 15;
	tokenTable["tword"] = 14;
	tokenTable["word"] = 10;
	tokenTable["al"] = 1000;
	tokenTable["ah"] = 1001;
	tokenTable["ax"] = 1002;
	tokenTable["eax"] = 1003;
	tokenTable["rax"] = 1004;
	tokenTable["r8b"] = 1005;
	tokenTable["r8w"] = 1006;
	tokenTable["r8d"] = 1007;
	tokenTable["r8"] = 1008;
	tokenTable["cl"] = 1009;
	tokenTable["ch"] = 1010;
	tokenTable["cx"] = 1011;
	tokenTable["ecx"] = 1012;
	tokenTable["rcx"] = 1013;
	tokenTable["r9b"] = 1014;
	tokenTable["r9w"] = 1015;
	tokenTable["r9d"] = 1016;
	tokenTable["r9"] = 1017;
	tokenTable["dl"] = 1018;
	tokenTable["dh"] = 1019;
	tokenTable["dx"] = 1020;
	tokenTable["edx"] = 1021;
	tokenTable["rdx"] = 1022;
	tokenTable["r10b"] = 1023;
	tokenTable["r10w"] = 1024;
	tokenTable["r10d"] = 1025;
	tokenTable["r10"] = 1026;
	tokenTable["bl"] = 1027;
	tokenTable["bh"] = 1028;
	tokenTable["bx"] = 1029;
	tokenTable["ebx"] = 1030;
	tokenTable["rbx"] = 1031;
	tokenTable["r11b"] = 1032;
	tokenTable["r11w"] = 1033;
	tokenTable["r11d"] = 1034;
	tokenTable["r11"] = 1035;
	tokenTable["spl"] = 1036;
	tokenTable["sp"] = 1037;
	tokenTable["esp"] = 1038;
	tokenTable["rsp"] = 1039;
	tokenTable["r12b"] = 1040;
	tokenTable["r12w"] = 1041;
	tokenTable["r12d"] = 1042;
	tokenTable["r12"] = 1043;
	tokenTable["bpl"] = 1044;
	tokenTable["bp"] = 1045;
	tokenTable["ebp"] = 1046;
	tokenTable["rbp"] = 1047;
	tokenTable["r13b"] = 1048;
	tokenTable["r13w"] = 1049;
	tokenTable["r13d"] = 1050;
	tokenTable["r13"] = 1051;
	tokenTable["sil"] = 1052;
	tokenTable["si"] = 1053;
	tokenTable["esi"] = 1054;
	tokenTable["rsi"] = 1055;
	tokenTable["r14b"] = 1056;
	tokenTable["r14w"] = 1057;
	tokenTable["r14d"] = 1058;
	tokenTable["r14"] = 1059;
	tokenTable["dil"] = 1060;
	tokenTable["di"] = 1061;
	tokenTable["edi"] = 1062;
	tokenTable["rdi"] = 1063;
	tokenTable["r15b"] = 1064;
	tokenTable["r15w"] = 1065;
	tokenTable["r15d"] = 1066;
	tokenTable["r15"] = 1067;
	tokenTable["mm0"] = 1068;
	tokenTable["xmm0"] = 1069;
	tokenTable["xmm8"] = 1070;
	tokenTable["mm1"] = 1071;
	tokenTable["xmm1"] = 1072;
	tokenTable["xmm9"] = 1073;
	tokenTable["mm2"] = 1074;
	tokenTable["xmm2"] = 1075;
	tokenTable["xmm10"] = 1076;
	tokenTable["mm3"] = 1077;
	tokenTable["xmm3"] = 1078;
	tokenTable["xmm11"] = 1079;
	tokenTable["mm4"] = 1080;
	tokenTable["xmm4"] = 1081;
	tokenTable["xmm12"] = 1082;
	tokenTable["mm5"] = 1083;
	tokenTable["xmm5"] = 1084;
	tokenTable["xmm13"] = 1085;
	tokenTable["mm6"] = 1086;
	tokenTable["xmm6"] = 1087;
	tokenTable["xmm14"] = 1088;
	tokenTable["mm7"] = 1089;
	tokenTable["xmm7"] = 1090;
	tokenTable["xmm15"] = 1091;
	tokenTable["es"] = 1092;
	tokenTable["cs"] = 1093;
	tokenTable["ss"] = 1094;
	tokenTable["ds"] = 1095;
	tokenTable["fs"] = 1096;
	tokenTable["gs"] = 1097;
	tokenTable["st0"] = 1098;
	tokenTable["st1"] = 1099;
	tokenTable["st2"] = 1100;
	tokenTable["st3"] = 1101;
	tokenTable["st4"] = 1102;
	tokenTable["st5"] = 1103;
	tokenTable["st6"] = 1104;
	tokenTable["st7"] = 1105;
	tokenTable["cr0"] = 1106;
	tokenTable["cr1"] = 1107;
	tokenTable["cr2"] = 1108;
	tokenTable["cr3"] = 1109;
	tokenTable["cr4"] = 1110;
	tokenTable["cr5"] = 1111;
	tokenTable["cr6"] = 1112;
	tokenTable["cr7"] = 1113;
	tokenTable["dr0"] = 1114;
	tokenTable["dr1"] = 1115;
	tokenTable["dr2"] = 1116;
	tokenTable["dr3"] = 1117;
	tokenTable["dr4"] = 1118;
	tokenTable["dr5"] = 1119;
	tokenTable["dr6"] = 1120;
	tokenTable["dr7"] = 1121;
	tokenTable["tr0"] = 1122;
	tokenTable["tr1"] = 1123;
	tokenTable["tr2"] = 1124;
	tokenTable["tr3"] = 1125;
	tokenTable["tr4"] = 1126;
	tokenTable["tr5"] = 1127;
	tokenTable["tr6"] = 1128;
	tokenTable["tr7"] = 1129;
	opcodeTable["aaa"] = 32;
	opcodeTable["aad"] = 33;
	opcodeTable["aam"] = 34;
	opcodeTable["aas"] = 35;
	opcodeTable["adc"] = 36;
	opcodeTable["add"] = 37;
	opcodeTable["and"] = 38;
	opcodeTable["arpl"] = 39;
	opcodeTable["bound"] = 40;
	opcodeTable["bsf"] = 41;
	opcodeTable["bsr"] = 42;
	opcodeTable["bswap"] = 43;
	opcodeTable["bt"] = 44;
	opcodeTable["btc"] = 45;
	opcodeTable["btr"] = 46;
	opcodeTable["bts"] = 47;
	opcodeTable["call"] = 48;
	opcodeTable["cbw"] = 49;
	opcodeTable["cdq"] = 50;
	opcodeTable["cdqe"] = 51;
	opcodeTable["clc"] = 52;
	opcodeTable["cld"] = 53;
	opcodeTable["cli"] = 54;
	opcodeTable["clts"] = 55;
	opcodeTable["cmc"] = 56;
	opcodeTable["cmova"] = 57;
	opcodeTable["cmovae"] = 58;
	opcodeTable["cmovb"] = 59;
	opcodeTable["cmovbe"] = 60;
	opcodeTable["cmovc"] = 61;
	opcodeTable["cmove"] = 62;
	opcodeTable["cmovg"] = 63;
	opcodeTable["cmovge"] = 64;
	opcodeTable["cmovl"] = 65;
	opcodeTable["cmovle"] = 66;
	opcodeTable["cmovna"] = 67;
	opcodeTable["cmovnae"] = 68;
	opcodeTable["cmovnb"] = 69;
	opcodeTable["cmovnbe"] = 70;
	opcodeTable["cmovnc"] = 71;
	opcodeTable["cmovne"] = 72;
	opcodeTable["cmovng"] = 73;
	opcodeTable["cmovnge"] = 74;
	opcodeTable["cmovnl"] = 75;
	opcodeTable["cmovnle"] = 76;
	opcodeTable["cmovno"] = 77;
	opcodeTable["cmovnp"] = 78;
	opcodeTable["cmovns"] = 79;
	opcodeTable["cmovnz"] = 80;
	opcodeTable["cmovo"] = 81;
	opcodeTable["cmovp"] = 82;
	opcodeTable["cmovpe"] = 83;
	opcodeTable["cmovpo"] = 84;
	opcodeTable["cmovs"] = 85;
	opcodeTable["cmovz"] = 86;
	opcodeTable["cmp"] = 87;
	opcodeTable["cmps"] = 88;
	opcodeTable["cmpsb"] = 89;
	opcodeTable["cmpsw"] = 90;
	opcodeTable["cmpsd"] = 91;
	opcodeTable["cmpsq"] = 92;
	opcodeTable["cmpxchg"] = 93;
	opcodeTable["cmpxchg8b"] = 94;
	opcodeTable["cmpxchg16b"] = 95;
	opcodeTable["cpuid"] = 96;
	opcodeTable["cqo"] = 97;
	opcodeTable["cwd"] = 98;
	opcodeTable["cwde"] = 99;
	opcodeTable["daa"] = 100;
	opcodeTable["das"] = 101;
	opcodeTable["dec"] = 102;
	opcodeTable["div"] = 103;
	opcodeTable["enter"] = 104;
	opcodeTable["esc"] = 105;
	opcodeTable["f2xm1"] = 106;
	opcodeTable["fabs"] = 107;
	opcodeTable["fadd"] = 108;
	opcodeTable["faddp"] = 109;
	opcodeTable["fbld"] = 110;
	opcodeTable["fbstp"] = 111;
	opcodeTable["fchs"] = 112;
	opcodeTable["fclex"] = 113;
	opcodeTable["fnclex"] = 114;
	opcodeTable["fcmovb"] = 115;
	opcodeTable["fcmovbe"] = 116;
	opcodeTable["fcmove"] = 117;
	opcodeTable["fcmovnb"] = 118;
	opcodeTable["fcmovnbe"] = 119;
	opcodeTable["fcmovne"] = 120;
	opcodeTable["fcmovnu"] = 121;
	opcodeTable["fcmovu"] = 122;
	opcodeTable["fcom"] = 123;
	opcodeTable["fcom2"] = 124;
	opcodeTable["fcomi"] = 125;
	opcodeTable["fcomip"] = 126;
	opcodeTable["fcomp"] = 127;
	opcodeTable["fcomp3"] = 128;
	opcodeTable["fcomp5"] = 129;
	opcodeTable["fcompp"] = 130;
	opcodeTable["fcos"] = 131;
	opcodeTable["fdecstp"] = 132;
	opcodeTable["fdisi"] = 133;
	opcodeTable["fdiv"] = 134;
	opcodeTable["fdivp"] = 135;
	opcodeTable["fdivr"] = 136;
	opcodeTable["fdivrp"] = 137;
	opcodeTable["feni"] = 138;
	opcodeTable["ffree"] = 139;
	opcodeTable["ffreep"] = 140;
	opcodeTable["fiadd"] = 141;
	opcodeTable["ficom"] = 142;
	opcodeTable["ficomp"] = 143;
	opcodeTable["fidiv"] = 144;
	opcodeTable["fidivr"] = 145;
	opcodeTable["fild"] = 146;
	opcodeTable["fimul"] = 147;
	opcodeTable["fincstp"] = 148;
	opcodeTable["finit"] = 149;
	opcodeTable["fninit"] = 150;
	opcodeTable["fist"] = 151;
	opcodeTable["fistp"] = 152;
	opcodeTable["fisub"] = 153;
	opcodeTable["fisubr"] = 154;
	opcodeTable["fld"] = 155;
	opcodeTable["fld1"] = 156;
	opcodeTable["fldcw"] = 157;
	opcodeTable["fldenv"] = 158;
	opcodeTable["fldl2e"] = 159;
	opcodeTable["fldl2t"] = 160;
	opcodeTable["fldlg2"] = 161;
	opcodeTable["fldln2"] = 162;
	opcodeTable["fldpi"] = 163;
	opcodeTable["fldz"] = 164;
	opcodeTable["fmul"] = 165;
	opcodeTable["fmulp"] = 166;
	opcodeTable["fnop"] = 167;
	opcodeTable["fnsave"] = 168;
	opcodeTable["fpatan"] = 169;
	opcodeTable["fprem"] = 170;
	opcodeTable["fprem1"] = 171;
	opcodeTable["fptan"] = 172;
	opcodeTable["frndint"] = 173;
	opcodeTable["frstor"] = 174;
	opcodeTable["fsave"] = 175;
	opcodeTable["fscale"] = 176;
	opcodeTable["fsetpm"] = 177;
	opcodeTable["fsin"] = 178;
	opcodeTable["fsincos"] = 179;
	opcodeTable["fsqrt"] = 180;
	opcodeTable["fst"] = 181;
	opcodeTable["fstcw"] = 182;
	opcodeTable["fnstcw"] = 183;
	opcodeTable["fstenv"] = 184;
	opcodeTable["fnstenv"] = 185;
	opcodeTable["fstp"] = 186;
	opcodeTable["fstp1"] = 187;
	opcodeTable["fstp8"] = 188;
	opcodeTable["fstp9"] = 189;
	opcodeTable["fstsw"] = 190;
	opcodeTable["fnstsw"] = 191;
	opcodeTable["fsub"] = 192;
	opcodeTable["fsubp"] = 193;
	opcodeTable["fsubr"] = 194;
	opcodeTable["fsubrp"] = 195;
	opcodeTable["ftst"] = 196;
	opcodeTable["fucom"] = 197;
	opcodeTable["fucomi"] = 198;
	opcodeTable["fucomip"] = 199;
	opcodeTable["fucomp"] = 200;
	opcodeTable["fucompp"] = 201;
	opcodeTable["fwait"] = 202;
	opcodeTable["fxam"] = 203;
	opcodeTable["fxch"] = 204;
	opcodeTable["fxch4"] = 205;
	opcodeTable["fxch7"] = 206;
	opcodeTable["fxrstor"] = 207;
	opcodeTable["fxsave"] = 208;
	opcodeTable["fxtract"] = 209;
	opcodeTable["fyl2x"] = 210;
	opcodeTable["fyl2xp1"] = 211;
	opcodeTable["hlt"] = 212;
	opcodeTable["ibts"] = 213;
	opcodeTable["icebp"] = 214;
	opcodeTable["idiv"] = 215;
	opcodeTable["imul"] = 216;
	opcodeTable["in"] = 217;
	opcodeTable["ins"] = 218;
	opcodeTable["insb"] = 219;
	opcodeTable["insw"] = 220;
	opcodeTable["insd"] = 221;
	opcodeTable["inc"] = 222;
	opcodeTable["int"] = 223;
	opcodeTable["int1"] = 224;
	opcodeTable["int3"] = 225;
	opcodeTable["into"] = 226;
	opcodeTable["invd"] = 227;
	opcodeTable["invlpg"] = 228;
	opcodeTable["iret"] = 229;
	opcodeTable["iretw"] = 230;
	opcodeTable["iretd"] = 231;
	opcodeTable["ja"] = 232;
	opcodeTable["jae"] = 233;
	opcodeTable["jb"] = 234;
	opcodeTable["jbe"] = 235;
	opcodeTable["jc"] = 236;
	opcodeTable["jcxz"] = 237;
	opcodeTable["jecxz"] = 238;
	opcodeTable["je"] = 239;
	opcodeTable["jg"] = 240;
	opcodeTable["jge"] = 241;
	opcodeTable["jl"] = 242;
	opcodeTable["jle"] = 243;
	opcodeTable["jmp"] = 244;
	opcodeTable["jna"] = 245;
	opcodeTable["jnae"] = 246;
	opcodeTable["jnb"] = 247;
	opcodeTable["jnbe"] = 248;
	opcodeTable["jnc"] = 249;
	opcodeTable["jne"] = 250;
	opcodeTable["jng"] = 251;
	opcodeTable["jnge"] = 252;
	opcodeTable["jnl"] = 253;
	opcodeTable["jnle"] = 254;
	opcodeTable["jno"] = 255;
	opcodeTable["jnp"] = 256;
	opcodeTable["jns"] = 257;
	opcodeTable["jnz"] = 258;
	opcodeTable["jo"] = 259;
	opcodeTable["jp"] = 260;
	opcodeTable["jpe"] = 261;
	opcodeTable["jpo"] = 262;
	opcodeTable["js"] = 263;
	opcodeTable["jz"] = 264;
	opcodeTable["lahf"] = 265;
	opcodeTable["lar"] = 266;
	opcodeTable["lds"] = 267;
	opcodeTable["lea"] = 268;
	opcodeTable["leave"] = 269;
	opcodeTable["les"] = 270;
	opcodeTable["lfence"] = 271;
	opcodeTable["lfs"] = 272;
	opcodeTable["lgdt"] = 273;
	opcodeTable["lgs"] = 274;
	opcodeTable["lidt"] = 275;
	opcodeTable["lmsw"] = 276;
	opcodeTable["lods"] = 277;
	opcodeTable["lodsb"] = 278;
	opcodeTable["lodsw"] = 279;
	opcodeTable["lodsd"] = 280;
	opcodeTable["lodsq"] = 281;
	opcodeTable["loop"] = 282;
	opcodeTable["loope"] = 283;
	opcodeTable["loopne"] = 284;
	opcodeTable["loopnz"] = 285;
	opcodeTable["loopz"] = 286;
	opcodeTable["lsl"] = 287;
	opcodeTable["lss"] = 288;
	opcodeTable["ltr"] = 289;
	opcodeTable["mov"] = 290;
	opcodeTable["movs"] = 291;
	opcodeTable["movbe"] = 292;
	opcodeTable["movsb"] = 293;
	opcodeTable["movsw"] = 294;
	opcodeTable["movsd"] = 295;
	opcodeTable["movsq"] = 296;
	opcodeTable["movsx"] = 297;
	opcodeTable["movzx"] = 298;
	opcodeTable["movsxd"] = 299;
	opcodeTable["mul"] = 300;
	opcodeTable["neg"] = 301;
	opcodeTable["nop"] = 302;
	opcodeTable["not"] = 303;
	opcodeTable["or"] = 304;
	opcodeTable["out"] = 305;
	opcodeTable["outs"] = 306;
	opcodeTable["outsb"] = 307;
	opcodeTable["outsw"] = 308;
	opcodeTable["outsd"] = 309;
	opcodeTable["pop"] = 310;
	opcodeTable["popa"] = 311;
	opcodeTable["popaw"] = 312;
	opcodeTable["popad"] = 313;
	opcodeTable["popcnt"] = 314;
	opcodeTable["popf"] = 315;
	opcodeTable["popfw"] = 316;
	opcodeTable["popfd"] = 317;
	opcodeTable["popfq"] = 318;
	opcodeTable["prefetchnta"] = 319;
	opcodeTable["prefetcht0"] = 320;
	opcodeTable["prefetcht1"] = 321;
	opcodeTable["prefetcht2"] = 322;
	opcodeTable["push"] = 323;
	opcodeTable["pusha"] = 324;
	opcodeTable["pushaw"] = 325;
	opcodeTable["pushad"] = 326;
	opcodeTable["pushf"] = 327;
	opcodeTable["pushfw"] = 328;
	opcodeTable["pushfd"] = 329;
	opcodeTable["pushfq"] = 330;
	opcodeTable["ret"] = 331;
	opcodeTable["retf"] = 332;
	opcodeTable["rol"] = 333;
	opcodeTable["ror"] = 334;
	opcodeTable["rsm"] = 335;
	opcodeTable["sahf"] = 336;
	opcodeTable["sal"] = 337;
	opcodeTable["sar"] = 338;
	opcodeTable["sbb"] = 339;
	opcodeTable["scas"] = 340;
	opcodeTable["scasb"] = 341;
	opcodeTable["scasw"] = 342;
	opcodeTable["scasd"] = 343;
	opcodeTable["scasq"] = 344;
	opcodeTable["seta"] = 345;
	opcodeTable["setae"] = 346;
	opcodeTable["setb"] = 347;
	opcodeTable["setbe"] = 348;
	opcodeTable["setc"] = 349;
	opcodeTable["sete"] = 350;
	opcodeTable["setg"] = 351;
	opcodeTable["setge"] = 352;
	opcodeTable["setl"] = 353;
	opcodeTable["setle"] = 354;
	opcodeTable["setna"] = 355;
	opcodeTable["setnae"] = 356;
	opcodeTable["setnb"] = 357;
	opcodeTable["setnbe"] = 358;
	opcodeTable["setnc"] = 359;
	opcodeTable["setne"] = 360;
	opcodeTable["setng"] = 361;
	opcodeTable["setnge"] = 362;
	opcodeTable["setnl"] = 363;
	opcodeTable["setnle"] = 364;
	opcodeTable["setno"] = 365;
	opcodeTable["setnp"] = 366;
	opcodeTable["setns"] = 367;
	opcodeTable["setnz"] = 368;
	opcodeTable["seto"] = 369;
	opcodeTable["setp"] = 370;
	opcodeTable["setpe"] = 371;
	opcodeTable["setpo"] = 372;
	opcodeTable["sets"] = 373;
	opcodeTable["setz"] = 374;
	opcodeTable["sfence"] = 375;
	opcodeTable["shl"] = 376;
	opcodeTable["shld"] = 377;
	opcodeTable["shr"] = 378;
	opcodeTable["shrd"] = 379;
	opcodeTable["sidt"] = 380;
	opcodeTable["sldt"] = 381;
	opcodeTable["smsw"] = 382;
	opcodeTable["stc"] = 383;
	opcodeTable["std"] = 384;
	opcodeTable["sti"] = 385;
	opcodeTable["stos"] = 386;
	opcodeTable["stosb"] = 387;
	opcodeTable["stosw"] = 388;
	opcodeTable["stosd"] = 389;
	opcodeTable["stosq"] = 390;
	opcodeTable["str"] = 391;
	opcodeTable["sub"] = 392;
	opcodeTable["syscall"] = 393;
	opcodeTable["sysenter"] = 394;
	opcodeTable["sysexit"] = 395;
	opcodeTable["sysret"] = 396;
	opcodeTable["test"] = 397;
	opcodeTable["ud2"] = 398;
	opcodeTable["verr"] = 399;
	opcodeTable["verw"] = 400;
	opcodeTable["wait"] = 401;
	opcodeTable["wbinvd"] = 402;
	opcodeTable["wrmsr"] = 403;
	opcodeTable["xadd"] = 404;
	opcodeTable["xbts"] = 405;
	opcodeTable["xchg"] = 406;
	opcodeTable["xlat"] = 407;
	opcodeTable["xlatb"] = 408;
	opcodeTable["xor"] = 409;
	opcodeTable["xrstor"] = 410;
	opcodeTable["xrstor64"] = 411;
	opcodeTable["xsave"] = 412;
	opcodeTable["xsave64"] = 413;
	opcodeTable["xsetbv"] = 414;
	opcodeTable["addpd"] = 415;
	opcodeTable["addps"] = 416;
	opcodeTable["addsd"] = 417;
	opcodeTable["addss"] = 418;
	opcodeTable["addsubpd"] = 419;
	opcodeTable["addsubps"] = 420;
	opcodeTable["andnpd"] = 421;
	opcodeTable["andnps"] = 422;
	opcodeTable["andpd"] = 423;
	opcodeTable["andps"] = 424;
	opcodeTable["blendpd"] = 425;
	opcodeTable["blendps"] = 426;
	opcodeTable["cmppd"] = 427;
	opcodeTable["cmpps"] = 428;
	opcodeTable["cvtdq2pd"] = 429;
	opcodeTable["cvtdq2ps"] = 430;
	opcodeTable["cvtpd2dq"] = 431;
	opcodeTable["cvtpd2pi"] = 432;
	opcodeTable["cvtpd2ps"] = 433;
	opcodeTable["cvtpi2pd"] = 434;
	opcodeTable["cvtpi2ps"] = 435;
	opcodeTable["cvtps2dq"] = 436;
	opcodeTable["cvtps2pd"] = 437;
	opcodeTable["cvtps2pi"] = 438;
	opcodeTable["cvtsd2si"] = 439;
	opcodeTable["cvtsd2ss"] = 440;
	opcodeTable["cvtsi2sd"] = 441;
	opcodeTable["cvtsi2ss"] = 442;
	opcodeTable["cvtss2sd"] = 443;
	opcodeTable["cvtss2si"] = 444;
	opcodeTable["cvttp2qdq"] = 445;
	opcodeTable["cvttp2qpi"] = 446;
	opcodeTable["cvttps2dq"] = 447;
	opcodeTable["cvttps2pi"] = 448;
	opcodeTable["cvttsd2si"] = 449;
	opcodeTable["cvttss2si"] = 450;
	opcodeTable["divpd"] = 451;
	opcodeTable["divps"] = 452;
	opcodeTable["divsd"] = 453;
	opcodeTable["divss"] = 454;
	opcodeTable["dppd"] = 455;
	opcodeTable["dpps"] = 456;
	opcodeTable["hsubpd"] = 457;
	opcodeTable["hsubps"] = 458;
	opcodeTable["insertps"] = 459;
	opcodeTable["lddqu"] = 460;
	opcodeTable["maskmovdqu"] = 461;
	opcodeTable["maskmovq"] = 462;
	opcodeTable["maxps"] = 463;
	opcodeTable["maxpd"] = 464;
	opcodeTable["maxps"] = 465;
	opcodeTable["maxsd"] = 466;
	opcodeTable["maxss"] = 467;
	opcodeTable["mfence"] = 468;
	opcodeTable["minpd"] = 469;
	opcodeTable["minps"] = 470;
	opcodeTable["minsd"] = 471;
	opcodeTable["minss"] = 472;
	opcodeTable["monitor"] = 473;
	opcodeTable["movapd"] = 474;
	opcodeTable["movaps"] = 475;
	opcodeTable["movd"] = 476;
	opcodeTable["movq"] = 477;
	opcodeTable["movddup"] = 478;
	opcodeTable["movdq2q"] = 479;
	opcodeTable["movdqa"] = 480;
	opcodeTable["movdqu"] = 481;
	opcodeTable["movhlps"] = 482;
	opcodeTable["movhpd"] = 483;
	opcodeTable["movhps"] = 484;
	opcodeTable["movlhps"] = 485;
	opcodeTable["movlpd"] = 486;
	opcodeTable["movlps"] = 487;
	opcodeTable["movmskpd"] = 488;
	opcodeTable["movmskps"] = 489;
	opcodeTable["movntdq"] = 490;
	opcodeTable["movnti"] = 491;
	opcodeTable["movntpd"] = 492;
	opcodeTable["movntpd"] = 493;
	opcodeTable["movntq"] = 494;
	opcodeTable["movq2dq"] = 495;
	opcodeTable["movshdup"] = 496;
	opcodeTable["movsldup"] = 497;
	opcodeTable["movss"] = 498;
	opcodeTable["movupd"] = 499;
	opcodeTable["movups"] = 500;
	opcodeTable["mpsadbw"] = 501;
	opcodeTable["mulpd"] = 502;
	opcodeTable["mulps"] = 503;
	opcodeTable["mulsd"] = 504;
	opcodeTable["mulss"] = 505;
	opcodeTable["orpd"] = 506;
	opcodeTable["orps"] = 507;
	opcodeTable["packssdw"] = 508;
	opcodeTable["packsswb"] = 509;
	opcodeTable["packusdw"] = 510;
	opcodeTable["paddb"] = 511;
	opcodeTable["paddd"] = 512;
	opcodeTable["paddq"] = 513;
	opcodeTable["paddsw"] = 514;
	opcodeTable["paddusb"] = 515;
	opcodeTable["paddusw"] = 516;
	opcodeTable["paddw"] = 517;
	opcodeTable["palignr"] = 518;
	opcodeTable["pand"] = 519;
	opcodeTable["pandn"] = 520;
	opcodeTable["pavgb"] = 521;
	opcodeTable["pavgw"] = 522;
	opcodeTable["pblendw"] = 523;
	opcodeTable["pcmpeqb"] = 524;
	opcodeTable["pcmpeqd"] = 525;
	opcodeTable["pcmpeqw"] = 526;
	opcodeTable["pcmpestri"] = 527;
	opcodeTable["pcmpestrm"] = 528;
	opcodeTable["pcmpgtb"] = 529;
	opcodeTable["pcmpgtd"] = 530;
	opcodeTable["pcmpgtw"] = 531;
	opcodeTable["pcmpestri"] = 532;
	opcodeTable["pcmpestrm"] = 533;
	opcodeTable["pextrb"] = 534;
	opcodeTable["pextrd"] = 535;
	opcodeTable["pextrq"] = 536;
	opcodeTable["pextrw"] = 537;
	opcodeTable["pinsrb"] = 538;
	opcodeTable["pinsrd"] = 539;
	opcodeTable["pinsrq"] = 540;
	opcodeTable["pinsrw"] = 541;
	opcodeTable["pmaddwd"] = 542;
	opcodeTable["pmaxsw"] = 543;
	opcodeTable["pmaxub"] = 544;
	opcodeTable["pminsw"] = 545;
	opcodeTable["pminub"] = 546;
	opcodeTable["pmovmskb"] = 547;
	opcodeTable["pmulhuw"] = 548;
	opcodeTable["pmulhw"] = 549;
	opcodeTable["pmullw"] = 550;
	opcodeTable["pmuludq"] = 551;
	opcodeTable["psadbw"] = 552;
	opcodeTable["pshufd"] = 553;
	opcodeTable["pshufhw"] = 554;
	opcodeTable["pshufhl"] = 555;
	opcodeTable["pshufw"] = 556;
	opcodeTable["pslld"] = 557;
	opcodeTable["pslldq"] = 558;
	opcodeTable["psllq"] = 559;
	opcodeTable["psllw"] = 560;
	opcodeTable["psrad"] = 561;
	opcodeTable["psraw"] = 562;
	opcodeTable["psrld"] = 563;
	opcodeTable["psrldq"] = 564;
	opcodeTable["psrlq"] = 565;
	opcodeTable["psrlw"] = 566;
	opcodeTable["psubb"] = 567;
	opcodeTable["psubd"] = 568;
	opcodeTable["psubq"] = 569;
	opcodeTable["psubsb"] = 570;
	opcodeTable["psubsw"] = 571;
	opcodeTable["psubusb"] = 572;
	opcodeTable["psubusw"] = 573;
	opcodeTable["punpckhbw"] = 574;
	opcodeTable["punpckhdq"] = 575;
	opcodeTable["punpckhqdq"] = 576;
	opcodeTable["punpckhwd"] = 577;
	opcodeTable["punpcklbw"] = 578;
	opcodeTable["punpckldq"] = 579;
	opcodeTable["punpcklqdq"] = 580;
	opcodeTable["punpcklwd"] = 581;
	opcodeTable["pxor"] = 582;
	opcodeTable["rcpps"] = 583;
	opcodeTable["rpcss"] = 584;
	opcodeTable["roundpd"] = 585;
	opcodeTable["roundps"] = 586;
	opcodeTable["roundsd"] = 587;
	opcodeTable["roundss"] = 588;
	opcodeTable["shufpd"] = 589;
	opcodeTable["shufps"] = 590;
	opcodeTable["sqrtps"] = 591;
	opcodeTable["sqrtss"] = 592;
	opcodeTable["subpd"] = 593;
	opcodeTable["subps"] = 594;
	opcodeTable["subsd"] = 595;
	opcodeTable["subss"] = 596;
	opcodeTable["unpckhpd"] = 597;
	opcodeTable["unpckhps"] = 598;
	opcodeTable["unpcklpd"] = 599;
	opcodeTable["unpcklps"] = 600;
	opcodeTable["xorpd"] = 601;
	opcodeTable["xorps"] = 602;
	opcodeTable["invept"] = 603;
	opcodeTable["invvpid"] = 604;
	opcodeTable["vmcall"] = 605;
	opcodeTable["vmclear"] = 606;
	opcodeTable["vmlaunch"] = 607;
	opcodeTable["vmptrld"] = 608;
	opcodeTable["vmptrst"] = 609;
	opcodeTable["vmread"] = 610;
	opcodeTable["vmresume"] = 611;
	opcodeTable["vmwrite"] = 612;
	opcodeTable["vmx0ff"] = 613;
	opcodeTable["vmxon"] = 614;
	prefixTable["a16"] = 0;
	prefixTable["a32"] = 1;
	prefixTable["lock"] = 2;
	prefixTable["o16"] = 3;
	prefixTable["o32"] = 4;
	prefixTable["rep"] = 5;
	prefixTable["repe"] = 6;
	prefixTable["repne"] = 7;
	prefixTable["repnz"] = 8;
	prefixTable["repz"] = 9;
}

void x64Parser::TokenFunc4(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 0;
}
x64Token x64Parser::tokenBranches3[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc4,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc9(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 1;
}
x64Token x64Parser::tokenBranches8[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc9,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc200(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 19;
}
x64Token x64Parser::tokenBranches199[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc200,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc346(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 34;
}
x64Token x64Parser::tokenBranches345[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc346,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc199(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc345(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches198[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc199, x64Parser::tokenBranches199 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc345, x64Parser::tokenBranches345 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc36(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 4;
}
x64Token x64Parser::tokenBranches35[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc36,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches198 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc137(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches136[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc137,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc283(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 28;
}
x64Token x64Parser::tokenBranches282[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc283,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc429(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 43;
}
x64Token x64Parser::tokenBranches428[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc429,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc35(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc136(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc282(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc428(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches34[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc35, x64Parser::tokenBranches35 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc136, x64Parser::tokenBranches136 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc282, x64Parser::tokenBranches282 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc428, x64Parser::tokenBranches428 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc97(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches33[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches34 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc97,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc227(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 22;
}
x64Token x64Parser::tokenBranches226[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc227,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc373(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 37;
}
x64Token x64Parser::tokenBranches372[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc373,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc226(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc372(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches225[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc226, x64Parser::tokenBranches226 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc372, x64Parser::tokenBranches372 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc57(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 7;
}
x64Token x64Parser::tokenBranches56[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc57,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches225 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc170(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 17;
}
x64Token x64Parser::tokenBranches169[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc170,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc316(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 32;
}
x64Token x64Parser::tokenBranches315[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc316,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc462(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 47;
}
x64Token x64Parser::tokenBranches461[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc462,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc56(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc169(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc315(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc461(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches55[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc56, x64Parser::tokenBranches56 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc169, x64Parser::tokenBranches169 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc315, x64Parser::tokenBranches315 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc461, x64Parser::tokenBranches461 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc120(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 17;
}
x64Token x64Parser::tokenBranches54[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches55 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc120,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc257(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 25;
}
x64Token x64Parser::tokenBranches256[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc257,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc403(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 40;
}
x64Token x64Parser::tokenBranches402[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc403,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc256(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc402(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches255[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc256, x64Parser::tokenBranches256 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc402, x64Parser::tokenBranches402 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc79(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 10;
}
x64Token x64Parser::tokenBranches78[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc79,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches255 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc8(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc78(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches33 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches54 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc8, x64Parser::tokenBranches8 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc78, x64Parser::tokenBranches78 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches7 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc14(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 2;
}
x64Token x64Parser::tokenBranches13[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc14,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc209(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 21;
}
x64Token x64Parser::tokenBranches208[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc209,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc355(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 36;
}
x64Token x64Parser::tokenBranches354[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc355,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc208(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc354(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches207[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc208, x64Parser::tokenBranches208 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc354, x64Parser::tokenBranches354 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc43(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 6;
}
x64Token x64Parser::tokenBranches42[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc43,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches207 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc144(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 14;
}
x64Token x64Parser::tokenBranches143[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc144,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc290(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 29;
}
x64Token x64Parser::tokenBranches289[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc290,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc436(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 44;
}
x64Token x64Parser::tokenBranches435[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc436,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc42(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc143(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc289(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc435(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches41[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc42, x64Parser::tokenBranches42 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc143, x64Parser::tokenBranches143 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc289, x64Parser::tokenBranches289 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc435, x64Parser::tokenBranches435 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc102(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 14;
}
x64Token x64Parser::tokenBranches40[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches41 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc102,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc218(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 20;
}
x64Token x64Parser::tokenBranches217[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc218,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc364(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 35;
}
x64Token x64Parser::tokenBranches363[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc364,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc217(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc363(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches216[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc217, x64Parser::tokenBranches217 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc363, x64Parser::tokenBranches363 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc50(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 5;
}
x64Token x64Parser::tokenBranches49[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc50,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches216 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc163(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches162[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc163,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc309(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 31;
}
x64Token x64Parser::tokenBranches308[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc309,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc455(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 46;
}
x64Token x64Parser::tokenBranches454[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc455,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc49(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc162(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc308(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc454(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches48[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc49, x64Parser::tokenBranches49 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc162, x64Parser::tokenBranches162 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc308, x64Parser::tokenBranches308 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc454, x64Parser::tokenBranches454 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc115(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches47[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches48 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc115,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc264(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 26;
}
x64Token x64Parser::tokenBranches263[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc264,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc410(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 41;
}
x64Token x64Parser::tokenBranches409[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc410,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc263(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc409(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches262[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc263, x64Parser::tokenBranches263 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc409, x64Parser::tokenBranches409 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc84(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 11;
}
x64Token x64Parser::tokenBranches83[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc84,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches262 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc13(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc83(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches12[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches40 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches47 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc13, x64Parser::tokenBranches13 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc83, x64Parser::tokenBranches83 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches11[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches12 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc19(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 3;
}
x64Token x64Parser::tokenBranches18[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc19,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 23;
}
x64Token x64Parser::tokenBranches235[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc382(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 38;
}
x64Token x64Parser::tokenBranches381[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc382,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc235(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc381(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches234[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc235, x64Parser::tokenBranches235 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc381, x64Parser::tokenBranches381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc64(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 8;
}
x64Token x64Parser::tokenBranches63[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc64,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches234 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc151(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 15;
}
x64Token x64Parser::tokenBranches150[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc151,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc297(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 30;
}
x64Token x64Parser::tokenBranches296[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc297,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc443(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 45;
}
x64Token x64Parser::tokenBranches442[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc443,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc63(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc150(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc296(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc442(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches62[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc63, x64Parser::tokenBranches63 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc150, x64Parser::tokenBranches150 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc296, x64Parser::tokenBranches296 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc442, x64Parser::tokenBranches442 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc107(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 15;
}
x64Token x64Parser::tokenBranches61[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches62 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc107,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc245(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 24;
}
x64Token x64Parser::tokenBranches244[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc245,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc391(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 39;
}
x64Token x64Parser::tokenBranches390[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc391,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc244(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc390(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches243[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc244, x64Parser::tokenBranches244 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc390, x64Parser::tokenBranches390 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc71(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 9;
}
x64Token x64Parser::tokenBranches70[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc71,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches243 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc177(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 18;
}
x64Token x64Parser::tokenBranches176[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc177,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc323(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 33;
}
x64Token x64Parser::tokenBranches322[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc323,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc469(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 48;
}
x64Token x64Parser::tokenBranches468[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc469,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc70(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc176(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc322(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc468(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches69[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc70, x64Parser::tokenBranches70 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc176, x64Parser::tokenBranches176 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc322, x64Parser::tokenBranches322 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc468, x64Parser::tokenBranches468 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc125(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 18;
}
x64Token x64Parser::tokenBranches68[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches69 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc125,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc271(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 27;
}
x64Token x64Parser::tokenBranches270[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc271,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc417(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 42;
}
x64Token x64Parser::tokenBranches416[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc417,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc270(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc416(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches269[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc270, x64Parser::tokenBranches270 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc416, x64Parser::tokenBranches416 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc89(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 12;
}
x64Token x64Parser::tokenBranches88[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc89,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches269 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc523(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches522[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc523,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc571(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 60;
}
x64Token x64Parser::tokenBranches570[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc571,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc619(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 68;
}
x64Token x64Parser::tokenBranches618[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc619,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc797(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 91;
}
x64Token x64Parser::tokenBranches796[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc797,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1053(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 106;
}
x64Token x64Parser::tokenBranches1052[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1053,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1197(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1196[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1197,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc796(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1052(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1196(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches795[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc796, x64Parser::tokenBranches796 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1052, x64Parser::tokenBranches1052 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1196, x64Parser::tokenBranches1196 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc927(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 91;
}
x64Token x64Parser::tokenBranches794[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches795 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc927,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc794(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches793[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc794, x64Parser::tokenBranches794 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc806(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches805[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc806,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1062(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1061[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1062,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1206(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 123;
}
x64Token x64Parser::tokenBranches1205[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1206,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc805(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1061(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1205(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches804[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc805, x64Parser::tokenBranches805 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1061, x64Parser::tokenBranches1061 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1205, x64Parser::tokenBranches1205 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc934(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches792[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches793 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches804 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc934,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc522(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc570(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc618(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc792(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches521[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc522, x64Parser::tokenBranches522 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc570, x64Parser::tokenBranches570 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc618, x64Parser::tokenBranches618 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc792, x64Parser::tokenBranches792 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc480(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches479[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc480,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches521 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc530(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches529[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc530,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc578(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 61;
}
x64Token x64Parser::tokenBranches577[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc578,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc626(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 69;
}
x64Token x64Parser::tokenBranches625[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc626,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc777(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 89;
}
x64Token x64Parser::tokenBranches776[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc777,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1033(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 104;
}
x64Token x64Parser::tokenBranches1032[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1033,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1177(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1176[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1177,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc776(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1032(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1176(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches775[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc776, x64Parser::tokenBranches776 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1032, x64Parser::tokenBranches1032 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1176, x64Parser::tokenBranches1176 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc911(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 89;
}
x64Token x64Parser::tokenBranches774[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches775 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc911,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc774(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches773[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc774, x64Parser::tokenBranches774 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc786(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 90;
}
x64Token x64Parser::tokenBranches785[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc786,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1042(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 105;
}
x64Token x64Parser::tokenBranches1041[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1042,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1186(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1185[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1186,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc785(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1041(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1185(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches784[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc785, x64Parser::tokenBranches785 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1041, x64Parser::tokenBranches1041 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1185, x64Parser::tokenBranches1185 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc918(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 90;
}
x64Token x64Parser::tokenBranches772[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches773 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches784 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc918,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc529(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc577(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc625(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc772(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches528[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc529, x64Parser::tokenBranches529 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc577, x64Parser::tokenBranches577 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc625, x64Parser::tokenBranches625 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc772, x64Parser::tokenBranches772 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc678(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 77;
}
x64Token x64Parser::tokenBranches677[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc678,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc677(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches676[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc677, x64Parser::tokenBranches677 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc669(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 76;
}
x64Token x64Parser::tokenBranches668[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc669,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches676 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc668(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches667[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc668, x64Parser::tokenBranches668 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc485(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches484[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc485,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches528 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches667 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc547(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 55;
}
x64Token x64Parser::tokenBranches546[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc547,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc595(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 64;
}
x64Token x64Parser::tokenBranches594[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc595,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc643(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 72;
}
x64Token x64Parser::tokenBranches642[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc643,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc849(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches848[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc849,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1105(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 112;
}
x64Token x64Parser::tokenBranches1104[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1105,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1249(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 128;
}
x64Token x64Parser::tokenBranches1248[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1249,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc848(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1104(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1248(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches847[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc848, x64Parser::tokenBranches848 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1104, x64Parser::tokenBranches1104 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1248, x64Parser::tokenBranches1248 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc967(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches846[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches847 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc967,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc846(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches845[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc846, x64Parser::tokenBranches846 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc858(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches857[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc858,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1114(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1113[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1114,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1258(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 129;
}
x64Token x64Parser::tokenBranches1257[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1258,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc857(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1113(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1257(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches856[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc857, x64Parser::tokenBranches857 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1113, x64Parser::tokenBranches1113 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1257, x64Parser::tokenBranches1257 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc974(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches844[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches845 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches856 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc974,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc546(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc594(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc642(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc844(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches545[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc546, x64Parser::tokenBranches546 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc594, x64Parser::tokenBranches594 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc642, x64Parser::tokenBranches642 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc844, x64Parser::tokenBranches844 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc718(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 82;
}
x64Token x64Parser::tokenBranches717[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc718,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc717(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches716[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc717, x64Parser::tokenBranches717 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc709(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 81;
}
x64Token x64Parser::tokenBranches708[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc709,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches716 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc708(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches707[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc708, x64Parser::tokenBranches708 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc496(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 55;
}
x64Token x64Parser::tokenBranches495[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc496,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches545 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches707 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc554(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 56;
}
x64Token x64Parser::tokenBranches553[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc554,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc602(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 65;
}
x64Token x64Parser::tokenBranches601[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc602,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc650(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 73;
}
x64Token x64Parser::tokenBranches649[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc650,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc869(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 98;
}
x64Token x64Parser::tokenBranches868[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc869,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1125(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 114;
}
x64Token x64Parser::tokenBranches1124[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1125,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1269(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 130;
}
x64Token x64Parser::tokenBranches1268[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1269,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc868(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1124(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1268(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches867[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc868, x64Parser::tokenBranches868 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1124, x64Parser::tokenBranches1124 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1268, x64Parser::tokenBranches1268 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc983(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 98;
}
x64Token x64Parser::tokenBranches866[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches867 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc983,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc866(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches865[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc866, x64Parser::tokenBranches866 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc878(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 99;
}
x64Token x64Parser::tokenBranches877[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc878,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1134(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 115;
}
x64Token x64Parser::tokenBranches1133[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1134,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1278(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 131;
}
x64Token x64Parser::tokenBranches1277[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1278,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc877(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1133(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1277(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches876[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc877, x64Parser::tokenBranches877 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1133, x64Parser::tokenBranches1133 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1277, x64Parser::tokenBranches1277 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc990(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 99;
}
x64Token x64Parser::tokenBranches864[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches865 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches876 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc990,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc553(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc601(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc649(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc864(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches552[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc553, x64Parser::tokenBranches553 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc601, x64Parser::tokenBranches601 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc649, x64Parser::tokenBranches649 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc864, x64Parser::tokenBranches864 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc501(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 56;
}
x64Token x64Parser::tokenBranches500[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc501,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches552 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc734(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 84;
}
x64Token x64Parser::tokenBranches733[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc734,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc733(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches732[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc733, x64Parser::tokenBranches733 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc725(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 83;
}
x64Token x64Parser::tokenBranches724[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc725,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches732 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc724(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches723[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc724, x64Parser::tokenBranches724 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches722[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches723 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1332(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 134;
}
x64Token x64Parser::tokenBranches1331[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1332,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1380(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 143;
}
x64Token x64Parser::tokenBranches1379[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1380,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1428(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 151;
}
x64Token x64Parser::tokenBranches1427[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1428,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1606(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 174;
}
x64Token x64Parser::tokenBranches1605[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1606,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1862(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 189;
}
x64Token x64Parser::tokenBranches1861[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1862,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2006(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 205;
}
x64Token x64Parser::tokenBranches2005[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2006,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1605(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1861(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2005(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1604[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1605, x64Parser::tokenBranches1605 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1861, x64Parser::tokenBranches1861 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2005, x64Parser::tokenBranches2005 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1736(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 174;
}
x64Token x64Parser::tokenBranches1603[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1604 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1736,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1603(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1602[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1603, x64Parser::tokenBranches1603 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1615(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 175;
}
x64Token x64Parser::tokenBranches1614[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1615,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1871(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 190;
}
x64Token x64Parser::tokenBranches1870[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1871,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2015(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 206;
}
x64Token x64Parser::tokenBranches2014[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2015,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1614(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1870(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2014(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1613[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1614, x64Parser::tokenBranches1614 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1870, x64Parser::tokenBranches1870 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2014, x64Parser::tokenBranches2014 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1743(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 175;
}
x64Token x64Parser::tokenBranches1601[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1602 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1613 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1743,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1331(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1379(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1427(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1601(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1330[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1331, x64Parser::tokenBranches1331 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1379, x64Parser::tokenBranches1379 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1427, x64Parser::tokenBranches1427 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1601, x64Parser::tokenBranches1601 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1289(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 134;
}
x64Token x64Parser::tokenBranches1288[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1289,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1330 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1339(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 135;
}
x64Token x64Parser::tokenBranches1338[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1339,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1387(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 144;
}
x64Token x64Parser::tokenBranches1386[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1387,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1435(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 152;
}
x64Token x64Parser::tokenBranches1434[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1435,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1586(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 172;
}
x64Token x64Parser::tokenBranches1585[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1586,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1842(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 187;
}
x64Token x64Parser::tokenBranches1841[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1842,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1986(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 203;
}
x64Token x64Parser::tokenBranches1985[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1986,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1585(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1841(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1985(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1584[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1585, x64Parser::tokenBranches1585 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1841, x64Parser::tokenBranches1841 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1985, x64Parser::tokenBranches1985 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1720(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 172;
}
x64Token x64Parser::tokenBranches1583[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1584 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1720,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1583(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1582[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1583, x64Parser::tokenBranches1583 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1595(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 173;
}
x64Token x64Parser::tokenBranches1594[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1595,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1851(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 188;
}
x64Token x64Parser::tokenBranches1850[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1851,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1995(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 204;
}
x64Token x64Parser::tokenBranches1994[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1995,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1594(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1850(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1994(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1593[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1594, x64Parser::tokenBranches1594 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1850, x64Parser::tokenBranches1850 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1994, x64Parser::tokenBranches1994 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1727(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 173;
}
x64Token x64Parser::tokenBranches1581[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1582 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1593 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1727,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1338(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1386(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1434(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1581(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1337[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1338, x64Parser::tokenBranches1338 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1386, x64Parser::tokenBranches1386 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1434, x64Parser::tokenBranches1434 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1581, x64Parser::tokenBranches1581 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1487(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 160;
}
x64Token x64Parser::tokenBranches1486[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1487,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1486(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1485[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1486, x64Parser::tokenBranches1486 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1478(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 159;
}
x64Token x64Parser::tokenBranches1477[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1478,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1485 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1477(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1476[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1477, x64Parser::tokenBranches1477 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1294(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 135;
}
x64Token x64Parser::tokenBranches1293[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1294,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1337 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1476 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1356(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 138;
}
x64Token x64Parser::tokenBranches1355[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1356,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1404(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 147;
}
x64Token x64Parser::tokenBranches1403[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1404,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1452(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 155;
}
x64Token x64Parser::tokenBranches1451[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1452,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1658(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 179;
}
x64Token x64Parser::tokenBranches1657[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1658,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1914(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 195;
}
x64Token x64Parser::tokenBranches1913[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1914,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2058(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 211;
}
x64Token x64Parser::tokenBranches2057[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2058,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1657(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1913(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2057(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1656[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1657, x64Parser::tokenBranches1657 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1913, x64Parser::tokenBranches1913 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2057, x64Parser::tokenBranches2057 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1776(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 179;
}
x64Token x64Parser::tokenBranches1655[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1656 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1776,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1655(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1654[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1655, x64Parser::tokenBranches1655 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1667(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 180;
}
x64Token x64Parser::tokenBranches1666[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1667,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1923(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 196;
}
x64Token x64Parser::tokenBranches1922[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1923,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2067(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 212;
}
x64Token x64Parser::tokenBranches2066[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2067,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1666(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1922(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2066(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1665[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1666, x64Parser::tokenBranches1666 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1922, x64Parser::tokenBranches1922 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2066, x64Parser::tokenBranches2066 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1783(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 180;
}
x64Token x64Parser::tokenBranches1653[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1654 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1665 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1783,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1355(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1403(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1451(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1653(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1354[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1355, x64Parser::tokenBranches1355 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1403, x64Parser::tokenBranches1403 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1451, x64Parser::tokenBranches1451 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1653, x64Parser::tokenBranches1653 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1527(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 165;
}
x64Token x64Parser::tokenBranches1526[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1527,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1526(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1525[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1526, x64Parser::tokenBranches1526 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1518(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 164;
}
x64Token x64Parser::tokenBranches1517[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1518,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1525 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1517(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1516[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1517, x64Parser::tokenBranches1517 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1305(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 138;
}
x64Token x64Parser::tokenBranches1304[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1305,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1354 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1516 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1363(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 139;
}
x64Token x64Parser::tokenBranches1362[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1363,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1411(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 148;
}
x64Token x64Parser::tokenBranches1410[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1411,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1459(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 156;
}
x64Token x64Parser::tokenBranches1458[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1459,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1678(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 181;
}
x64Token x64Parser::tokenBranches1677[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1678,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1934(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 197;
}
x64Token x64Parser::tokenBranches1933[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1934,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2078(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 213;
}
x64Token x64Parser::tokenBranches2077[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2078,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1677(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1933(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2077(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1676[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1677, x64Parser::tokenBranches1677 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1933, x64Parser::tokenBranches1933 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2077, x64Parser::tokenBranches2077 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1792(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 181;
}
x64Token x64Parser::tokenBranches1675[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1676 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1792,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1675(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1674[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1675, x64Parser::tokenBranches1675 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1687(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 182;
}
x64Token x64Parser::tokenBranches1686[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1687,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1943(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 198;
}
x64Token x64Parser::tokenBranches1942[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1943,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2087(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 214;
}
x64Token x64Parser::tokenBranches2086[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2087,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1686(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1942(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2086(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1685[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1686, x64Parser::tokenBranches1686 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1942, x64Parser::tokenBranches1942 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2086, x64Parser::tokenBranches2086 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1799(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 182;
}
x64Token x64Parser::tokenBranches1673[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1674 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1685 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1799,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1362(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1410(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1458(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1673(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1361[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1362, x64Parser::tokenBranches1362 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1410, x64Parser::tokenBranches1410 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1458, x64Parser::tokenBranches1458 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1673, x64Parser::tokenBranches1673 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1310(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 139;
}
x64Token x64Parser::tokenBranches1309[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1310,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1361 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1543(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 167;
}
x64Token x64Parser::tokenBranches1542[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1543,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1542(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1541[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1542, x64Parser::tokenBranches1542 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1534(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 166;
}
x64Token x64Parser::tokenBranches1533[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1534,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1541 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1533(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1532[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1533, x64Parser::tokenBranches1533 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1531[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1532 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc18(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc88(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc500(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc722(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc1309(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc1531(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches17[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches61 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches68 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches479 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches484 },
	{x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches495 },
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1288 },
	{x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1293 },
	{x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1304 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc18, x64Parser::tokenBranches18 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc88, x64Parser::tokenBranches88 },
	{x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc500, x64Parser::tokenBranches500 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc722, x64Parser::tokenBranches722 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1309, x64Parser::tokenBranches1309 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1531, x64Parser::tokenBranches1531 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches16[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches17 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc184(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 19;
}
x64Token x64Parser::tokenBranches183[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc184,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc330(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 34;
}
x64Token x64Parser::tokenBranches329[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc330,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc183(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc329(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches182[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc183, x64Parser::tokenBranches183 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc329, x64Parser::tokenBranches329 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc24(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 4;
}
x64Token x64Parser::tokenBranches23[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc24,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches182 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc130(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches129[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc130,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 28;
}
x64Token x64Parser::tokenBranches275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc422(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 43;
}
x64Token x64Parser::tokenBranches421[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc422,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc23(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc129(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc275(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc421(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches22[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc23, x64Parser::tokenBranches23 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc129, x64Parser::tokenBranches129 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc275, x64Parser::tokenBranches275 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc421, x64Parser::tokenBranches421 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc92(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches21[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches22 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc92,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc191(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 20;
}
x64Token x64Parser::tokenBranches190[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc191,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc337(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 35;
}
x64Token x64Parser::tokenBranches336[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc337,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc190(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc336(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches189[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc190, x64Parser::tokenBranches190 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc336, x64Parser::tokenBranches336 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc29(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 5;
}
x64Token x64Parser::tokenBranches28[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc29,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches189 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc156(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches155[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc156,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc302(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 31;
}
x64Token x64Parser::tokenBranches301[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc302,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc448(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 46;
}
x64Token x64Parser::tokenBranches447[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc448,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc28(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc155(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc301(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc447(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches27[] = {
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc28, x64Parser::tokenBranches28 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc155, x64Parser::tokenBranches155 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc301, x64Parser::tokenBranches301 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc447, x64Parser::tokenBranches447 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc110(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches26[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches27 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc110,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc250(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 25;
}
x64Token x64Parser::tokenBranches249[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc250,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc396(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 40;
}
x64Token x64Parser::tokenBranches395[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc396,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc249(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc395(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches248[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc249, x64Parser::tokenBranches249 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc395, x64Parser::tokenBranches395 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc74(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 10;
}
x64Token x64Parser::tokenBranches73[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc74,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches248 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc511(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches510[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc511,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc559(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 58;
}
x64Token x64Parser::tokenBranches558[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc559,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc607(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 66;
}
x64Token x64Parser::tokenBranches606[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc607,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc759(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 87;
}
x64Token x64Parser::tokenBranches758[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc759,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1015(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 102;
}
x64Token x64Parser::tokenBranches1014[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1015,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1159(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 118;
}
x64Token x64Parser::tokenBranches1158[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1159,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc758(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1014(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1158(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches757[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc758, x64Parser::tokenBranches758 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1014, x64Parser::tokenBranches1014 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1158, x64Parser::tokenBranches1158 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc897(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 87;
}
x64Token x64Parser::tokenBranches756[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches757 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc897,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc756(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches755[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc756, x64Parser::tokenBranches756 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc766(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 88;
}
x64Token x64Parser::tokenBranches765[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc766,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1022(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 103;
}
x64Token x64Parser::tokenBranches1021[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1022,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1166(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1165[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1166,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc765(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1021(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1165(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches764[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc765, x64Parser::tokenBranches765 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1021, x64Parser::tokenBranches1021 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1165, x64Parser::tokenBranches1165 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc902(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 88;
}
x64Token x64Parser::tokenBranches754[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches755 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches764 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc902,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc510(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc558(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc606(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc754(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches509[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc510, x64Parser::tokenBranches510 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc558, x64Parser::tokenBranches558 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc606, x64Parser::tokenBranches606 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc754, x64Parser::tokenBranches754 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc472(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches471[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc472,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches509 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc516(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches515[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc516,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc564(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 59;
}
x64Token x64Parser::tokenBranches563[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc564,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc612(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 67;
}
x64Token x64Parser::tokenBranches611[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc612,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc743(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 85;
}
x64Token x64Parser::tokenBranches742[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc743,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc999(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 100;
}
x64Token x64Parser::tokenBranches998[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc999,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1143(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 116;
}
x64Token x64Parser::tokenBranches1142[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1143,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc742(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc998(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1142(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches741[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc742, x64Parser::tokenBranches742 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc998, x64Parser::tokenBranches998 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1142, x64Parser::tokenBranches1142 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc885(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 85;
}
x64Token x64Parser::tokenBranches740[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches741 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc885,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc740(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches739[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc740, x64Parser::tokenBranches740 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc750(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 86;
}
x64Token x64Parser::tokenBranches749[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc750,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1006(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 101;
}
x64Token x64Parser::tokenBranches1005[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1006,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1150(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 117;
}
x64Token x64Parser::tokenBranches1149[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1150,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc749(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1005(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1149(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches748[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc749, x64Parser::tokenBranches749 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1005, x64Parser::tokenBranches1005 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1149, x64Parser::tokenBranches1149 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc890(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 86;
}
x64Token x64Parser::tokenBranches738[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches739 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches748 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc890,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc515(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc563(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc611(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc738(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches514[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc515, x64Parser::tokenBranches515 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc563, x64Parser::tokenBranches563 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc611, x64Parser::tokenBranches611 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc738, x64Parser::tokenBranches738 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc662(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 75;
}
x64Token x64Parser::tokenBranches661[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc662,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc661(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches660[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc661, x64Parser::tokenBranches661 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc655(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 74;
}
x64Token x64Parser::tokenBranches654[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc655,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches660 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc654(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches653[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc654, x64Parser::tokenBranches654 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc475(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches474[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc475,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches514 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches653 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc535(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches534[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc535,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc583(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 62;
}
x64Token x64Parser::tokenBranches582[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc583,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc631(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 70;
}
x64Token x64Parser::tokenBranches630[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc631,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc815(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 85;
}
x64Token x64Parser::tokenBranches814[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc815,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1071(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches1070[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1071,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1215(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 124;
}
x64Token x64Parser::tokenBranches1214[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1215,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc814(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1070(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1214(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches813[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc814, x64Parser::tokenBranches814 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1070, x64Parser::tokenBranches1070 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1214, x64Parser::tokenBranches1214 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc941(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 85;
}
x64Token x64Parser::tokenBranches812[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches813 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc941,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc812(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches811[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc812, x64Parser::tokenBranches812 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc822(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches821[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc822,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1078(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 109;
}
x64Token x64Parser::tokenBranches1077[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1078,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1222(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 125;
}
x64Token x64Parser::tokenBranches1221[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1222,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc821(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1077(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1221(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches820[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc821, x64Parser::tokenBranches821 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1077, x64Parser::tokenBranches1077 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1221, x64Parser::tokenBranches1221 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc946(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches810[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches811 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches820 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc946,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc534(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc582(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc630(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc810(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches533[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc534, x64Parser::tokenBranches534 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc582, x64Parser::tokenBranches582 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc630, x64Parser::tokenBranches630 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc810, x64Parser::tokenBranches810 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc690(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 75;
}
x64Token x64Parser::tokenBranches689[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc690,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc689(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches688[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc689, x64Parser::tokenBranches689 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc683(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 78;
}
x64Token x64Parser::tokenBranches682[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc683,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches688 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc682(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches681[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc682, x64Parser::tokenBranches682 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc488(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches487[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc488,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches533 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches681 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc540(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 54;
}
x64Token x64Parser::tokenBranches539[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc540,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc588(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 63;
}
x64Token x64Parser::tokenBranches587[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc588,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc636(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 71;
}
x64Token x64Parser::tokenBranches635[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc636,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc831(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches830[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc831,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1087(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 110;
}
x64Token x64Parser::tokenBranches1086[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1087,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1231(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 126;
}
x64Token x64Parser::tokenBranches1230[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1231,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc830(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1086(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1230(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches829[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc830, x64Parser::tokenBranches830 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1086, x64Parser::tokenBranches1086 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1230, x64Parser::tokenBranches1230 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc953(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches828[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches829 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc953,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc828(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches827[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc828, x64Parser::tokenBranches828 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc838(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches837[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc838,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1094(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 111;
}
x64Token x64Parser::tokenBranches1093[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1094,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1238(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 127;
}
x64Token x64Parser::tokenBranches1237[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1238,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc837(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1093(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1237(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches836[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc837, x64Parser::tokenBranches837 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1093, x64Parser::tokenBranches1093 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1237, x64Parser::tokenBranches1237 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc958(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches826[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches827 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches836 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc958,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc539(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc587(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc635(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc826(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches538[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc539, x64Parser::tokenBranches539 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc587, x64Parser::tokenBranches587 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc635, x64Parser::tokenBranches635 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc826, x64Parser::tokenBranches826 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc491(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 54;
}
x64Token x64Parser::tokenBranches490[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc491,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches538 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc506(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 57;
}
x64Token x64Parser::tokenBranches505[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc506,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc505(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches504[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc505, x64Parser::tokenBranches505 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches503[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches504 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc702(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 80;
}
x64Token x64Parser::tokenBranches701[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc702,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc701(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches700[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc701, x64Parser::tokenBranches701 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc695(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 79;
}
x64Token x64Parser::tokenBranches694[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc695,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches700 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc694(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches693[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc694, x64Parser::tokenBranches694 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches692[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches693 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1320(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1319[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1320,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1368(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 141;
}
x64Token x64Parser::tokenBranches1367[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1368,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1416(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 149;
}
x64Token x64Parser::tokenBranches1415[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1416,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1568(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 170;
}
x64Token x64Parser::tokenBranches1567[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1568,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1824(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 185;
}
x64Token x64Parser::tokenBranches1823[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1824,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1968(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 201;
}
x64Token x64Parser::tokenBranches1967[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1968,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1567(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1823(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1967(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1566[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1567, x64Parser::tokenBranches1567 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1823, x64Parser::tokenBranches1823 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1967, x64Parser::tokenBranches1967 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1706(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 170;
}
x64Token x64Parser::tokenBranches1565[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1566 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1706,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1565(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1564[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1565, x64Parser::tokenBranches1565 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1575(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 171;
}
x64Token x64Parser::tokenBranches1574[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1575,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1831(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 186;
}
x64Token x64Parser::tokenBranches1830[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1831,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1975(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 202;
}
x64Token x64Parser::tokenBranches1974[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1975,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1574(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1830(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1974(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1573[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1574, x64Parser::tokenBranches1574 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1830, x64Parser::tokenBranches1830 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1974, x64Parser::tokenBranches1974 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1711(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 171;
}
x64Token x64Parser::tokenBranches1563[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1564 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1573 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1711,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1319(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1367(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1415(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1563(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1318[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1319, x64Parser::tokenBranches1319 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1367, x64Parser::tokenBranches1367 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1415, x64Parser::tokenBranches1415 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1563, x64Parser::tokenBranches1563 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1281(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1280[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1281,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1318 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1325(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1324[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1325,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1373(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 142;
}
x64Token x64Parser::tokenBranches1372[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1373,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1421(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 150;
}
x64Token x64Parser::tokenBranches1420[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1421,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1552(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 168;
}
x64Token x64Parser::tokenBranches1551[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1552,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1808(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 183;
}
x64Token x64Parser::tokenBranches1807[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1808,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1952(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 199;
}
x64Token x64Parser::tokenBranches1951[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1952,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1551(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1807(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1951(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1550[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1551, x64Parser::tokenBranches1551 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1807, x64Parser::tokenBranches1807 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1951, x64Parser::tokenBranches1951 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1694(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 168;
}
x64Token x64Parser::tokenBranches1549[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1550 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1694,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1549(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1548[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1549, x64Parser::tokenBranches1549 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1559(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 169;
}
x64Token x64Parser::tokenBranches1558[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1559,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1815(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 184;
}
x64Token x64Parser::tokenBranches1814[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1815,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1959(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 200;
}
x64Token x64Parser::tokenBranches1958[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1959,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1558(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1814(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1958(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1557[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1558, x64Parser::tokenBranches1558 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1814, x64Parser::tokenBranches1814 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1958, x64Parser::tokenBranches1958 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1699(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 169;
}
x64Token x64Parser::tokenBranches1547[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1548 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1557 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1699,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1324(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1372(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1420(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1547(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1323[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1324, x64Parser::tokenBranches1324 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1372, x64Parser::tokenBranches1372 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1420, x64Parser::tokenBranches1420 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1547, x64Parser::tokenBranches1547 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1471(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 158;
}
x64Token x64Parser::tokenBranches1470[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1471,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1470(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1469[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1470, x64Parser::tokenBranches1470 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1464(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 157;
}
x64Token x64Parser::tokenBranches1463[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1464,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1469 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1463(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1462[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1463, x64Parser::tokenBranches1463 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1284(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1283[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1284,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1323 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1462 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1344(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 136;
}
x64Token x64Parser::tokenBranches1343[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1344,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1392(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 145;
}
x64Token x64Parser::tokenBranches1391[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1392,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1440(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 153;
}
x64Token x64Parser::tokenBranches1439[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1440,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1624(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 168;
}
x64Token x64Parser::tokenBranches1623[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1624,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1880(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 191;
}
x64Token x64Parser::tokenBranches1879[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1880,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2024(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 207;
}
x64Token x64Parser::tokenBranches2023[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2024,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1623(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1879(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2023(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1622[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1623, x64Parser::tokenBranches1623 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1879, x64Parser::tokenBranches1879 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2023, x64Parser::tokenBranches2023 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1750(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 168;
}
x64Token x64Parser::tokenBranches1621[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1622 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1750,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1621(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1620[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1621, x64Parser::tokenBranches1621 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1631(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 176;
}
x64Token x64Parser::tokenBranches1630[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1631,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1887(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 192;
}
x64Token x64Parser::tokenBranches1886[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1887,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2031(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 208;
}
x64Token x64Parser::tokenBranches2030[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2031,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1630(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1886(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2030(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1629[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1630, x64Parser::tokenBranches1630 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1886, x64Parser::tokenBranches1886 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2030, x64Parser::tokenBranches2030 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1755(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 176;
}
x64Token x64Parser::tokenBranches1619[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1620 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1629 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1755,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1343(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1391(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1439(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1619(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1342[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1343, x64Parser::tokenBranches1343 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1391, x64Parser::tokenBranches1391 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1439, x64Parser::tokenBranches1439 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1619, x64Parser::tokenBranches1619 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1499(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 158;
}
x64Token x64Parser::tokenBranches1498[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1499,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1498(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1497[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1498, x64Parser::tokenBranches1498 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1492(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 161;
}
x64Token x64Parser::tokenBranches1491[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1492,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1497 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1491(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1490[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1491, x64Parser::tokenBranches1491 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1297(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 136;
}
x64Token x64Parser::tokenBranches1296[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1297,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1342 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1490 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1349(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 137;
}
x64Token x64Parser::tokenBranches1348[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1349,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1397(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 146;
}
x64Token x64Parser::tokenBranches1396[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1397,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1445(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 154;
}
x64Token x64Parser::tokenBranches1444[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1445,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1640(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 177;
}
x64Token x64Parser::tokenBranches1639[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1640,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1896(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 193;
}
x64Token x64Parser::tokenBranches1895[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1896,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2040(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 209;
}
x64Token x64Parser::tokenBranches2039[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2040,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1639(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1895(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2039(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1638[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1639, x64Parser::tokenBranches1639 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1895, x64Parser::tokenBranches1895 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2039, x64Parser::tokenBranches2039 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1762(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 177;
}
x64Token x64Parser::tokenBranches1637[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1638 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1762,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1637(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1636[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1637, x64Parser::tokenBranches1637 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1647(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 178;
}
x64Token x64Parser::tokenBranches1646[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1647,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1903(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 194;
}
x64Token x64Parser::tokenBranches1902[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1903,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2047(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 210;
}
x64Token x64Parser::tokenBranches2046[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2047,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1646(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1902(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2046(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1645[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1646, x64Parser::tokenBranches1646 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1902, x64Parser::tokenBranches1902 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2046, x64Parser::tokenBranches2046 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1767(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 178;
}
x64Token x64Parser::tokenBranches1635[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1636 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1645 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1767,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1348(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->unary = 0;
	operand.values[3]->binary = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1396(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->unary = 0;
	operand.values[4]->binary = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1444(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1635(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1347[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1348, x64Parser::tokenBranches1348 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1396, x64Parser::tokenBranches1396 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1444, x64Parser::tokenBranches1444 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1635, x64Parser::tokenBranches1635 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1300(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 137;
}
x64Token x64Parser::tokenBranches1299[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1300,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1347 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1315(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 140;
}
x64Token x64Parser::tokenBranches1314[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1315,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1314(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1313[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1314, x64Parser::tokenBranches1314 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1312[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1313 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1511(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 163;
}
x64Token x64Parser::tokenBranches1510[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1511,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1510(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1509[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1510, x64Parser::tokenBranches1510 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1504(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 162;
}
x64Token x64Parser::tokenBranches1503[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1504,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1509 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1503(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->unary = 0;
	operand.values[6]->binary = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1502[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1503, x64Parser::tokenBranches1503 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1501[] = {
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1502 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->unary = 0;
	operand.values[0]->binary = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc16(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc73(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc490(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc692(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc1299(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->unary = 0;
	operand.values[5]->binary = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc1501(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->unary = 0;
	operand.values[2]->binary = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2[] = {
	{x64Token::REGISTER, 95, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches6 },
	{x64Token::REGISTER, 94, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches11 },
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches21 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches26 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches471 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches474 },
	{x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches487 },
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1280 },
	{x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1283 },
	{x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1296 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc3, x64Parser::tokenBranches3 },
	{x64Token::REGISTERCLASS, 19, 0, 0, x64Parser::RegClassData1, &x64Parser::TokenFunc16, x64Parser::tokenBranches16 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc73, x64Parser::tokenBranches73 },
	{x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc490, x64Parser::tokenBranches490 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches503 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc692, x64Parser::tokenBranches692 },
	{x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1299, x64Parser::tokenBranches1299 },
	{x64Token::TOKEN, 7, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches1312 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1501, x64Parser::tokenBranches1501 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2088(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 215;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc2089(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 216;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc2090(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 216;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc2091(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 216;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc2092(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 216;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc2093(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 217;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc2094(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 218;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1[] = {
	{x64Token::TOKEN, 1, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches2 },
	{x64Token::REGISTERCLASS, 20, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc2088,  },
	{x64Token::REGISTERCLASS, 1, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc2089,  },
	{x64Token::REGISTERCLASS, 4, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2090,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, x64Parser::RegClassData7, &x64Parser::TokenFunc2091,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, x64Parser::RegClassData8, &x64Parser::TokenFunc2092,  },
	{x64Token::REGISTERCLASS, 18, 1, 0, x64Parser::RegClassData9, &x64Parser::TokenFunc2093,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, x64Parser::RegClassData10, &x64Parser::TokenFunc2094,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2096(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 219;
}
x64Token x64Parser::tokenBranches2095[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc2096,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2098(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 220;
}
x64Token x64Parser::tokenBranches2097[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc2098,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2103_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2103_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2103_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2103_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2103(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2103_8;
	operand.values[9] = tokenCoding2103_9;
	operand.values[10] = tokenCoding2103_10;
	operand.values[11] = tokenCoding2103_11;
}
x64Token x64Parser::tokenBranches2102[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2103,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2101[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2102 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2100[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2101 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2107_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2107_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2107_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2107_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2107(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2107_8;
	operand.values[9] = tokenCoding2107_9;
	operand.values[10] = tokenCoding2107_10;
	operand.values[11] = tokenCoding2107_11;
}
x64Token x64Parser::tokenBranches2106[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc2107,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2105[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2106 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2104[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2105 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2111_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2111_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2111_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2111_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2111(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2111_8;
	operand.values[9] = tokenCoding2111_9;
	operand.values[10] = tokenCoding2111_10;
	operand.values[11] = tokenCoding2111_11;
}
x64Token x64Parser::tokenBranches2110[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2111,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2109[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches2110 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2108[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2109 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2100(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2104(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2108(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2099[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc2100, x64Parser::tokenBranches2100 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc2104, x64Parser::tokenBranches2104 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc2108, x64Parser::tokenBranches2108 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2116_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2116_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2116_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2116_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2116(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2116_8;
	operand.values[9] = tokenCoding2116_9;
	operand.values[10] = tokenCoding2116_10;
	operand.values[11] = tokenCoding2116_11;
}
x64Token x64Parser::tokenBranches2115[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2116,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2114[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2115 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2113[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2114 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2120_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2120_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2120_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2120_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2120(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2120_8;
	operand.values[9] = tokenCoding2120_9;
	operand.values[10] = tokenCoding2120_10;
	operand.values[11] = tokenCoding2120_11;
}
x64Token x64Parser::tokenBranches2119[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc2120,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2118[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2119 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2117[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2118 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2124_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2124_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2124_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2124_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2124(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2124_8;
	operand.values[9] = tokenCoding2124_9;
	operand.values[10] = tokenCoding2124_10;
	operand.values[11] = tokenCoding2124_11;
}
x64Token x64Parser::tokenBranches2123[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2124,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2122[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches2123 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2121[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2122 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2113(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2117(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2121(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2112[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc2113, x64Parser::tokenBranches2113 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc2117, x64Parser::tokenBranches2117 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc2121, x64Parser::tokenBranches2121 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2129(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 221;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2128[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2129,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2127[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2128 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2126[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2127 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2133(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 222;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2132[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc2133,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2131[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2132 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2130[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2131 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2137(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 223;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2136[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc2137,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2135[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2136 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2134[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2135 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2141(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 224;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2140[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc2141,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2139[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2140 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2138[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2139 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2145_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2145_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2145_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2145_11[] = {
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2145(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2145_8;
	operand.values[9] = tokenCoding2145_9;
	operand.values[10] = tokenCoding2145_10;
	operand.values[11] = tokenCoding2145_11;
}
x64Token x64Parser::tokenBranches2144[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc2145,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2143[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2144 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2142[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2143 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2149_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2149_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2149_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2149_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2149(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2149_8;
	operand.values[9] = tokenCoding2149_9;
	operand.values[10] = tokenCoding2149_10;
	operand.values[11] = tokenCoding2149_11;
}
x64Token x64Parser::tokenBranches2148[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2149,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2147[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2148 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2146[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2147 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2153_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2153_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2153_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2153_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2153(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2153_8;
	operand.values[9] = tokenCoding2153_9;
	operand.values[10] = tokenCoding2153_10;
	operand.values[11] = tokenCoding2153_11;
}
x64Token x64Parser::tokenBranches2152[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc2153,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2151[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2152 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2150[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2151 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2157_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2157_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2157_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2157_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2157(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2157_8;
	operand.values[9] = tokenCoding2157_9;
	operand.values[10] = tokenCoding2157_10;
	operand.values[11] = tokenCoding2157_11;
}
x64Token x64Parser::tokenBranches2156[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2157,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2155[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches2156 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2154[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2155 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2161_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2161_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2161_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2161_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 30, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2161(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2161_8;
	operand.values[9] = tokenCoding2161_9;
	operand.values[10] = tokenCoding2161_10;
	operand.values[11] = tokenCoding2161_11;
}
x64Token x64Parser::tokenBranches2160[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc2161,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2159[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2160 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2158[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2159 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2165_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2165_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2165_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2165_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2165(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2165_8;
	operand.values[9] = tokenCoding2165_9;
	operand.values[10] = tokenCoding2165_10;
	operand.values[11] = tokenCoding2165_11;
}
x64Token x64Parser::tokenBranches2164[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2165,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2163[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2164 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2162[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches2163 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2169_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2169_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2169_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2169_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2169(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2169_8;
	operand.values[9] = tokenCoding2169_9;
	operand.values[10] = tokenCoding2169_10;
	operand.values[11] = tokenCoding2169_11;
}
x64Token x64Parser::tokenBranches2168[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2169,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2167[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2168 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2166[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches2167 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2174_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2174(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2174_11;
}
x64Token x64Parser::tokenBranches2173[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2174,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2172[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2173 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2171[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2172 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2170[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2171 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2179_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2179(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 226;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2179_11;
}
x64Token x64Parser::tokenBranches2178[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc2179,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2184_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2184(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 227;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2184_11;
}
x64Token x64Parser::tokenBranches2183[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc2184,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2177[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2178 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2183 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2176[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2177 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2175[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches2176 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2189_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2189(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 228;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2189_11;
}
x64Token x64Parser::tokenBranches2188[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc2189,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2194_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2194(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 229;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2194_11;
}
x64Token x64Parser::tokenBranches2193[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc2194,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2187[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2188 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2193 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2186[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2187 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2185[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches2186 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2199_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2199(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 228;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2199_11;
}
x64Token x64Parser::tokenBranches2198[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc2199,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2204_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2204(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 229;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2204_11;
}
x64Token x64Parser::tokenBranches2203[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc2204,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2197[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2198 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches2203 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2196[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2197 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2195[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches2196 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2208_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2208(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2208_11;
}
x64Token x64Parser::tokenBranches2207[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2208,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2206[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2207 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2205[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2206 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2212_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2212(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 226;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2212_11;
}
x64Token x64Parser::tokenBranches2211[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc2212,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2216_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2216(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 227;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2216_11;
}
x64Token x64Parser::tokenBranches2215[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc2216,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2210[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2211 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2215 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2209[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2210 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2220_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2220(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 228;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2220_11;
}
x64Token x64Parser::tokenBranches2219[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc2220,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2224_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2224(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 229;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2224_11;
}
x64Token x64Parser::tokenBranches2223[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc2224,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2218[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2219 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2223 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2217[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2218 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2228_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2228(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 230;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2228_11;
}
x64Token x64Parser::tokenBranches2227[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc2228,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2232_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2232(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 231;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2232_11;
}
x64Token x64Parser::tokenBranches2231[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc2232,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2226[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2227 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches2231 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2225[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2226 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2142(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2146(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2150(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2154(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2125[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches2126 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2130 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2134 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches2138 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc2142, x64Parser::tokenBranches2142 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc2146, x64Parser::tokenBranches2146 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc2150, x64Parser::tokenBranches2150 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc2154, x64Parser::tokenBranches2154 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2158 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2162 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2166 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2170 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2175 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2185 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches2195 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches2205 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches2209 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches2217 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches2225 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2238_11[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2238(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 232;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2238_11;
}
x64Token x64Parser::tokenBranches2237[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2238,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2252_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2252_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2252_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2252_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2252(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2252_8;
	operand.values[9] = tokenCoding2252_9;
	operand.values[10] = tokenCoding2252_10;
	operand.values[11] = tokenCoding2252_11;
}
x64Token x64Parser::tokenBranches2236[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2237 },
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2252,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2235[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2236 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2234[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches2235 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2243_11[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2243(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 233;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2243_11;
}
x64Token x64Parser::tokenBranches2242[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2243,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2256_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2256_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2256_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2256_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2256(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2256_8;
	operand.values[9] = tokenCoding2256_9;
	operand.values[10] = tokenCoding2256_10;
	operand.values[11] = tokenCoding2256_11;
}
x64Token x64Parser::tokenBranches2241[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2242 },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2256,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2240[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2241 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2248_11[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2248(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 234;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2248_11;
}
x64Token x64Parser::tokenBranches2247[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2248,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2246[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2247 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2245[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2246 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2239[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches2240 },
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches2245 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2260_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2260_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2260_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2260_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2260(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2260_8;
	operand.values[9] = tokenCoding2260_9;
	operand.values[10] = tokenCoding2260_10;
	operand.values[11] = tokenCoding2260_11;
}
x64Token x64Parser::tokenBranches2259[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc2260,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2258[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2259 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2257[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches2258 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2233[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2234 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2239 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches2257 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2267_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2267(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2267_11;
}
x64Token x64Parser::tokenBranches2266[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc2267,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2269_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2269(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2269_11;
}
x64Token x64Parser::tokenBranches2268[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2269,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2271_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2271(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2271_11;
}
x64Token x64Parser::tokenBranches2270[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc2271,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2273_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2273(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2273_11;
}
x64Token x64Parser::tokenBranches2272[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2273,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2262_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2262(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2262_11;
}
void x64Parser::TokenFunc2263(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 235;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2264(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 236;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2265(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 237;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2261[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc2262,  },
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2263,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2264,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc2265,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2266 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2268 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2270 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches2272 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2280_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2280(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2280_11;
}
x64Token x64Parser::tokenBranches2279[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc2280,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2282_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2282(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2282_11;
}
x64Token x64Parser::tokenBranches2281[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2282,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2284_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2284(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2284_11;
}
Coding x64Parser::tokenCoding2286_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2286(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2286_11;
}
x64Token x64Parser::tokenBranches2283[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc2284,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2286,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2275_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2275(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2275_11;
}
Coding x64Parser::tokenCoding2276_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2276(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2276_11;
}
Coding x64Parser::tokenCoding2277_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2277(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2277_11;
}
Coding x64Parser::tokenCoding2278_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2278(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2278_11;
}
x64Token x64Parser::tokenBranches2274[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc2275,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc2276,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc2277,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc2278,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2279 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2281 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2283 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2290(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2289[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc2290,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2288[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2289 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2293(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 239;
}
x64Token x64Parser::tokenBranches2292[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc2293,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2291[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2292 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2296_11[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2296(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2296_11;
}
x64Token x64Parser::tokenBranches2295[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc2296,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2298_11[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2298(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2298_11;
}
x64Token x64Parser::tokenBranches2297[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc2298,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2291(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 240;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2287[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches2288 },
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc2291, x64Parser::tokenBranches2291 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2295 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches2297 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2302(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 215;
}
x64Token x64Parser::tokenBranches2301[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc2302,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2300[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2301 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2300(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 215;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc2304(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 241;
}
x64Token x64Parser::tokenBranches2299[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc2300, x64Parser::tokenBranches2300 },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc2304,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2307_11[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2307(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2307_11;
}
x64Token x64Parser::tokenBranches2306[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc2307,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2309_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2309(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2309_11;
}
x64Token x64Parser::tokenBranches2308[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc2309,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2305[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2306 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2308 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2311[] = {
	{x64Token::ADDRESSCLASS, 0, 1, 0, NULL, NULL,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2310[] = {
	{x64Token::TOKEN, 14, 0, 1, NULL, NULL, x64Parser::tokenBranches2311 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2315(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 242;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2314[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc2315,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2317(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 243;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2319(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 244;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2316[] = {
	{x64Token::NUMBER, 13, 1, 0, NULL,&x64Parser::TokenFunc2317,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc2319,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2320(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 243;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2321(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 244;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2313[] = {
	{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches2314 },
	{x64Token::TOKEN, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches2316 },
	{x64Token::NUMBER, 12, 1, 0, NULL,&x64Parser::TokenFunc2320,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc2321,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2326_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2326_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2326_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2326_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2326(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2326_8;
	operand.values[9] = tokenCoding2326_9;
	operand.values[10] = tokenCoding2326_10;
	operand.values[11] = tokenCoding2326_11;
}
x64Token x64Parser::tokenBranches2325[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2326,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2324[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2325 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2323[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2324 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2330_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2330_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2330_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2330_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2330(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2330_8;
	operand.values[9] = tokenCoding2330_9;
	operand.values[10] = tokenCoding2330_10;
	operand.values[11] = tokenCoding2330_11;
}
x64Token x64Parser::tokenBranches2329[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc2330,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2328[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2329 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2327[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2328 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2334_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2334_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2334_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2334_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2334(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2334_8;
	operand.values[9] = tokenCoding2334_9;
	operand.values[10] = tokenCoding2334_10;
	operand.values[11] = tokenCoding2334_11;
}
x64Token x64Parser::tokenBranches2333[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2334,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2332[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches2333 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2331[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2332 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2323(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2327(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2331(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2322[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc2323, x64Parser::tokenBranches2323 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc2327, x64Parser::tokenBranches2327 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc2331, x64Parser::tokenBranches2331 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2337_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2337_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2337(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding2337_10;
	operand.values[11] = tokenCoding2337_11;
}
x64Token x64Parser::tokenBranches2336[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc2337,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2335[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2336 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2351_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2351_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2351_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2351_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2351(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2351_8;
	operand.values[9] = tokenCoding2351_9;
	operand.values[10] = tokenCoding2351_10;
	operand.values[11] = tokenCoding2351_11;
}
x64Token x64Parser::tokenBranches2350[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc2351,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2341_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2341_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2341_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2341_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2341(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2341_8;
	operand.values[9] = tokenCoding2341_9;
	operand.values[10] = tokenCoding2341_10;
	operand.values[11] = tokenCoding2341_11;
}
x64Token x64Parser::tokenBranches2340[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc2341,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2350 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2339[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2340 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2355_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2355_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2355_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2355_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2355(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2355_8;
	operand.values[9] = tokenCoding2355_9;
	operand.values[10] = tokenCoding2355_10;
	operand.values[11] = tokenCoding2355_11;
}
x64Token x64Parser::tokenBranches2354[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2355,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2359_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2359_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2359_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2359_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2359(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2359_8;
	operand.values[9] = tokenCoding2359_9;
	operand.values[10] = tokenCoding2359_10;
	operand.values[11] = tokenCoding2359_11;
}
x64Token x64Parser::tokenBranches2358[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc2359,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2344_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2344_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2344_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2344_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2344(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2344_8;
	operand.values[9] = tokenCoding2344_9;
	operand.values[10] = tokenCoding2344_10;
	operand.values[11] = tokenCoding2344_11;
}
Coding x64Parser::tokenCoding2347_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2347_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2347_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2347_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2347(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2347_8;
	operand.values[9] = tokenCoding2347_9;
	operand.values[10] = tokenCoding2347_10;
	operand.values[11] = tokenCoding2347_11;
}
x64Token x64Parser::tokenBranches2343[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc2344,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc2347,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2354 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2358 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2342[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2343 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2372_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2372_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2372_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2372_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2372(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2372_8;
	operand.values[9] = tokenCoding2372_9;
	operand.values[10] = tokenCoding2372_10;
	operand.values[11] = tokenCoding2372_11;
}
x64Token x64Parser::tokenBranches2371[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc2372,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2376_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2376_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2376_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2376_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2376(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2376_8;
	operand.values[9] = tokenCoding2376_9;
	operand.values[10] = tokenCoding2376_10;
	operand.values[11] = tokenCoding2376_11;
}
x64Token x64Parser::tokenBranches2375[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2376,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2380_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2380_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2380_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2380_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2380(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2380_8;
	operand.values[9] = tokenCoding2380_9;
	operand.values[10] = tokenCoding2380_10;
	operand.values[11] = tokenCoding2380_11;
}
x64Token x64Parser::tokenBranches2379[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc2380,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2362_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2362_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2362_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2362_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2362(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2362_8;
	operand.values[9] = tokenCoding2362_9;
	operand.values[10] = tokenCoding2362_10;
	operand.values[11] = tokenCoding2362_11;
}
Coding x64Parser::tokenCoding2365_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2365_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2365_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2365_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2365(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2365_8;
	operand.values[9] = tokenCoding2365_9;
	operand.values[10] = tokenCoding2365_10;
	operand.values[11] = tokenCoding2365_11;
}
Coding x64Parser::tokenCoding2368_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2368_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2368_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2368_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2368(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2368_8;
	operand.values[9] = tokenCoding2368_9;
	operand.values[10] = tokenCoding2368_10;
	operand.values[11] = tokenCoding2368_11;
}
x64Token x64Parser::tokenBranches2361[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc2362,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc2365,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc2368,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2371 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2375 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2379 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2360[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2361 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2339(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2342(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2360(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2338[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc2339, x64Parser::tokenBranches2339 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc2342, x64Parser::tokenBranches2342 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc2360, x64Parser::tokenBranches2360 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2384_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2384(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2384_11;
}
Coding x64Parser::tokenCoding2387_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2387(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2387_11;
}
Coding x64Parser::tokenCoding2390_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2390(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2390_11;
}
x64Token x64Parser::tokenBranches2383[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc2384,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2387,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2390,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2382[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2383 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2395_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2395(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2395_11;
}
Coding x64Parser::tokenCoding2400_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2400(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2400_11;
}
x64Token x64Parser::tokenBranches2394[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc2395,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2400,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2404_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2404(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2404_11;
}
x64Token x64Parser::tokenBranches2393[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2394 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2404,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2392[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2393 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2391[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2392 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2407_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2407(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2407_11;
}
Coding x64Parser::tokenCoding2410_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2410(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2410_11;
}
Coding x64Parser::tokenCoding2413_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2413(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2413_11;
}
x64Token x64Parser::tokenBranches2406[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc2407,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2410,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2413,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2405[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2406 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2418_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2418(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2418_11;
}
Coding x64Parser::tokenCoding2423_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2423(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2423_11;
}
x64Token x64Parser::tokenBranches2417[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc2418,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2423,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2427_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2427(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2427_11;
}
x64Token x64Parser::tokenBranches2416[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2417 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2427,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2415[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2416 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2414[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches2415 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2434_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2434(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2434_11;
}
x64Token x64Parser::tokenBranches2433[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2434,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2430_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2430(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2430_11;
}
Coding x64Parser::tokenCoding2437_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2437(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2437_11;
}
x64Token x64Parser::tokenBranches2429[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc2430,  },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2433 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2437,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2428[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2429 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2442_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2442(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2442_11;
}
Coding x64Parser::tokenCoding2447_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2447(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2447_11;
}
x64Token x64Parser::tokenBranches2441[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc2442,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2447,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2451_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2451(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2451_11;
}
x64Token x64Parser::tokenBranches2440[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2441 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2451,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2439[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2440 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2438[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches2439 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2458_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2458(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2458_11;
}
x64Token x64Parser::tokenBranches2457[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2458,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2454_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2454(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2454_11;
}
Coding x64Parser::tokenCoding2461_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2461(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2461_11;
}
x64Token x64Parser::tokenBranches2453[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc2454,  },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2457 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2461,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2452[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2453 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2466_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2466(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->unary = 0;
	operand.values[17]->binary = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2466_11;
}
Coding x64Parser::tokenCoding2471_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2471(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding2471_11;
}
x64Token x64Parser::tokenBranches2465[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc2466,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2471,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2475_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2475(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding2475_11;
}
x64Token x64Parser::tokenBranches2464[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2465 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2475,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2463[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2464 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2462[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches2463 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2381[] = {
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches2382 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2391 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches2405 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2414 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches2428 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2438 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches2452 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches2462 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2482_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2482_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2482_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2482_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2482(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding2482_8;
	operand.values[9] = tokenCoding2482_9;
	operand.values[10] = tokenCoding2482_10;
	operand.values[11] = tokenCoding2482_11;
}
Coding x64Parser::tokenCoding2488_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2488_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2488_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2488_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2488(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2488_8;
	operand.values[9] = tokenCoding2488_9;
	operand.values[10] = tokenCoding2488_10;
	operand.values[11] = tokenCoding2488_11;
}
x64Token x64Parser::tokenBranches2481[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2482,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2488,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2480[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2481 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2480(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2479[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc2480, x64Parser::tokenBranches2480 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2478[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2479 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2477[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches2478 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2494_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2494_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2494_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2494_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2494(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding2494_8;
	operand.values[9] = tokenCoding2494_9;
	operand.values[10] = tokenCoding2494_10;
	operand.values[11] = tokenCoding2494_11;
}
Coding x64Parser::tokenCoding2500_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2500_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2500_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2500_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2500(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2500_8;
	operand.values[9] = tokenCoding2500_9;
	operand.values[10] = tokenCoding2500_10;
	operand.values[11] = tokenCoding2500_11;
}
x64Token x64Parser::tokenBranches2493[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2494,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2500,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2492[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2493 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2492(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2491[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc2492, x64Parser::tokenBranches2492 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2490[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2491 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2489[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches2490 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2506_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2506_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2506_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2506_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2506(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding2506_8;
	operand.values[9] = tokenCoding2506_9;
	operand.values[10] = tokenCoding2506_10;
	operand.values[11] = tokenCoding2506_11;
}
Coding x64Parser::tokenCoding2512_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2512_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2512_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2512_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2512(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2512_8;
	operand.values[9] = tokenCoding2512_9;
	operand.values[10] = tokenCoding2512_10;
	operand.values[11] = tokenCoding2512_11;
}
x64Token x64Parser::tokenBranches2505[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2506,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc2512,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2504[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2505 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2504(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2503[] = {
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc2504, x64Parser::tokenBranches2504 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2502[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2503 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2501[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches2502 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2476[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2477 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2489 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches2501 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2513[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL, NULL,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2518_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2518_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2518_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2518(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2518_8;
	operand.values[9] = tokenCoding2518_9;
	operand.values[10] = tokenCoding2518_10;
}
x64Token x64Parser::tokenBranches2517[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc2518,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2516[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2517 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2516(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2515[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc2516, x64Parser::tokenBranches2516 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2522_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2522_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2522_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2522_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2522(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2522_8;
	operand.values[9] = tokenCoding2522_9;
	operand.values[10] = tokenCoding2522_10;
	operand.values[11] = tokenCoding2522_11;
}
x64Token x64Parser::tokenBranches2521[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc2522,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2520[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2521 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2525_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2525_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2525_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2525_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2525(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2525_8;
	operand.values[9] = tokenCoding2525_9;
	operand.values[10] = tokenCoding2525_10;
	operand.values[11] = tokenCoding2525_11;
}
x64Token x64Parser::tokenBranches2524[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc2525,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2523[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2524 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2520(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2519[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc2520, x64Parser::tokenBranches2520 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2523 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2529_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2529_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2529_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2529_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2529(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2529_8;
	operand.values[9] = tokenCoding2529_9;
	operand.values[10] = tokenCoding2529_10;
	operand.values[11] = tokenCoding2529_11;
}
x64Token x64Parser::tokenBranches2528[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc2529,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2527[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2528 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2532_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2532_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2532_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2532_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2532(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2532_8;
	operand.values[9] = tokenCoding2532_9;
	operand.values[10] = tokenCoding2532_10;
	operand.values[11] = tokenCoding2532_11;
}
x64Token x64Parser::tokenBranches2531[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc2532,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2530[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2531 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2527(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2526[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc2527, x64Parser::tokenBranches2527 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2530 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2536_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2536_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2536_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2536_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2536(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2536_8;
	operand.values[9] = tokenCoding2536_9;
	operand.values[10] = tokenCoding2536_10;
	operand.values[11] = tokenCoding2536_11;
}
x64Token x64Parser::tokenBranches2535[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc2536,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2534[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2535 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2539_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2539_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2539_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2539_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2539(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2539_8;
	operand.values[9] = tokenCoding2539_9;
	operand.values[10] = tokenCoding2539_10;
	operand.values[11] = tokenCoding2539_11;
}
x64Token x64Parser::tokenBranches2538[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc2539,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2537[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2538 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2534(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2533[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc2534, x64Parser::tokenBranches2534 },
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2537 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2543_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2543_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2543_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2543(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2543_8;
	operand.values[9] = tokenCoding2543_9;
	operand.values[10] = tokenCoding2543_10;
}
x64Token x64Parser::tokenBranches2542[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc2543,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2541[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2542 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2541(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2540[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc2541, x64Parser::tokenBranches2541 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2547_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2547_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2547_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2547(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2547_8;
	operand.values[9] = tokenCoding2547_9;
	operand.values[10] = tokenCoding2547_10;
}
x64Token x64Parser::tokenBranches2546[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc2547,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2545[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2546 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2545(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2544[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc2545, x64Parser::tokenBranches2545 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2551_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2551_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2551_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2551(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2551_8;
	operand.values[9] = tokenCoding2551_9;
	operand.values[10] = tokenCoding2551_10;
}
x64Token x64Parser::tokenBranches2550[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc2551,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2549[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2550 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2554_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2554_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2554_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2554(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2554_8;
	operand.values[9] = tokenCoding2554_9;
	operand.values[10] = tokenCoding2554_10;
}
x64Token x64Parser::tokenBranches2553[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc2554,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2552[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2553 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2549(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2552(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2548[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc2549, x64Parser::tokenBranches2549 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc2552, x64Parser::tokenBranches2552 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2559_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2559_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2559_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2559(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2559_8;
	operand.values[9] = tokenCoding2559_9;
	operand.values[10] = tokenCoding2559_10;
}
x64Token x64Parser::tokenBranches2558[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc2559,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2563_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2563_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2563_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2563(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2563_8;
	operand.values[9] = tokenCoding2563_9;
	operand.values[10] = tokenCoding2563_10;
}
x64Token x64Parser::tokenBranches2562[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2563,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2557[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2558 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches2562 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2556[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2557 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2556(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2555[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc2556, x64Parser::tokenBranches2556 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2567_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2567_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2567_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2567_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2567(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2567_8;
	operand.values[9] = tokenCoding2567_9;
	operand.values[18] = tokenCoding2567_18;
	operand.values[10] = tokenCoding2567_10;
}
x64Token x64Parser::tokenBranches2566[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc2567,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2565[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2566 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2570_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2570_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2570_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2570_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2570(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2570_8;
	operand.values[9] = tokenCoding2570_9;
	operand.values[18] = tokenCoding2570_18;
	operand.values[10] = tokenCoding2570_10;
}
x64Token x64Parser::tokenBranches2569[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc2570,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2568[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2569 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2565(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2568(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2564[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc2565, x64Parser::tokenBranches2565 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc2568, x64Parser::tokenBranches2568 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2576_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2576_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2576_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2576(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding2576_8;
	operand.values[9] = tokenCoding2576_9;
	operand.values[10] = tokenCoding2576_10;
}
x64Token x64Parser::tokenBranches2575[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2576,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2574[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2575 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2573[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2574 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2572[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2573 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2572(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2571[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc2572, x64Parser::tokenBranches2572 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2580_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2580_10[] = {
	{ (Coding::Type)(Coding::indirect), 32, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2580_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2580(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[18] = tokenCoding2580_18;
	operand.values[10] = tokenCoding2580_10;
	operand.values[11] = tokenCoding2580_11;
}
Coding x64Parser::tokenCoding2586_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2586_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2586_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2586_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2586_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2586(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2586_8;
	operand.values[9] = tokenCoding2586_9;
	operand.values[18] = tokenCoding2586_18;
	operand.values[10] = tokenCoding2586_10;
	operand.values[11] = tokenCoding2586_11;
}
x64Token x64Parser::tokenBranches2579[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2580,  },
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc2586,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2578[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2579 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2583_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2583_10[] = {
	{ (Coding::Type)(Coding::indirect), 32, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2583_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2583(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[18] = tokenCoding2583_18;
	operand.values[10] = tokenCoding2583_10;
	operand.values[11] = tokenCoding2583_11;
}
Coding x64Parser::tokenCoding2589_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2589_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2589_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2589_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2589_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 30, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2589(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2589_8;
	operand.values[9] = tokenCoding2589_9;
	operand.values[18] = tokenCoding2589_18;
	operand.values[10] = tokenCoding2589_10;
	operand.values[11] = tokenCoding2589_11;
}
x64Token x64Parser::tokenBranches2582[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2583,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc2589,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2581[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2582 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2578(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc2581(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2577[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc2578, x64Parser::tokenBranches2578 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc2581, x64Parser::tokenBranches2581 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2595_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2595_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2595_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2595(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding2595_8;
	operand.values[9] = tokenCoding2595_9;
	operand.values[10] = tokenCoding2595_10;
}
x64Token x64Parser::tokenBranches2594[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2595,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2593[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2594 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2592[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2593 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2591[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2592 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2591(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2590[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc2591, x64Parser::tokenBranches2591 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2601_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2601_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2601_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2601(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding2601_8;
	operand.values[9] = tokenCoding2601_9;
	operand.values[10] = tokenCoding2601_10;
}
x64Token x64Parser::tokenBranches2600[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2601,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2599[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2600 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2598[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches2599 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2597[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2598 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2597(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2596[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc2597, x64Parser::tokenBranches2597 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2612_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2612_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2612_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2612_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2612(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2612_8;
	operand.values[9] = tokenCoding2612_9;
	operand.values[10] = tokenCoding2612_10;
	operand.values[11] = tokenCoding2612_11;
}
x64Token x64Parser::tokenBranches2611[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2612,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2610[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2611 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2609[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches2610 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2617_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2617_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2617_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2617(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 246;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2617_8;
	operand.values[9] = tokenCoding2617_9;
	operand.values[10] = tokenCoding2617_10;
}
Coding x64Parser::tokenCoding2618_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2618_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2618_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2618(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 247;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2618_8;
	operand.values[9] = tokenCoding2618_9;
	operand.values[10] = tokenCoding2618_10;
}
x64Token x64Parser::tokenBranches2616[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2617,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc2618,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2627(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 248;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2626[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc2627,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2631(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 249;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2630[] = {
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc2631,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2625[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2626 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2630 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2624[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2625 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2638_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2638_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2638_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2638_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2638(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2638_8;
	operand.values[9] = tokenCoding2638_9;
	operand.values[10] = tokenCoding2638_10;
	operand.values[11] = tokenCoding2638_11;
}
x64Token x64Parser::tokenBranches2637[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc2638,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2640_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2640_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2640_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2640_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2640(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2640_8;
	operand.values[9] = tokenCoding2640_9;
	operand.values[10] = tokenCoding2640_10;
	operand.values[11] = tokenCoding2640_11;
}
x64Token x64Parser::tokenBranches2639[] = {
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc2640,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2642_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2642_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2642_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2642_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2642(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2642_8;
	operand.values[9] = tokenCoding2642_9;
	operand.values[10] = tokenCoding2642_10;
	operand.values[11] = tokenCoding2642_11;
}
x64Token x64Parser::tokenBranches2641[] = {
	{x64Token::ADDRESSCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc2642,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2644(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 252;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2646(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 253;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding2648_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2648_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2648(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding2648_10;
	operand.values[11] = tokenCoding2648_11;
}
Coding x64Parser::tokenCoding2650_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2650_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2650(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding2650_10;
	operand.values[11] = tokenCoding2650_11;
}
x64Token x64Parser::tokenBranches2643[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc2644,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc2646,  },
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc2648,  },
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc2650,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2624(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::number;
	operand.values[1]->val = operands.size();
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2632(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 250;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2633(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 251;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding2634_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2634_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2634_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2634_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2634(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2634_8;
	operand.values[9] = tokenCoding2634_9;
	operand.values[10] = tokenCoding2634_10;
	operand.values[11] = tokenCoding2634_11;
}
Coding x64Parser::tokenCoding2635_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2635_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2635_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2635_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2635(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2635_8;
	operand.values[9] = tokenCoding2635_9;
	operand.values[10] = tokenCoding2635_10;
	operand.values[11] = tokenCoding2635_11;
}
Coding x64Parser::tokenCoding2636_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2636_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2636_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2636_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2636(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2636_8;
	operand.values[9] = tokenCoding2636_9;
	operand.values[10] = tokenCoding2636_10;
	operand.values[11] = tokenCoding2636_11;
}
x64Token x64Parser::tokenBranches2623[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc2624, x64Parser::tokenBranches2624 },
	{x64Token::NUMBER, 14, 1, 0, NULL,&x64Parser::TokenFunc2632,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc2633,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc2634,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc2635,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc2636,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2637 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2639 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches2641 },
	{x64Token::TOKEN, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches2643 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2654(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 254;
}
x64Token x64Parser::tokenBranches2653[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc2654,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2704(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 255;
}
x64Token x64Parser::tokenBranches2703[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2704,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2702[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches2703 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2701[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2702 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2700[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2701 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2699[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2700 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2698[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2699 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2697[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2698 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2696[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2697 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2730(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 257;
}
x64Token x64Parser::tokenBranches2729[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2730,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2728[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches2729 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2727[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2728 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2726[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2727 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2725[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2726 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2724[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2725 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2723[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2724 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2722[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2723 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2695[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches2696 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches2722 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2694[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2695 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2717(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 256;
}
x64Token x64Parser::tokenBranches2716[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2717,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2715[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches2716 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2714[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2715 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2713[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2714 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2712[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2713 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2711[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2712 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2710[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2711 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2709[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2710 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2743(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 258;
}
x64Token x64Parser::tokenBranches2742[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2743,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2741[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches2742 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2740[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2741 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2739[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2740 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2738[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2739 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2737[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2738 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2736[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2737 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2735[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2736 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2765(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 260;
}
x64Token x64Parser::tokenBranches2764[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2765,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2763[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches2764 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2762[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2763 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2761[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2762 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2760[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2761 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2759[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2760 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2758[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2759 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2757[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2758 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2708[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches2709 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches2735 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches2757 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2707[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2708 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2752(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 259;
}
x64Token x64Parser::tokenBranches2751[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2752,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2750[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches2751 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2749[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2750 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2748[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2749 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2747[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2748 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2746[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2747 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2707(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2693[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches2694 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc2707, x64Parser::tokenBranches2707 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches2746 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2692[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2693 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2778(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 261;
}
x64Token x64Parser::tokenBranches2777[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2778,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2776[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches2777 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2775[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2776 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2774[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2775 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2773[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2774 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2772[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2773 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2771[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2772 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2770[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2771 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2804(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 263;
}
x64Token x64Parser::tokenBranches2803[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2804,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2802[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches2803 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2801[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2802 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2800[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2801 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2799[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2800 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2798[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2799 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2797[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2798 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2796[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2797 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2769[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches2770 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches2796 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2768[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2769 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2791(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 262;
}
x64Token x64Parser::tokenBranches2790[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2791,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2789[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches2790 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2788[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2789 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2787[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2788 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2786[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2787 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2785[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2786 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2784[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2785 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2783[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2784 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2817(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 264;
}
x64Token x64Parser::tokenBranches2816[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2817,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2815[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches2816 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2814[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2815 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2813[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2814 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2812[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2813 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2811[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2812 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2810[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2811 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2809[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2810 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2837(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 266;
}
x64Token x64Parser::tokenBranches2836[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2837,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2835[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches2836 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2834[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2835 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2833[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2834 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2832[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2833 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2831[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2832 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2782[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches2783 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches2809 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches2831 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2781[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2782 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2826(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 265;
}
x64Token x64Parser::tokenBranches2825[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2826,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2824[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches2825 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2823[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2824 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2822[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2823 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2821[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2822 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2820[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2821 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2781(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2767[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches2768 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc2781, x64Parser::tokenBranches2781 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches2820 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2766[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2767 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2850(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 267;
}
x64Token x64Parser::tokenBranches2849[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2850,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2848[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches2849 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2847[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2848 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2846[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2847 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2845[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2846 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2844[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2845 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2843[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2844 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2842[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2843 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2876(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 269;
}
x64Token x64Parser::tokenBranches2875[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2876,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2874[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches2875 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2873[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2874 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2872[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2873 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2871[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2872 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2870[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2871 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2869[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2870 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2868[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2869 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2841[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches2842 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches2868 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2840[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2841 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2863(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 268;
}
x64Token x64Parser::tokenBranches2862[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2863,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2861[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches2862 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2860[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2861 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2859[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2860 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2858[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2859 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2857[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2858 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2856[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2857 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2855[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2856 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2889(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 270;
}
x64Token x64Parser::tokenBranches2888[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2889,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2887[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches2888 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2886[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2887 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2885[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2886 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2884[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2885 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2883[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2884 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2882[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2883 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2881[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2882 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2909(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 272;
}
x64Token x64Parser::tokenBranches2908[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2909,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2907[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches2908 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2906[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2907 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2905[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2906 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2904[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2905 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2903[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2904 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2854[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches2855 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches2881 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches2903 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2853[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2854 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2898(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 271;
}
x64Token x64Parser::tokenBranches2897[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2898,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2896[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches2897 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2895[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2896 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2894[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2895 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2893[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2894 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2892[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2893 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2853(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2839[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches2840 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc2853, x64Parser::tokenBranches2853 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches2892 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2838[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2839 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2922(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 273;
}
x64Token x64Parser::tokenBranches2921[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2922,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2920[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches2921 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2919[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2920 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2918[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2919 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2917[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2918 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2916[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches2917 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2915[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2916 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2914[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2915 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2913[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches2914 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2912[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2913 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2935(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 274;
}
x64Token x64Parser::tokenBranches2934[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2935,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2933[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches2934 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2932[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2933 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2931[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2932 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2930[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches2931 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2929[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches2930 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2928[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2929 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2927[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2928 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2955(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 276;
}
x64Token x64Parser::tokenBranches2954[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2955,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2953[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches2954 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2952[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2953 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2951[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches2952 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2950[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2951 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2949[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2950 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2926[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches2927 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches2949 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2925[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2926 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2944(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 275;
}
x64Token x64Parser::tokenBranches2943[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc2944,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2942[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches2943 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2941[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2942 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2940[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches2941 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2939[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2940 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2938[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches2939 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2925(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2911[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches2912 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc2925, x64Parser::tokenBranches2925 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches2938 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2910[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches2911 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2691[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches2692 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches2766 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches2838 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches2910 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2960(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 277;
}
x64Token x64Parser::tokenBranches2959[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc2960,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2965_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2965_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2965_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2965(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2965_8;
	operand.values[9] = tokenCoding2965_9;
	operand.values[10] = tokenCoding2965_10;
}
x64Token x64Parser::tokenBranches2964[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc2965,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2963[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2964 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2962[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches2963 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2969_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2969_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2969_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2969(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2969_8;
	operand.values[9] = tokenCoding2969_9;
	operand.values[10] = tokenCoding2969_10;
}
x64Token x64Parser::tokenBranches2968[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc2969,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2967[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2968 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2966[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches2967 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2973_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2973_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2973_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2973(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2973_8;
	operand.values[9] = tokenCoding2973_9;
	operand.values[10] = tokenCoding2973_10;
}
x64Token x64Parser::tokenBranches2972[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc2973,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2971[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2972 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2970[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches2971 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2977_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2977_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2977_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2977(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding2977_8;
	operand.values[9] = tokenCoding2977_9;
	operand.values[10] = tokenCoding2977_10;
}
x64Token x64Parser::tokenBranches2976[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc2977,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2975[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2976 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2974[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches2975 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2961[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2962 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2966 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches2970 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches2974 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2979_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2979_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2979_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2979_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2979(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2979_8;
	operand.values[9] = tokenCoding2979_9;
	operand.values[10] = tokenCoding2979_10;
	operand.values[11] = tokenCoding2979_11;
}
x64Token x64Parser::tokenBranches2978[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc2979,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding2981_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2981_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2981_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding2981_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc2981(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding2981_8;
	operand.values[9] = tokenCoding2981_9;
	operand.values[10] = tokenCoding2981_10;
	operand.values[11] = tokenCoding2981_11;
}
x64Token x64Parser::tokenBranches2980[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc2981,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2984(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 254;
}
x64Token x64Parser::tokenBranches2983[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc2984,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2996(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 278;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->unary = 0;
	operand.values[20]->binary = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2995[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc2996,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2994[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches2995 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2993[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2994 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2993(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2992[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc2993, x64Parser::tokenBranches2993 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2991[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches2992 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3000_10[] = {
	{ (Coding::Type)(Coding::indirect), 14, -1, -1, 0, '&' }, 
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3000_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 27, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 14, -1, -1, 0, '>' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3000(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3000_10;
	operand.values[11] = tokenCoding3000_11;
}
x64Token x64Parser::tokenBranches2999[] = {
	{x64Token::ADDRESSCLASS, 0, 1, 0, NULL,&x64Parser::TokenFunc3000,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2998[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches2999 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2998(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2997[] = {
	{x64Token::NUMBER, 2, 0, 0, NULL,&x64Parser::TokenFunc2998, x64Parser::tokenBranches2998 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3013(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3012[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3013,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3011[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3012 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3010[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3011 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3017(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3016[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3017,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3015[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3016 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3014[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3015 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3021(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3020[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3021,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3019[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3020 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3018[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3019 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3025(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3024[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3025,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3023[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3024 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3022[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3023 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3029(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3028[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3029,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3027[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3028 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3026[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3027 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3033(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3032[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3033,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3031[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3032 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3030[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3031 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3037(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3036[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3037,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3035[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3036 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3034[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3035 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3041(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3040[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3041,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3039[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3040 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3038[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3039 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3045(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3044[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3045,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3043[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3044 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3048_11[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3048(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3048_11;
}
x64Token x64Parser::tokenBranches3047[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3048,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3050_11[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3050(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3050_11;
}
x64Token x64Parser::tokenBranches3049[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3050,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3046(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3042[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3043 },
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3046,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3047 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3049 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3054(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3053[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3054,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3052[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3053 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3051[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3052 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3058(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3057[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3058,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3056[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3057 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3055[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3056 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3062(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3061[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3062,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3060[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3061 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3059[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3060 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3066_11[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3066(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3066_11;
}
x64Token x64Parser::tokenBranches3065[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3066,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3068_11[] = {
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3068(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3068_11;
}
x64Token x64Parser::tokenBranches3067[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3068,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3064(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3063[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3064,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3065 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3067 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3072(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3071[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3072,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3070[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3071 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3069[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3070 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3076(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3075[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3076,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3074[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3075 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3073[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3074 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3087_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3087_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3087(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3087_10;
	operand.values[11] = tokenCoding3087_11;
}
x64Token x64Parser::tokenBranches3086[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3087,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3089_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3089_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 223, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3089(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3089_10;
	operand.values[11] = tokenCoding3089_11;
}
x64Token x64Parser::tokenBranches3088[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3089,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3097_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3097_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3097(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3097_10;
	operand.values[11] = tokenCoding3097_11;
}
x64Token x64Parser::tokenBranches3096[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3097,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3095[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3096 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3105_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3105_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3105(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3105_10;
	operand.values[11] = tokenCoding3105_11;
}
x64Token x64Parser::tokenBranches3104[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3105,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3103[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3104 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3111_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3111_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3111(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3111_10;
	operand.values[11] = tokenCoding3111_11;
}
x64Token x64Parser::tokenBranches3110[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3111,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3113_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3113_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3113(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3113_10;
	operand.values[11] = tokenCoding3113_11;
}
x64Token x64Parser::tokenBranches3112[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3113,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3115_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3115_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 219, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3115(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3115_10;
	operand.values[11] = tokenCoding3115_11;
}
x64Token x64Parser::tokenBranches3114[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3115,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3109_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3109_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3109(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3109_10;
	operand.values[11] = tokenCoding3109_11;
}
x64Token x64Parser::tokenBranches3108[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3109,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3110 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3112 },
	{x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3114 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3119_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3119_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3119(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3119_10;
	operand.values[11] = tokenCoding3119_11;
}
x64Token x64Parser::tokenBranches3118[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3119,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3117[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3118 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3121_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3121_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3121(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3121_10;
	operand.values[11] = tokenCoding3121_11;
}
x64Token x64Parser::tokenBranches3120[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3121,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3132_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3132_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3132(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3132_10;
	operand.values[11] = tokenCoding3132_11;
}
x64Token x64Parser::tokenBranches3131[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3132,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3139_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3139_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3139(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3139_10;
	operand.values[11] = tokenCoding3139_11;
}
x64Token x64Parser::tokenBranches3138[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3139,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3141_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3141_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3141(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3141_10;
	operand.values[11] = tokenCoding3141_11;
}
x64Token x64Parser::tokenBranches3140[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3141,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3150_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3150_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3150(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3150_10;
	operand.values[11] = tokenCoding3150_11;
}
x64Token x64Parser::tokenBranches3149[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3150,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3152_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3152_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3152(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3152_10;
	operand.values[11] = tokenCoding3152_11;
}
x64Token x64Parser::tokenBranches3151[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3152,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3148_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3148_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3148(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3148_10;
	operand.values[11] = tokenCoding3148_11;
}
x64Token x64Parser::tokenBranches3147[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3148,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3149 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3151 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3155_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3155_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3155(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3155_10;
	operand.values[11] = tokenCoding3155_11;
}
x64Token x64Parser::tokenBranches3154[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3155,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3153[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3154 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3158_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3158_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3158(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3158_10;
	operand.values[11] = tokenCoding3158_11;
}
x64Token x64Parser::tokenBranches3157[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3158,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3156[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3157 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3160_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3160_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3160(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3160_10;
	operand.values[11] = tokenCoding3160_11;
}
x64Token x64Parser::tokenBranches3159[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3160,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3162_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3162_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3162(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3162_10;
	operand.values[11] = tokenCoding3162_11;
}
x64Token x64Parser::tokenBranches3161[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3162,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3166_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3166_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3166(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3166_10;
	operand.values[11] = tokenCoding3166_11;
}
x64Token x64Parser::tokenBranches3165[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3166,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3168_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3168_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3168(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3168_10;
	operand.values[11] = tokenCoding3168_11;
}
x64Token x64Parser::tokenBranches3167[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3168,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3170_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3170_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 219, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3170(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3170_10;
	operand.values[11] = tokenCoding3170_11;
}
x64Token x64Parser::tokenBranches3169[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3170,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3164_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3164_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3164(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3164_10;
	operand.values[11] = tokenCoding3164_11;
}
x64Token x64Parser::tokenBranches3163[] = {
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3164,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3165 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3167 },
	{x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3169 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3174(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
}
x64Token x64Parser::tokenBranches3173[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc3174,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3172[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3173 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3172(x64Operand &operand, int tokenPos)
{
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3171[] = {
	{x64Token::REGISTERCLASS, 20, 0, 0, NULL,&x64Parser::TokenFunc3172, x64Parser::tokenBranches3172 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3178(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
}
x64Token x64Parser::tokenBranches3177[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc3178,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3176[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3177 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3176(x64Operand &operand, int tokenPos)
{
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3175[] = {
	{x64Token::REGISTERCLASS, 20, 0, 0, NULL,&x64Parser::TokenFunc3176, x64Parser::tokenBranches3176 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3182(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
}
x64Token x64Parser::tokenBranches3181[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc3182,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3180[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3181 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3180(x64Operand &operand, int tokenPos)
{
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3179[] = {
	{x64Token::REGISTERCLASS, 20, 0, 0, NULL,&x64Parser::TokenFunc3180, x64Parser::tokenBranches3180 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3185_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3185_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3185(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3185_10;
	operand.values[11] = tokenCoding3185_11;
}
x64Token x64Parser::tokenBranches3184[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3185,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3186(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 279;
}
x64Token x64Parser::tokenBranches3183[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3184 },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc3186,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3189_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3189_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3189(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3189_10;
	operand.values[11] = tokenCoding3189_11;
}
x64Token x64Parser::tokenBranches3188[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3189,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3190(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 280;
}
x64Token x64Parser::tokenBranches3187[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3188 },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc3190,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3200(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3199[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3200,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3198[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3199 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3197[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3198 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3204(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3203[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3204,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3202[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3203 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3201[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3202 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3213(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3212[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3213,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3211[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3212 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3210[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3211 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3217(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 238;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->unary = 0;
	operand.values[7]->binary = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3216[] = {
	{x64Token::REGISTERCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3217,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3215[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3216 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3214[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3215 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3219_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3219_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 174, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3219(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3219_10;
	operand.values[11] = tokenCoding3219_11;
}
x64Token x64Parser::tokenBranches3218[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3219,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3221_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3221_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 174, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3221(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3221_10;
	operand.values[11] = tokenCoding3221_11;
}
x64Token x64Parser::tokenBranches3220[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3221,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3233(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 281;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3232[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3233,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3260_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3260_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3260_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3260_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3260(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 287;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->unary = 0;
	operand.values[21]->binary = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding3260_8;
	operand.values[9] = tokenCoding3260_9;
	operand.values[10] = tokenCoding3260_10;
	operand.values[11] = tokenCoding3260_11;
}
x64Token x64Parser::tokenBranches3259[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3260,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3266_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3266_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3266_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3266_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3266(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 288;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding3266_8;
	operand.values[9] = tokenCoding3266_9;
	operand.values[10] = tokenCoding3266_10;
	operand.values[11] = tokenCoding3266_11;
}
x64Token x64Parser::tokenBranches3258[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3259 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3266,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3257[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3258 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3237(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 282;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding3257_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3257_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3257_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3257_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3257(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3257_8;
	operand.values[9] = tokenCoding3257_9;
	operand.values[10] = tokenCoding3257_10;
	operand.values[11] = tokenCoding3257_11;
}
x64Token x64Parser::tokenBranches3236[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3237,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3257, x64Parser::tokenBranches3257 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3231[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3232 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3236 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3230[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3231 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3241(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 283;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3240[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3241,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3277_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3277_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3277_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3277_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3277(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 287;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->unary = 0;
	operand.values[21]->binary = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding3277_8;
	operand.values[9] = tokenCoding3277_9;
	operand.values[10] = tokenCoding3277_10;
	operand.values[11] = tokenCoding3277_11;
}
x64Token x64Parser::tokenBranches3276[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3277,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3283_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3283_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3283_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3283_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3283(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 289;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding3283_8;
	operand.values[9] = tokenCoding3283_9;
	operand.values[10] = tokenCoding3283_10;
	operand.values[11] = tokenCoding3283_11;
}
x64Token x64Parser::tokenBranches3275[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3276 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3283,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3274[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3275 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3245(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 284;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding3274_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3274_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3274_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3274_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3274(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3274_8;
	operand.values[9] = tokenCoding3274_9;
	operand.values[10] = tokenCoding3274_10;
	operand.values[11] = tokenCoding3274_11;
}
x64Token x64Parser::tokenBranches3244[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3245,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3274, x64Parser::tokenBranches3274 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3239[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3240 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3244 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3238[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3239 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3249(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 285;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->unary = 0;
	operand.values[15]->binary = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3248[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3249,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3294_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3294_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3294_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3294_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3294(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 287;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->unary = 0;
	operand.values[21]->binary = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding3294_8;
	operand.values[9] = tokenCoding3294_9;
	operand.values[10] = tokenCoding3294_10;
	operand.values[11] = tokenCoding3294_11;
}
x64Token x64Parser::tokenBranches3293[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3294,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3300_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3300_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3300_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3300_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3300(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 290;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding3300_8;
	operand.values[9] = tokenCoding3300_9;
	operand.values[10] = tokenCoding3300_10;
	operand.values[11] = tokenCoding3300_11;
}
x64Token x64Parser::tokenBranches3292[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3293 },
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc3300,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3291[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3292 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3253(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 286;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding3291_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3291_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3291_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3291_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3291(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3291_8;
	operand.values[9] = tokenCoding3291_9;
	operand.values[10] = tokenCoding3291_10;
	operand.values[11] = tokenCoding3291_11;
}
x64Token x64Parser::tokenBranches3252[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc3253,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3291, x64Parser::tokenBranches3291 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3247[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3248 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3252 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3246[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3247 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3230(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3238(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3246(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3229[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3230, x64Parser::tokenBranches3230 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3238, x64Parser::tokenBranches3238 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc3246, x64Parser::tokenBranches3246 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3309(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 291;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3308[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3309,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3324(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 295;
}
x64Token x64Parser::tokenBranches3307[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3308 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3324,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3306[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3307 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3313(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 292;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3312[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3313,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3327(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 296;
}
x64Token x64Parser::tokenBranches3311[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3312 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3327,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3310[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3311 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3317(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 293;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3316[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3317,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3330(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 297;
}
x64Token x64Parser::tokenBranches3315[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3316 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3330,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3314[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3315 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3321(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 294;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3320[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3321,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3333(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 298;
}
x64Token x64Parser::tokenBranches3319[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3320 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3333,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3318[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3319 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3305[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches3306 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3310 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3314 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3318 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3342(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 299;
}
x64Token x64Parser::tokenBranches3341[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3342,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3340[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3341 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3339[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3340 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3358(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 301;
}
x64Token x64Parser::tokenBranches3357[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3358,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3356[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3357 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3355[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3356 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3338[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches3339 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches3355 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3337[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3338 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3336[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3337 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3350(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 300;
}
x64Token x64Parser::tokenBranches3349[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3350,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3348[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3349 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3347[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3348 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3366(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 302;
}
x64Token x64Parser::tokenBranches3365[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3366,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3364[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3365 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3363[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3364 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3380(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 304;
}
x64Token x64Parser::tokenBranches3379[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3380,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3378[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3379 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3377[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3378 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3346[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches3347 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches3363 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches3377 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3345[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3346 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3372(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 303;
}
x64Token x64Parser::tokenBranches3371[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3372,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3370[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3371 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3369[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3370 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3345(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3344[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3345, x64Parser::tokenBranches3345 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches3369 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3335[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches3336 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3344 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3388(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 305;
}
x64Token x64Parser::tokenBranches3387[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3388,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3386[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3387 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3385[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3386 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3404(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 307;
}
x64Token x64Parser::tokenBranches3403[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3404,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3402[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3403 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3401[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3402 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3384[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches3385 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches3401 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3383[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3384 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3382[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3383 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3396(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 306;
}
x64Token x64Parser::tokenBranches3395[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3396,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3394[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3395 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3393[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3394 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3412(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 308;
}
x64Token x64Parser::tokenBranches3411[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3412,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3410[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3411 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3409[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3410 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3426(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 310;
}
x64Token x64Parser::tokenBranches3425[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3426,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3424[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3425 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3423[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3424 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3392[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches3393 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches3409 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches3423 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3391[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3392 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3418(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 309;
}
x64Token x64Parser::tokenBranches3417[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3418,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3416[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3417 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3415[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3416 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3391(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3390[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3391, x64Parser::tokenBranches3391 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches3415 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3381[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches3382 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3390 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3434(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 311;
}
x64Token x64Parser::tokenBranches3433[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3434,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3432[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3433 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3431[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3432 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3450(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 313;
}
x64Token x64Parser::tokenBranches3449[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3450,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3448[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3449 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3447[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3448 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3430[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches3431 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches3447 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3429[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3430 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3428[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3429 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3442(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 312;
}
x64Token x64Parser::tokenBranches3441[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3442,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3440[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3441 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3439[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3440 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3458(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 314;
}
x64Token x64Parser::tokenBranches3457[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3458,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3456[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3457 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3455[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3456 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3472(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 316;
}
x64Token x64Parser::tokenBranches3471[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3472,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3470[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3471 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3469[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3470 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3438[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches3439 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches3455 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches3469 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3437[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3438 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3464(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 315;
}
x64Token x64Parser::tokenBranches3463[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc3464,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3462[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3463 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3461[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3462 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3437(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3436[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3437, x64Parser::tokenBranches3437 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches3461 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3427[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches3428 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3436 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3334[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3335 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3381 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3427 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3479(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 317;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3478[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3479,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3477[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3478 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3485_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3485_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3485(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3485_10;
	operand.values[11] = tokenCoding3485_11;
}
x64Token x64Parser::tokenBranches3484[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3485,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3489(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 318;
}
x64Token x64Parser::tokenBranches3488[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3489,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3496(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 319;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3495[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc3496,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3498(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 320;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3497[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc3498,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3509(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 321;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3508[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc3509,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3514(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 322;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3513[] = {
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc3514,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3507[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3508 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3513 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3506[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3507 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3506(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::number;
	operand.values[1]->val = operands.size();
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3516(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 323;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3518(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 324;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding3520_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3520_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3520(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3520_10;
	operand.values[11] = tokenCoding3520_11;
}
Coding x64Parser::tokenCoding3522_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3522_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3522(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3522_10;
	operand.values[11] = tokenCoding3522_11;
}
x64Token x64Parser::tokenBranches3505[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc3506, x64Parser::tokenBranches3506 },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc3516,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc3518,  },
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc3520,  },
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc3522,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3524(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 325;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3523[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc3524,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3526(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 326;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3528(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3525[] = {
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc3526,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc3528,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3535_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3535_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3535(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3535_10;
	operand.values[11] = tokenCoding3535_11;
}
x64Token x64Parser::tokenBranches3534[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc3535,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3537_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3537_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3537(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3537_10;
	operand.values[11] = tokenCoding3537_11;
}
x64Token x64Parser::tokenBranches3536[] = {
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc3537,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3529(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 326;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3530(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding3531_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3531_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3531_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3531_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3531(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3531_8;
	operand.values[9] = tokenCoding3531_9;
	operand.values[10] = tokenCoding3531_10;
	operand.values[11] = tokenCoding3531_11;
}
Coding x64Parser::tokenCoding3532_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3532_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3532_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3532_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3532(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3532_8;
	operand.values[9] = tokenCoding3532_9;
	operand.values[10] = tokenCoding3532_10;
	operand.values[11] = tokenCoding3532_11;
}
Coding x64Parser::tokenCoding3533_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3533_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3533_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3533_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 255, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3533(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3533_8;
	operand.values[9] = tokenCoding3533_9;
	operand.values[10] = tokenCoding3533_10;
	operand.values[11] = tokenCoding3533_11;
}
x64Token x64Parser::tokenBranches3504[] = {
	{x64Token::TOKEN, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches3505 },
	{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3523 },
	{x64Token::TOKEN, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3525 },
	{x64Token::NUMBER, 14, 1, 0, NULL,&x64Parser::TokenFunc3529,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc3530,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3531,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3532,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3533,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3534 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3536 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3570_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3570_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3570(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3570_10;
	operand.values[11] = tokenCoding3570_11;
}
x64Token x64Parser::tokenBranches3569[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3570,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3577(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
}
x64Token x64Parser::tokenBranches3576[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3577,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3589(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
}
x64Token x64Parser::tokenBranches3588[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3589,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3575[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches3576 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches3588 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3574[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3575 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3583(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
}
x64Token x64Parser::tokenBranches3582[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3583,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3595(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
}
x64Token x64Parser::tokenBranches3594[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3595,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3605(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 333;
}
x64Token x64Parser::tokenBranches3604[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3605,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3581[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches3582 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches3594 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches3604 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3580[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3581 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3599(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
}
x64Token x64Parser::tokenBranches3598[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3599,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3580(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3573[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches3574 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3580, x64Parser::tokenBranches3580 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches3598 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3572[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3573 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3611(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 334;
}
x64Token x64Parser::tokenBranches3610[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3611,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3623(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 336;
}
x64Token x64Parser::tokenBranches3622[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3623,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3609[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches3610 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches3622 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3608[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3609 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3617(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 335;
}
x64Token x64Parser::tokenBranches3616[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3617,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3629(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
}
x64Token x64Parser::tokenBranches3628[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3629,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3639(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 339;
}
x64Token x64Parser::tokenBranches3638[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3639,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3615[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches3616 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches3628 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches3638 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3614[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3615 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3633(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 338;
}
x64Token x64Parser::tokenBranches3632[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3633,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3614(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3607[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches3608 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3614, x64Parser::tokenBranches3614 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches3632 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3606[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3607 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3645(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
}
x64Token x64Parser::tokenBranches3644[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3645,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3657(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 342;
}
x64Token x64Parser::tokenBranches3656[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3657,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3643[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches3644 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches3656 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3642[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3643 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3651(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 341;
}
x64Token x64Parser::tokenBranches3650[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3651,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3663(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 343;
}
x64Token x64Parser::tokenBranches3662[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3663,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3673(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 345;
}
x64Token x64Parser::tokenBranches3672[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3673,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3649[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches3650 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches3662 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches3672 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3648[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3649 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3667(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
}
x64Token x64Parser::tokenBranches3666[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3667,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3648(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3641[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches3642 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3648, x64Parser::tokenBranches3648 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches3666 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3640[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3641 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3679(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
}
x64Token x64Parser::tokenBranches3678[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3679,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3677[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches3678 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3676[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3677 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3685(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
}
x64Token x64Parser::tokenBranches3684[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3685,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3695(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 349;
}
x64Token x64Parser::tokenBranches3694[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3695,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3683[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches3684 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches3694 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3682[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3683 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3689(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 348;
}
x64Token x64Parser::tokenBranches3688[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3689,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3682(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3675[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches3676 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3682, x64Parser::tokenBranches3682 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches3688 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3674[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3675 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3571[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3572 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3606 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3640 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3674 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3700(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 350;
}
x64Token x64Parser::tokenBranches3699[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3700,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3702(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 351;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3701[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc3702,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3704(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 352;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3703[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc3704,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3706(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 353;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3705[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc3706,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3708(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 353;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3707[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc3708,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3710(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 352;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->unary = 0;
	operand.values[16]->binary = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3709[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc3710,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3714_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3714_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3714(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3714_10;
	operand.values[11] = tokenCoding3714_11;
}
Coding x64Parser::tokenCoding3715_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3715_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3715(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3715_10;
	operand.values[11] = tokenCoding3715_11;
}
x64Token x64Parser::tokenBranches3713[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3714,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3715,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3719_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 23, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3719_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 34, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3719(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3719_10;
	operand.values[11] = tokenCoding3719_11;
}
x64Token x64Parser::tokenBranches3718[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3719,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3717[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3718 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3722_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 24, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3722_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 35, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3722(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3722_10;
	operand.values[11] = tokenCoding3722_11;
}
x64Token x64Parser::tokenBranches3721[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3722,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3720[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3721 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3725_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 25, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3725_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 38, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3725(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3725_10;
	operand.values[11] = tokenCoding3725_11;
}
x64Token x64Parser::tokenBranches3724[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc3725,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3723[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3724 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3731(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 354;
}
x64Token x64Parser::tokenBranches3730[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3731,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3739(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 355;
}
x64Token x64Parser::tokenBranches3738[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3739,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3753(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 357;
}
x64Token x64Parser::tokenBranches3752[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3753,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3738(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3752(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3737[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3738, x64Parser::tokenBranches3738 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3752, x64Parser::tokenBranches3752 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3736[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3737 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3745(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 356;
}
x64Token x64Parser::tokenBranches3744[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3745,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3730(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3736(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc3744(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3729[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3730, x64Parser::tokenBranches3730 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3736, x64Parser::tokenBranches3736 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3744, x64Parser::tokenBranches3744 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3728[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3729 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3727[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3728 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3726[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3727 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3759(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 358;
}
x64Token x64Parser::tokenBranches3758[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3759,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3767(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 359;
}
x64Token x64Parser::tokenBranches3766[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3767,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3781(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 361;
}
x64Token x64Parser::tokenBranches3780[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3781,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3766(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3780(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3765[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3766, x64Parser::tokenBranches3766 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3780, x64Parser::tokenBranches3780 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3764[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3765 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3773(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 360;
}
x64Token x64Parser::tokenBranches3772[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3773,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3758(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3764(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc3772(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3757[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3758, x64Parser::tokenBranches3758 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3764, x64Parser::tokenBranches3764 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3772, x64Parser::tokenBranches3772 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3756[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3757 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3755[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3756 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3754[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3755 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3787(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 362;
}
x64Token x64Parser::tokenBranches3786[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3787,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3795(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 363;
}
x64Token x64Parser::tokenBranches3794[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3795,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3809(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 365;
}
x64Token x64Parser::tokenBranches3808[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3809,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3794(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3808(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3793[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3794, x64Parser::tokenBranches3794 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3808, x64Parser::tokenBranches3808 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3792[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3793 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3801(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 364;
}
x64Token x64Parser::tokenBranches3800[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3801,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3786(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3792(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc3800(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3785[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3786, x64Parser::tokenBranches3786 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3792, x64Parser::tokenBranches3792 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3800, x64Parser::tokenBranches3800 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3784[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3785 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3783[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3784 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3782[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3783 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3815(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 366;
}
x64Token x64Parser::tokenBranches3814[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3815,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3823(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 367;
}
x64Token x64Parser::tokenBranches3822[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3823,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3837(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 369;
}
x64Token x64Parser::tokenBranches3836[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3837,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3822(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3836(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3821[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3822, x64Parser::tokenBranches3822 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc3836, x64Parser::tokenBranches3836 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3820[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3821 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3829(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 368;
}
x64Token x64Parser::tokenBranches3828[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc3829,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3814(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3820(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc3828(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3813[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3814, x64Parser::tokenBranches3814 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3820, x64Parser::tokenBranches3820 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc3828, x64Parser::tokenBranches3828 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3812[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3813 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3811[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3812 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3810[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3811 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3841(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 370;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding3857_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3857_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3857_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3857_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 138, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3857(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3857_8;
	operand.values[9] = tokenCoding3857_9;
	operand.values[10] = tokenCoding3857_10;
	operand.values[11] = tokenCoding3857_11;
}
x64Token x64Parser::tokenBranches3840[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3841,  },
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3857,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3839[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3840 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3838[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3839 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3845(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 371;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding3861_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3861_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3861_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3861_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3861(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3861_8;
	operand.values[9] = tokenCoding3861_9;
	operand.values[10] = tokenCoding3861_10;
	operand.values[11] = tokenCoding3861_11;
}
x64Token x64Parser::tokenBranches3844[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3845,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3861,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3843[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3844 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3842[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3843 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3849(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 372;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding3865_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3865_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3865_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3865_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3865(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3865_8;
	operand.values[9] = tokenCoding3865_9;
	operand.values[10] = tokenCoding3865_10;
	operand.values[11] = tokenCoding3865_11;
}
x64Token x64Parser::tokenBranches3848[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3849,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3865,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3847[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3848 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3846[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3847 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3853(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 373;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding3869_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3869_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3869_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3869_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3869(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3869_8;
	operand.values[9] = tokenCoding3869_9;
	operand.values[10] = tokenCoding3869_10;
	operand.values[11] = tokenCoding3869_11;
}
x64Token x64Parser::tokenBranches3852[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc3853,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc3869,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3851[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3852 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3850[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3851 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3874_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3874_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3874(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3874_10;
	operand.values[11] = tokenCoding3874_11;
}
x64Token x64Parser::tokenBranches3873[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3874,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3872[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3873 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3871[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3872 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3870[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3871 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3879_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3879_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3879(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 288;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3879_10;
	operand.values[11] = tokenCoding3879_11;
}
x64Token x64Parser::tokenBranches3878[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3879,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3877[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3878 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3876[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3877 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3875[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3876 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3884_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3884_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3884(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 289;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3884_10;
	operand.values[11] = tokenCoding3884_11;
}
x64Token x64Parser::tokenBranches3883[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3884,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3882[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3883 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3881[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3882 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3880[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3881 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3889_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3889_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3889(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 289;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding3889_10;
	operand.values[11] = tokenCoding3889_11;
}
x64Token x64Parser::tokenBranches3888[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3889,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3887[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3888 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3886[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3887 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3885[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches3886 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4062_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4062_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4062(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 289;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4062_10;
	operand.values[11] = tokenCoding4062_11;
}
x64Token x64Parser::tokenBranches4061[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4062,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3892_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 23, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3892_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 32, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3892(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::reg;
	operand.values[23]->val = inputTokens[tokenPos]->val->ival;
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
	operand.values[10] = tokenCoding3892_10;
	operand.values[11] = tokenCoding3892_11;
}
Coding x64Parser::tokenCoding3895_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 24, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3895_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3895(x64Operand &operand, int tokenPos)
{
	operand.values[24] = new Coding[2];
	CleanupValues.push_back(operand.values[24]);
	operand.values[24]->type = Coding::reg;
	operand.values[24]->val = inputTokens[tokenPos]->val->ival;
	operand.values[24]->bits = 0;
	operand.values[24]->field = 0;
	operand.values[24]->unary = 0;
	operand.values[24]->binary = 0;
	operand.values[24][1].type = Coding::eot;
	operand.values[10] = tokenCoding3895_10;
	operand.values[11] = tokenCoding3895_11;
}
Coding x64Parser::tokenCoding3898_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 25, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3898_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc3898(x64Operand &operand, int tokenPos)
{
	operand.values[25] = new Coding[2];
	CleanupValues.push_back(operand.values[25]);
	operand.values[25]->type = Coding::reg;
	operand.values[25]->val = inputTokens[tokenPos]->val->ival;
	operand.values[25]->bits = 0;
	operand.values[25]->field = 0;
	operand.values[25]->unary = 0;
	operand.values[25]->binary = 0;
	operand.values[25][1].type = Coding::eot;
	operand.values[10] = tokenCoding3898_10;
	operand.values[11] = tokenCoding3898_11;
}
x64Token x64Parser::tokenBranches3891[] = {
	{x64Token::REGISTERCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc3892,  },
	{x64Token::REGISTERCLASS, 22, 1, 0, NULL,&x64Parser::TokenFunc3895,  },
	{x64Token::REGISTERCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc3898,  },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4061 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3890[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3891 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3904(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 374;
}
x64Token x64Parser::tokenBranches3903[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc3904,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3902[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3903 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3901[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3902 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3912(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 375;
}
x64Token x64Parser::tokenBranches3911[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc3912,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3910[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3911 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3909[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3910 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3926(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 377;
}
x64Token x64Parser::tokenBranches3925[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc3926,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3924[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3925 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3923[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3924 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3909(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3923(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3908[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3909, x64Parser::tokenBranches3909 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3923, x64Parser::tokenBranches3923 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3907[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3908 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3918(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 376;
}
x64Token x64Parser::tokenBranches3917[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc3918,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3916[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3917 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3915[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3916 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3901(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3907(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc3915(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3900[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3901, x64Parser::tokenBranches3901 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3907, x64Parser::tokenBranches3907 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3915, x64Parser::tokenBranches3915 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4014_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4014_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4014_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4014_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 136, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4014(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4014_8;
	operand.values[9] = tokenCoding4014_9;
	operand.values[10] = tokenCoding4014_10;
	operand.values[11] = tokenCoding4014_11;
}
x64Token x64Parser::tokenBranches4013[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4014,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4012[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4013 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3899[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3900 },
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4012 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3932(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 378;
}
x64Token x64Parser::tokenBranches3931[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc3932,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3930[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3931 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3929[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3930 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3940(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 379;
}
x64Token x64Parser::tokenBranches3939[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc3940,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3938[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3939 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3937[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3938 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3954(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 381;
}
x64Token x64Parser::tokenBranches3953[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc3954,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3952[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3953 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3951[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3952 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3937(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3951(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3936[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3937, x64Parser::tokenBranches3937 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3951, x64Parser::tokenBranches3951 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3935[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3936 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3946(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 380;
}
x64Token x64Parser::tokenBranches3945[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc3946,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3944[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3945 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3943[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3944 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3929(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3935(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc3943(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3928[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3929, x64Parser::tokenBranches3929 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3935, x64Parser::tokenBranches3935 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3943, x64Parser::tokenBranches3943 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4018_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4018_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4018_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4018_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4018(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4018_8;
	operand.values[9] = tokenCoding4018_9;
	operand.values[10] = tokenCoding4018_10;
	operand.values[11] = tokenCoding4018_11;
}
Coding x64Parser::tokenCoding4042_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4042_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4042(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->unary = 0;
	operand.values[26]->binary = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[10] = tokenCoding4042_10;
	operand.values[11] = tokenCoding4042_11;
}
x64Token x64Parser::tokenBranches4017[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4018,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc4042,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4016[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4017 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3927[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3928 },
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4016 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3960(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
}
x64Token x64Parser::tokenBranches3959[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc3960,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3958[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3959 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3957[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3958 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3968(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
}
x64Token x64Parser::tokenBranches3967[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc3968,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3966[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3967 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3965[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3966 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3982(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 385;
}
x64Token x64Parser::tokenBranches3981[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc3982,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3980[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3981 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3979[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3980 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3965(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3979(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3964[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3965, x64Parser::tokenBranches3965 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3979, x64Parser::tokenBranches3979 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3963[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3964 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3974(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
}
x64Token x64Parser::tokenBranches3973[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc3974,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3972[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3973 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3971[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3972 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3957(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3963(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc3971(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3956[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc3957, x64Parser::tokenBranches3957 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3963, x64Parser::tokenBranches3963 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3971, x64Parser::tokenBranches3971 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4022_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4022_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4022_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4022_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4022(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4022_8;
	operand.values[9] = tokenCoding4022_9;
	operand.values[10] = tokenCoding4022_10;
	operand.values[11] = tokenCoding4022_11;
}
x64Token x64Parser::tokenBranches4021[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4022,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4020[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4021 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4046_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4046_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4046(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->unary = 0;
	operand.values[26]->binary = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[10] = tokenCoding4046_10;
	operand.values[11] = tokenCoding4046_11;
}
x64Token x64Parser::tokenBranches4045[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc4046,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4044[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4045 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4050_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4050_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4050(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->unary = 0;
	operand.values[26]->binary = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[10] = tokenCoding4050_10;
	operand.values[11] = tokenCoding4050_11;
}
x64Token x64Parser::tokenBranches4049[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc4050,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4048[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4049 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3955[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3956 },
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches4020 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches4044 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches4048 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3988(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 386;
}
x64Token x64Parser::tokenBranches3987[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc3988,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3986[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3987 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3985[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3986 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3996(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
}
x64Token x64Parser::tokenBranches3995[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc3996,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3994[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3995 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3993[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3994 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4010(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
}
x64Token x64Parser::tokenBranches4009[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc4010,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4008[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4009 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4007[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4008 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3993(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4007(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3992[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3993, x64Parser::tokenBranches3993 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc4007, x64Parser::tokenBranches4007 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3991[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3992 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4002(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
}
x64Token x64Parser::tokenBranches4001[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc4002,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4000[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4001 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3999[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4000 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3985(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3991(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc3999(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3984[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc3985, x64Parser::tokenBranches3985 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3991, x64Parser::tokenBranches3991 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc3999, x64Parser::tokenBranches3999 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4026_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4026_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4026_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4026_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4026(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4026_8;
	operand.values[9] = tokenCoding4026_9;
	operand.values[10] = tokenCoding4026_10;
	operand.values[11] = tokenCoding4026_11;
}
x64Token x64Parser::tokenBranches4025[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4026,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4024[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4025 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3983[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches3984 },
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4024 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4030_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4030_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4030_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4030_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4030(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4030_8;
	operand.values[9] = tokenCoding4030_9;
	operand.values[10] = tokenCoding4030_10;
	operand.values[11] = tokenCoding4030_11;
}
x64Token x64Parser::tokenBranches4029[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4030,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4034_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4034_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4034(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4034_10;
	operand.values[11] = tokenCoding4034_11;
}
Coding x64Parser::tokenCoding4038_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4038_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4038(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4038_10;
	operand.values[11] = tokenCoding4038_11;
}
x64Token x64Parser::tokenBranches4033[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4034,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4038,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4028[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4029 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4033 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4027[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4028 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4054_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4054_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4054(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4054_10;
	operand.values[11] = tokenCoding4054_11;
}
x64Token x64Parser::tokenBranches4053[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4054,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4052[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4053 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4051[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4052 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4058_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4058_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4058(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 288;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4058_10;
	operand.values[11] = tokenCoding4058_11;
}
x64Token x64Parser::tokenBranches4057[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4058,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4056[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4057 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4055[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4056 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4066_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4066_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4066(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 289;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4066_10;
	operand.values[11] = tokenCoding4066_11;
}
x64Token x64Parser::tokenBranches4065[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4066,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4064[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4065 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4063[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4064 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3717(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::reg;
	operand.values[23]->val = inputTokens[tokenPos]->val->ival;
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->unary = 0;
	operand.values[23]->binary = 0;
	operand.values[23][1].type = Coding::eot;
}
void x64Parser::TokenFunc3720(x64Operand &operand, int tokenPos)
{
	operand.values[24] = new Coding[2];
	CleanupValues.push_back(operand.values[24]);
	operand.values[24]->type = Coding::reg;
	operand.values[24]->val = inputTokens[tokenPos]->val->ival;
	operand.values[24]->bits = 0;
	operand.values[24]->field = 0;
	operand.values[24]->unary = 0;
	operand.values[24]->binary = 0;
	operand.values[24][1].type = Coding::eot;
}
void x64Parser::TokenFunc3723(x64Operand &operand, int tokenPos)
{
	operand.values[25] = new Coding[2];
	CleanupValues.push_back(operand.values[25]);
	operand.values[25]->type = Coding::reg;
	operand.values[25]->val = inputTokens[tokenPos]->val->ival;
	operand.values[25]->bits = 0;
	operand.values[25]->field = 0;
	operand.values[25]->unary = 0;
	operand.values[25]->binary = 0;
	operand.values[25][1].type = Coding::eot;
}
void x64Parser::TokenFunc3838(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3842(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3846(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3850(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4027(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->unary = 0;
	operand.values[26]->binary = 0;
	operand.values[26][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3716[] = {
	{x64Token::REGISTERCLASS, 21, 0, 0, NULL,&x64Parser::TokenFunc3717, x64Parser::tokenBranches3717 },
	{x64Token::REGISTERCLASS, 22, 0, 0, NULL,&x64Parser::TokenFunc3720, x64Parser::tokenBranches3720 },
	{x64Token::REGISTERCLASS, 23, 0, 0, NULL,&x64Parser::TokenFunc3723, x64Parser::tokenBranches3723 },
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches3726 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3754 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3782 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3810 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc3838, x64Parser::tokenBranches3838 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc3842, x64Parser::tokenBranches3842 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc3846, x64Parser::tokenBranches3846 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc3850, x64Parser::tokenBranches3850 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3870 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3875 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3880 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3885 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches3890 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3899 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3927 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3955 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3983 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4027, x64Parser::tokenBranches4027 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4051 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches4055 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches4063 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4080(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 390;
}
x64Token x64Parser::tokenBranches4079[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4080,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4078[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4079 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4077[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4078 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4093(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
}
x64Token x64Parser::tokenBranches4092[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4093,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4091[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4092 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4090[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4091 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4090(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4076[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4077 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4090, x64Parser::tokenBranches4090 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4075[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4076 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4074[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4075 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4073[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4074 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4072[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4073 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4106(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 392;
}
x64Token x64Parser::tokenBranches4105[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4106,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4104[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4105 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4103[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4104 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4119(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 393;
}
x64Token x64Parser::tokenBranches4118[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4119,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4117[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4118 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4116[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4117 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4116(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4102[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4103 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4116, x64Parser::tokenBranches4116 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4101[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4102 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4100[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4101 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4099[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4100 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4098[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4099 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4071[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4072 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4098 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4070[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4071 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4069[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4070 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4128(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 394;
}
x64Token x64Parser::tokenBranches4127[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4128,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4139(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 395;
}
x64Token x64Parser::tokenBranches4138[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4139,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4137[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4138 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4136[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4137 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4136(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4126[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4127 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4136, x64Parser::tokenBranches4136 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4125[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4126 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4124[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4125 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4123[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4124 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4122[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4123 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4121[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4122 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4068[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4069 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4121 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4152(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 396;
}
x64Token x64Parser::tokenBranches4151[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4152,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4150[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4151 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4149[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4150 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4165(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 397;
}
x64Token x64Parser::tokenBranches4164[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4165,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4163[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4164 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4162[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4163 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4162(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4148[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4149 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4162, x64Parser::tokenBranches4162 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4147[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4148 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4146[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4147 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4145[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4146 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4144[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4145 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4178(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 398;
}
x64Token x64Parser::tokenBranches4177[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4178,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4176[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4177 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4175[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4176 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4191(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 399;
}
x64Token x64Parser::tokenBranches4190[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4191,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4189[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4190 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4188[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4189 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4188(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4174[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4175 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4188, x64Parser::tokenBranches4188 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4173[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4174 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4172[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4173 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4171[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4172 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4170[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4171 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4143[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4144 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4170 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4142[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4143 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4141[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4142 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4200(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 400;
}
x64Token x64Parser::tokenBranches4199[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4200,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4211(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 401;
}
x64Token x64Parser::tokenBranches4210[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4211,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4209[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4210 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4208[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4209 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4208(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4198[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4199 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4208, x64Parser::tokenBranches4208 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4197[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4198 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4196[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4197 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4195[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4196 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4194[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4195 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4193[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4194 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4140[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4141 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4193 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4224(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 402;
}
x64Token x64Parser::tokenBranches4223[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4224,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4222[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4223 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4221[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4222 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4237(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 403;
}
x64Token x64Parser::tokenBranches4236[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4237,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4235[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4236 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4234[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4235 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4234(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4220[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4221 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4234, x64Parser::tokenBranches4234 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4219[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4220 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4218[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4219 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4217[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4218 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4216[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4217 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4250(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 404;
}
x64Token x64Parser::tokenBranches4249[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4250,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4248[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4249 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4247[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4248 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4263(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 405;
}
x64Token x64Parser::tokenBranches4262[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4263,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4261[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4262 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4260[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4261 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4260(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4246[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4247 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4260, x64Parser::tokenBranches4260 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4245[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4246 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4244[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4245 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4243[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4244 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4242[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4243 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4215[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4216 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4242 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4214[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4215 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4213[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4214 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4272(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 406;
}
x64Token x64Parser::tokenBranches4271[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4272,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4283(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 407;
}
x64Token x64Parser::tokenBranches4282[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4283,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4281[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4282 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4280[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4281 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4280(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4270[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4271 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4280, x64Parser::tokenBranches4280 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4269[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4270 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4268[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4269 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4267[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4268 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4266[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4267 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4265[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4266 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4212[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4213 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4265 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4296(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 408;
}
x64Token x64Parser::tokenBranches4295[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4296,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4294[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4295 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4293[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4294 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4309(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 409;
}
x64Token x64Parser::tokenBranches4308[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4309,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4307[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4308 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4306[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4307 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4306(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4292[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4293 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4306, x64Parser::tokenBranches4306 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4291[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4292 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4290[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4291 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4289[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4290 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4288[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4289 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4287[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4288 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4286[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4287 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4285[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4286 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4318(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 408;
}
x64Token x64Parser::tokenBranches4317[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4318,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4329(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 409;
}
x64Token x64Parser::tokenBranches4328[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4329,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4327[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4328 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4326[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4327 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4326(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4316[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4317 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4326, x64Parser::tokenBranches4326 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4315[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4316 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4314[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4315 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4313[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4314 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4312[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4313 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4311[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4312 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4284[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4285 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4311 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4067[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4068 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4140 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4212 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4284 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4334_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4334_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4334_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4334_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4334(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4334_8;
	operand.values[9] = tokenCoding4334_9;
	operand.values[10] = tokenCoding4334_10;
	operand.values[11] = tokenCoding4334_11;
}
x64Token x64Parser::tokenBranches4333[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4334,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4332[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4333 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4331[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4332 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4338_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4338_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4338_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4338_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4338(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4338_8;
	operand.values[9] = tokenCoding4338_9;
	operand.values[10] = tokenCoding4338_10;
	operand.values[11] = tokenCoding4338_11;
}
x64Token x64Parser::tokenBranches4337[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4338,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4336[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4337 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4335[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4336 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4342_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4342_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4342_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4342_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4342(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4342_8;
	operand.values[9] = tokenCoding4342_9;
	operand.values[10] = tokenCoding4342_10;
	operand.values[11] = tokenCoding4342_11;
}
x64Token x64Parser::tokenBranches4341[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4342,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4340[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4341 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4339[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4340 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4346_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4346_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4346_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4346_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4346(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4346_8;
	operand.values[9] = tokenCoding4346_9;
	operand.values[10] = tokenCoding4346_10;
	operand.values[11] = tokenCoding4346_11;
}
x64Token x64Parser::tokenBranches4345[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4346,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4344[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4345 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4343[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4344 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4350_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4350_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4350_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4350_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4350(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4350_8;
	operand.values[9] = tokenCoding4350_9;
	operand.values[10] = tokenCoding4350_10;
	operand.values[11] = tokenCoding4350_11;
}
x64Token x64Parser::tokenBranches4349[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4350,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4348[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4349 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4347[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches4348 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4354_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4354_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4354_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4354_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4354(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4354_8;
	operand.values[9] = tokenCoding4354_9;
	operand.values[10] = tokenCoding4354_10;
	operand.values[11] = tokenCoding4354_11;
}
x64Token x64Parser::tokenBranches4353[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4354,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4352[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4353 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4351[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4352 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4331(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4335(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4339(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4330[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc4331, x64Parser::tokenBranches4331 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc4335, x64Parser::tokenBranches4335 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc4339, x64Parser::tokenBranches4339 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4343 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4347 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4351 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4360_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4360_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4360_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4360_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4360_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4360(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4360_8;
	operand.values[9] = tokenCoding4360_9;
	operand.values[18] = tokenCoding4360_18;
	operand.values[10] = tokenCoding4360_10;
	operand.values[11] = tokenCoding4360_11;
}
x64Token x64Parser::tokenBranches4359[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4360,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4358[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4359 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4363_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4363_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4363_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4363_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4363_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 17, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4363(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4363_8;
	operand.values[9] = tokenCoding4363_9;
	operand.values[18] = tokenCoding4363_18;
	operand.values[10] = tokenCoding4363_10;
	operand.values[11] = tokenCoding4363_11;
}
x64Token x64Parser::tokenBranches4362[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4363,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4361[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4362 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4358(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4357[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4358, x64Parser::tokenBranches4358 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4361 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4365(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 410;
}
x64Token x64Parser::tokenBranches4364[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4365,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4375_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4375_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4375_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4375_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4375(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4375_8;
	operand.values[9] = tokenCoding4375_9;
	operand.values[10] = tokenCoding4375_10;
	operand.values[11] = tokenCoding4375_11;
}
x64Token x64Parser::tokenBranches4374[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4375,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4371_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4371_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4371_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4371_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4371(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4371_8;
	operand.values[9] = tokenCoding4371_9;
	operand.values[10] = tokenCoding4371_10;
	operand.values[11] = tokenCoding4371_11;
}
x64Token x64Parser::tokenBranches4370[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4371,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4374 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4369[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4370 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4382_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4382_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4382_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4382_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4382(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4382_8;
	operand.values[9] = tokenCoding4382_9;
	operand.values[10] = tokenCoding4382_10;
	operand.values[11] = tokenCoding4382_11;
}
x64Token x64Parser::tokenBranches4381[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4382,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4378_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4378_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4378_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4378_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4378(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4378_8;
	operand.values[9] = tokenCoding4378_9;
	operand.values[10] = tokenCoding4378_10;
	operand.values[11] = tokenCoding4378_11;
}
x64Token x64Parser::tokenBranches4377[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4378,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4381 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4376[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4377 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4369(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4376(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4368[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc4369, x64Parser::tokenBranches4369 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc4376, x64Parser::tokenBranches4376 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4392(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 411;
}
x64Token x64Parser::tokenBranches4391[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc4392,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4390[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4391 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4390(x64Operand &operand, int tokenPos)
{
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4389[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc4390, x64Parser::tokenBranches4390 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4396(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 412;
}
x64Token x64Parser::tokenBranches4395[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc4396,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4394[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4395 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4394(x64Operand &operand, int tokenPos)
{
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4393[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc4394, x64Parser::tokenBranches4394 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4400(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 413;
}
x64Token x64Parser::tokenBranches4399[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc4400,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4398[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4399 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4398(x64Operand &operand, int tokenPos)
{
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4397[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc4398, x64Parser::tokenBranches4398 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4404(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 414;
}
x64Token x64Parser::tokenBranches4403[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc4404,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4402[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4403 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4402(x64Operand &operand, int tokenPos)
{
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->unary = 0;
	operand.values[22]->binary = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4401[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc4402, x64Parser::tokenBranches4402 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4407(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 415;
}
void x64Parser::TokenFunc4410(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 416;
}
void x64Parser::TokenFunc4413(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 417;
}
void x64Parser::TokenFunc4416(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 418;
}
x64Token x64Parser::tokenBranches4406[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc4407,  },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc4410,  },
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc4413,  },
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc4416,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4405[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4406 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4388[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4389 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4393 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4397 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4401 },
	{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches4405 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4425(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 419;
}
x64Token x64Parser::tokenBranches4424[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4425,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4441(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 421;
}
x64Token x64Parser::tokenBranches4440[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4441,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4423[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4424 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4440 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4422[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4423 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4433(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 420;
}
x64Token x64Parser::tokenBranches4432[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4433,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4449(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 422;
}
x64Token x64Parser::tokenBranches4448[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4449,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4463(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 424;
}
x64Token x64Parser::tokenBranches4462[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4463,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4431[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4432 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4448 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4462 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4430[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4431 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4455(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 423;
}
x64Token x64Parser::tokenBranches4454[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4455,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4430(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4421[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4422 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4430, x64Parser::tokenBranches4430 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4454 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4420[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4421 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4471(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 425;
}
x64Token x64Parser::tokenBranches4470[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4471,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4487(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 427;
}
x64Token x64Parser::tokenBranches4486[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4487,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4469[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4470 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4486 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4468[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4469 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4479(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 426;
}
x64Token x64Parser::tokenBranches4478[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4479,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4495(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 428;
}
x64Token x64Parser::tokenBranches4494[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4495,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4509(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 430;
}
x64Token x64Parser::tokenBranches4508[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4509,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4477[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4478 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4494 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4508 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4476[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4477 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4501(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 429;
}
x64Token x64Parser::tokenBranches4500[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4501,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4476(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4467[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4468 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4476, x64Parser::tokenBranches4476 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4500 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4466[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4467 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4517(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 431;
}
x64Token x64Parser::tokenBranches4516[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4517,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4533(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 433;
}
x64Token x64Parser::tokenBranches4532[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4533,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4515[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4516 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4532 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4514[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4515 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4525(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 432;
}
x64Token x64Parser::tokenBranches4524[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4525,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4541(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 434;
}
x64Token x64Parser::tokenBranches4540[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4541,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4555(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 436;
}
x64Token x64Parser::tokenBranches4554[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4555,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4523[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4524 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4540 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4554 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4522[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4523 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4547(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 435;
}
x64Token x64Parser::tokenBranches4546[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4547,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4522(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4513[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4514 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4522, x64Parser::tokenBranches4522 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4546 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4512[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4513 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4419[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4420 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4466 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4512 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4418[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4419 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4417[] = {
	{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches4418 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4564_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4564_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4564(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4564_10;
	operand.values[11] = tokenCoding4564_11;
}
x64Token x64Parser::tokenBranches4563[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4564,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4566_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4566_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4566(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4566_10;
	operand.values[11] = tokenCoding4566_11;
}
x64Token x64Parser::tokenBranches4565[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4566,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4568_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4568_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4568(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4568_10;
	operand.values[11] = tokenCoding4568_11;
}
x64Token x64Parser::tokenBranches4567[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4568,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4560(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 437;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4561(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 438;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4562(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 439;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4569(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 440;
}
void x64Parser::TokenFunc4570(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 441;
}
void x64Parser::TokenFunc4571(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 442;
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4559[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4560,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4561,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4562,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4563 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4565 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4567 },
	{x64Token::REGISTER, 96, 1, 0, NULL,&x64Parser::TokenFunc4569,  },
	{x64Token::REGISTER, 97, 1, 0, NULL,&x64Parser::TokenFunc4570,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc4571,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4580(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 443;
}
x64Token x64Parser::tokenBranches4579[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4580,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4582_27[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4582_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4582_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4582_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4582_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4582_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4582(x64Operand &operand, int tokenPos)
{
	operand.values[27] = tokenCoding4582_27;
	operand.values[8] = tokenCoding4582_8;
	operand.values[9] = tokenCoding4582_9;
	operand.values[28] = tokenCoding4582_28;
	operand.values[10] = tokenCoding4582_10;
	operand.values[11] = tokenCoding4582_11;
}
x64Token x64Parser::tokenBranches4581[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4582,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4584_27[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4584_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4584_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4584_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4584_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4584_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4584(x64Operand &operand, int tokenPos)
{
	operand.values[27] = tokenCoding4584_27;
	operand.values[8] = tokenCoding4584_8;
	operand.values[9] = tokenCoding4584_9;
	operand.values[28] = tokenCoding4584_28;
	operand.values[10] = tokenCoding4584_10;
	operand.values[11] = tokenCoding4584_11;
}
x64Token x64Parser::tokenBranches4583[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4584,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4586_27[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4586_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4586_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4586_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4586_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4586_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4586(x64Operand &operand, int tokenPos)
{
	operand.values[27] = tokenCoding4586_27;
	operand.values[8] = tokenCoding4586_8;
	operand.values[9] = tokenCoding4586_9;
	operand.values[28] = tokenCoding4586_28;
	operand.values[10] = tokenCoding4586_10;
	operand.values[11] = tokenCoding4586_11;
}
x64Token x64Parser::tokenBranches4585[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4586,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4588_27[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4588_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4588_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4588_28[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4588_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4588_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4588(x64Operand &operand, int tokenPos)
{
	operand.values[27] = tokenCoding4588_27;
	operand.values[8] = tokenCoding4588_8;
	operand.values[9] = tokenCoding4588_9;
	operand.values[28] = tokenCoding4588_28;
	operand.values[10] = tokenCoding4588_10;
	operand.values[11] = tokenCoding4588_11;
}
x64Token x64Parser::tokenBranches4587[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4588,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4594(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 447;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4593[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4594,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4599(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 448;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4605_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4605_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4605(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 452;
	operand.values[10] = tokenCoding4605_10;
	operand.values[11] = tokenCoding4605_11;
}
x64Token x64Parser::tokenBranches4598[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4599,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4605,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4601(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 449;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4607_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4607_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4607(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 453;
	operand.values[10] = tokenCoding4607_10;
	operand.values[11] = tokenCoding4607_11;
}
x64Token x64Parser::tokenBranches4600[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4601,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4607,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4603(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 451;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4609_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4609_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4609(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 453;
	operand.values[10] = tokenCoding4609_10;
	operand.values[11] = tokenCoding4609_11;
}
x64Token x64Parser::tokenBranches4602[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4603,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4609,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4590(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 444;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4591(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 445;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4592(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 446;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4595(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 448;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4596(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 449;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4597(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 450;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4610(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 454;
}
void x64Parser::TokenFunc4611(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 455;
}
void x64Parser::TokenFunc4612(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 456;
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4589[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4590,  },
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4591,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4592,  },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4593 },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4595,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc4596,  },
	{x64Token::NUMBER, 9, 1, 0, NULL,&x64Parser::TokenFunc4597,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4598 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4600 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4602 },
	{x64Token::REGISTER, 96, 1, 0, NULL,&x64Parser::TokenFunc4610,  },
	{x64Token::REGISTER, 97, 1, 0, NULL,&x64Parser::TokenFunc4611,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc4612,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4621(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 457;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4622(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 458;
}
x64Token x64Parser::tokenBranches4620[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4621,  },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4622,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4624(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 459;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4625(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 460;
}
x64Token x64Parser::tokenBranches4623[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4624,  },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4625,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4639(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 461;
}
x64Token x64Parser::tokenBranches4638[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4639,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4651(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 463;
}
x64Token x64Parser::tokenBranches4650[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4651,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4637[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4638 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4650 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4636[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4637 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4635[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4636 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4645(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 462;
}
x64Token x64Parser::tokenBranches4644[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4645,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4657(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 464;
}
x64Token x64Parser::tokenBranches4656[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4657,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4667(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 466;
}
x64Token x64Parser::tokenBranches4666[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4667,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4643[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4644 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4656 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4666 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4642[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4643 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4661(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 465;
}
x64Token x64Parser::tokenBranches4660[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4661,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4642(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4641[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4642, x64Parser::tokenBranches4642 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4660 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4634[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4635 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4641 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4673(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 467;
}
x64Token x64Parser::tokenBranches4672[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4673,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4685(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 469;
}
x64Token x64Parser::tokenBranches4684[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4685,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4671[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4672 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4684 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4670[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4671 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4669[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4670 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4679(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 468;
}
x64Token x64Parser::tokenBranches4678[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4679,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4691(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 470;
}
x64Token x64Parser::tokenBranches4690[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4691,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4701(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 472;
}
x64Token x64Parser::tokenBranches4700[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4701,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4677[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4678 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4690 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4700 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4676[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4677 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4695(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 471;
}
x64Token x64Parser::tokenBranches4694[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4695,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4676(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4675[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4676, x64Parser::tokenBranches4676 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4694 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4668[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4669 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4675 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4707(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 473;
}
x64Token x64Parser::tokenBranches4706[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4707,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4719(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 475;
}
x64Token x64Parser::tokenBranches4718[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4719,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4705[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4706 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4718 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4704[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4705 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4703[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4704 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4713(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 474;
}
x64Token x64Parser::tokenBranches4712[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4713,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4725(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 476;
}
x64Token x64Parser::tokenBranches4724[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4725,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4735(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 478;
}
x64Token x64Parser::tokenBranches4734[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4735,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4711[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4712 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4724 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4734 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4710[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4711 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4729(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 477;
}
x64Token x64Parser::tokenBranches4728[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4729,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4710(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4709[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4710, x64Parser::tokenBranches4710 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4728 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4702[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4703 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4709 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4741(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 479;
}
x64Token x64Parser::tokenBranches4740[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4741,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4739[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4740 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4738[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4739 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4737[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4738 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4747(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 480;
}
x64Token x64Parser::tokenBranches4746[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4747,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4757(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 480;
}
x64Token x64Parser::tokenBranches4756[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4757,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4745[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4746 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4756 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4744[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4745 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4751(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 479;
}
x64Token x64Parser::tokenBranches4750[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4751,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4744(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4743[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4744, x64Parser::tokenBranches4744 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4750 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4736[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4737 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4743 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4633[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4634 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4668 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4702 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4736 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4762(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 481;
}
x64Token x64Parser::tokenBranches4761[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4762,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4801_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4801_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4801(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4801_10;
	operand.values[11] = tokenCoding4801_11;
}
x64Token x64Parser::tokenBranches4800[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc4801,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4811(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 482;
}
x64Token x64Parser::tokenBranches4810[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4811,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4823(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 484;
}
x64Token x64Parser::tokenBranches4822[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4823,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4809[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4810 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4822 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4808[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4809 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4807[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4808 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4817(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 483;
}
x64Token x64Parser::tokenBranches4816[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4817,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4829(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 485;
}
x64Token x64Parser::tokenBranches4828[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4829,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4839(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 487;
}
x64Token x64Parser::tokenBranches4838[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4839,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4815[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4816 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4828 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4838 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4814[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4815 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4833(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 486;
}
x64Token x64Parser::tokenBranches4832[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4833,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4814(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4813[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4814, x64Parser::tokenBranches4814 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4832 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4806[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4807 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4813 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4845(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 488;
}
x64Token x64Parser::tokenBranches4844[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4845,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4857(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 490;
}
x64Token x64Parser::tokenBranches4856[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4857,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4843[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4844 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4856 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4842[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4843 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4841[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4842 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4851(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 489;
}
x64Token x64Parser::tokenBranches4850[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4851,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4863(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 491;
}
x64Token x64Parser::tokenBranches4862[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4863,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4873(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 493;
}
x64Token x64Parser::tokenBranches4872[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4873,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4849[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4850 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4862 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4872 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4848[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4849 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4867(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 492;
}
x64Token x64Parser::tokenBranches4866[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4867,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4848(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4847[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4848, x64Parser::tokenBranches4848 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4866 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4840[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4841 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4847 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4879(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 494;
}
x64Token x64Parser::tokenBranches4878[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4879,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4891(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 496;
}
x64Token x64Parser::tokenBranches4890[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4891,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4877[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4878 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4890 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4876[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4877 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4875[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4876 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4885(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 495;
}
x64Token x64Parser::tokenBranches4884[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4885,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4897(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 497;
}
x64Token x64Parser::tokenBranches4896[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4897,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4907(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 499;
}
x64Token x64Parser::tokenBranches4906[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4907,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4883[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4884 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4896 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4906 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4882[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4883 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4901(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 498;
}
x64Token x64Parser::tokenBranches4900[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4901,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4882(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4881[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4882, x64Parser::tokenBranches4882 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4900 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4874[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4875 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4881 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4913(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 500;
}
x64Token x64Parser::tokenBranches4912[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4913,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4911[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4912 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4910[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4911 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4909[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4910 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4919(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 501;
}
x64Token x64Parser::tokenBranches4918[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4919,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4929(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 501;
}
x64Token x64Parser::tokenBranches4928[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4929,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4917[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4918 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4928 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4916[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4917 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4923(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 500;
}
x64Token x64Parser::tokenBranches4922[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4923,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4916(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4915[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4916, x64Parser::tokenBranches4916 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4922 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4908[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4909 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4915 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4805[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4806 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4840 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4874 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4908 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4934(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 502;
}
x64Token x64Parser::tokenBranches4933[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc4934,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4936_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4936_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4936(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4936_10;
	operand.values[11] = tokenCoding4936_11;
}
Coding x64Parser::tokenCoding4937_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4937_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4937(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4937_10;
	operand.values[11] = tokenCoding4937_11;
}
x64Token x64Parser::tokenBranches4935[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc4936,  },
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4937,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4947(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 503;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4946[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4947,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4945[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4946 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4944[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4945 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4951(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 504;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4950[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4951,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4949[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4950 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4948[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4949 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4955(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 505;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4954[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4955,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4953[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4954 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4952[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4953 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4959(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 506;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4958[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4959,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4957[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4958 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4956[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4957 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4963_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4963_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4963_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4963_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4963(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4963_8;
	operand.values[9] = tokenCoding4963_9;
	operand.values[10] = tokenCoding4963_10;
	operand.values[11] = tokenCoding4963_11;
}
x64Token x64Parser::tokenBranches4962[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4963,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4961[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4962 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4960[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4961 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4967_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4967_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4967_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4967_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4967(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4967_8;
	operand.values[9] = tokenCoding4967_9;
	operand.values[10] = tokenCoding4967_10;
	operand.values[11] = tokenCoding4967_11;
}
x64Token x64Parser::tokenBranches4966[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4967,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4965[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4966 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4964[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4965 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4971_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4971_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4971_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4971_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4971(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4971_8;
	operand.values[9] = tokenCoding4971_9;
	operand.values[10] = tokenCoding4971_10;
	operand.values[11] = tokenCoding4971_11;
}
x64Token x64Parser::tokenBranches4970[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4971,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4969[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4970 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4968[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches4969 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4975_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4975_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4975_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4975_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4975(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4975_8;
	operand.values[9] = tokenCoding4975_9;
	operand.values[10] = tokenCoding4975_10;
	operand.values[11] = tokenCoding4975_11;
}
x64Token x64Parser::tokenBranches4974[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4975,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4973[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4974 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4972[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches4973 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4979_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4979_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4979_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4979_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4979(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4979_8;
	operand.values[9] = tokenCoding4979_9;
	operand.values[10] = tokenCoding4979_10;
	operand.values[11] = tokenCoding4979_11;
}
x64Token x64Parser::tokenBranches4978[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc4979,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4977[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4978 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4976[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4977 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4983_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4983_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4983_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4983_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4983(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4983_8;
	operand.values[9] = tokenCoding4983_9;
	operand.values[10] = tokenCoding4983_10;
	operand.values[11] = tokenCoding4983_11;
}
x64Token x64Parser::tokenBranches4982[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4983,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4981[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4982 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4980[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4981 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4987_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4987_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4987_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4987_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4987(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4987_8;
	operand.values[9] = tokenCoding4987_9;
	operand.values[10] = tokenCoding4987_10;
	operand.values[11] = tokenCoding4987_11;
}
x64Token x64Parser::tokenBranches4986[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4987,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4985[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4986 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4984[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4985 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4991_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4991_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4991_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4991_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 133, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4991(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4991_8;
	operand.values[9] = tokenCoding4991_9;
	operand.values[10] = tokenCoding4991_10;
	operand.values[11] = tokenCoding4991_11;
}
x64Token x64Parser::tokenBranches4990[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4991,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4989[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4990 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4988[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4989 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4994_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4994_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4994(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4994_10;
	operand.values[11] = tokenCoding4994_11;
}
x64Token x64Parser::tokenBranches4993[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4994,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4992[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4993 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4997_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4997_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc4997(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 288;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding4997_10;
	operand.values[11] = tokenCoding4997_11;
}
x64Token x64Parser::tokenBranches4996[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4997,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4995[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4996 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5000_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5000_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5000(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 289;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5000_10;
	operand.values[11] = tokenCoding5000_11;
}
x64Token x64Parser::tokenBranches4999[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5000,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4998[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4999 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5003_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5003_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5003(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 290;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5003_10;
	operand.values[11] = tokenCoding5003_11;
}
x64Token x64Parser::tokenBranches5002[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc5003,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5001[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5002 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5007_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5007_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5007(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 225;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5007_10;
	operand.values[11] = tokenCoding5007_11;
}
x64Token x64Parser::tokenBranches5006[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5007,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5005[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5006 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5004[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5005 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5011_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5011_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5011(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 288;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5011_10;
	operand.values[11] = tokenCoding5011_11;
}
x64Token x64Parser::tokenBranches5010[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5011,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5009[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5010 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5008[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5009 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5015_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5015_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5015(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 289;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5015_10;
	operand.values[11] = tokenCoding5015_11;
}
x64Token x64Parser::tokenBranches5014[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5015,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5013[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5014 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5012[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5013 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5019_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5019_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5019(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 290;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->unary = 0;
	operand.values[14]->binary = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5019_10;
	operand.values[11] = tokenCoding5019_11;
}
x64Token x64Parser::tokenBranches5018[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc5019,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5017[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5018 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5016[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5017 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4976(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4980(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4984(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4988(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4943[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches4944 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4948 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4952 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4956 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4960 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4964 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4968 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4972 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc4976, x64Parser::tokenBranches4976 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc4980, x64Parser::tokenBranches4980 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc4984, x64Parser::tokenBranches4984 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc4988, x64Parser::tokenBranches4988 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4992 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches4995 },
	{x64Token::ADDRESSCLASS, 18, 0, 0, NULL, NULL, x64Parser::tokenBranches4998 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches5001 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5004 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5008 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5012 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5016 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5022_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5022_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5022(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5022_10;
	operand.values[11] = tokenCoding5022_11;
}
x64Token x64Parser::tokenBranches5021[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc5022,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5024_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5024_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5024(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5024_10;
	operand.values[11] = tokenCoding5024_11;
}
x64Token x64Parser::tokenBranches5023[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc5024,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5032_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5032_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5032_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5032_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5032(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5032_8;
	operand.values[9] = tokenCoding5032_9;
	operand.values[10] = tokenCoding5032_10;
	operand.values[11] = tokenCoding5032_11;
}
x64Token x64Parser::tokenBranches5031[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5032,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5030[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5031 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5029[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5030 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5036_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5036_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5036_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5036_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5036(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5036_8;
	operand.values[9] = tokenCoding5036_9;
	operand.values[10] = tokenCoding5036_10;
	operand.values[11] = tokenCoding5036_11;
}
x64Token x64Parser::tokenBranches5035[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5036,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5034[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5035 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5033[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5034 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5040_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5040_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5040_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5040_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5040(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5040_8;
	operand.values[9] = tokenCoding5040_9;
	operand.values[10] = tokenCoding5040_10;
	operand.values[11] = tokenCoding5040_11;
}
x64Token x64Parser::tokenBranches5039[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5040,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5038[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5039 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5037[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5038 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5044_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5044_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5044_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5044_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5044(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5044_8;
	operand.values[9] = tokenCoding5044_9;
	operand.values[10] = tokenCoding5044_10;
	operand.values[11] = tokenCoding5044_11;
}
x64Token x64Parser::tokenBranches5043[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc5044,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5042[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5043 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5041[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5042 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5028[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5029 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5033 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5037 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5041 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5049_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5049_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5049_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5049_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5049(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5049_8;
	operand.values[9] = tokenCoding5049_9;
	operand.values[10] = tokenCoding5049_10;
	operand.values[11] = tokenCoding5049_11;
}
x64Token x64Parser::tokenBranches5048[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5049,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5047[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5048 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5046[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5047 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5053_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5053_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5053_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5053_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5053(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5053_8;
	operand.values[9] = tokenCoding5053_9;
	operand.values[10] = tokenCoding5053_10;
	operand.values[11] = tokenCoding5053_11;
}
x64Token x64Parser::tokenBranches5052[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5053,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5051[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5052 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5050[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5051 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5046(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5050(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5045[] = {
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc5046, x64Parser::tokenBranches5046 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc5050, x64Parser::tokenBranches5050 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5057(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 507;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5056[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5057,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5055[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5056 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5060(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 508;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5059[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5060,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5058[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5059 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5063(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 509;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5062[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc5063,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5061[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5062 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5080_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5080_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5080_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5080_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5080(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5080_8;
	operand.values[9] = tokenCoding5080_9;
	operand.values[10] = tokenCoding5080_10;
	operand.values[11] = tokenCoding5080_11;
}
x64Token x64Parser::tokenBranches5079[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5080,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5066(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 507;
}
x64Token x64Parser::tokenBranches5065[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5066,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5079 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5064[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5065 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5084_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5084_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5084_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5084_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5084(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5084_8;
	operand.values[9] = tokenCoding5084_9;
	operand.values[10] = tokenCoding5084_10;
	operand.values[11] = tokenCoding5084_11;
}
x64Token x64Parser::tokenBranches5083[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5084,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5069(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 508;
}
x64Token x64Parser::tokenBranches5068[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5069,  },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5083 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5067[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5068 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5088_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5088_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5088_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5088_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5088(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5088_8;
	operand.values[9] = tokenCoding5088_9;
	operand.values[10] = tokenCoding5088_10;
	operand.values[11] = tokenCoding5088_11;
}
x64Token x64Parser::tokenBranches5087[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5088,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5072(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 509;
}
x64Token x64Parser::tokenBranches5071[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5072,  },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5087 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5070[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5071 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5076_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5076_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5076_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5076_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5076(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5076_8;
	operand.values[9] = tokenCoding5076_9;
	operand.values[10] = tokenCoding5076_10;
	operand.values[11] = tokenCoding5076_11;
}
x64Token x64Parser::tokenBranches5075[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc5076,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5074[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5075 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5073[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5074 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5092_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5092_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5092_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5092_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5092(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5092_8;
	operand.values[9] = tokenCoding5092_9;
	operand.values[10] = tokenCoding5092_10;
	operand.values[11] = tokenCoding5092_11;
}
x64Token x64Parser::tokenBranches5091[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5092,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5090[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5091 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5089[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5090 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5096_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5096_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5096_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5096_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5096(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5096_8;
	operand.values[9] = tokenCoding5096_9;
	operand.values[10] = tokenCoding5096_10;
	operand.values[11] = tokenCoding5096_11;
}
x64Token x64Parser::tokenBranches5095[] = {
	{x64Token::REGISTERCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5096,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5094[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5095 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5093[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5094 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5100_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5100_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5100_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5100_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5100(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5100_8;
	operand.values[9] = tokenCoding5100_9;
	operand.values[10] = tokenCoding5100_10;
	operand.values[11] = tokenCoding5100_11;
}
x64Token x64Parser::tokenBranches5099[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5100,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5098[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5099 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5104_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5104_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5104_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5104_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5104(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5104_8;
	operand.values[9] = tokenCoding5104_9;
	operand.values[10] = tokenCoding5104_10;
	operand.values[11] = tokenCoding5104_11;
}
x64Token x64Parser::tokenBranches5103[] = {
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc5104,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5102[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5103 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5097[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5098 },
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5102 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5064(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5067(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5070(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5073(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5054[] = {
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5055 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5058 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5061 },
	{x64Token::REGISTERCLASS, 4, 0, 0, NULL,&x64Parser::TokenFunc5064, x64Parser::tokenBranches5064 },
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc5067, x64Parser::tokenBranches5067 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc5070, x64Parser::tokenBranches5070 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc5073, x64Parser::tokenBranches5073 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5089 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5093 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5097 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5111(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 510;
}
x64Token x64Parser::tokenBranches5110[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5111,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5123(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 512;
}
x64Token x64Parser::tokenBranches5122[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5123,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5135(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 514;
}
x64Token x64Parser::tokenBranches5134[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5135,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5109[] = {
	{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches5110 },
	{x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches5122 },
	{x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches5134 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5108[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5109 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5117(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 511;
}
x64Token x64Parser::tokenBranches5116[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5117,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5129(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 513;
}
x64Token x64Parser::tokenBranches5128[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5129,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5141(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 515;
}
x64Token x64Parser::tokenBranches5140[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5141,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5115[] = {
	{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches5116 },
	{x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches5128 },
	{x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches5140 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5114[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5115 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5114(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->unary = 0;
	operand.values[1]->binary = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5107[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5108 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5114, x64Parser::tokenBranches5114 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5106[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5107 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5142(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 516;
}
x64Token x64Parser::tokenBranches5105[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5106 },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc5142,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5146_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5146_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5146_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5146_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5146(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5146_8;
	operand.values[9] = tokenCoding5146_9;
	operand.values[10] = tokenCoding5146_10;
	operand.values[11] = tokenCoding5146_11;
}
x64Token x64Parser::tokenBranches5145[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5146,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5148_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5148_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5148_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5148_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5148(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5148_8;
	operand.values[9] = tokenCoding5148_9;
	operand.values[10] = tokenCoding5148_10;
	operand.values[11] = tokenCoding5148_11;
}
x64Token x64Parser::tokenBranches5147[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5148,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5150_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5150_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5150_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5150_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5150(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5150_8;
	operand.values[9] = tokenCoding5150_9;
	operand.values[10] = tokenCoding5150_10;
	operand.values[11] = tokenCoding5150_11;
}
x64Token x64Parser::tokenBranches5149[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5150,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5152_8[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5152_9[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5152_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5152_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5152(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5152_8;
	operand.values[9] = tokenCoding5152_9;
	operand.values[10] = tokenCoding5152_10;
	operand.values[11] = tokenCoding5152_11;
}
x64Token x64Parser::tokenBranches5151[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5152,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5203_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5203_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5203_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5203_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5203_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5203(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5203_8;
	operand.values[9] = tokenCoding5203_9;
	operand.values[18] = tokenCoding5203_18;
	operand.values[10] = tokenCoding5203_10;
	operand.values[11] = tokenCoding5203_11;
}
x64Token x64Parser::tokenBranches5202[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5203,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5201[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5202 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5200[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5201 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5207_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5207_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5207_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5207_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5207_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5207(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5207_8;
	operand.values[9] = tokenCoding5207_9;
	operand.values[18] = tokenCoding5207_18;
	operand.values[10] = tokenCoding5207_10;
	operand.values[11] = tokenCoding5207_11;
}
x64Token x64Parser::tokenBranches5206[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5207,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5205[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5206 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5204[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5205 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5224_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5224_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5224_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5224_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5224_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5224(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5224_8;
	operand.values[9] = tokenCoding5224_9;
	operand.values[18] = tokenCoding5224_18;
	operand.values[10] = tokenCoding5224_10;
	operand.values[11] = tokenCoding5224_11;
}
x64Token x64Parser::tokenBranches5223[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5224,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5222[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5223 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5227_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5227_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5227_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5227_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5227_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5227(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5227_8;
	operand.values[9] = tokenCoding5227_9;
	operand.values[18] = tokenCoding5227_18;
	operand.values[10] = tokenCoding5227_10;
	operand.values[11] = tokenCoding5227_11;
}
x64Token x64Parser::tokenBranches5226[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5227,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5225[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5226 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5230_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5230_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5230_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5230_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5230_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5230(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5230_8;
	operand.values[9] = tokenCoding5230_9;
	operand.values[18] = tokenCoding5230_18;
	operand.values[10] = tokenCoding5230_10;
	operand.values[11] = tokenCoding5230_11;
}
Coding x64Parser::tokenCoding5233_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5233_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5233_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5233_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5233_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5233(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5233_8;
	operand.values[9] = tokenCoding5233_9;
	operand.values[18] = tokenCoding5233_18;
	operand.values[10] = tokenCoding5233_10;
	operand.values[11] = tokenCoding5233_11;
}
x64Token x64Parser::tokenBranches5229[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5230,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5233,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5228[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5229 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5222(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5225(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5221[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc5222, x64Parser::tokenBranches5222 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5225, x64Parser::tokenBranches5225 },
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5228 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5237_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5237_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5237_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5237_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5237_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5237(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5237_8;
	operand.values[9] = tokenCoding5237_9;
	operand.values[18] = tokenCoding5237_18;
	operand.values[10] = tokenCoding5237_10;
	operand.values[11] = tokenCoding5237_11;
}
x64Token x64Parser::tokenBranches5236[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5237,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5235[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5236 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5240_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5240_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5240_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5240_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5240_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5240(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5240_8;
	operand.values[9] = tokenCoding5240_9;
	operand.values[18] = tokenCoding5240_18;
	operand.values[10] = tokenCoding5240_10;
	operand.values[11] = tokenCoding5240_11;
}
x64Token x64Parser::tokenBranches5239[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5240,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5238[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5239 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5243_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5243_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5243_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5243_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5243_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5243(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5243_8;
	operand.values[9] = tokenCoding5243_9;
	operand.values[18] = tokenCoding5243_18;
	operand.values[10] = tokenCoding5243_10;
	operand.values[11] = tokenCoding5243_11;
}
Coding x64Parser::tokenCoding5246_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5246_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5246_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5246_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5246_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5246(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5246_8;
	operand.values[9] = tokenCoding5246_9;
	operand.values[18] = tokenCoding5246_18;
	operand.values[10] = tokenCoding5246_10;
	operand.values[11] = tokenCoding5246_11;
}
x64Token x64Parser::tokenBranches5242[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5243,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5246,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5241[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5242 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5235(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5238(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5234[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc5235, x64Parser::tokenBranches5235 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5238, x64Parser::tokenBranches5238 },
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5241 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5254_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5254_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5254_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5254_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5254_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5254(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[8] = tokenCoding5254_8;
	operand.values[9] = tokenCoding5254_9;
	operand.values[18] = tokenCoding5254_18;
	operand.values[10] = tokenCoding5254_10;
	operand.values[11] = tokenCoding5254_11;
}
x64Token x64Parser::tokenBranches5253[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5254,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5252[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5253 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5252(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5251[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5252, x64Parser::tokenBranches5252 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5260_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5260_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5260_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5260_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5260_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5260(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->unary = 0;
	operand.values[13]->binary = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[8] = tokenCoding5260_8;
	operand.values[9] = tokenCoding5260_9;
	operand.values[18] = tokenCoding5260_18;
	operand.values[10] = tokenCoding5260_10;
	operand.values[11] = tokenCoding5260_11;
}
x64Token x64Parser::tokenBranches5259[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5260,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5258[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5259 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5258(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5257[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5258, x64Parser::tokenBranches5258 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5268_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5268_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5268_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5268_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5268_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5268(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5268_8;
	operand.values[9] = tokenCoding5268_9;
	operand.values[18] = tokenCoding5268_18;
	operand.values[10] = tokenCoding5268_10;
	operand.values[11] = tokenCoding5268_11;
}
x64Token x64Parser::tokenBranches5267[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5268,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5266[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5267 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5265[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5266 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5272_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5272_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5272_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5272(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5272_8;
	operand.values[9] = tokenCoding5272_9;
	operand.values[10] = tokenCoding5272_10;
}
Coding x64Parser::tokenCoding5275_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5275_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5275_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5275(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5275_8;
	operand.values[9] = tokenCoding5275_9;
	operand.values[10] = tokenCoding5275_10;
}
x64Token x64Parser::tokenBranches5271[] = {
	{x64Token::REGISTERCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5272,  },
	{x64Token::REGISTERCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc5275,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5270[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5271 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5269[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5270 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5279_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5279_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5279_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5279_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5279_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5279(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5279_8;
	operand.values[9] = tokenCoding5279_9;
	operand.values[18] = tokenCoding5279_18;
	operand.values[10] = tokenCoding5279_10;
	operand.values[11] = tokenCoding5279_11;
}
x64Token x64Parser::tokenBranches5278[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5279,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5277[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5278 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5276[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5277 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5283_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5283_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5283_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5283_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5283_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5283(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5283_8;
	operand.values[9] = tokenCoding5283_9;
	operand.values[18] = tokenCoding5283_18;
	operand.values[10] = tokenCoding5283_10;
	operand.values[11] = tokenCoding5283_11;
}
x64Token x64Parser::tokenBranches5282[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5283,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5281[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5282 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5280[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5281 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5287_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5287_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5287_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5287_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5287_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5287(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5287_8;
	operand.values[9] = tokenCoding5287_9;
	operand.values[18] = tokenCoding5287_18;
	operand.values[10] = tokenCoding5287_10;
	operand.values[11] = tokenCoding5287_11;
}
x64Token x64Parser::tokenBranches5286[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5287,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5285[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5286 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5284[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5285 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5291_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5291_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5291_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5291_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5291_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5291(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5291_8;
	operand.values[9] = tokenCoding5291_9;
	operand.values[18] = tokenCoding5291_18;
	operand.values[10] = tokenCoding5291_10;
	operand.values[11] = tokenCoding5291_11;
}
x64Token x64Parser::tokenBranches5290[] = {
	{x64Token::REGISTERCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc5291,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5289[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5290 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5289(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5288[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5289, x64Parser::tokenBranches5289 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5319_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5319_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5319_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5319_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5319(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5319_8;
	operand.values[9] = tokenCoding5319_9;
	operand.values[18] = tokenCoding5319_18;
	operand.values[10] = tokenCoding5319_10;
}
x64Token x64Parser::tokenBranches5318[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5319,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5317[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5318 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5316[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5317 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5315[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5316 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5324_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5324_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5324_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5324_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5324(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5324_8;
	operand.values[9] = tokenCoding5324_9;
	operand.values[18] = tokenCoding5324_18;
	operand.values[10] = tokenCoding5324_10;
}
x64Token x64Parser::tokenBranches5323[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5324,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5322[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5323 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5321[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5322 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5320[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5321 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5315(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5320(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5314[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5315, x64Parser::tokenBranches5315 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc5320, x64Parser::tokenBranches5320 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5345_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5345_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5345_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5345_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5345(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5345_8;
	operand.values[9] = tokenCoding5345_9;
	operand.values[18] = tokenCoding5345_18;
	operand.values[10] = tokenCoding5345_10;
}
x64Token x64Parser::tokenBranches5344[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5345,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5343[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5344 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5343(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5342[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5343, x64Parser::tokenBranches5343 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5341[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5342 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5340[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5341 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5351_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5351_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5351_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5351_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5351(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5351_8;
	operand.values[9] = tokenCoding5351_9;
	operand.values[18] = tokenCoding5351_18;
	operand.values[10] = tokenCoding5351_10;
}
x64Token x64Parser::tokenBranches5350[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5351,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5349[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5350 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5349(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5348[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5349, x64Parser::tokenBranches5349 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5347[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5348 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5346[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5347 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5357_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5357_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5357_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5357_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5357(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5357_8;
	operand.values[9] = tokenCoding5357_9;
	operand.values[18] = tokenCoding5357_18;
	operand.values[10] = tokenCoding5357_10;
}
x64Token x64Parser::tokenBranches5356[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5357,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5355[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5356 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5355(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5354[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5355, x64Parser::tokenBranches5355 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5353[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5354 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5352[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5353 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5363_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5363_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5363_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5363_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5363(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5363_8;
	operand.values[9] = tokenCoding5363_9;
	operand.values[18] = tokenCoding5363_18;
	operand.values[10] = tokenCoding5363_10;
}
x64Token x64Parser::tokenBranches5362[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5363,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5361[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5362 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5368_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5368_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5368_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5368_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5368(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5368_8;
	operand.values[9] = tokenCoding5368_9;
	operand.values[18] = tokenCoding5368_18;
	operand.values[10] = tokenCoding5368_10;
}
x64Token x64Parser::tokenBranches5367[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5368,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5366[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5367 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5360[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5361 },
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5366 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5359[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5360 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5373_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5373_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5373_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5373_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5373(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5373_8;
	operand.values[9] = tokenCoding5373_9;
	operand.values[18] = tokenCoding5373_18;
	operand.values[10] = tokenCoding5373_10;
}
x64Token x64Parser::tokenBranches5372[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5373,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5371[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5372 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5378_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5378_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5378_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5378_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5378(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5378_8;
	operand.values[9] = tokenCoding5378_9;
	operand.values[18] = tokenCoding5378_18;
	operand.values[10] = tokenCoding5378_10;
}
x64Token x64Parser::tokenBranches5377[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5378,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5376[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5377 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5370[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5371 },
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5376 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5369[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5370 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5359(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5369(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5358[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc5359, x64Parser::tokenBranches5359 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc5369, x64Parser::tokenBranches5369 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5384_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5384_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5384_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5384_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5384(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5384_8;
	operand.values[9] = tokenCoding5384_9;
	operand.values[18] = tokenCoding5384_18;
	operand.values[10] = tokenCoding5384_10;
}
x64Token x64Parser::tokenBranches5383[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5384,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5382[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5383 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5381[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5382 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5380[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5380(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5379[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5380, x64Parser::tokenBranches5380 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5390_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5390_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5390_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5390_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5390(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5390_8;
	operand.values[9] = tokenCoding5390_9;
	operand.values[18] = tokenCoding5390_18;
	operand.values[10] = tokenCoding5390_10;
}
x64Token x64Parser::tokenBranches5389[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5390,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5388[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5389 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5387[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5388 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5386[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5387 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5386(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5385[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5386, x64Parser::tokenBranches5386 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5396_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5396_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5396_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5396_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5396(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5396_8;
	operand.values[9] = tokenCoding5396_9;
	operand.values[18] = tokenCoding5396_18;
	operand.values[10] = tokenCoding5396_10;
}
x64Token x64Parser::tokenBranches5395[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5396,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5394[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5395 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5393[] = {
	{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5394 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5392[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5393 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5392(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5391[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5392, x64Parser::tokenBranches5392 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5402_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5402_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5402_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5402_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5402(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5402_8;
	operand.values[9] = tokenCoding5402_9;
	operand.values[18] = tokenCoding5402_18;
	operand.values[10] = tokenCoding5402_10;
}
x64Token x64Parser::tokenBranches5401[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5402,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5400[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5401 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5399[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5400 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5398[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5399 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5407_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5407_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5407_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5407_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5407(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5407_8;
	operand.values[9] = tokenCoding5407_9;
	operand.values[18] = tokenCoding5407_18;
	operand.values[10] = tokenCoding5407_10;
}
x64Token x64Parser::tokenBranches5406[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5407,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5405[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5406 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5404[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5405 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5403[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5404 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5398(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5403(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5397[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5398, x64Parser::tokenBranches5398 },
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc5403, x64Parser::tokenBranches5403 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5416_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5416_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5416_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5416_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5416(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5416_8;
	operand.values[9] = tokenCoding5416_9;
	operand.values[18] = tokenCoding5416_18;
	operand.values[10] = tokenCoding5416_10;
}
Coding x64Parser::tokenCoding5422_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5422_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5422_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5422_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5422(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5422_8;
	operand.values[9] = tokenCoding5422_9;
	operand.values[18] = tokenCoding5422_18;
	operand.values[10] = tokenCoding5422_10;
}
x64Token x64Parser::tokenBranches5415[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc5416,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc5422,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5414[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5415 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5419_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5419_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5419_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5419_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5419(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5419_8;
	operand.values[9] = tokenCoding5419_9;
	operand.values[18] = tokenCoding5419_18;
	operand.values[10] = tokenCoding5419_10;
}
Coding x64Parser::tokenCoding5425_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5425_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5425_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5425_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5425(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5425_8;
	operand.values[9] = tokenCoding5425_9;
	operand.values[18] = tokenCoding5425_18;
	operand.values[10] = tokenCoding5425_10;
}
x64Token x64Parser::tokenBranches5418[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc5419,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc5425,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5417[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5418 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5414(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5417(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5413[] = {
	{x64Token::REGISTERCLASS, 7, 0, 0, NULL,&x64Parser::TokenFunc5414, x64Parser::tokenBranches5414 },
	{x64Token::REGISTERCLASS, 12, 0, 0, NULL,&x64Parser::TokenFunc5417, x64Parser::tokenBranches5417 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5439_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5439_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5439_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5439(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5439_8;
	operand.values[9] = tokenCoding5439_9;
	operand.values[10] = tokenCoding5439_10;
}
x64Token x64Parser::tokenBranches5438[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5439,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5437[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5438 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5436[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5437 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5435[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5436 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5435(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5434[] = {
	{x64Token::REGISTERCLASS, 18, 0, 0, NULL,&x64Parser::TokenFunc5435, x64Parser::tokenBranches5435 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5444_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5444(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5444_10;
}
x64Token x64Parser::tokenBranches5443[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5444,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5442[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5443 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5442(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5441[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5442, x64Parser::tokenBranches5442 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5453_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5453(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5453_10;
}
x64Token x64Parser::tokenBranches5452[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5453,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5451[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5452 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5451(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5450[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5451, x64Parser::tokenBranches5451 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5483_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5483_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5483_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5483(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5483_8;
	operand.values[9] = tokenCoding5483_9;
	operand.values[10] = tokenCoding5483_10;
}
x64Token x64Parser::tokenBranches5482[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5483,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5481[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5482 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5480[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5481 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5479[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5480 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5479(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5478[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5479, x64Parser::tokenBranches5479 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5489_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5489_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 3, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5489_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1, 0, 0 }, 
	{ Coding::eot },
};
void x64Parser::TokenFunc5489(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 245;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->unary = 0;
	operand.values[19]->binary = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding5489_8;
	operand.values[9] = tokenCoding5489_9;
	operand.values[10] = tokenCoding5489_10;
}
x64Token x64Parser::tokenBranches5488[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5489,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5487[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5488 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5486[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5487 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5485[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5486 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5485(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->unary = 0;
	operand.values[12]->binary = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5484[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5485, x64Parser::tokenBranches5485 },
	{x64Token::EOT }
};
bool x64Parser::Opcode0(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2095, operand);
	return rv;
}
bool x64Parser::Opcode1(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2097, operand);
	return rv;
}
bool x64Parser::Opcode2(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2099, operand);
	return rv;
}
bool x64Parser::Opcode3(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2112, operand);
	return rv;
}
bool x64Parser::Opcode4(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2125, operand);
	return rv;
}
bool x64Parser::Opcode5(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2233, operand);
	return rv;
}
bool x64Parser::Opcode6(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2261, operand);
	return rv;
}
bool x64Parser::Opcode7(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2274, operand);
	return rv;
}
bool x64Parser::Opcode8(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2287, operand);
	return rv;
}
bool x64Parser::Opcode9(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2299, operand);
	return rv;
}
bool x64Parser::Opcode10(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2305, operand);
	return rv;
}
bool x64Parser::Opcode11(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2310, operand);
	return rv;
}
bool x64Parser::Opcode12(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2313, operand);
	return rv;
}
bool x64Parser::Opcode13(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2322, operand);
	return rv;
}
bool x64Parser::Opcode14(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2335, operand);
	return rv;
}
bool x64Parser::Opcode15(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2338, operand);
	return rv;
}
bool x64Parser::Opcode16(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2381, operand);
	return rv;
}
bool x64Parser::Opcode17(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2476, operand);
	return rv;
}
bool x64Parser::Opcode18(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2513, operand);
	return rv;
}
bool x64Parser::Opcode19(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2515, operand);
	return rv;
}
bool x64Parser::Opcode20(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2519, operand);
	return rv;
}
bool x64Parser::Opcode21(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2526, operand);
	return rv;
}
bool x64Parser::Opcode22(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2533, operand);
	return rv;
}
bool x64Parser::Opcode23(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2540, operand);
	return rv;
}
bool x64Parser::Opcode24(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2544, operand);
	return rv;
}
bool x64Parser::Opcode25(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2548, operand);
	return rv;
}
bool x64Parser::Opcode26(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2555, operand);
	return rv;
}
bool x64Parser::Opcode27(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2564, operand);
	return rv;
}
bool x64Parser::Opcode28(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2571, operand);
	return rv;
}
bool x64Parser::Opcode29(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2577, operand);
	return rv;
}
bool x64Parser::Opcode30(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2590, operand);
	return rv;
}
bool x64Parser::Opcode31(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2596, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings32_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 55, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode32(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings32_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings33_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 213, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode33(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings33_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings34_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode34(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings34_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings35_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 63, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode35(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings35_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings36_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings36_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings36_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 16, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode36(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings36_10;
	operand.values[29] = OpcodeCodings36_29;
	operand.values[30] = OpcodeCodings36_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings37_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings37_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings37_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode37(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings37_10;
	operand.values[29] = OpcodeCodings37_29;
	operand.values[30] = OpcodeCodings37_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings38_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings38_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings38_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 32, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode38(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings38_10;
	operand.values[29] = OpcodeCodings38_29;
	operand.values[30] = OpcodeCodings38_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode39(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2609, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings40_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode40(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings40_29;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings41_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 188, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode41(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings41_29;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings42_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 189, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode42(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings42_29;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
bool x64Parser::Opcode43(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2616, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings44_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings44_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings44_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode44(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings44_10;
	operand.values[29] = OpcodeCodings44_29;
	operand.values[30] = OpcodeCodings44_30;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings45_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings45_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings45_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 187, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode45(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings45_10;
	operand.values[29] = OpcodeCodings45_29;
	operand.values[30] = OpcodeCodings45_30;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings46_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings46_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings46_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 179, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode46(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings46_10;
	operand.values[29] = OpcodeCodings46_29;
	operand.values[30] = OpcodeCodings46_30;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings47_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings47_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings47_30[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode47(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings47_10;
	operand.values[29] = OpcodeCodings47_29;
	operand.values[30] = OpcodeCodings47_30;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
bool x64Parser::Opcode48(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2623, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings49_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode49(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings49_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings50_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode50(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings50_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode51(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2653, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings52_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode52(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings52_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings53_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode53(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings53_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings54_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode54(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings54_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings55_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode55(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings55_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings56_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 245, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode56(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings56_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings57_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode57(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings57_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings58_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode58(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings58_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings59_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode59(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings59_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings60_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode60(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings60_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings61_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode61(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings61_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings62_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode62(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings62_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings63_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode63(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings63_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings64_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode64(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings64_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings65_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode65(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings65_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings66_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode66(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings66_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings67_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode67(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings67_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings68_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode68(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings68_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings69_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode69(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings69_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings70_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode70(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings70_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings71_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode71(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings71_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings72_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode72(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings72_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings73_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode73(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings73_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings74_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode74(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings74_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings75_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode75(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings75_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings76_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode76(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings76_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings77_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode77(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings77_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings78_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode78(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings78_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings79_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode79(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings79_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings80_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode80(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings80_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings81_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode81(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings81_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings82_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode82(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings82_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings83_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode83(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings83_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings84_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode84(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings84_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings85_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode85(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings85_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings86_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode86(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings86_31;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings87_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings87_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 60, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings87_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 56, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode87(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings87_10;
	operand.values[29] = OpcodeCodings87_29;
	operand.values[30] = OpcodeCodings87_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode88(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2691, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings89_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode89(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings89_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings90_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode90(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings90_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings91_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode91(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings91_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode92(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2959, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings93_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 176, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode93(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings93_11;
	bool rv = ParseOperands(tokenBranches2961, operand);
	return rv;
}
bool x64Parser::Opcode94(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2978, operand);
	return rv;
}
bool x64Parser::Opcode95(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2980, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings96_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode96(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings96_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode97(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2983, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings98_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode98(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings98_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings99_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode99(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings99_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings100_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 39, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode100(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings100_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings101_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 47, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode101(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings101_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings102_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings102_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode102(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings102_10;
	operand.values[11] = OpcodeCodings102_11;
	bool rv;
	{
		rv = Opcode6(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings103_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode103(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings103_10;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
bool x64Parser::Opcode104(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2991, operand);
	return rv;
}
bool x64Parser::Opcode105(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches2997, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings106_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode106(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings106_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings107_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode107(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings107_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings108_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings108_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings108_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode108(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings108_10;
	operand.values[32] = OpcodeCodings108_32;
	operand.values[29] = OpcodeCodings108_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings109_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings109_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode109(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings109_10;
	operand.values[11] = OpcodeCodings109_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings110_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings110_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode110(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings110_10;
	operand.values[11] = OpcodeCodings110_11;
	bool rv;
	{
		rv = Opcode11(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings111_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings111_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode111(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings111_10;
	operand.values[11] = OpcodeCodings111_11;
	bool rv;
	{
		rv = Opcode11(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings112_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode112(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings112_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings113_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode113(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings113_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings114_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode114(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings114_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings115_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings115_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode115(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings115_10;
	operand.values[29] = OpcodeCodings115_29;
	bool rv = ParseOperands(tokenBranches3010, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings116_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings116_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode116(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings116_10;
	operand.values[29] = OpcodeCodings116_29;
	bool rv = ParseOperands(tokenBranches3014, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings117_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings117_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode117(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings117_10;
	operand.values[29] = OpcodeCodings117_29;
	bool rv = ParseOperands(tokenBranches3018, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings118_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings118_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode118(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings118_10;
	operand.values[29] = OpcodeCodings118_29;
	bool rv = ParseOperands(tokenBranches3022, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings119_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings119_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode119(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings119_10;
	operand.values[29] = OpcodeCodings119_29;
	bool rv = ParseOperands(tokenBranches3026, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings120_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings120_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode120(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings120_10;
	operand.values[29] = OpcodeCodings120_29;
	bool rv = ParseOperands(tokenBranches3030, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings121_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings121_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode121(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings121_10;
	operand.values[29] = OpcodeCodings121_29;
	bool rv = ParseOperands(tokenBranches3034, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings122_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings122_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode122(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings122_10;
	operand.values[29] = OpcodeCodings122_29;
	bool rv = ParseOperands(tokenBranches3038, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings123_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings123_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode123(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings123_10;
	operand.values[29] = OpcodeCodings123_29;
	bool rv = ParseOperands(tokenBranches3042, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings124_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings124_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode124(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings124_10;
	operand.values[29] = OpcodeCodings124_29;
	bool rv = ParseOperands(tokenBranches3051, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings125_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings125_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode125(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings125_10;
	operand.values[29] = OpcodeCodings125_29;
	bool rv = ParseOperands(tokenBranches3055, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings126_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings126_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode126(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings126_10;
	operand.values[29] = OpcodeCodings126_29;
	bool rv = ParseOperands(tokenBranches3059, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings127_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings127_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode127(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings127_10;
	operand.values[29] = OpcodeCodings127_29;
	bool rv = ParseOperands(tokenBranches3063, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings128_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings128_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode128(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings128_10;
	operand.values[29] = OpcodeCodings128_29;
	bool rv = ParseOperands(tokenBranches3069, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings129_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings129_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode129(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings129_10;
	operand.values[29] = OpcodeCodings129_29;
	bool rv = ParseOperands(tokenBranches3073, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings130_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode130(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings130_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings131_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode131(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings131_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings132_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode132(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings132_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings133_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode133(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings133_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings134_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings134_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings134_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode134(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings134_10;
	operand.values[32] = OpcodeCodings134_32;
	operand.values[29] = OpcodeCodings134_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings135_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings135_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode135(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings135_10;
	operand.values[11] = OpcodeCodings135_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings136_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings136_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings136_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode136(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings136_10;
	operand.values[32] = OpcodeCodings136_32;
	operand.values[29] = OpcodeCodings136_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings137_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings137_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode137(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings137_10;
	operand.values[11] = OpcodeCodings137_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings138_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode138(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings138_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode139(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3086, operand);
	return rv;
}
bool x64Parser::Opcode140(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3088, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings141_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings141_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode141(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings141_10;
	operand.values[29] = OpcodeCodings141_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings142_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings142_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode142(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings142_10;
	operand.values[29] = OpcodeCodings142_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings143_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings143_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode143(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings143_10;
	operand.values[29] = OpcodeCodings143_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings144_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings144_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode144(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings144_10;
	operand.values[29] = OpcodeCodings144_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings145_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings145_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode145(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings145_10;
	operand.values[29] = OpcodeCodings145_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings146_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings146_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode146(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings146_10;
	operand.values[29] = OpcodeCodings146_29;
	bool rv = ParseOperands(tokenBranches3095, operand);
	if (!rv)
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings147_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings147_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode147(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings147_10;
	operand.values[29] = OpcodeCodings147_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings148_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode148(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings148_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings149_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode149(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings149_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings150_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode150(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings150_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings151_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings151_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode151(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings151_10;
	operand.values[29] = OpcodeCodings151_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings152_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings152_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode152(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings152_10;
	operand.values[29] = OpcodeCodings152_29;
	bool rv = ParseOperands(tokenBranches3103, operand);
	if (!rv)
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings153_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings153_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode153(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings153_10;
	operand.values[29] = OpcodeCodings153_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings154_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings154_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode154(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings154_10;
	operand.values[29] = OpcodeCodings154_29;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
bool x64Parser::Opcode155(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3108, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings156_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode156(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings156_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode157(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3117, operand);
	return rv;
}
bool x64Parser::Opcode158(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3120, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings159_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode159(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings159_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings160_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode160(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings160_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings161_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode161(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings161_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings162_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode162(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings162_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings163_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode163(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings163_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings164_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode164(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings164_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings165_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings165_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings165_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode165(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings165_10;
	operand.values[32] = OpcodeCodings165_32;
	operand.values[29] = OpcodeCodings165_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings166_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings166_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode166(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings166_10;
	operand.values[11] = OpcodeCodings166_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings167_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode167(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings167_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode168(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3131, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings169_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode169(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings169_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings170_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode170(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings170_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings171_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 245, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode171(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings171_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings172_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode172(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings172_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings173_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode173(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings173_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode174(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3138, operand);
	return rv;
}
bool x64Parser::Opcode175(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3140, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings176_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode176(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings176_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings177_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode177(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings177_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings178_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode178(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings178_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings179_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode179(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings179_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings180_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode180(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings180_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode181(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3147, operand);
	return rv;
}
bool x64Parser::Opcode182(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3153, operand);
	return rv;
}
bool x64Parser::Opcode183(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3156, operand);
	return rv;
}
bool x64Parser::Opcode184(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3159, operand);
	return rv;
}
bool x64Parser::Opcode185(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3161, operand);
	return rv;
}
bool x64Parser::Opcode186(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3163, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings187_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings187_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode187(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings187_10;
	operand.values[29] = OpcodeCodings187_29;
	bool rv = ParseOperands(tokenBranches3171, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings188_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings188_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode188(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings188_10;
	operand.values[29] = OpcodeCodings188_29;
	bool rv = ParseOperands(tokenBranches3175, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings189_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings189_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode189(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings189_10;
	operand.values[29] = OpcodeCodings189_29;
	bool rv = ParseOperands(tokenBranches3179, operand);
	return rv;
}
bool x64Parser::Opcode190(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3183, operand);
	return rv;
}
bool x64Parser::Opcode191(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3187, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings192_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings192_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings192_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode192(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings192_10;
	operand.values[32] = OpcodeCodings192_32;
	operand.values[29] = OpcodeCodings192_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings193_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings193_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode193(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings193_10;
	operand.values[11] = OpcodeCodings193_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings194_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings194_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings194_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode194(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings194_10;
	operand.values[32] = OpcodeCodings194_32;
	operand.values[29] = OpcodeCodings194_29;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings195_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings195_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode195(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings195_10;
	operand.values[11] = OpcodeCodings195_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings196_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode196(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings196_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings197_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings197_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode197(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings197_10;
	operand.values[11] = OpcodeCodings197_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings198_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings198_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode198(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings198_10;
	operand.values[29] = OpcodeCodings198_29;
	bool rv = ParseOperands(tokenBranches3197, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings199_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings199_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode199(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings199_10;
	operand.values[29] = OpcodeCodings199_29;
	bool rv = ParseOperands(tokenBranches3201, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings200_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings200_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 221, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode200(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings200_10;
	operand.values[11] = OpcodeCodings200_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings201_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode201(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings201_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings202_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode202(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings202_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings203_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode203(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings203_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings204_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings204_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 217, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode204(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings204_10;
	operand.values[11] = OpcodeCodings204_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings205_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings205_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode205(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings205_10;
	operand.values[29] = OpcodeCodings205_29;
	bool rv = ParseOperands(tokenBranches3210, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings206_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings206_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode206(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings206_10;
	operand.values[29] = OpcodeCodings206_29;
	bool rv = ParseOperands(tokenBranches3214, operand);
	return rv;
}
bool x64Parser::Opcode207(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3218, operand);
	return rv;
}
bool x64Parser::Opcode208(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3220, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings209_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode209(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings209_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings210_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode210(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings210_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings211_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode211(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings211_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings212_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode212(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings212_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings213_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode213(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings213_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings214_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode214(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings214_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings215_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode215(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings215_10;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings216_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode216(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings216_10;
	bool rv = ParseOperands(tokenBranches3229, operand);
	if (!rv)
	{
		rv = Opcode7(operand);
	}
	return rv;
}
bool x64Parser::Opcode217(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3305, operand);
	return rv;
}
bool x64Parser::Opcode218(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3334, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings219_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode219(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings219_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings220_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode220(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings220_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings221_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode221(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings221_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings222_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings222_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode222(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings222_10;
	operand.values[11] = OpcodeCodings222_11;
	bool rv;
	{
		rv = Opcode6(operand);
	}
	return rv;
}
bool x64Parser::Opcode223(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3477, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings224_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode224(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings224_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings225_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 204, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode225(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings225_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings226_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 206, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode226(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings226_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings227_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode227(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings227_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode228(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3484, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings229_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 207, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode229(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings229_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings230_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 207, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode230(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings230_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode231(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3488, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings232_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode232(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings232_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings233_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode233(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings233_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings234_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode234(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings234_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings235_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode235(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings235_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings236_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode236(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings236_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
bool x64Parser::Opcode237(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3495, operand);
	return rv;
}
bool x64Parser::Opcode238(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3497, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings239_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode239(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings239_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings240_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode240(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings240_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings241_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode241(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings241_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings242_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode242(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings242_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings243_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode243(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings243_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
bool x64Parser::Opcode244(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3504, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings245_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode245(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings245_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings246_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode246(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings246_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings247_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode247(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings247_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings248_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode248(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings248_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings249_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode249(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings249_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings250_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode250(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings250_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings251_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode251(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings251_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings252_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode252(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings252_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings253_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode253(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings253_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings254_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode254(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings254_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings255_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode255(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings255_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings256_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode256(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings256_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings257_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode257(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings257_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings258_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode258(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings258_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings259_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode259(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings259_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings260_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode260(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings260_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings261_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode261(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings261_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings262_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode262(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings262_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings263_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode263(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings263_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings264_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode264(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings264_31;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings265_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 159, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode265(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings265_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings266_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode266(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings266_29;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings267_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 197, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode267(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings267_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings268_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 141, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode268(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings268_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings269_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 201, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode269(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings269_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings270_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode270(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings270_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings271_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode271(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings271_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings272_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 180, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode272(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings272_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings273_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings273_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode273(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings273_10;
	operand.values[11] = OpcodeCodings273_11;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings274_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 181, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode274(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings274_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings275_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings275_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode275(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings275_10;
	operand.values[11] = OpcodeCodings275_11;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings276_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings276_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode276(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings276_10;
	operand.values[11] = OpcodeCodings276_11;
	bool rv = ParseOperands(tokenBranches3569, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
bool x64Parser::Opcode277(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3571, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings278_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode278(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings278_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings279_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode279(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings279_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings280_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode280(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings280_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode281(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3699, operand);
	return rv;
}
bool x64Parser::Opcode282(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3701, operand);
	return rv;
}
bool x64Parser::Opcode283(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3703, operand);
	return rv;
}
bool x64Parser::Opcode284(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3705, operand);
	return rv;
}
bool x64Parser::Opcode285(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3707, operand);
	return rv;
}
bool x64Parser::Opcode286(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3709, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings287_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode287(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings287_29;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings288_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 178, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode288(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings288_29;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings289_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings289_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode289(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings289_10;
	operand.values[11] = OpcodeCodings289_11;
	bool rv = ParseOperands(tokenBranches3713, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
bool x64Parser::Opcode290(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3716, operand);
	return rv;
}
bool x64Parser::Opcode291(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4067, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings292_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 56, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode292(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings292_29;
	bool rv = ParseOperands(tokenBranches4330, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings293_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode293(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings293_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings294_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode294(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings294_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode295(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4357, operand);
	return rv;
}
bool x64Parser::Opcode296(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4364, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings297_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 190, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode297(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings297_29;
	bool rv;
	{
		rv = Opcode15(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings298_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 182, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode298(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings298_29;
	bool rv;
	{
		rv = Opcode15(operand);
	}
	return rv;
}
bool x64Parser::Opcode299(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4368, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings300_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode300(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings300_10;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings301_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode301(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings301_10;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings302_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 144, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode302(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings302_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings303_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode303(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings303_10;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings304_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings304_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 12, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings304_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode304(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings304_10;
	operand.values[29] = OpcodeCodings304_29;
	operand.values[30] = OpcodeCodings304_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode305(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4388, operand);
	return rv;
}
bool x64Parser::Opcode306(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4417, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings307_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode307(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings307_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings308_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode308(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings308_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings309_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode309(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings309_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode310(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4559, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings311_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode311(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings311_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings312_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode312(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings312_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings313_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode313(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings313_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings314_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings314_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 184, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode314(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings314_18;
	operand.values[11] = OpcodeCodings314_11;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings315_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode315(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings315_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings316_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode316(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings316_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings317_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode317(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings317_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode318(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4579, operand);
	return rv;
}
bool x64Parser::Opcode319(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4581, operand);
	return rv;
}
bool x64Parser::Opcode320(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4583, operand);
	return rv;
}
bool x64Parser::Opcode321(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4585, operand);
	return rv;
}
bool x64Parser::Opcode322(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4587, operand);
	return rv;
}
bool x64Parser::Opcode323(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4589, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings324_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode324(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings324_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings325_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode325(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings325_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings326_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode326(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings326_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings327_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode327(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings327_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings328_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode328(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings328_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings329_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode329(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings329_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings330_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 156, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode330(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings330_11;
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode331(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4620, operand);
	return rv;
}
bool x64Parser::Opcode332(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4623, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings333_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode333(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings333_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings334_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode334(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings334_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings335_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode335(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings335_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings336_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 158, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode336(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings336_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings337_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode337(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings337_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings338_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode338(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings338_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings339_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings339_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 28, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings339_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 24, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode339(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings339_10;
	operand.values[29] = OpcodeCodings339_29;
	operand.values[30] = OpcodeCodings339_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode340(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4633, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings341_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode341(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings341_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings342_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode342(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings342_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings343_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode343(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings343_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode344(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4761, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings345_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode345(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings345_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings346_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode346(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings346_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings347_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode347(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings347_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings348_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode348(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings348_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings349_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode349(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings349_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings350_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode350(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings350_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings351_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode351(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings351_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings352_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode352(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings352_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings353_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode353(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings353_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings354_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode354(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings354_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings355_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode355(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings355_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings356_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode356(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings356_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings357_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode357(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings357_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings358_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 7, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode358(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings358_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings359_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 3, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode359(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings359_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings360_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode360(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings360_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings361_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 14, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode361(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings361_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings362_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 12, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode362(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings362_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings363_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 13, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode363(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings363_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings364_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode364(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings364_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings365_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode365(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings365_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings366_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode366(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings366_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings367_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 9, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode367(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings367_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings368_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode368(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings368_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings369_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode369(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings369_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings370_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode370(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings370_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings371_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 10, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode371(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings371_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings372_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode372(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings372_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings373_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 8, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode373(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings373_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings374_31[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode374(x64Operand &operand)
{
	operand.values[31] = OpcodeCodings374_31;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings375_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode375(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings375_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings376_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode376(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings376_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings377_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 164, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode377(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings377_29;
	bool rv;
	{
		rv = Opcode17(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings378_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode378(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings378_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings379_29[] = {
	{ (Coding::Type)(Coding::valSpecified), 172, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode379(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings379_29;
	bool rv;
	{
		rv = Opcode17(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings380_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings380_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode380(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings380_10;
	operand.values[11] = OpcodeCodings380_11;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings381_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 0, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings381_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode381(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings381_10;
	operand.values[11] = OpcodeCodings381_11;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings382_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings382_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode382(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings382_10;
	operand.values[11] = OpcodeCodings382_11;
	bool rv = ParseOperands(tokenBranches4800, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings383_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode383(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings383_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings384_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode384(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings384_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings385_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode385(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings385_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode386(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4805, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings387_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode387(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings387_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings388_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode388(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings388_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings389_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode389(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings389_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode390(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4933, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings391_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 1, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings391_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode391(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings391_10;
	operand.values[11] = OpcodeCodings391_11;
	bool rv = ParseOperands(tokenBranches4935, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings392_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings392_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings392_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 40, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode392(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings392_10;
	operand.values[29] = OpcodeCodings392_29;
	operand.values[30] = OpcodeCodings392_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings393_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode393(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings393_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings394_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode394(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings394_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings395_11[] = {
	{ (Coding::Type)(Coding::valSpecified), 53, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode395(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings395_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings396_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode396(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings396_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode397(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4943, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings398_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode398(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings398_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings399_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings399_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode399(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings399_10;
	operand.values[11] = OpcodeCodings399_11;
	bool rv = ParseOperands(tokenBranches5021, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings400_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 5, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings400_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode400(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings400_10;
	operand.values[11] = OpcodeCodings400_11;
	bool rv = ParseOperands(tokenBranches5023, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings401_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode401(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings401_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings402_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode402(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings402_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings403_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 48, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode403(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings403_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode404(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5028, operand);
	return rv;
}
bool x64Parser::Opcode405(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5045, operand);
	return rv;
}
bool x64Parser::Opcode406(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5054, operand);
	return rv;
}
bool x64Parser::Opcode407(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5105, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings408_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode408(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings408_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings409_10[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings409_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings409_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 48, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode409(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings409_10;
	operand.values[29] = OpcodeCodings409_29;
	operand.values[30] = OpcodeCodings409_30;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode410(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5145, operand);
	return rv;
}
bool x64Parser::Opcode411(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5147, operand);
	return rv;
}
bool x64Parser::Opcode412(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5149, operand);
	return rv;
}
bool x64Parser::Opcode413(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5151, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings414_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode414(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings414_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings415_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings415_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode415(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings415_18;
	operand.values[11] = OpcodeCodings415_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings416_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings416_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode416(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings416_18;
	operand.values[11] = OpcodeCodings416_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings417_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings417_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode417(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings417_18;
	operand.values[11] = OpcodeCodings417_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings418_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings418_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode418(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings418_18;
	operand.values[11] = OpcodeCodings418_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings419_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings419_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode419(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings419_18;
	operand.values[11] = OpcodeCodings419_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings420_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings420_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode420(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings420_18;
	operand.values[11] = OpcodeCodings420_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings421_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings421_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode421(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings421_18;
	operand.values[11] = OpcodeCodings421_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings422_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings422_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode422(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings422_18;
	operand.values[11] = OpcodeCodings422_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings423_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings423_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode423(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings423_18;
	operand.values[11] = OpcodeCodings423_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings424_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings424_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode424(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings424_18;
	operand.values[11] = OpcodeCodings424_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings425_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings425_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 13, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode425(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings425_18;
	operand.values[11] = OpcodeCodings425_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings426_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings426_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 13, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode426(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings426_18;
	operand.values[11] = OpcodeCodings426_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings427_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings427_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode427(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings427_18;
	operand.values[11] = OpcodeCodings427_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings428_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings428_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode428(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings428_18;
	operand.values[11] = OpcodeCodings428_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings429_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings429_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode429(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings429_18;
	operand.values[11] = OpcodeCodings429_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings430_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings430_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode430(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings430_18;
	operand.values[11] = OpcodeCodings430_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings431_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings431_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode431(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings431_18;
	operand.values[11] = OpcodeCodings431_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings432_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings432_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode432(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings432_18;
	operand.values[11] = OpcodeCodings432_11;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings433_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings433_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode433(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings433_18;
	operand.values[11] = OpcodeCodings433_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings434_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings434_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode434(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings434_18;
	operand.values[11] = OpcodeCodings434_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings435_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings435_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode435(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings435_18;
	operand.values[11] = OpcodeCodings435_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings436_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings436_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode436(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings436_18;
	operand.values[11] = OpcodeCodings436_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings437_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings437_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode437(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings437_18;
	operand.values[11] = OpcodeCodings437_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings438_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings438_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode438(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings438_18;
	operand.values[11] = OpcodeCodings438_11;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings439_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings439_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode439(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings439_18;
	operand.values[11] = OpcodeCodings439_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings440_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings440_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode440(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings440_18;
	operand.values[11] = OpcodeCodings440_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings441_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings441_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode441(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings441_18;
	operand.values[11] = OpcodeCodings441_11;
	bool rv;
	{
		rv = Opcode26(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings442_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings442_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode442(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings442_18;
	operand.values[11] = OpcodeCodings442_11;
	bool rv;
	{
		rv = Opcode26(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings443_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings443_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode443(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings443_18;
	operand.values[11] = OpcodeCodings443_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings444_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings444_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode444(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings444_18;
	operand.values[11] = OpcodeCodings444_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings445_18[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings445_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode445(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings445_18;
	operand.values[11] = OpcodeCodings445_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings446_18[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings446_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode446(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings446_18;
	operand.values[11] = OpcodeCodings446_11;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings447_18[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings447_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode447(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings447_18;
	operand.values[11] = OpcodeCodings447_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings448_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings448_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode448(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings448_18;
	operand.values[11] = OpcodeCodings448_11;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings449_18[] = {
	{ (Coding::Type)(Coding::valSpecified), 242, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings449_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode449(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings449_18;
	operand.values[11] = OpcodeCodings449_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings450_18[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings450_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode450(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings450_18;
	operand.values[11] = OpcodeCodings450_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings451_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings451_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode451(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings451_18;
	operand.values[11] = OpcodeCodings451_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings452_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings452_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode452(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings452_18;
	operand.values[11] = OpcodeCodings452_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings453_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings453_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode453(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings453_18;
	operand.values[11] = OpcodeCodings453_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings454_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings454_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode454(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings454_18;
	operand.values[11] = OpcodeCodings454_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings455_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings455_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode455(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings455_18;
	operand.values[11] = OpcodeCodings455_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings456_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings456_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode456(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings456_18;
	operand.values[11] = OpcodeCodings456_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings457_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings457_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode457(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings457_18;
	operand.values[11] = OpcodeCodings457_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings458_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings458_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode458(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings458_18;
	operand.values[11] = OpcodeCodings458_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings459_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings459_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode459(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings459_18;
	operand.values[11] = OpcodeCodings459_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings460_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings460_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode460(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings460_18;
	operand.values[11] = OpcodeCodings460_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
bool x64Parser::Opcode461(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5200, operand);
	return rv;
}
bool x64Parser::Opcode462(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5204, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings463_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings463_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode463(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings463_18;
	operand.values[11] = OpcodeCodings463_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings464_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings464_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode464(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings464_18;
	operand.values[11] = OpcodeCodings464_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings465_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings465_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode465(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings465_18;
	operand.values[11] = OpcodeCodings465_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings466_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings466_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode466(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings466_18;
	operand.values[11] = OpcodeCodings466_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings467_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings467_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode467(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings467_18;
	operand.values[11] = OpcodeCodings467_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings468_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode468(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings468_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings469_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings469_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode469(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings469_18;
	operand.values[11] = OpcodeCodings469_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings470_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings470_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode470(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings470_18;
	operand.values[11] = OpcodeCodings470_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings471_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings471_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode471(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings471_18;
	operand.values[11] = OpcodeCodings471_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings472_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings472_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode472(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings472_18;
	operand.values[11] = OpcodeCodings472_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings473_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode473(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings473_11;
	bool rv = true;
	return rv;
}
Coding x64Parser::OpcodeCodings474_18[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings474_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode474(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings474_18;
	operand.values[29] = OpcodeCodings474_29;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings475_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings475_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode475(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings475_18;
	operand.values[29] = OpcodeCodings475_29;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
bool x64Parser::Opcode476(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5221, operand);
	return rv;
}
bool x64Parser::Opcode477(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5234, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings478_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings478_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode478(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings478_18;
	operand.values[11] = OpcodeCodings478_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings479_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings479_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode479(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings479_18;
	operand.values[11] = OpcodeCodings479_11;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings480_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings480_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode480(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings480_18;
	operand.values[11] = OpcodeCodings480_11;
	bool rv;
	{
		rv = Opcode21(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings481_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings481_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode481(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings481_18;
	operand.values[11] = OpcodeCodings481_11;
	bool rv;
	{
		rv = Opcode21(operand);
	}
	return rv;
}
bool x64Parser::Opcode482(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5251, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings483_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings483_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode483(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings483_18;
	operand.values[11] = OpcodeCodings483_11;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings484_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings484_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode484(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings484_18;
	operand.values[11] = OpcodeCodings484_11;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
bool x64Parser::Opcode485(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5257, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings486_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings486_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode486(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings486_18;
	operand.values[11] = OpcodeCodings486_11;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings487_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings487_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode487(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings487_18;
	operand.values[11] = OpcodeCodings487_11;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings488_18[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings488_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode488(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings488_18;
	operand.values[11] = OpcodeCodings488_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings489_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings489_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode489(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings489_18;
	operand.values[11] = OpcodeCodings489_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
bool x64Parser::Opcode490(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5265, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings491_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode491(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings491_11;
	bool rv = ParseOperands(tokenBranches5269, operand);
	return rv;
}
bool x64Parser::Opcode492(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5276, operand);
	return rv;
}
bool x64Parser::Opcode493(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5280, operand);
	return rv;
}
bool x64Parser::Opcode494(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5284, operand);
	return rv;
}
bool x64Parser::Opcode495(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5288, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings496_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings496_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode496(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings496_18;
	operand.values[11] = OpcodeCodings496_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings497_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings497_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode497(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings497_18;
	operand.values[11] = OpcodeCodings497_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings498_18[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings498_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode498(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings498_18;
	operand.values[29] = OpcodeCodings498_29;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings499_18[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings499_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode499(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings499_18;
	operand.values[29] = OpcodeCodings499_29;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings500_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings500_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode500(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings500_18;
	operand.values[29] = OpcodeCodings500_29;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings501_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings501_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 66, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode501(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings501_18;
	operand.values[11] = OpcodeCodings501_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings502_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings502_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode502(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings502_18;
	operand.values[11] = OpcodeCodings502_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings503_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings503_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode503(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings503_18;
	operand.values[11] = OpcodeCodings503_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings504_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings504_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode504(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings504_18;
	operand.values[11] = OpcodeCodings504_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings505_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings505_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode505(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings505_18;
	operand.values[11] = OpcodeCodings505_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings506_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings506_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode506(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings506_18;
	operand.values[11] = OpcodeCodings506_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings507_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings507_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode507(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings507_18;
	operand.values[11] = OpcodeCodings507_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings508_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode508(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings508_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings509_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode509(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings509_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings510_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode510(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings510_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings511_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode511(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings511_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings512_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode512(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings512_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings513_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode513(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings513_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings514_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode514(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings514_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings515_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode515(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings515_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings516_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode516(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings516_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings517_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode517(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings517_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings518_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode518(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings518_11;
	bool rv = ParseOperands(tokenBranches5314, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings519_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode519(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings519_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings520_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode520(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings520_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings521_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode521(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings521_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings522_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode522(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings522_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings523_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings523_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode523(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings523_18;
	operand.values[11] = OpcodeCodings523_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings524_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode524(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings524_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings525_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode525(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings525_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings526_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 213, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode526(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings526_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings527_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings527_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode527(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings527_18;
	operand.values[11] = OpcodeCodings527_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings528_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings528_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode528(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings528_18;
	operand.values[11] = OpcodeCodings528_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings529_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 100, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode529(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings529_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings530_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode530(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings530_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings531_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 101, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode531(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings531_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings532_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings532_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode532(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings532_18;
	operand.values[11] = OpcodeCodings532_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings533_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings533_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode533(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings533_18;
	operand.values[11] = OpcodeCodings533_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings534_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode534(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings534_11;
	bool rv = ParseOperands(tokenBranches5340, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings535_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode535(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings535_11;
	bool rv = ParseOperands(tokenBranches5346, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings536_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode536(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings536_11;
	bool rv = ParseOperands(tokenBranches5352, operand);
	return rv;
}
bool x64Parser::Opcode537(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5358, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings538_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode538(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings538_11;
	bool rv = ParseOperands(tokenBranches5379, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings539_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode539(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings539_11;
	bool rv = ParseOperands(tokenBranches5385, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings540_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode540(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings540_11;
	bool rv = ParseOperands(tokenBranches5391, operand);
	return rv;
}
bool x64Parser::Opcode541(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5397, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings542_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 245, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode542(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings542_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings543_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode543(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings543_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings544_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode544(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings544_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings545_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode545(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings545_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings546_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode546(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings546_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings547_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode547(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings547_11;
	bool rv = ParseOperands(tokenBranches5413, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings548_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode548(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings548_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings549_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 229, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode549(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings549_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings550_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 213, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode550(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings550_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings551_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode551(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings551_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings552_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode552(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings552_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings553_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings553_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode553(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings553_18;
	operand.values[11] = OpcodeCodings553_11;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings554_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings554_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode554(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings554_18;
	operand.values[11] = OpcodeCodings554_11;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings555_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings555_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode555(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings555_18;
	operand.values[11] = OpcodeCodings555_11;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings556_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings556_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode556(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings556_18;
	operand.values[11] = OpcodeCodings556_11;
	bool rv = ParseOperands(tokenBranches5434, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings557_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings557_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings557_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 242, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode557(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings557_32;
	operand.values[29] = OpcodeCodings557_29;
	operand.values[30] = OpcodeCodings557_30;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings558_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings558_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode558(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings558_18;
	operand.values[11] = OpcodeCodings558_11;
	bool rv = ParseOperands(tokenBranches5441, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings559_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings559_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings559_30[] = {
	{ (Coding::Type)(Coding::valSpecified), 243, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode559(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings559_32;
	operand.values[29] = OpcodeCodings559_29;
	operand.values[30] = OpcodeCodings559_30;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings560_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 6, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings560_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 241, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings560_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode560(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings560_32;
	operand.values[33] = OpcodeCodings560_33;
	operand.values[29] = OpcodeCodings560_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings561_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings561_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 226, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings561_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode561(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings561_32;
	operand.values[33] = OpcodeCodings561_33;
	operand.values[29] = OpcodeCodings561_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings562_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings562_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 225, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings562_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode562(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings562_32;
	operand.values[33] = OpcodeCodings562_33;
	operand.values[29] = OpcodeCodings562_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings563_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings563_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 210, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings563_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode563(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings563_32;
	operand.values[33] = OpcodeCodings563_33;
	operand.values[29] = OpcodeCodings563_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings564_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings564_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode564(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings564_18;
	operand.values[11] = OpcodeCodings564_11;
	bool rv = ParseOperands(tokenBranches5450, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings565_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings565_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 211, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings565_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode565(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings565_32;
	operand.values[33] = OpcodeCodings565_33;
	operand.values[29] = OpcodeCodings565_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings566_32[] = {
	{ (Coding::Type)(Coding::valSpecified), 2, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings566_33[] = {
	{ (Coding::Type)(Coding::valSpecified), 209, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings566_29[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode566(x64Operand &operand)
{
	operand.values[32] = OpcodeCodings566_32;
	operand.values[33] = OpcodeCodings566_33;
	operand.values[29] = OpcodeCodings566_29;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings567_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode567(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings567_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings568_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode568(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings568_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings569_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode569(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings569_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings570_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode570(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings570_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings571_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode571(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings571_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings572_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode572(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings572_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings573_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode573(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings573_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings574_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode574(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings574_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings575_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode575(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings575_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings576_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings576_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode576(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings576_18;
	operand.values[11] = OpcodeCodings576_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings577_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode577(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings577_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings578_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode578(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings578_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings579_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode579(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings579_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings580_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings580_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode580(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings580_18;
	operand.values[11] = OpcodeCodings580_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings581_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode581(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings581_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings582_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode582(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings582_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings583_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings583_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode583(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings583_18;
	operand.values[11] = OpcodeCodings583_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings584_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings584_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode584(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings584_18;
	operand.values[11] = OpcodeCodings584_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings585_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings585_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode585(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings585_18;
	operand.values[11] = OpcodeCodings585_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings586_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings586_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode586(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings586_18;
	operand.values[11] = OpcodeCodings586_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings587_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings587_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode587(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings587_18;
	operand.values[11] = OpcodeCodings587_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings588_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings588_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode588(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings588_18;
	operand.values[11] = OpcodeCodings588_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings589_18[] = {
	{ (Coding::Type)(Coding::valSpecified), 102, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings589_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode589(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings589_18;
	operand.values[11] = OpcodeCodings589_11;
	bool rv = ParseOperands(tokenBranches5478, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings590_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings590_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode590(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings590_18;
	operand.values[11] = OpcodeCodings590_11;
	bool rv = ParseOperands(tokenBranches5484, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings591_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings591_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode591(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings591_18;
	operand.values[11] = OpcodeCodings591_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings592_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings592_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode592(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings592_18;
	operand.values[11] = OpcodeCodings592_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings593_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings593_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode593(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings593_18;
	operand.values[11] = OpcodeCodings593_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings594_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings594_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode594(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings594_18;
	operand.values[11] = OpcodeCodings594_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings595_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings595_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode595(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings595_18;
	operand.values[11] = OpcodeCodings595_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings596_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings596_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode596(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings596_18;
	operand.values[11] = OpcodeCodings596_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings597_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings597_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode597(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings597_18;
	operand.values[11] = OpcodeCodings597_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings598_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings598_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode598(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings598_18;
	operand.values[11] = OpcodeCodings598_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings599_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings599_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode599(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings599_18;
	operand.values[11] = OpcodeCodings599_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings600_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings600_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode600(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings600_18;
	operand.values[11] = OpcodeCodings600_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings601_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings601_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode601(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings601_18;
	operand.values[11] = OpcodeCodings601_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings602_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings602_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
bool x64Parser::Opcode602(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings602_18;
	operand.values[11] = OpcodeCodings602_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
bool x64Parser::Opcode603(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode604(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode605(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode606(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode607(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode608(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode609(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode610(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode611(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode612(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode613(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode614(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
x64Parser::DispatchType x64Parser::DispatchTable[615] = {
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&x64Parser::Opcode32,
	&x64Parser::Opcode33,
	&x64Parser::Opcode34,
	&x64Parser::Opcode35,
	&x64Parser::Opcode36,
	&x64Parser::Opcode37,
	&x64Parser::Opcode38,
	&x64Parser::Opcode39,
	&x64Parser::Opcode40,
	&x64Parser::Opcode41,
	&x64Parser::Opcode42,
	&x64Parser::Opcode43,
	&x64Parser::Opcode44,
	&x64Parser::Opcode45,
	&x64Parser::Opcode46,
	&x64Parser::Opcode47,
	&x64Parser::Opcode48,
	&x64Parser::Opcode49,
	&x64Parser::Opcode50,
	&x64Parser::Opcode51,
	&x64Parser::Opcode52,
	&x64Parser::Opcode53,
	&x64Parser::Opcode54,
	&x64Parser::Opcode55,
	&x64Parser::Opcode56,
	&x64Parser::Opcode57,
	&x64Parser::Opcode58,
	&x64Parser::Opcode59,
	&x64Parser::Opcode60,
	&x64Parser::Opcode61,
	&x64Parser::Opcode62,
	&x64Parser::Opcode63,
	&x64Parser::Opcode64,
	&x64Parser::Opcode65,
	&x64Parser::Opcode66,
	&x64Parser::Opcode67,
	&x64Parser::Opcode68,
	&x64Parser::Opcode69,
	&x64Parser::Opcode70,
	&x64Parser::Opcode71,
	&x64Parser::Opcode72,
	&x64Parser::Opcode73,
	&x64Parser::Opcode74,
	&x64Parser::Opcode75,
	&x64Parser::Opcode76,
	&x64Parser::Opcode77,
	&x64Parser::Opcode78,
	&x64Parser::Opcode79,
	&x64Parser::Opcode80,
	&x64Parser::Opcode81,
	&x64Parser::Opcode82,
	&x64Parser::Opcode83,
	&x64Parser::Opcode84,
	&x64Parser::Opcode85,
	&x64Parser::Opcode86,
	&x64Parser::Opcode87,
	&x64Parser::Opcode88,
	&x64Parser::Opcode89,
	&x64Parser::Opcode90,
	&x64Parser::Opcode91,
	&x64Parser::Opcode92,
	&x64Parser::Opcode93,
	&x64Parser::Opcode94,
	&x64Parser::Opcode95,
	&x64Parser::Opcode96,
	&x64Parser::Opcode97,
	&x64Parser::Opcode98,
	&x64Parser::Opcode99,
	&x64Parser::Opcode100,
	&x64Parser::Opcode101,
	&x64Parser::Opcode102,
	&x64Parser::Opcode103,
	&x64Parser::Opcode104,
	&x64Parser::Opcode105,
	&x64Parser::Opcode106,
	&x64Parser::Opcode107,
	&x64Parser::Opcode108,
	&x64Parser::Opcode109,
	&x64Parser::Opcode110,
	&x64Parser::Opcode111,
	&x64Parser::Opcode112,
	&x64Parser::Opcode113,
	&x64Parser::Opcode114,
	&x64Parser::Opcode115,
	&x64Parser::Opcode116,
	&x64Parser::Opcode117,
	&x64Parser::Opcode118,
	&x64Parser::Opcode119,
	&x64Parser::Opcode120,
	&x64Parser::Opcode121,
	&x64Parser::Opcode122,
	&x64Parser::Opcode123,
	&x64Parser::Opcode124,
	&x64Parser::Opcode125,
	&x64Parser::Opcode126,
	&x64Parser::Opcode127,
	&x64Parser::Opcode128,
	&x64Parser::Opcode129,
	&x64Parser::Opcode130,
	&x64Parser::Opcode131,
	&x64Parser::Opcode132,
	&x64Parser::Opcode133,
	&x64Parser::Opcode134,
	&x64Parser::Opcode135,
	&x64Parser::Opcode136,
	&x64Parser::Opcode137,
	&x64Parser::Opcode138,
	&x64Parser::Opcode139,
	&x64Parser::Opcode140,
	&x64Parser::Opcode141,
	&x64Parser::Opcode142,
	&x64Parser::Opcode143,
	&x64Parser::Opcode144,
	&x64Parser::Opcode145,
	&x64Parser::Opcode146,
	&x64Parser::Opcode147,
	&x64Parser::Opcode148,
	&x64Parser::Opcode149,
	&x64Parser::Opcode150,
	&x64Parser::Opcode151,
	&x64Parser::Opcode152,
	&x64Parser::Opcode153,
	&x64Parser::Opcode154,
	&x64Parser::Opcode155,
	&x64Parser::Opcode156,
	&x64Parser::Opcode157,
	&x64Parser::Opcode158,
	&x64Parser::Opcode159,
	&x64Parser::Opcode160,
	&x64Parser::Opcode161,
	&x64Parser::Opcode162,
	&x64Parser::Opcode163,
	&x64Parser::Opcode164,
	&x64Parser::Opcode165,
	&x64Parser::Opcode166,
	&x64Parser::Opcode167,
	&x64Parser::Opcode168,
	&x64Parser::Opcode169,
	&x64Parser::Opcode170,
	&x64Parser::Opcode171,
	&x64Parser::Opcode172,
	&x64Parser::Opcode173,
	&x64Parser::Opcode174,
	&x64Parser::Opcode175,
	&x64Parser::Opcode176,
	&x64Parser::Opcode177,
	&x64Parser::Opcode178,
	&x64Parser::Opcode179,
	&x64Parser::Opcode180,
	&x64Parser::Opcode181,
	&x64Parser::Opcode182,
	&x64Parser::Opcode183,
	&x64Parser::Opcode184,
	&x64Parser::Opcode185,
	&x64Parser::Opcode186,
	&x64Parser::Opcode187,
	&x64Parser::Opcode188,
	&x64Parser::Opcode189,
	&x64Parser::Opcode190,
	&x64Parser::Opcode191,
	&x64Parser::Opcode192,
	&x64Parser::Opcode193,
	&x64Parser::Opcode194,
	&x64Parser::Opcode195,
	&x64Parser::Opcode196,
	&x64Parser::Opcode197,
	&x64Parser::Opcode198,
	&x64Parser::Opcode199,
	&x64Parser::Opcode200,
	&x64Parser::Opcode201,
	&x64Parser::Opcode202,
	&x64Parser::Opcode203,
	&x64Parser::Opcode204,
	&x64Parser::Opcode205,
	&x64Parser::Opcode206,
	&x64Parser::Opcode207,
	&x64Parser::Opcode208,
	&x64Parser::Opcode209,
	&x64Parser::Opcode210,
	&x64Parser::Opcode211,
	&x64Parser::Opcode212,
	&x64Parser::Opcode213,
	&x64Parser::Opcode214,
	&x64Parser::Opcode215,
	&x64Parser::Opcode216,
	&x64Parser::Opcode217,
	&x64Parser::Opcode218,
	&x64Parser::Opcode219,
	&x64Parser::Opcode220,
	&x64Parser::Opcode221,
	&x64Parser::Opcode222,
	&x64Parser::Opcode223,
	&x64Parser::Opcode224,
	&x64Parser::Opcode225,
	&x64Parser::Opcode226,
	&x64Parser::Opcode227,
	&x64Parser::Opcode228,
	&x64Parser::Opcode229,
	&x64Parser::Opcode230,
	&x64Parser::Opcode231,
	&x64Parser::Opcode232,
	&x64Parser::Opcode233,
	&x64Parser::Opcode234,
	&x64Parser::Opcode235,
	&x64Parser::Opcode236,
	&x64Parser::Opcode237,
	&x64Parser::Opcode238,
	&x64Parser::Opcode239,
	&x64Parser::Opcode240,
	&x64Parser::Opcode241,
	&x64Parser::Opcode242,
	&x64Parser::Opcode243,
	&x64Parser::Opcode244,
	&x64Parser::Opcode245,
	&x64Parser::Opcode246,
	&x64Parser::Opcode247,
	&x64Parser::Opcode248,
	&x64Parser::Opcode249,
	&x64Parser::Opcode250,
	&x64Parser::Opcode251,
	&x64Parser::Opcode252,
	&x64Parser::Opcode253,
	&x64Parser::Opcode254,
	&x64Parser::Opcode255,
	&x64Parser::Opcode256,
	&x64Parser::Opcode257,
	&x64Parser::Opcode258,
	&x64Parser::Opcode259,
	&x64Parser::Opcode260,
	&x64Parser::Opcode261,
	&x64Parser::Opcode262,
	&x64Parser::Opcode263,
	&x64Parser::Opcode264,
	&x64Parser::Opcode265,
	&x64Parser::Opcode266,
	&x64Parser::Opcode267,
	&x64Parser::Opcode268,
	&x64Parser::Opcode269,
	&x64Parser::Opcode270,
	&x64Parser::Opcode271,
	&x64Parser::Opcode272,
	&x64Parser::Opcode273,
	&x64Parser::Opcode274,
	&x64Parser::Opcode275,
	&x64Parser::Opcode276,
	&x64Parser::Opcode277,
	&x64Parser::Opcode278,
	&x64Parser::Opcode279,
	&x64Parser::Opcode280,
	&x64Parser::Opcode281,
	&x64Parser::Opcode282,
	&x64Parser::Opcode283,
	&x64Parser::Opcode284,
	&x64Parser::Opcode285,
	&x64Parser::Opcode286,
	&x64Parser::Opcode287,
	&x64Parser::Opcode288,
	&x64Parser::Opcode289,
	&x64Parser::Opcode290,
	&x64Parser::Opcode291,
	&x64Parser::Opcode292,
	&x64Parser::Opcode293,
	&x64Parser::Opcode294,
	&x64Parser::Opcode295,
	&x64Parser::Opcode296,
	&x64Parser::Opcode297,
	&x64Parser::Opcode298,
	&x64Parser::Opcode299,
	&x64Parser::Opcode300,
	&x64Parser::Opcode301,
	&x64Parser::Opcode302,
	&x64Parser::Opcode303,
	&x64Parser::Opcode304,
	&x64Parser::Opcode305,
	&x64Parser::Opcode306,
	&x64Parser::Opcode307,
	&x64Parser::Opcode308,
	&x64Parser::Opcode309,
	&x64Parser::Opcode310,
	&x64Parser::Opcode311,
	&x64Parser::Opcode312,
	&x64Parser::Opcode313,
	&x64Parser::Opcode314,
	&x64Parser::Opcode315,
	&x64Parser::Opcode316,
	&x64Parser::Opcode317,
	&x64Parser::Opcode318,
	&x64Parser::Opcode319,
	&x64Parser::Opcode320,
	&x64Parser::Opcode321,
	&x64Parser::Opcode322,
	&x64Parser::Opcode323,
	&x64Parser::Opcode324,
	&x64Parser::Opcode325,
	&x64Parser::Opcode326,
	&x64Parser::Opcode327,
	&x64Parser::Opcode328,
	&x64Parser::Opcode329,
	&x64Parser::Opcode330,
	&x64Parser::Opcode331,
	&x64Parser::Opcode332,
	&x64Parser::Opcode333,
	&x64Parser::Opcode334,
	&x64Parser::Opcode335,
	&x64Parser::Opcode336,
	&x64Parser::Opcode337,
	&x64Parser::Opcode338,
	&x64Parser::Opcode339,
	&x64Parser::Opcode340,
	&x64Parser::Opcode341,
	&x64Parser::Opcode342,
	&x64Parser::Opcode343,
	&x64Parser::Opcode344,
	&x64Parser::Opcode345,
	&x64Parser::Opcode346,
	&x64Parser::Opcode347,
	&x64Parser::Opcode348,
	&x64Parser::Opcode349,
	&x64Parser::Opcode350,
	&x64Parser::Opcode351,
	&x64Parser::Opcode352,
	&x64Parser::Opcode353,
	&x64Parser::Opcode354,
	&x64Parser::Opcode355,
	&x64Parser::Opcode356,
	&x64Parser::Opcode357,
	&x64Parser::Opcode358,
	&x64Parser::Opcode359,
	&x64Parser::Opcode360,
	&x64Parser::Opcode361,
	&x64Parser::Opcode362,
	&x64Parser::Opcode363,
	&x64Parser::Opcode364,
	&x64Parser::Opcode365,
	&x64Parser::Opcode366,
	&x64Parser::Opcode367,
	&x64Parser::Opcode368,
	&x64Parser::Opcode369,
	&x64Parser::Opcode370,
	&x64Parser::Opcode371,
	&x64Parser::Opcode372,
	&x64Parser::Opcode373,
	&x64Parser::Opcode374,
	&x64Parser::Opcode375,
	&x64Parser::Opcode376,
	&x64Parser::Opcode377,
	&x64Parser::Opcode378,
	&x64Parser::Opcode379,
	&x64Parser::Opcode380,
	&x64Parser::Opcode381,
	&x64Parser::Opcode382,
	&x64Parser::Opcode383,
	&x64Parser::Opcode384,
	&x64Parser::Opcode385,
	&x64Parser::Opcode386,
	&x64Parser::Opcode387,
	&x64Parser::Opcode388,
	&x64Parser::Opcode389,
	&x64Parser::Opcode390,
	&x64Parser::Opcode391,
	&x64Parser::Opcode392,
	&x64Parser::Opcode393,
	&x64Parser::Opcode394,
	&x64Parser::Opcode395,
	&x64Parser::Opcode396,
	&x64Parser::Opcode397,
	&x64Parser::Opcode398,
	&x64Parser::Opcode399,
	&x64Parser::Opcode400,
	&x64Parser::Opcode401,
	&x64Parser::Opcode402,
	&x64Parser::Opcode403,
	&x64Parser::Opcode404,
	&x64Parser::Opcode405,
	&x64Parser::Opcode406,
	&x64Parser::Opcode407,
	&x64Parser::Opcode408,
	&x64Parser::Opcode409,
	&x64Parser::Opcode410,
	&x64Parser::Opcode411,
	&x64Parser::Opcode412,
	&x64Parser::Opcode413,
	&x64Parser::Opcode414,
	&x64Parser::Opcode415,
	&x64Parser::Opcode416,
	&x64Parser::Opcode417,
	&x64Parser::Opcode418,
	&x64Parser::Opcode419,
	&x64Parser::Opcode420,
	&x64Parser::Opcode421,
	&x64Parser::Opcode422,
	&x64Parser::Opcode423,
	&x64Parser::Opcode424,
	&x64Parser::Opcode425,
	&x64Parser::Opcode426,
	&x64Parser::Opcode427,
	&x64Parser::Opcode428,
	&x64Parser::Opcode429,
	&x64Parser::Opcode430,
	&x64Parser::Opcode431,
	&x64Parser::Opcode432,
	&x64Parser::Opcode433,
	&x64Parser::Opcode434,
	&x64Parser::Opcode435,
	&x64Parser::Opcode436,
	&x64Parser::Opcode437,
	&x64Parser::Opcode438,
	&x64Parser::Opcode439,
	&x64Parser::Opcode440,
	&x64Parser::Opcode441,
	&x64Parser::Opcode442,
	&x64Parser::Opcode443,
	&x64Parser::Opcode444,
	&x64Parser::Opcode445,
	&x64Parser::Opcode446,
	&x64Parser::Opcode447,
	&x64Parser::Opcode448,
	&x64Parser::Opcode449,
	&x64Parser::Opcode450,
	&x64Parser::Opcode451,
	&x64Parser::Opcode452,
	&x64Parser::Opcode453,
	&x64Parser::Opcode454,
	&x64Parser::Opcode455,
	&x64Parser::Opcode456,
	&x64Parser::Opcode457,
	&x64Parser::Opcode458,
	&x64Parser::Opcode459,
	&x64Parser::Opcode460,
	&x64Parser::Opcode461,
	&x64Parser::Opcode462,
	&x64Parser::Opcode463,
	&x64Parser::Opcode464,
	&x64Parser::Opcode465,
	&x64Parser::Opcode466,
	&x64Parser::Opcode467,
	&x64Parser::Opcode468,
	&x64Parser::Opcode469,
	&x64Parser::Opcode470,
	&x64Parser::Opcode471,
	&x64Parser::Opcode472,
	&x64Parser::Opcode473,
	&x64Parser::Opcode474,
	&x64Parser::Opcode475,
	&x64Parser::Opcode476,
	&x64Parser::Opcode477,
	&x64Parser::Opcode478,
	&x64Parser::Opcode479,
	&x64Parser::Opcode480,
	&x64Parser::Opcode481,
	&x64Parser::Opcode482,
	&x64Parser::Opcode483,
	&x64Parser::Opcode484,
	&x64Parser::Opcode485,
	&x64Parser::Opcode486,
	&x64Parser::Opcode487,
	&x64Parser::Opcode488,
	&x64Parser::Opcode489,
	&x64Parser::Opcode490,
	&x64Parser::Opcode491,
	&x64Parser::Opcode492,
	&x64Parser::Opcode493,
	&x64Parser::Opcode494,
	&x64Parser::Opcode495,
	&x64Parser::Opcode496,
	&x64Parser::Opcode497,
	&x64Parser::Opcode498,
	&x64Parser::Opcode499,
	&x64Parser::Opcode500,
	&x64Parser::Opcode501,
	&x64Parser::Opcode502,
	&x64Parser::Opcode503,
	&x64Parser::Opcode504,
	&x64Parser::Opcode505,
	&x64Parser::Opcode506,
	&x64Parser::Opcode507,
	&x64Parser::Opcode508,
	&x64Parser::Opcode509,
	&x64Parser::Opcode510,
	&x64Parser::Opcode511,
	&x64Parser::Opcode512,
	&x64Parser::Opcode513,
	&x64Parser::Opcode514,
	&x64Parser::Opcode515,
	&x64Parser::Opcode516,
	&x64Parser::Opcode517,
	&x64Parser::Opcode518,
	&x64Parser::Opcode519,
	&x64Parser::Opcode520,
	&x64Parser::Opcode521,
	&x64Parser::Opcode522,
	&x64Parser::Opcode523,
	&x64Parser::Opcode524,
	&x64Parser::Opcode525,
	&x64Parser::Opcode526,
	&x64Parser::Opcode527,
	&x64Parser::Opcode528,
	&x64Parser::Opcode529,
	&x64Parser::Opcode530,
	&x64Parser::Opcode531,
	&x64Parser::Opcode532,
	&x64Parser::Opcode533,
	&x64Parser::Opcode534,
	&x64Parser::Opcode535,
	&x64Parser::Opcode536,
	&x64Parser::Opcode537,
	&x64Parser::Opcode538,
	&x64Parser::Opcode539,
	&x64Parser::Opcode540,
	&x64Parser::Opcode541,
	&x64Parser::Opcode542,
	&x64Parser::Opcode543,
	&x64Parser::Opcode544,
	&x64Parser::Opcode545,
	&x64Parser::Opcode546,
	&x64Parser::Opcode547,
	&x64Parser::Opcode548,
	&x64Parser::Opcode549,
	&x64Parser::Opcode550,
	&x64Parser::Opcode551,
	&x64Parser::Opcode552,
	&x64Parser::Opcode553,
	&x64Parser::Opcode554,
	&x64Parser::Opcode555,
	&x64Parser::Opcode556,
	&x64Parser::Opcode557,
	&x64Parser::Opcode558,
	&x64Parser::Opcode559,
	&x64Parser::Opcode560,
	&x64Parser::Opcode561,
	&x64Parser::Opcode562,
	&x64Parser::Opcode563,
	&x64Parser::Opcode564,
	&x64Parser::Opcode565,
	&x64Parser::Opcode566,
	&x64Parser::Opcode567,
	&x64Parser::Opcode568,
	&x64Parser::Opcode569,
	&x64Parser::Opcode570,
	&x64Parser::Opcode571,
	&x64Parser::Opcode572,
	&x64Parser::Opcode573,
	&x64Parser::Opcode574,
	&x64Parser::Opcode575,
	&x64Parser::Opcode576,
	&x64Parser::Opcode577,
	&x64Parser::Opcode578,
	&x64Parser::Opcode579,
	&x64Parser::Opcode580,
	&x64Parser::Opcode581,
	&x64Parser::Opcode582,
	&x64Parser::Opcode583,
	&x64Parser::Opcode584,
	&x64Parser::Opcode585,
	&x64Parser::Opcode586,
	&x64Parser::Opcode587,
	&x64Parser::Opcode588,
	&x64Parser::Opcode589,
	&x64Parser::Opcode590,
	&x64Parser::Opcode591,
	&x64Parser::Opcode592,
	&x64Parser::Opcode593,
	&x64Parser::Opcode594,
	&x64Parser::Opcode595,
	&x64Parser::Opcode596,
	&x64Parser::Opcode597,
	&x64Parser::Opcode598,
	&x64Parser::Opcode599,
	&x64Parser::Opcode600,
	&x64Parser::Opcode601,
	&x64Parser::Opcode602,
	&x64Parser::Opcode603,
	&x64Parser::Opcode604,
	&x64Parser::Opcode605,
	&x64Parser::Opcode606,
	&x64Parser::Opcode607,
	&x64Parser::Opcode608,
	&x64Parser::Opcode609,
	&x64Parser::Opcode610,
	&x64Parser::Opcode611,
	&x64Parser::Opcode612,
	&x64Parser::Opcode613,
	&x64Parser::Opcode614,
};
Coding x64Parser::Coding1[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding2[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding3[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding4[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding5[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding6[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding7[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding8[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding9[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding10[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding11[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding12[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding13[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding14[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding15[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding16[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding17[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding18[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding19[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding20[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding21[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding22[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding23[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding24[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding25[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding26[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding27[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding28[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding29[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding30[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::valSpecified), 54, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding31[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding32[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding33[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding34[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding35[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding36[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding37[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding38[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding39[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding40[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding41[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding42[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding43[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 6, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding44[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding45[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding46[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding47[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding48[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding49[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding50[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding51[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding52[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding53[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding54[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding55[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding56[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding57[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding58[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding59[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding60[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding61[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding62[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding63[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding64[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding65[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding66[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding67[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding68[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding69[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding70[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding71[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding72[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding73[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding74[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding75[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding76[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding77[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding78[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding79[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding80[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 1056, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding81[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding82[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding83[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding84[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding85[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding86[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding87[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding88[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding89[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding90[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding91[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding92[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding93[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding94[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding95[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding96[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding97[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding98[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding99[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding100[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding101[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding102[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding103[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding104[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding105[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding106[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding107[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding108[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding109[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding110[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding111[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding112[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding113[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding114[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding115[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding116[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding117[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding118[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding119[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding120[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding121[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding122[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding123[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding124[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding125[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding126[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding127[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding128[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding129[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 1057, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding130[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding131[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding132[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding133[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding134[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding135[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding136[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding137[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding138[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding139[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding140[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding141[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding142[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding143[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding144[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding145[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding146[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding147[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding148[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding149[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding150[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding151[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding152[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding153[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding154[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding155[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding156[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding157[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding158[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding159[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding160[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding161[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding162[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding163[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 1056, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding164[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding165[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding166[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 66, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding167[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding168[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding169[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding170[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding171[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding172[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding173[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding174[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding175[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding176[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding177[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding178[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding179[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding180[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding181[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding182[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding183[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding184[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding185[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding186[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding187[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding188[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding189[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding190[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding191[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding192[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding193[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding194[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding195[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding196[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding197[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding198[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding199[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 4, 8, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding200[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding201[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding202[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding203[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding204[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding205[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding206[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding207[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding208[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding209[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding210[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding211[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding212[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 1057, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding213[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 65, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding214[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 6, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding215[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 9, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, -1, 4, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding216[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 7, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding217[] = {
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 7, -1, 0, 0, '+' }, 
	{ (Coding::Type)(Coding::indirect), 8, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 9, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 7, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding218[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 7, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding219[] = {
	{ (Coding::Type)(Coding::optional | Coding::indirect), 18, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 7, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 7, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding220[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding221[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding222[] = {
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 29, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding223[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding224[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding225[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding226[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding227[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding228[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding229[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding230[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding231[] = {
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding232[] = {
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding233[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding234[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding235[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding236[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding237[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding238[] = {
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding239[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 7, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding240[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::valSpecified), 4, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 7, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding241[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 29, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 32, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 7, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding242[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::indirect), 11, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 3, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding243[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding244[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding245[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 15, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 31, 4, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding246[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 19, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding247[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding248[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding249[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding250[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding251[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding252[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding253[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding254[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding255[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding256[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding257[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding258[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding259[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding260[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding261[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding262[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding263[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding264[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding265[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding266[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding267[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding268[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding269[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding270[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding271[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding272[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding273[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding274[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding275[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding276[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding277[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding278[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding279[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 20, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding280[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding281[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding282[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding283[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding284[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding285[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding286[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding287[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding288[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding289[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding290[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding291[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding292[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding293[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding294[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding295[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 229, -1, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding296[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding297[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding298[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding299[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding300[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding301[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding302[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding303[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding304[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding305[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding306[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding307[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding308[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding309[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding310[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding311[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding312[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding313[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding314[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding315[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding316[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding317[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding318[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 205, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding319[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding320[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding321[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding322[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding323[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding324[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding325[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding326[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding327[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding328[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding329[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding330[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding331[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding332[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding333[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding334[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding335[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding336[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding337[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding338[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding339[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding340[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding341[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding342[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding343[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding344[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding345[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding346[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding347[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding348[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding349[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding350[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding351[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding352[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding353[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding354[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding355[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding356[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding357[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding358[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding359[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding360[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding361[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding362[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding363[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding364[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding365[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding366[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding367[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding368[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding369[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding370[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding371[] = {
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding372[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding373[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding374[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding375[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding376[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding377[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding378[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding379[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding380[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding381[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding382[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding383[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding384[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding385[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding386[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding387[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding388[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding389[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding390[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding391[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding392[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding393[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding394[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding395[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding396[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding397[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding398[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding399[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding400[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding401[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding402[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding403[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding404[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding405[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding406[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding407[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding408[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding409[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding410[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::valSpecified), 165, -1, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding411[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 165, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding412[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding413[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding414[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding415[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 22, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding416[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding417[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding418[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding419[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding420[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding421[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding422[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding423[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding424[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding425[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding426[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding427[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding428[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding429[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding430[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding431[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding432[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding433[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding434[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding435[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding436[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding437[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding438[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding439[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding440[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding441[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding442[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding443[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding444[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding445[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding446[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding447[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding448[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding449[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding450[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding451[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding452[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding453[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ Coding::eot },
};
Coding x64Parser::Coding454[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ Coding::eot },
};
Coding x64Parser::Coding455[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding456[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding457[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 3, 1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding458[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding459[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding460[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 202, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding461[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 203, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding462[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding463[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding464[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding465[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding466[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding467[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding468[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding469[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding470[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding471[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding472[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding473[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding474[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding475[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding476[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding477[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding478[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding479[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding480[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding481[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding482[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding483[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding484[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding485[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding486[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding487[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding488[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding489[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding490[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding491[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding492[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding493[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding494[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding495[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding496[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding497[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding498[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding499[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding500[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding501[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding502[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding503[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding504[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding505[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 16, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding506[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 32, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding507[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect), 14, 64, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding508[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding509[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::valSpecified), 64, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding510[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::valSpecified), 72, -1, -1, 0, '+' }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 8, 2, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 12, 3, 1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding511[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding512[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding513[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding514[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding515[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding516[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 7, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::Coding517[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, -1, 0, 0 }, 
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding * x64Parser::Codings[517] = {
	x64Parser::Coding1,
	x64Parser::Coding2,
	x64Parser::Coding3,
	x64Parser::Coding4,
	x64Parser::Coding5,
	x64Parser::Coding6,
	x64Parser::Coding7,
	x64Parser::Coding8,
	x64Parser::Coding9,
	x64Parser::Coding10,
	x64Parser::Coding11,
	x64Parser::Coding12,
	x64Parser::Coding13,
	x64Parser::Coding14,
	x64Parser::Coding15,
	x64Parser::Coding16,
	x64Parser::Coding17,
	x64Parser::Coding18,
	x64Parser::Coding19,
	x64Parser::Coding20,
	x64Parser::Coding21,
	x64Parser::Coding22,
	x64Parser::Coding23,
	x64Parser::Coding24,
	x64Parser::Coding25,
	x64Parser::Coding26,
	x64Parser::Coding27,
	x64Parser::Coding28,
	x64Parser::Coding29,
	x64Parser::Coding30,
	x64Parser::Coding31,
	x64Parser::Coding32,
	x64Parser::Coding33,
	x64Parser::Coding34,
	x64Parser::Coding35,
	x64Parser::Coding36,
	x64Parser::Coding37,
	x64Parser::Coding38,
	x64Parser::Coding39,
	x64Parser::Coding40,
	x64Parser::Coding41,
	x64Parser::Coding42,
	x64Parser::Coding43,
	x64Parser::Coding44,
	x64Parser::Coding45,
	x64Parser::Coding46,
	x64Parser::Coding47,
	x64Parser::Coding48,
	x64Parser::Coding49,
	x64Parser::Coding50,
	x64Parser::Coding51,
	x64Parser::Coding52,
	x64Parser::Coding53,
	x64Parser::Coding54,
	x64Parser::Coding55,
	x64Parser::Coding56,
	x64Parser::Coding57,
	x64Parser::Coding58,
	x64Parser::Coding59,
	x64Parser::Coding60,
	x64Parser::Coding61,
	x64Parser::Coding62,
	x64Parser::Coding63,
	x64Parser::Coding64,
	x64Parser::Coding65,
	x64Parser::Coding66,
	x64Parser::Coding67,
	x64Parser::Coding68,
	x64Parser::Coding69,
	x64Parser::Coding70,
	x64Parser::Coding71,
	x64Parser::Coding72,
	x64Parser::Coding73,
	x64Parser::Coding74,
	x64Parser::Coding75,
	x64Parser::Coding76,
	x64Parser::Coding77,
	x64Parser::Coding78,
	x64Parser::Coding79,
	x64Parser::Coding80,
	x64Parser::Coding81,
	x64Parser::Coding82,
	x64Parser::Coding83,
	x64Parser::Coding84,
	x64Parser::Coding85,
	x64Parser::Coding86,
	x64Parser::Coding87,
	x64Parser::Coding88,
	x64Parser::Coding89,
	x64Parser::Coding90,
	x64Parser::Coding91,
	x64Parser::Coding92,
	x64Parser::Coding93,
	x64Parser::Coding94,
	x64Parser::Coding95,
	x64Parser::Coding96,
	x64Parser::Coding97,
	x64Parser::Coding98,
	x64Parser::Coding99,
	x64Parser::Coding100,
	x64Parser::Coding101,
	x64Parser::Coding102,
	x64Parser::Coding103,
	x64Parser::Coding104,
	x64Parser::Coding105,
	x64Parser::Coding106,
	x64Parser::Coding107,
	x64Parser::Coding108,
	x64Parser::Coding109,
	x64Parser::Coding110,
	x64Parser::Coding111,
	x64Parser::Coding112,
	x64Parser::Coding113,
	x64Parser::Coding114,
	x64Parser::Coding115,
	x64Parser::Coding116,
	x64Parser::Coding117,
	x64Parser::Coding118,
	x64Parser::Coding119,
	x64Parser::Coding120,
	x64Parser::Coding121,
	x64Parser::Coding122,
	x64Parser::Coding123,
	x64Parser::Coding124,
	x64Parser::Coding125,
	x64Parser::Coding126,
	x64Parser::Coding127,
	x64Parser::Coding128,
	x64Parser::Coding129,
	x64Parser::Coding130,
	x64Parser::Coding131,
	x64Parser::Coding132,
	x64Parser::Coding133,
	x64Parser::Coding134,
	x64Parser::Coding135,
	x64Parser::Coding136,
	x64Parser::Coding137,
	x64Parser::Coding138,
	x64Parser::Coding139,
	x64Parser::Coding140,
	x64Parser::Coding141,
	x64Parser::Coding142,
	x64Parser::Coding143,
	x64Parser::Coding144,
	x64Parser::Coding145,
	x64Parser::Coding146,
	x64Parser::Coding147,
	x64Parser::Coding148,
	x64Parser::Coding149,
	x64Parser::Coding150,
	x64Parser::Coding151,
	x64Parser::Coding152,
	x64Parser::Coding153,
	x64Parser::Coding154,
	x64Parser::Coding155,
	x64Parser::Coding156,
	x64Parser::Coding157,
	x64Parser::Coding158,
	x64Parser::Coding159,
	x64Parser::Coding160,
	x64Parser::Coding161,
	x64Parser::Coding162,
	x64Parser::Coding163,
	x64Parser::Coding164,
	x64Parser::Coding165,
	x64Parser::Coding166,
	x64Parser::Coding167,
	x64Parser::Coding168,
	x64Parser::Coding169,
	x64Parser::Coding170,
	x64Parser::Coding171,
	x64Parser::Coding172,
	x64Parser::Coding173,
	x64Parser::Coding174,
	x64Parser::Coding175,
	x64Parser::Coding176,
	x64Parser::Coding177,
	x64Parser::Coding178,
	x64Parser::Coding179,
	x64Parser::Coding180,
	x64Parser::Coding181,
	x64Parser::Coding182,
	x64Parser::Coding183,
	x64Parser::Coding184,
	x64Parser::Coding185,
	x64Parser::Coding186,
	x64Parser::Coding187,
	x64Parser::Coding188,
	x64Parser::Coding189,
	x64Parser::Coding190,
	x64Parser::Coding191,
	x64Parser::Coding192,
	x64Parser::Coding193,
	x64Parser::Coding194,
	x64Parser::Coding195,
	x64Parser::Coding196,
	x64Parser::Coding197,
	x64Parser::Coding198,
	x64Parser::Coding199,
	x64Parser::Coding200,
	x64Parser::Coding201,
	x64Parser::Coding202,
	x64Parser::Coding203,
	x64Parser::Coding204,
	x64Parser::Coding205,
	x64Parser::Coding206,
	x64Parser::Coding207,
	x64Parser::Coding208,
	x64Parser::Coding209,
	x64Parser::Coding210,
	x64Parser::Coding211,
	x64Parser::Coding212,
	x64Parser::Coding213,
	x64Parser::Coding214,
	x64Parser::Coding215,
	x64Parser::Coding216,
	x64Parser::Coding217,
	x64Parser::Coding218,
	x64Parser::Coding219,
	x64Parser::Coding220,
	x64Parser::Coding221,
	x64Parser::Coding222,
	x64Parser::Coding223,
	x64Parser::Coding224,
	x64Parser::Coding225,
	x64Parser::Coding226,
	x64Parser::Coding227,
	x64Parser::Coding228,
	x64Parser::Coding229,
	x64Parser::Coding230,
	x64Parser::Coding231,
	x64Parser::Coding232,
	x64Parser::Coding233,
	x64Parser::Coding234,
	x64Parser::Coding235,
	x64Parser::Coding236,
	x64Parser::Coding237,
	x64Parser::Coding238,
	x64Parser::Coding239,
	x64Parser::Coding240,
	x64Parser::Coding241,
	x64Parser::Coding242,
	x64Parser::Coding243,
	x64Parser::Coding244,
	x64Parser::Coding245,
	x64Parser::Coding246,
	x64Parser::Coding247,
	x64Parser::Coding248,
	x64Parser::Coding249,
	x64Parser::Coding250,
	x64Parser::Coding251,
	x64Parser::Coding252,
	x64Parser::Coding253,
	x64Parser::Coding254,
	x64Parser::Coding255,
	x64Parser::Coding256,
	x64Parser::Coding257,
	x64Parser::Coding258,
	x64Parser::Coding259,
	x64Parser::Coding260,
	x64Parser::Coding261,
	x64Parser::Coding262,
	x64Parser::Coding263,
	x64Parser::Coding264,
	x64Parser::Coding265,
	x64Parser::Coding266,
	x64Parser::Coding267,
	x64Parser::Coding268,
	x64Parser::Coding269,
	x64Parser::Coding270,
	x64Parser::Coding271,
	x64Parser::Coding272,
	x64Parser::Coding273,
	x64Parser::Coding274,
	x64Parser::Coding275,
	x64Parser::Coding276,
	x64Parser::Coding277,
	x64Parser::Coding278,
	x64Parser::Coding279,
	x64Parser::Coding280,
	x64Parser::Coding281,
	x64Parser::Coding282,
	x64Parser::Coding283,
	x64Parser::Coding284,
	x64Parser::Coding285,
	x64Parser::Coding286,
	x64Parser::Coding287,
	x64Parser::Coding288,
	x64Parser::Coding289,
	x64Parser::Coding290,
	x64Parser::Coding291,
	x64Parser::Coding292,
	x64Parser::Coding293,
	x64Parser::Coding294,
	x64Parser::Coding295,
	x64Parser::Coding296,
	x64Parser::Coding297,
	x64Parser::Coding298,
	x64Parser::Coding299,
	x64Parser::Coding300,
	x64Parser::Coding301,
	x64Parser::Coding302,
	x64Parser::Coding303,
	x64Parser::Coding304,
	x64Parser::Coding305,
	x64Parser::Coding306,
	x64Parser::Coding307,
	x64Parser::Coding308,
	x64Parser::Coding309,
	x64Parser::Coding310,
	x64Parser::Coding311,
	x64Parser::Coding312,
	x64Parser::Coding313,
	x64Parser::Coding314,
	x64Parser::Coding315,
	x64Parser::Coding316,
	x64Parser::Coding317,
	x64Parser::Coding318,
	x64Parser::Coding319,
	x64Parser::Coding320,
	x64Parser::Coding321,
	x64Parser::Coding322,
	x64Parser::Coding323,
	x64Parser::Coding324,
	x64Parser::Coding325,
	x64Parser::Coding326,
	x64Parser::Coding327,
	x64Parser::Coding328,
	x64Parser::Coding329,
	x64Parser::Coding330,
	x64Parser::Coding331,
	x64Parser::Coding332,
	x64Parser::Coding333,
	x64Parser::Coding334,
	x64Parser::Coding335,
	x64Parser::Coding336,
	x64Parser::Coding337,
	x64Parser::Coding338,
	x64Parser::Coding339,
	x64Parser::Coding340,
	x64Parser::Coding341,
	x64Parser::Coding342,
	x64Parser::Coding343,
	x64Parser::Coding344,
	x64Parser::Coding345,
	x64Parser::Coding346,
	x64Parser::Coding347,
	x64Parser::Coding348,
	x64Parser::Coding349,
	x64Parser::Coding350,
	x64Parser::Coding351,
	x64Parser::Coding352,
	x64Parser::Coding353,
	x64Parser::Coding354,
	x64Parser::Coding355,
	x64Parser::Coding356,
	x64Parser::Coding357,
	x64Parser::Coding358,
	x64Parser::Coding359,
	x64Parser::Coding360,
	x64Parser::Coding361,
	x64Parser::Coding362,
	x64Parser::Coding363,
	x64Parser::Coding364,
	x64Parser::Coding365,
	x64Parser::Coding366,
	x64Parser::Coding367,
	x64Parser::Coding368,
	x64Parser::Coding369,
	x64Parser::Coding370,
	x64Parser::Coding371,
	x64Parser::Coding372,
	x64Parser::Coding373,
	x64Parser::Coding374,
	x64Parser::Coding375,
	x64Parser::Coding376,
	x64Parser::Coding377,
	x64Parser::Coding378,
	x64Parser::Coding379,
	x64Parser::Coding380,
	x64Parser::Coding381,
	x64Parser::Coding382,
	x64Parser::Coding383,
	x64Parser::Coding384,
	x64Parser::Coding385,
	x64Parser::Coding386,
	x64Parser::Coding387,
	x64Parser::Coding388,
	x64Parser::Coding389,
	x64Parser::Coding390,
	x64Parser::Coding391,
	x64Parser::Coding392,
	x64Parser::Coding393,
	x64Parser::Coding394,
	x64Parser::Coding395,
	x64Parser::Coding396,
	x64Parser::Coding397,
	x64Parser::Coding398,
	x64Parser::Coding399,
	x64Parser::Coding400,
	x64Parser::Coding401,
	x64Parser::Coding402,
	x64Parser::Coding403,
	x64Parser::Coding404,
	x64Parser::Coding405,
	x64Parser::Coding406,
	x64Parser::Coding407,
	x64Parser::Coding408,
	x64Parser::Coding409,
	x64Parser::Coding410,
	x64Parser::Coding411,
	x64Parser::Coding412,
	x64Parser::Coding413,
	x64Parser::Coding414,
	x64Parser::Coding415,
	x64Parser::Coding416,
	x64Parser::Coding417,
	x64Parser::Coding418,
	x64Parser::Coding419,
	x64Parser::Coding420,
	x64Parser::Coding421,
	x64Parser::Coding422,
	x64Parser::Coding423,
	x64Parser::Coding424,
	x64Parser::Coding425,
	x64Parser::Coding426,
	x64Parser::Coding427,
	x64Parser::Coding428,
	x64Parser::Coding429,
	x64Parser::Coding430,
	x64Parser::Coding431,
	x64Parser::Coding432,
	x64Parser::Coding433,
	x64Parser::Coding434,
	x64Parser::Coding435,
	x64Parser::Coding436,
	x64Parser::Coding437,
	x64Parser::Coding438,
	x64Parser::Coding439,
	x64Parser::Coding440,
	x64Parser::Coding441,
	x64Parser::Coding442,
	x64Parser::Coding443,
	x64Parser::Coding444,
	x64Parser::Coding445,
	x64Parser::Coding446,
	x64Parser::Coding447,
	x64Parser::Coding448,
	x64Parser::Coding449,
	x64Parser::Coding450,
	x64Parser::Coding451,
	x64Parser::Coding452,
	x64Parser::Coding453,
	x64Parser::Coding454,
	x64Parser::Coding455,
	x64Parser::Coding456,
	x64Parser::Coding457,
	x64Parser::Coding458,
	x64Parser::Coding459,
	x64Parser::Coding460,
	x64Parser::Coding461,
	x64Parser::Coding462,
	x64Parser::Coding463,
	x64Parser::Coding464,
	x64Parser::Coding465,
	x64Parser::Coding466,
	x64Parser::Coding467,
	x64Parser::Coding468,
	x64Parser::Coding469,
	x64Parser::Coding470,
	x64Parser::Coding471,
	x64Parser::Coding472,
	x64Parser::Coding473,
	x64Parser::Coding474,
	x64Parser::Coding475,
	x64Parser::Coding476,
	x64Parser::Coding477,
	x64Parser::Coding478,
	x64Parser::Coding479,
	x64Parser::Coding480,
	x64Parser::Coding481,
	x64Parser::Coding482,
	x64Parser::Coding483,
	x64Parser::Coding484,
	x64Parser::Coding485,
	x64Parser::Coding486,
	x64Parser::Coding487,
	x64Parser::Coding488,
	x64Parser::Coding489,
	x64Parser::Coding490,
	x64Parser::Coding491,
	x64Parser::Coding492,
	x64Parser::Coding493,
	x64Parser::Coding494,
	x64Parser::Coding495,
	x64Parser::Coding496,
	x64Parser::Coding497,
	x64Parser::Coding498,
	x64Parser::Coding499,
	x64Parser::Coding500,
	x64Parser::Coding501,
	x64Parser::Coding502,
	x64Parser::Coding503,
	x64Parser::Coding504,
	x64Parser::Coding505,
	x64Parser::Coding506,
	x64Parser::Coding507,
	x64Parser::Coding508,
	x64Parser::Coding509,
	x64Parser::Coding510,
	x64Parser::Coding511,
	x64Parser::Coding512,
	x64Parser::Coding513,
	x64Parser::Coding514,
	x64Parser::Coding515,
	x64Parser::Coding516,
	x64Parser::Coding517,
};
Coding x64Parser::prefixCoding1[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding2[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding3[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding4[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding5[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding6[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding7[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding8[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding9[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding x64Parser::prefixCoding10[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, -1, 0, 0 }, 
	{ Coding::eot },
};
Coding *x64Parser::prefixCodings[] = {
	x64Parser::prefixCoding1,
	x64Parser::prefixCoding2,
	x64Parser::prefixCoding3,
	x64Parser::prefixCoding4,
	x64Parser::prefixCoding5,
	x64Parser::prefixCoding6,
	x64Parser::prefixCoding7,
	x64Parser::prefixCoding8,
	x64Parser::prefixCoding9,
	x64Parser::prefixCoding10,
};
bool x64Parser::MatchesToken(int token, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::TOKEN && inputTokens[tokenPos]->val->ival == token;
}
	bool x64Parser::MatchesRegister(int reg, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER && inputTokens[tokenPos]->val->ival == reg;
}
	bool x64Parser::MatchesRegisterClass(int cclass, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER && (registerDataIndirect[cclass][inputTokens[tokenPos]->val->ival >> 3] & (1 << (inputTokens[tokenPos]->val->ival & 7)));
}
bool x64Parser::ParseAddresses(x64Operand &operand, int addrClass, int &tokenPos)
{
	int level = 0;
	bool rv = false;
	x64Token *t = tokenBranches1;
	while (t->type != x64Token::EOT)
	{
		bool matches = false;
		if (t->addrClass[addrClass >> 3] & (1 << (addrClass & 7)))
		{
			switch (t->type)
			{
				case x64Token::EMPTY:
					matches = true;
					break;
				case x64Token::TOKEN:
					matches = MatchesToken(t->id, tokenPos);
					break;
				case x64Token::REGISTER:
					matches = MatchesRegister(t->id, tokenPos);
					break;
				case x64Token::REGISTERCLASS:
					matches = MatchesRegisterClass(t->id, tokenPos);
					break;
				case x64Token::NUMBER:
					if (tokenPos < inputTokens.size())
						matches = (this->*numberFuncs[t->id])(tokenPos);
					break;
				default:
					matches = false;
					break;
			}
		}
		if (!matches)
		{
			if (t->level > level)
			{
				t = t->next;
				continue;
			}
		}
		else
			level = t->level;
		if (matches)
		{
			if (t->tokenFunc)
				(this->*(t->tokenFunc))(operand, tokenPos);
			if (t->eos && (tokenPos == inputTokens.size()-1 || !t->next))
			{
				rv = true;
				break;
			}
			t = t->next;
			tokenPos++;
		}
		else
		{
			t++;
		}
	}
	return rv;
}

bool x64Parser::ParseOperands2(x64Token *tokenList, x64Operand &operand, int tokenPos, int level)
{
	bool rv = false;
	x64Token *t = tokenList;
	while (t && t->type != x64Token::EOT)
	{
		bool matches = false;
		int last = tokenPos;
		switch (t->type)
		{
			case x64Token::EMPTY:
				matches = true;
				break;
			case x64Token::TOKEN:
				matches = MatchesToken(t->id, tokenPos);
				break;
			case x64Token::REGISTER:
				matches = MatchesRegister(t->id, tokenPos);
				break;
			case x64Token::REGISTERCLASS:
				matches = MatchesRegisterClass(t->id,tokenPos);
				break;
			case x64Token::ADDRESSCLASS:
				matches = ParseAddresses(operand, t->id, tokenPos);
				break;
			case x64Token::NUMBER:
				if (tokenPos < inputTokens.size())
					matches = (this->*numberFuncs[t->id])(tokenPos);
				break;
			default:
				matches = false;
				break;
		}
		if (!matches)
		{
			if (t->level > level)
			{
				if (ParseOperands2(t->next, operand, tokenPos, t->level))
				{
					rv = true;
					break;
				}
			}
		}
		else
		{
			if (t->tokenFunc)
				(this->*(t->tokenFunc))(operand, last);
			if (t->eos && (!t->next || tokenPos == inputTokens.size()-1))
			{
				if (tokenPos >= (int)(inputTokens.size()-1))
					eol = true;
				rv = true;
				break;
			}
			if (tokenPos < inputTokens.size() && ParseOperands2(t->next, operand, tokenPos+1, t->level))
			{
				rv = true;
				break;
			}
		}
		tokenPos = last;
		t++;
	}
	return rv;
}

bool x64Parser::ParseOperands(x64Token *tokenList, x64Operand &operand)
{
	return ParseOperands2(tokenList, operand, 0, 0);
}

bool x64Parser::ProcessCoding(x64Operand &operand, Coding *coding, int field, int bits, int* arr, char* bitcounts, char *func, int &index)
{
	int acc = 0, binary = 0;
	while (coding->type != Coding::eot)
	{
		if (coding->type & Coding::bitSpecified)
			bits = coding->bits;
		if (coding->type & Coding::valSpecified)
		{
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = coding->val;
		}
		else if (coding->type & Coding::reg)
		{
			int n = coding->val;
			if (field != -1)
				n = registerValues[n][field];
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = n;
		}
		else if (coding->type & Coding::stateFunc)
		{
			Coding *c = (this->*stateFuncs[coding->val])();
			int index1 = index;
			if (!ProcessCoding(operand, c, coding->field, bits, arr, bitcounts, func, index))
				return false;
			if (index != index1 && coding->binary)
				func[index - 1] = coding->binary;
		}
		else if (coding->type & Coding::stateVar)
		{
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = stateVars[coding->val];
		}
		else if (coding->type & Coding::number)
		{
			int n = coding->val;
			auto it = operands.begin();
			for (int i = 0; i < n; i++)
			{
				++it;
			}
			(*it)->used = true;
			(*it)->pos = this->bits.GetBits();
			func[index] = coding->binary;
			bitcounts[index] = bits;
			arr[index++] = (*it)->node->ival;
		}
		else if (coding->type & Coding::native)
		{
			if (operand.addressCoding == -1)
				return false;
			int index1 = index;
			if (!ProcessCoding(operand, Codings[operand.addressCoding], coding->field, bits, arr, bitcounts, func, index))
				return false;
			if (index != index1 && coding->binary)
				func[index - 1] = coding->binary;
		}
		else if (coding->type & Coding::indirect)
		{
			if (!operand.values[coding->val])
			{
				if (!(coding->type & Coding::optional))
				{
					return false;
				}
			}
			else
			{
				int index1 = index;
				if (!ProcessCoding(operand, operand.values[coding->val], coding->field, bits, arr, bitcounts, func, index))
					return false;
				if (index != index1 && coding->binary)
					func[index - 1] = coding->binary;
			}
		}
		else if (coding->type & Coding::illegal)
		{
			return false;
		}
		else
		{
			return false;
		}
		coding++;
	}
	return true;
}
bool x64Parser::ProcessCoding(x64Operand &operand, Coding *coding)
{
	int arr[1000];
	char bitcount[1000];
	char func[1000];
	int index = 0;
	if (coding->type == Coding::eot)
		return true;
	int defaultBits = 8;
	bool rv = ProcessCoding(operand, coding, -1, defaultBits, arr, bitcount, func, index);
	if (rv)
	{
		for (int i = 0; i < index; i++)
		{
			if (func[i])
				arr[i + 1] = DoMath(func[i], arr[i], arr[i + 1]);
			else
				bits.Add(arr[i], bitcount[i]);
		}
	}
	return rv;
}
bool x64Parser::DispatchOpcode(int opcode)
{
	bool rv;
	if (opcode == -1)
	{
		rv = true;
		x64Operand operand;
		for (auto& a : prefixes)
			rv &= ProcessCoding(operand, prefixCodings[a]);
	}
	else
	{
		x64Operand operand;
		operand.opcode = opcode;
		rv = (this->*DispatchTable[opcode])(operand);
		if (rv)
		{
			for (auto& a : prefixes)
				rv &= ProcessCoding(operand, prefixCodings[a]);
			if (rv)
			{
				if (operand.operandCoding != -1)
					rv = ProcessCoding(operand, Codings[operand.operandCoding]);
				else if (operand.addressCoding != -1)
					rv = ProcessCoding(operand, Codings[operand.addressCoding]);
				else rv = false;
			}
		}
	}
	return rv;
}
