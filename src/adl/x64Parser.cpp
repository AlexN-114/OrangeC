#include "InstructionParser.h"
#include "x64Operand.h"
#include "x64Parser.h"

InstructionParser *InstructionParser::GetInstance()
{
	return static_cast<InstructionParser *>(new x64Parser());
}
Coding x64Parser::stateCoding_eot[] = { { Coding::eot } };
Coding x64Parser::stateCoding1_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding1_2[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8},
	{ Coding::eot },
};
Coding x64Parser::stateCoding2_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8},
	{ Coding::eot },
};
Coding x64Parser::stateCoding2_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding2_3[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8},
	{ Coding::eot },
};
Coding x64Parser::stateCoding3_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding4_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding4_2[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::stateCoding5_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::stateCoding5_2[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding5_3[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::stateCoding6_1[] = {
	{ Coding::eot },
};
Coding x64Parser::stateCoding7_1[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4},
	{ Coding::eot },
};
Coding *x64Parser::StateFunc1()
{
	if (stateVars[0]==16)
	{
		return stateCoding1_1;
	}
	if (stateVars[0]==32)
	{
		return stateCoding1_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc2()
{
	if (stateVars[0]==16)
	{
		return stateCoding2_1;
	}
	if (stateVars[0]==32)
	{
		return stateCoding2_2;
	}
	if (stateVars[0]==64)
	{
		return stateCoding2_3;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc3()
{
	if (true)
	{
		return stateCoding3_1;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc4()
{
	if (stateVars[0]==16)
	{
		return stateCoding4_1;
	}
	if (stateVars[0]==32)
	{
		return stateCoding4_2;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc5()
{
	if (stateVars[0]==16)
	{
		return stateCoding5_1;
	}
	if (stateVars[0]==32)
	{
		return stateCoding5_2;
	}
	if (stateVars[0]==64)
	{
		return stateCoding5_3;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc6()
{
	if (true)
	{
		return stateCoding6_1;
	}
	return stateCoding_eot;
}
Coding *x64Parser::StateFunc7()
{
	if (true)
	{
		return stateCoding7_1;
	}
	return stateCoding_eot;
}
x64Parser::StateFuncDispatchType x64Parser::stateFuncs[] = {
	&x64Parser::StateFunc1,
	&x64Parser::StateFunc2,
	&x64Parser::StateFunc3,
	&x64Parser::StateFunc4,
	&x64Parser::StateFunc5,
	&x64Parser::StateFunc6,
	&x64Parser::StateFunc7,
};
bool x64Parser::Number1(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 1, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number2(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 1, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number3(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 6, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number4(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 8, 1, tokenPos);
	}
	return rv;
}
bool x64Parser::Number5(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number6(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number7(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(0, 0, 64, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number8(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(0, 0, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number9(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==32)
	{
		rv = ParseNumber(0, 0, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number10(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==32)
	{
		rv = ParseNumber(0, 0, 64, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number11(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(1, 1, 8, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number12(int tokenPos)
{
	bool rv = false;
	if (!rv)
	{
		rv = ParseNumber(-1, 1, 8, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number13(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number14(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(-2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number15(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number16(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]==16)
	{
		rv = ParseNumber(-2, 1, 16, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number17(int tokenPos)
{
	bool rv = false;
	if (!rv && stateVars[0]!=16)
	{
		rv = ParseNumber(4, 1, 32, 0, tokenPos);
	}
	return rv;
}
bool x64Parser::Number18(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 1, 0);
	if (!rv)
		rv = SetNumber(tokenPos, 2, 1);
	if (!rv)
		rv = SetNumber(tokenPos, 4, 2);
	if (!rv)
		rv = SetNumber(tokenPos, 8, 3);
	return rv;
}
bool x64Parser::Number19(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 0, 0);
	return rv;
}
bool x64Parser::Number20(int tokenPos)
{
	bool rv = false;
	if (!rv)
		rv = SetNumber(tokenPos, 1, 1);
	return rv;
}
x64Parser::NumberDispatchType x64Parser::numberFuncs[] = {
	&x64Parser::Number1,
	&x64Parser::Number2,
	&x64Parser::Number3,
	&x64Parser::Number4,
	&x64Parser::Number5,
	&x64Parser::Number6,
	&x64Parser::Number7,
	&x64Parser::Number8,
	&x64Parser::Number9,
	&x64Parser::Number10,
	&x64Parser::Number11,
	&x64Parser::Number12,
	&x64Parser::Number13,
	&x64Parser::Number14,
	&x64Parser::Number15,
	&x64Parser::Number16,
	&x64Parser::Number17,
	&x64Parser::Number18,
	&x64Parser::Number19,
	&x64Parser::Number20,
};

unsigned char x64Parser::RegClassData1[] = {255, 255, 7, 0, 0, };
unsigned char x64Parser::RegClassData2[] = {255, 0, 0, 0, 0, };
unsigned char x64Parser::RegClassData3[] = {255, 7, 0, 0, 0, };
unsigned char x64Parser::RegClassData4[] = {127, 255, 7, 0, 0, };
unsigned char x64Parser::RegClassData5[] = {127, 7, 0, 0, 0, };
unsigned char x64Parser::RegClassData6[] = {2, 249, 7, 0, 0, };
unsigned char x64Parser::RegClassData7[] = {9, 32, 8, 0, 0, };
unsigned char x64Parser::RegClassData8[] = {17, 64, 16, 0, 0, };
unsigned char x64Parser::RegClassData9[] = {33, 128, 32, 0, 0, };
unsigned char x64Parser::RegClassData10[] = {64, 0, 1, 0, 0, };
unsigned char x64Parser::RegClassData11[] = {0, 0, 64, 0, 0, };
unsigned char x64Parser::RegClassData12[] = {4, 16, 128, 0, 0, };
unsigned char x64Parser::RegClassData13[] = {0, 32, 0, 3, 0, };
unsigned char x64Parser::RegClassData14[] = {0, 64, 0, 12, 0, };
unsigned char x64Parser::RegClassData15[] = {0, 128, 0, 48, 0, };
unsigned char x64Parser::RegClassData16[] = {0, 0, 1, 192, 0, };
unsigned char x64Parser::RegClassData17[] = {0, 0, 0, 0, 3, };
unsigned char x64Parser::RegClassData18[] = {0, 0, 0, 0, 12, };
unsigned char x64Parser::RegClassData19[] = {0, 0, 0, 0, 48, };

unsigned char x64Parser::registerData22[] = {0, 0, 0, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData7[] = {8, 16, 32, 64, 64, 64, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData10[] = {136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData13[] = {16, 32, 64, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData16[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData31[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, 0, };
unsigned char x64Parser::registerData32[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, };
unsigned char x64Parser::registerData30[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, 0, 0, 0, };
unsigned char x64Parser::registerData1[] = {255, 255, 255, 255, 15, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData5[] = {2, 4, 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData24[] = {0, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData8[] = {8, 16, 32, 64, 0, 64, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData11[] = {136, 16, 33, 66, 4, 64, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData14[] = {16, 32, 64, 128, 0, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData17[] = {16, 33, 66, 132, 8, 128, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData4[] = {33, 66, 132, 8, 17, 17, 17, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData21[] = {0, 0, 0, 120, 0, 0, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData6[] = {4, 8, 16, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData20[] = {64, 128, 0, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData9[] = {8, 16, 32, 64, 64, 64, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData12[] = {136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData15[] = {16, 32, 64, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData18[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData19[] = {16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData2[] = {3, 6, 12, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData3[] = {33, 66, 132, 8, 17, 17, 17, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData26[] = {0, 0, 0, 0, 0, 0, 0, 0, 144, 36, 73, 2, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData25[] = {0, 0, 0, 0, 0, 0, 0, 0, 240, 255, 255, 15, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData27[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 146, 4, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData29[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 3, 0, 0, 0, 0, };
unsigned char x64Parser::registerData28[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 36, 9, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData23[] = {0, 0, 0, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
unsigned char x64Parser::registerData33[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 3, };

unsigned char *x64Parser::registerDataIndirect[] = {
	registerData1,
	registerData2,
	registerData3,
	registerData4,
	registerData5,
	registerData6,
	registerData7,
	registerData8,
	registerData9,
	registerData10,
	registerData11,
	registerData12,
	registerData13,
	registerData14,
	registerData15,
	registerData16,
	registerData17,
	registerData18,
	registerData19,
	registerData20,
	registerData21,
	registerData22,
	registerData23,
	registerData24,
	registerData25,
	registerData26,
	registerData27,
	registerData28,
	registerData29,
	registerData30,
	registerData31,
	registerData32,
	registerData33,
};

int x64Parser::registerValues[][6] = {
	{ 0, 0, 0, -1, -1, -1, },
	{ 4, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 8, -1, -1, -1, },
	{ 0, 4, 0, -1, -1, -1, },
	{ 0, 4, 0, -1, -1, -1, },
	{ 0, 4, 0, -1, -1, -1, },
	{ 0, 4, 8, -1, -1, -1, },
	{ 1, 0, 0, -1, -1, -1, },
	{ 5, 0, 0, -1, -1, -1, },
	{ 1, 0, 0, -1, -1, -1, },
	{ 1, 0, 0, -1, -1, -1, },
	{ 1, 0, 8, -1, -1, -1, },
	{ 1, 4, 0, -1, -1, -1, },
	{ 1, 4, 0, -1, -1, -1, },
	{ 1, 4, 0, -1, -1, -1, },
	{ 1, 4, 8, -1, -1, -1, },
	{ 2, 0, 0, -1, -1, -1, },
	{ 6, 0, 0, -1, -1, -1, },
	{ 2, 0, 0, -1, -1, -1, },
	{ 2, 0, 0, -1, -1, -1, },
	{ 2, 0, 8, -1, -1, -1, },
	{ 2, 4, 0, -1, -1, -1, },
	{ 2, 4, 0, -1, -1, -1, },
	{ 2, 4, 0, -1, -1, -1, },
	{ 2, 4, 8, -1, -1, -1, },
	{ 3, 0, 0, -1, -1, -1, },
	{ 7, 0, 0, -1, -1, -1, },
	{ 3, 0, 0, 0, -1, -1, },
	{ 3, 0, 0, -1, -1, -1, },
	{ 3, 0, 8, -1, -1, -1, },
	{ 3, 4, 0, -1, -1, -1, },
	{ 3, 4, 0, -1, -1, -1, },
	{ 3, 4, 0, -1, -1, -1, },
	{ 3, 4, 8, -1, -1, -1, },
	{ 4, 0, 0, -1, -1, -1, },
	{ 4, 0, 0, -1, -1, -1, },
	{ 4, 0, 0, -1, -1, -1, },
	{ 4, 0, 8, -1, -1, -1, },
	{ 4, 4, 0, -1, -1, -1, },
	{ 4, 4, 0, -1, -1, -1, },
	{ 4, 4, 0, -1, -1, -1, },
	{ 4, 4, 8, -1, -1, -1, },
	{ 5, 0, 0, -1, -1, -1, },
	{ 5, 0, 0, 1, -1, -1, },
	{ 5, 0, 0, -1, -1, -1, },
	{ 5, 0, 8, -1, -1, -1, },
	{ 5, 4, 0, -1, -1, -1, },
	{ 5, 4, 0, -1, -1, -1, },
	{ 5, 4, 0, -1, -1, -1, },
	{ 5, 4, 8, -1, -1, -1, },
	{ 6, 0, 0, -1, -1, -1, },
	{ 6, 0, 0, -1, 0, -1, },
	{ 6, 0, 0, -1, -1, -1, },
	{ 6, 0, 8, -1, -1, -1, },
	{ 6, 4, 0, -1, -1, -1, },
	{ 6, 4, 0, -1, -1, -1, },
	{ 6, 4, 0, -1, -1, -1, },
	{ 6, 4, 8, -1, -1, -1, },
	{ 7, 0, 0, -1, -1, -1, },
	{ 7, 0, 0, -1, 1, -1, },
	{ 7, 0, 0, -1, -1, -1, },
	{ 7, 0, 8, -1, -1, -1, },
	{ 7, 4, 0, -1, -1, -1, },
	{ 7, 4, 0, -1, -1, -1, },
	{ 7, 4, 0, -1, -1, -1, },
	{ 7, 4, 8, -1, -1, -1, },
	{ 0, 0, 0, -1, -1, -1, },
	{ 0, 0, 0, -1, -1, -1, },
	{ 0, 4, 0, -1, -1, -1, },
	{ 1, 0, 0, -1, -1, -1, },
	{ 1, 0, 0, -1, -1, -1, },
	{ 1, 4, 0, -1, -1, -1, },
	{ 2, 0, 0, -1, -1, -1, },
	{ 2, 0, 0, -1, -1, -1, },
	{ 2, 4, 0, -1, -1, -1, },
	{ 3, 0, 0, -1, -1, -1, },
	{ 3, 0, 0, -1, -1, -1, },
	{ 3, 4, 0, -1, -1, -1, },
	{ 4, 0, 0, -1, -1, -1, },
	{ 4, 0, 0, -1, -1, -1, },
	{ 4, 4, 0, -1, -1, -1, },
	{ 5, 0, 0, -1, -1, -1, },
	{ 5, 0, 0, -1, -1, -1, },
	{ 5, 4, 0, -1, -1, -1, },
	{ 6, 0, 0, -1, -1, -1, },
	{ 6, 0, 0, -1, -1, -1, },
	{ 6, 4, 0, -1, -1, -1, },
	{ 7, 0, 0, -1, -1, -1, },
	{ 7, 0, 0, -1, -1, -1, },
	{ 7, 4, 0, -1, -1, -1, },
	{ 0, -1, -1, -1, -1, 38, },
	{ 1, -1, -1, -1, -1, 46, },
	{ 2, -1, -1, -1, -1, 54, },
	{ 3, -1, -1, -1, -1, 62, },
	{ 4, -1, -1, -1, -1, 100, },
	{ 5, -1, -1, -1, -1, 101, },
	{ 0, -1, -1, -1, -1, -1, },
	{ 1, -1, -1, -1, -1, -1, },
	{ 2, -1, -1, -1, -1, -1, },
	{ 3, -1, -1, -1, -1, -1, },
	{ 4, -1, -1, -1, -1, -1, },
	{ 5, -1, -1, -1, -1, -1, },
	{ 6, -1, -1, -1, -1, -1, },
	{ 7, -1, -1, -1, -1, -1, },
	{ 0, -1, -1, -1, -1, -1, },
	{ 1, -1, -1, -1, -1, -1, },
	{ 2, -1, -1, -1, -1, -1, },
	{ 3, -1, -1, -1, -1, -1, },
	{ 4, -1, -1, -1, -1, -1, },
	{ 5, -1, -1, -1, -1, -1, },
	{ 6, -1, -1, -1, -1, -1, },
	{ 7, -1, -1, -1, -1, -1, },
	{ 0, -1, -1, -1, -1, -1, },
	{ 1, -1, -1, -1, -1, -1, },
	{ 2, -1, -1, -1, -1, -1, },
	{ 3, -1, -1, -1, -1, -1, },
	{ 4, -1, -1, -1, -1, -1, },
	{ 5, -1, -1, -1, -1, -1, },
	{ 6, -1, -1, -1, -1, -1, },
	{ 7, -1, -1, -1, -1, -1, },
	{ 0, -1, -1, -1, -1, -1, },
	{ 1, -1, -1, -1, -1, -1, },
	{ 2, -1, -1, -1, -1, -1, },
	{ 3, -1, -1, -1, -1, -1, },
	{ 4, -1, -1, -1, -1, -1, },
	{ 5, -1, -1, -1, -1, -1, },
	{ 6, -1, -1, -1, -1, -1, },
	{ 7, -1, -1, -1, -1, -1, },
};

void x64Parser::Init()
{
	memset(&stateVars, 0, sizeof(stateVars));
	stateVars[0] = 16;
	tokenTable[""] = 0;
	tokenTable["*"] = 5;
	tokenTable["+"] = 4;
	tokenTable[","] = 9;
	tokenTable[":"] = 3;
	tokenTable["["] = 1;
	tokenTable["]"] = 2;
	tokenTable["byte"] = 13;
	tokenTable["dword"] = 11;
	tokenTable["eip"] = 6;
	tokenTable["far"] = 17;
	tokenTable["near"] = 16;
	tokenTable["qword"] = 12;
	tokenTable["rip"] = 7;
	tokenTable["short"] = 15;
	tokenTable["tword"] = 14;
	tokenTable["word"] = 10;
	tokenTable["al"] = 1000;
	tokenTable["ah"] = 1001;
	tokenTable["ax"] = 1002;
	tokenTable["eax"] = 1003;
	tokenTable["rax"] = 1004;
	tokenTable["r8b"] = 1005;
	tokenTable["r8w"] = 1006;
	tokenTable["r8d"] = 1007;
	tokenTable["r8"] = 1008;
	tokenTable["cl"] = 1009;
	tokenTable["ch"] = 1010;
	tokenTable["cx"] = 1011;
	tokenTable["ecx"] = 1012;
	tokenTable["rcx"] = 1013;
	tokenTable["r9b"] = 1014;
	tokenTable["r9w"] = 1015;
	tokenTable["r9d"] = 1016;
	tokenTable["r9"] = 1017;
	tokenTable["dl"] = 1018;
	tokenTable["dh"] = 1019;
	tokenTable["dx"] = 1020;
	tokenTable["edx"] = 1021;
	tokenTable["rdx"] = 1022;
	tokenTable["r10b"] = 1023;
	tokenTable["r10w"] = 1024;
	tokenTable["r10d"] = 1025;
	tokenTable["r10"] = 1026;
	tokenTable["bl"] = 1027;
	tokenTable["bh"] = 1028;
	tokenTable["bx"] = 1029;
	tokenTable["ebx"] = 1030;
	tokenTable["rbx"] = 1031;
	tokenTable["r11b"] = 1032;
	tokenTable["r11w"] = 1033;
	tokenTable["r11d"] = 1034;
	tokenTable["r11"] = 1035;
	tokenTable["spl"] = 1036;
	tokenTable["sp"] = 1037;
	tokenTable["esp"] = 1038;
	tokenTable["rsp"] = 1039;
	tokenTable["r12b"] = 1040;
	tokenTable["r12w"] = 1041;
	tokenTable["r12d"] = 1042;
	tokenTable["r12"] = 1043;
	tokenTable["bpl"] = 1044;
	tokenTable["bp"] = 1045;
	tokenTable["ebp"] = 1046;
	tokenTable["rbp"] = 1047;
	tokenTable["r13b"] = 1048;
	tokenTable["r13w"] = 1049;
	tokenTable["r13d"] = 1050;
	tokenTable["r13"] = 1051;
	tokenTable["sil"] = 1052;
	tokenTable["si"] = 1053;
	tokenTable["esi"] = 1054;
	tokenTable["rsi"] = 1055;
	tokenTable["r14b"] = 1056;
	tokenTable["r14w"] = 1057;
	tokenTable["r14d"] = 1058;
	tokenTable["r14"] = 1059;
	tokenTable["dil"] = 1060;
	tokenTable["di"] = 1061;
	tokenTable["edi"] = 1062;
	tokenTable["rdi"] = 1063;
	tokenTable["r15b"] = 1064;
	tokenTable["r15w"] = 1065;
	tokenTable["r15d"] = 1066;
	tokenTable["r15"] = 1067;
	tokenTable["mm0"] = 1068;
	tokenTable["xmm0"] = 1069;
	tokenTable["xmm8"] = 1070;
	tokenTable["mm1"] = 1071;
	tokenTable["xmm1"] = 1072;
	tokenTable["xmm9"] = 1073;
	tokenTable["mm2"] = 1074;
	tokenTable["xmm2"] = 1075;
	tokenTable["xmm10"] = 1076;
	tokenTable["mm3"] = 1077;
	tokenTable["xmm3"] = 1078;
	tokenTable["xmm11"] = 1079;
	tokenTable["mm4"] = 1080;
	tokenTable["xmm4"] = 1081;
	tokenTable["xmm12"] = 1082;
	tokenTable["mm5"] = 1083;
	tokenTable["xmm5"] = 1084;
	tokenTable["xmm13"] = 1085;
	tokenTable["mm6"] = 1086;
	tokenTable["xmm6"] = 1087;
	tokenTable["xmm14"] = 1088;
	tokenTable["mm7"] = 1089;
	tokenTable["xmm7"] = 1090;
	tokenTable["xmm15"] = 1091;
	tokenTable["es"] = 1092;
	tokenTable["cs"] = 1093;
	tokenTable["ss"] = 1094;
	tokenTable["ds"] = 1095;
	tokenTable["fs"] = 1096;
	tokenTable["gs"] = 1097;
	tokenTable["st0"] = 1098;
	tokenTable["st1"] = 1099;
	tokenTable["st2"] = 1100;
	tokenTable["st3"] = 1101;
	tokenTable["st4"] = 1102;
	tokenTable["st5"] = 1103;
	tokenTable["st6"] = 1104;
	tokenTable["st7"] = 1105;
	tokenTable["cr0"] = 1106;
	tokenTable["cr1"] = 1107;
	tokenTable["cr2"] = 1108;
	tokenTable["cr3"] = 1109;
	tokenTable["cr4"] = 1110;
	tokenTable["cr5"] = 1111;
	tokenTable["cr6"] = 1112;
	tokenTable["cr7"] = 1113;
	tokenTable["dr0"] = 1114;
	tokenTable["dr1"] = 1115;
	tokenTable["dr2"] = 1116;
	tokenTable["dr3"] = 1117;
	tokenTable["dr4"] = 1118;
	tokenTable["dr5"] = 1119;
	tokenTable["dr6"] = 1120;
	tokenTable["dr7"] = 1121;
	tokenTable["tr0"] = 1122;
	tokenTable["tr1"] = 1123;
	tokenTable["tr2"] = 1124;
	tokenTable["tr3"] = 1125;
	tokenTable["tr4"] = 1126;
	tokenTable["tr5"] = 1127;
	tokenTable["tr6"] = 1128;
	tokenTable["tr7"] = 1129;
	opcodeTable["aaa"] = 32;
	opcodeTable["aad"] = 33;
	opcodeTable["aam"] = 34;
	opcodeTable["aas"] = 35;
	opcodeTable["adc"] = 36;
	opcodeTable["add"] = 37;
	opcodeTable["and"] = 38;
	opcodeTable["arpl"] = 39;
	opcodeTable["bound"] = 40;
	opcodeTable["bsf"] = 41;
	opcodeTable["bsr"] = 42;
	opcodeTable["bswap"] = 43;
	opcodeTable["bt"] = 44;
	opcodeTable["btc"] = 45;
	opcodeTable["btr"] = 46;
	opcodeTable["bts"] = 47;
	opcodeTable["call"] = 48;
	opcodeTable["cbw"] = 49;
	opcodeTable["cdq"] = 50;
	opcodeTable["cdqe"] = 51;
	opcodeTable["clc"] = 52;
	opcodeTable["cld"] = 53;
	opcodeTable["cli"] = 54;
	opcodeTable["clts"] = 55;
	opcodeTable["cmc"] = 56;
	opcodeTable["cmova"] = 57;
	opcodeTable["cmovae"] = 58;
	opcodeTable["cmovb"] = 59;
	opcodeTable["cmovbe"] = 60;
	opcodeTable["cmovc"] = 61;
	opcodeTable["cmove"] = 62;
	opcodeTable["cmovg"] = 63;
	opcodeTable["cmovge"] = 64;
	opcodeTable["cmovl"] = 65;
	opcodeTable["cmovle"] = 66;
	opcodeTable["cmovna"] = 67;
	opcodeTable["cmovnae"] = 68;
	opcodeTable["cmovnb"] = 69;
	opcodeTable["cmovnbe"] = 70;
	opcodeTable["cmovnc"] = 71;
	opcodeTable["cmovne"] = 72;
	opcodeTable["cmovng"] = 73;
	opcodeTable["cmovnge"] = 74;
	opcodeTable["cmovnl"] = 75;
	opcodeTable["cmovnle"] = 76;
	opcodeTable["cmovno"] = 77;
	opcodeTable["cmovnp"] = 78;
	opcodeTable["cmovns"] = 79;
	opcodeTable["cmovnz"] = 80;
	opcodeTable["cmovo"] = 81;
	opcodeTable["cmovp"] = 82;
	opcodeTable["cmovpe"] = 83;
	opcodeTable["cmovpo"] = 84;
	opcodeTable["cmovs"] = 85;
	opcodeTable["cmovz"] = 86;
	opcodeTable["cmp"] = 87;
	opcodeTable["cmps"] = 88;
	opcodeTable["cmpsb"] = 89;
	opcodeTable["cmpsw"] = 90;
	opcodeTable["cmpsd"] = 91;
	opcodeTable["cmpsq"] = 92;
	opcodeTable["cmpxchg"] = 93;
	opcodeTable["cmpxchg8b"] = 94;
	opcodeTable["cmpxchg16b"] = 95;
	opcodeTable["cpuid"] = 96;
	opcodeTable["cqo"] = 97;
	opcodeTable["cwd"] = 98;
	opcodeTable["cwde"] = 99;
	opcodeTable["daa"] = 100;
	opcodeTable["das"] = 101;
	opcodeTable["dec"] = 102;
	opcodeTable["div"] = 103;
	opcodeTable["enter"] = 104;
	opcodeTable["esc"] = 105;
	opcodeTable["f2xm1"] = 106;
	opcodeTable["fabs"] = 107;
	opcodeTable["fadd"] = 108;
	opcodeTable["faddp"] = 109;
	opcodeTable["fbld"] = 110;
	opcodeTable["fbstp"] = 111;
	opcodeTable["fchs"] = 112;
	opcodeTable["fclex"] = 113;
	opcodeTable["fnclex"] = 114;
	opcodeTable["fcmovb"] = 115;
	opcodeTable["fcmovbe"] = 116;
	opcodeTable["fcmove"] = 117;
	opcodeTable["fcmovnb"] = 118;
	opcodeTable["fcmovnbe"] = 119;
	opcodeTable["fcmovne"] = 120;
	opcodeTable["fcmovnu"] = 121;
	opcodeTable["fcmovu"] = 122;
	opcodeTable["fcom"] = 123;
	opcodeTable["fcom2"] = 124;
	opcodeTable["fcomi"] = 125;
	opcodeTable["fcomip"] = 126;
	opcodeTable["fcomp"] = 127;
	opcodeTable["fcomp3"] = 128;
	opcodeTable["fcomp5"] = 129;
	opcodeTable["fcompp"] = 130;
	opcodeTable["fcos"] = 131;
	opcodeTable["fdecstp"] = 132;
	opcodeTable["fdisi"] = 133;
	opcodeTable["fdiv"] = 134;
	opcodeTable["fdivp"] = 135;
	opcodeTable["fdivr"] = 136;
	opcodeTable["fdivrp"] = 137;
	opcodeTable["feni"] = 138;
	opcodeTable["ffree"] = 139;
	opcodeTable["ffreep"] = 140;
	opcodeTable["fiadd"] = 141;
	opcodeTable["ficom"] = 142;
	opcodeTable["ficomp"] = 143;
	opcodeTable["fidiv"] = 144;
	opcodeTable["fidivr"] = 145;
	opcodeTable["fild"] = 146;
	opcodeTable["fimul"] = 147;
	opcodeTable["fincstp"] = 148;
	opcodeTable["finit"] = 149;
	opcodeTable["fninit"] = 150;
	opcodeTable["fist"] = 151;
	opcodeTable["fistp"] = 152;
	opcodeTable["fisub"] = 153;
	opcodeTable["fisubr"] = 154;
	opcodeTable["fld"] = 155;
	opcodeTable["fld1"] = 156;
	opcodeTable["fldcw"] = 157;
	opcodeTable["fldenv"] = 158;
	opcodeTable["fldl2e"] = 159;
	opcodeTable["fldl2t"] = 160;
	opcodeTable["fldlg2"] = 161;
	opcodeTable["fldln2"] = 162;
	opcodeTable["fldpi"] = 163;
	opcodeTable["fldz"] = 164;
	opcodeTable["fmul"] = 165;
	opcodeTable["fmulp"] = 166;
	opcodeTable["fnop"] = 167;
	opcodeTable["fnsave"] = 168;
	opcodeTable["fpatan"] = 169;
	opcodeTable["fprem"] = 170;
	opcodeTable["fprem1"] = 171;
	opcodeTable["fptan"] = 172;
	opcodeTable["frndint"] = 173;
	opcodeTable["frstor"] = 174;
	opcodeTable["fsave"] = 175;
	opcodeTable["fscale"] = 176;
	opcodeTable["fsetpm"] = 177;
	opcodeTable["fsin"] = 178;
	opcodeTable["fsincos"] = 179;
	opcodeTable["fsqrt"] = 180;
	opcodeTable["fst"] = 181;
	opcodeTable["fstcw"] = 182;
	opcodeTable["fnstcw"] = 183;
	opcodeTable["fstenv"] = 184;
	opcodeTable["fnstenv"] = 185;
	opcodeTable["fstp"] = 186;
	opcodeTable["fstp1"] = 187;
	opcodeTable["fstp8"] = 188;
	opcodeTable["fstp9"] = 189;
	opcodeTable["fstsw"] = 190;
	opcodeTable["fnstsw"] = 191;
	opcodeTable["fsub"] = 192;
	opcodeTable["fsubp"] = 193;
	opcodeTable["fsubr"] = 194;
	opcodeTable["fsubrp"] = 195;
	opcodeTable["ftst"] = 196;
	opcodeTable["fucom"] = 197;
	opcodeTable["fucomi"] = 198;
	opcodeTable["fucomip"] = 199;
	opcodeTable["fucomp"] = 200;
	opcodeTable["fucompp"] = 201;
	opcodeTable["fwait"] = 202;
	opcodeTable["fxam"] = 203;
	opcodeTable["fxch"] = 204;
	opcodeTable["fxch4"] = 205;
	opcodeTable["fxch7"] = 206;
	opcodeTable["fxrstor"] = 207;
	opcodeTable["fxsave"] = 208;
	opcodeTable["fxtract"] = 209;
	opcodeTable["fyl2x"] = 210;
	opcodeTable["fyl2xp1"] = 211;
	opcodeTable["hlt"] = 212;
	opcodeTable["ibts"] = 213;
	opcodeTable["icebp"] = 214;
	opcodeTable["idiv"] = 215;
	opcodeTable["imul"] = 216;
	opcodeTable["in"] = 217;
	opcodeTable["ins"] = 218;
	opcodeTable["insb"] = 219;
	opcodeTable["insw"] = 220;
	opcodeTable["insd"] = 221;
	opcodeTable["insq"] = 222;
	opcodeTable["inc"] = 223;
	opcodeTable["int"] = 224;
	opcodeTable["int1"] = 225;
	opcodeTable["int3"] = 226;
	opcodeTable["into"] = 227;
	opcodeTable["invd"] = 228;
	opcodeTable["invlpg"] = 229;
	opcodeTable["iret"] = 230;
	opcodeTable["iretw"] = 231;
	opcodeTable["iretd"] = 232;
	opcodeTable["iretq"] = 233;
	opcodeTable["ja"] = 234;
	opcodeTable["jae"] = 235;
	opcodeTable["jb"] = 236;
	opcodeTable["jbe"] = 237;
	opcodeTable["jc"] = 238;
	opcodeTable["jcxz"] = 239;
	opcodeTable["jecxz"] = 240;
	opcodeTable["je"] = 241;
	opcodeTable["jg"] = 242;
	opcodeTable["jge"] = 243;
	opcodeTable["jl"] = 244;
	opcodeTable["jle"] = 245;
	opcodeTable["jmp"] = 246;
	opcodeTable["jna"] = 247;
	opcodeTable["jnae"] = 248;
	opcodeTable["jnb"] = 249;
	opcodeTable["jnbe"] = 250;
	opcodeTable["jnc"] = 251;
	opcodeTable["jne"] = 252;
	opcodeTable["jng"] = 253;
	opcodeTable["jnge"] = 254;
	opcodeTable["jnl"] = 255;
	opcodeTable["jnle"] = 256;
	opcodeTable["jno"] = 257;
	opcodeTable["jnp"] = 258;
	opcodeTable["jns"] = 259;
	opcodeTable["jnz"] = 260;
	opcodeTable["jo"] = 261;
	opcodeTable["jp"] = 262;
	opcodeTable["jpe"] = 263;
	opcodeTable["jpo"] = 264;
	opcodeTable["js"] = 265;
	opcodeTable["jz"] = 266;
	opcodeTable["lahf"] = 267;
	opcodeTable["lar"] = 268;
	opcodeTable["lds"] = 269;
	opcodeTable["lea"] = 270;
	opcodeTable["leave"] = 271;
	opcodeTable["les"] = 272;
	opcodeTable["lfence"] = 273;
	opcodeTable["lfs"] = 274;
	opcodeTable["lgdt"] = 275;
	opcodeTable["lgs"] = 276;
	opcodeTable["lidt"] = 277;
	opcodeTable["lmsw"] = 278;
	opcodeTable["lods"] = 279;
	opcodeTable["lodsb"] = 280;
	opcodeTable["lodsw"] = 281;
	opcodeTable["lodsd"] = 282;
	opcodeTable["lodsq"] = 283;
	opcodeTable["loop"] = 284;
	opcodeTable["loope"] = 285;
	opcodeTable["loopne"] = 286;
	opcodeTable["loopnz"] = 287;
	opcodeTable["loopz"] = 288;
	opcodeTable["lsl"] = 289;
	opcodeTable["lss"] = 290;
	opcodeTable["ltr"] = 291;
	opcodeTable["mov"] = 292;
	opcodeTable["movs"] = 293;
	opcodeTable["movbe"] = 294;
	opcodeTable["movsb"] = 295;
	opcodeTable["movsw"] = 296;
	opcodeTable["movsd"] = 297;
	opcodeTable["movsq"] = 298;
	opcodeTable["movsx"] = 299;
	opcodeTable["movzx"] = 300;
	opcodeTable["movsxd"] = 301;
	opcodeTable["mul"] = 302;
	opcodeTable["neg"] = 303;
	opcodeTable["nop"] = 304;
	opcodeTable["not"] = 305;
	opcodeTable["or"] = 306;
	opcodeTable["out"] = 307;
	opcodeTable["outs"] = 308;
	opcodeTable["outsb"] = 309;
	opcodeTable["outsw"] = 310;
	opcodeTable["outsd"] = 311;
	opcodeTable["pop"] = 312;
	opcodeTable["popa"] = 313;
	opcodeTable["popaw"] = 314;
	opcodeTable["popad"] = 315;
	opcodeTable["popcnt"] = 316;
	opcodeTable["popf"] = 317;
	opcodeTable["popfw"] = 318;
	opcodeTable["popfd"] = 319;
	opcodeTable["popfq"] = 320;
	opcodeTable["prefetchnta"] = 321;
	opcodeTable["prefetcht0"] = 322;
	opcodeTable["prefetcht1"] = 323;
	opcodeTable["prefetcht2"] = 324;
	opcodeTable["push"] = 325;
	opcodeTable["pusha"] = 326;
	opcodeTable["pushaw"] = 327;
	opcodeTable["pushad"] = 328;
	opcodeTable["pushf"] = 329;
	opcodeTable["pushfw"] = 330;
	opcodeTable["pushfd"] = 331;
	opcodeTable["pushfq"] = 332;
	opcodeTable["rcl"] = 333;
	opcodeTable["rcr"] = 334;
	opcodeTable["rdmsr"] = 335;
	opcodeTable["rdpmc"] = 336;
	opcodeTable["rdtsc"] = 337;
	opcodeTable["ret"] = 338;
	opcodeTable["retf"] = 339;
	opcodeTable["rol"] = 340;
	opcodeTable["ror"] = 341;
	opcodeTable["rsm"] = 342;
	opcodeTable["sahf"] = 343;
	opcodeTable["sal"] = 344;
	opcodeTable["sar"] = 345;
	opcodeTable["sbb"] = 346;
	opcodeTable["scas"] = 347;
	opcodeTable["scasb"] = 348;
	opcodeTable["scasw"] = 349;
	opcodeTable["scasd"] = 350;
	opcodeTable["scasq"] = 351;
	opcodeTable["seta"] = 352;
	opcodeTable["setae"] = 353;
	opcodeTable["setb"] = 354;
	opcodeTable["setbe"] = 355;
	opcodeTable["setc"] = 356;
	opcodeTable["sete"] = 357;
	opcodeTable["setg"] = 358;
	opcodeTable["setge"] = 359;
	opcodeTable["setl"] = 360;
	opcodeTable["setle"] = 361;
	opcodeTable["setna"] = 362;
	opcodeTable["setnae"] = 363;
	opcodeTable["setnb"] = 364;
	opcodeTable["setnbe"] = 365;
	opcodeTable["setnc"] = 366;
	opcodeTable["setne"] = 367;
	opcodeTable["setng"] = 368;
	opcodeTable["setnge"] = 369;
	opcodeTable["setnl"] = 370;
	opcodeTable["setnle"] = 371;
	opcodeTable["setno"] = 372;
	opcodeTable["setnp"] = 373;
	opcodeTable["setns"] = 374;
	opcodeTable["setnz"] = 375;
	opcodeTable["seto"] = 376;
	opcodeTable["setp"] = 377;
	opcodeTable["setpe"] = 378;
	opcodeTable["setpo"] = 379;
	opcodeTable["sets"] = 380;
	opcodeTable["setz"] = 381;
	opcodeTable["sfence"] = 382;
	opcodeTable["shl"] = 383;
	opcodeTable["shld"] = 384;
	opcodeTable["shr"] = 385;
	opcodeTable["shrd"] = 386;
	opcodeTable["sidt"] = 387;
	opcodeTable["sldt"] = 388;
	opcodeTable["smsw"] = 389;
	opcodeTable["stc"] = 390;
	opcodeTable["std"] = 391;
	opcodeTable["sti"] = 392;
	opcodeTable["stos"] = 393;
	opcodeTable["stosb"] = 394;
	opcodeTable["stosw"] = 395;
	opcodeTable["stosd"] = 396;
	opcodeTable["stosq"] = 397;
	opcodeTable["str"] = 398;
	opcodeTable["sub"] = 399;
	opcodeTable["syscall"] = 400;
	opcodeTable["sysenter"] = 401;
	opcodeTable["sysexit"] = 402;
	opcodeTable["sysret"] = 403;
	opcodeTable["test"] = 404;
	opcodeTable["ud2"] = 405;
	opcodeTable["verr"] = 406;
	opcodeTable["verw"] = 407;
	opcodeTable["wait"] = 408;
	opcodeTable["wbinvd"] = 409;
	opcodeTable["wrmsr"] = 410;
	opcodeTable["xadd"] = 411;
	opcodeTable["xbts"] = 412;
	opcodeTable["xchg"] = 413;
	opcodeTable["xlat"] = 414;
	opcodeTable["xlatb"] = 415;
	opcodeTable["xor"] = 416;
	opcodeTable["xrstor"] = 417;
	opcodeTable["xrstor64"] = 418;
	opcodeTable["xsave"] = 419;
	opcodeTable["xsave64"] = 420;
	opcodeTable["xsetbv"] = 421;
	opcodeTable["addpd"] = 422;
	opcodeTable["addps"] = 423;
	opcodeTable["addsd"] = 424;
	opcodeTable["addss"] = 425;
	opcodeTable["addsubpd"] = 426;
	opcodeTable["addsubps"] = 427;
	opcodeTable["andnpd"] = 428;
	opcodeTable["andnps"] = 429;
	opcodeTable["andpd"] = 430;
	opcodeTable["andps"] = 431;
	opcodeTable["blendpd"] = 432;
	opcodeTable["blendps"] = 433;
	opcodeTable["cmppd"] = 434;
	opcodeTable["cmpps"] = 435;
	opcodeTable["cvtdq2pd"] = 436;
	opcodeTable["cvtdq2ps"] = 437;
	opcodeTable["cvtpd2dq"] = 438;
	opcodeTable["cvtpd2pi"] = 439;
	opcodeTable["cvtpd2ps"] = 440;
	opcodeTable["cvtpi2pd"] = 441;
	opcodeTable["cvtpi2ps"] = 442;
	opcodeTable["cvtps2dq"] = 443;
	opcodeTable["cvtps2pd"] = 444;
	opcodeTable["cvtps2pi"] = 445;
	opcodeTable["cvtsd2si"] = 446;
	opcodeTable["cvtsd2ss"] = 447;
	opcodeTable["cvtsi2sd"] = 448;
	opcodeTable["cvtsi2ss"] = 449;
	opcodeTable["cvtss2sd"] = 450;
	opcodeTable["cvtss2si"] = 451;
	opcodeTable["cvttp2qdq"] = 452;
	opcodeTable["cvttp2qpi"] = 453;
	opcodeTable["cvttps2dq"] = 454;
	opcodeTable["cvttps2pi"] = 455;
	opcodeTable["cvttsd2si"] = 456;
	opcodeTable["cvttss2si"] = 457;
	opcodeTable["divpd"] = 458;
	opcodeTable["divps"] = 459;
	opcodeTable["divsd"] = 460;
	opcodeTable["divss"] = 461;
	opcodeTable["dppd"] = 462;
	opcodeTable["dpps"] = 463;
	opcodeTable["hsubpd"] = 464;
	opcodeTable["hsubps"] = 465;
	opcodeTable["insertps"] = 466;
	opcodeTable["lddqu"] = 467;
	opcodeTable["maskmovdqu"] = 468;
	opcodeTable["maskmovq"] = 469;
	opcodeTable["maxps"] = 470;
	opcodeTable["maxpd"] = 471;
	opcodeTable["maxps"] = 472;
	opcodeTable["maxsd"] = 473;
	opcodeTable["maxss"] = 474;
	opcodeTable["mfence"] = 475;
	opcodeTable["minpd"] = 476;
	opcodeTable["minps"] = 477;
	opcodeTable["minsd"] = 478;
	opcodeTable["minss"] = 479;
	opcodeTable["monitor"] = 480;
	opcodeTable["movapd"] = 481;
	opcodeTable["movaps"] = 482;
	opcodeTable["movd"] = 483;
	opcodeTable["movq"] = 484;
	opcodeTable["movddup"] = 485;
	opcodeTable["movdq2q"] = 486;
	opcodeTable["movdqa"] = 487;
	opcodeTable["movdqu"] = 488;
	opcodeTable["movhlps"] = 489;
	opcodeTable["movhpd"] = 490;
	opcodeTable["movhps"] = 491;
	opcodeTable["movlhps"] = 492;
	opcodeTable["movlpd"] = 493;
	opcodeTable["movlps"] = 494;
	opcodeTable["movmskpd"] = 495;
	opcodeTable["movmskps"] = 496;
	opcodeTable["movntdq"] = 497;
	opcodeTable["movnti"] = 498;
	opcodeTable["movntpd"] = 499;
	opcodeTable["movntpd"] = 500;
	opcodeTable["movntq"] = 501;
	opcodeTable["movq2dq"] = 502;
	opcodeTable["movshdup"] = 503;
	opcodeTable["movsldup"] = 504;
	opcodeTable["movss"] = 505;
	opcodeTable["movupd"] = 506;
	opcodeTable["movups"] = 507;
	opcodeTable["mpsadbw"] = 508;
	opcodeTable["mulpd"] = 509;
	opcodeTable["mulps"] = 510;
	opcodeTable["mulsd"] = 511;
	opcodeTable["mulss"] = 512;
	opcodeTable["orpd"] = 513;
	opcodeTable["orps"] = 514;
	opcodeTable["packssdw"] = 515;
	opcodeTable["packsswb"] = 516;
	opcodeTable["packusdw"] = 517;
	opcodeTable["paddb"] = 518;
	opcodeTable["paddd"] = 519;
	opcodeTable["paddq"] = 520;
	opcodeTable["paddsw"] = 521;
	opcodeTable["paddusb"] = 522;
	opcodeTable["paddusw"] = 523;
	opcodeTable["paddw"] = 524;
	opcodeTable["palignr"] = 525;
	opcodeTable["pand"] = 526;
	opcodeTable["pandn"] = 527;
	opcodeTable["pavgb"] = 528;
	opcodeTable["pavgw"] = 529;
	opcodeTable["pblendw"] = 530;
	opcodeTable["pcmpeqb"] = 531;
	opcodeTable["pcmpeqd"] = 532;
	opcodeTable["pcmpeqw"] = 533;
	opcodeTable["pcmpestri"] = 534;
	opcodeTable["pcmpestrm"] = 535;
	opcodeTable["pcmpgtb"] = 536;
	opcodeTable["pcmpgtd"] = 537;
	opcodeTable["pcmpgtw"] = 538;
	opcodeTable["pcmpestri"] = 539;
	opcodeTable["pcmpestrm"] = 540;
	opcodeTable["pextrb"] = 541;
	opcodeTable["pextrd"] = 542;
	opcodeTable["pextrq"] = 543;
	opcodeTable["pextrw"] = 544;
	opcodeTable["pinsrb"] = 545;
	opcodeTable["pinsrd"] = 546;
	opcodeTable["pinsrq"] = 547;
	opcodeTable["pinsrw"] = 548;
	opcodeTable["pmaddwd"] = 549;
	opcodeTable["pmaxsw"] = 550;
	opcodeTable["pmaxub"] = 551;
	opcodeTable["pminsw"] = 552;
	opcodeTable["pminub"] = 553;
	opcodeTable["pmovmskb"] = 554;
	opcodeTable["pmulhuw"] = 555;
	opcodeTable["pmulhw"] = 556;
	opcodeTable["pmullw"] = 557;
	opcodeTable["pmuludq"] = 558;
	opcodeTable["psadbw"] = 559;
	opcodeTable["pshufd"] = 560;
	opcodeTable["pshufhw"] = 561;
	opcodeTable["pshufhl"] = 562;
	opcodeTable["pshufw"] = 563;
	opcodeTable["pslld"] = 564;
	opcodeTable["pslldq"] = 565;
	opcodeTable["psllq"] = 566;
	opcodeTable["psllw"] = 567;
	opcodeTable["psrad"] = 568;
	opcodeTable["psraw"] = 569;
	opcodeTable["psrld"] = 570;
	opcodeTable["psrldq"] = 571;
	opcodeTable["psrlq"] = 572;
	opcodeTable["psrlw"] = 573;
	opcodeTable["psubb"] = 574;
	opcodeTable["psubd"] = 575;
	opcodeTable["psubq"] = 576;
	opcodeTable["psubsb"] = 577;
	opcodeTable["psubsw"] = 578;
	opcodeTable["psubusb"] = 579;
	opcodeTable["psubusw"] = 580;
	opcodeTable["punpckhbw"] = 581;
	opcodeTable["punpckhdq"] = 582;
	opcodeTable["punpckhqdq"] = 583;
	opcodeTable["punpckhwd"] = 584;
	opcodeTable["punpcklbw"] = 585;
	opcodeTable["punpckldq"] = 586;
	opcodeTable["punpcklqdq"] = 587;
	opcodeTable["punpcklwd"] = 588;
	opcodeTable["pxor"] = 589;
	opcodeTable["rcpps"] = 590;
	opcodeTable["rpcss"] = 591;
	opcodeTable["roundpd"] = 592;
	opcodeTable["roundps"] = 593;
	opcodeTable["roundsd"] = 594;
	opcodeTable["roundss"] = 595;
	opcodeTable["shufpd"] = 596;
	opcodeTable["shufps"] = 597;
	opcodeTable["sqrtps"] = 598;
	opcodeTable["sqrtss"] = 599;
	opcodeTable["subpd"] = 600;
	opcodeTable["subps"] = 601;
	opcodeTable["subsd"] = 602;
	opcodeTable["subss"] = 603;
	opcodeTable["unpckhpd"] = 604;
	opcodeTable["unpckhps"] = 605;
	opcodeTable["unpcklpd"] = 606;
	opcodeTable["unpcklps"] = 607;
	opcodeTable["xorpd"] = 608;
	opcodeTable["xorps"] = 609;
	opcodeTable["invept"] = 610;
	opcodeTable["invvpid"] = 611;
	opcodeTable["vmcall"] = 612;
	opcodeTable["vmclear"] = 613;
	opcodeTable["vmlaunch"] = 614;
	opcodeTable["vmptrld"] = 615;
	opcodeTable["vmptrst"] = 616;
	opcodeTable["vmread"] = 617;
	opcodeTable["vmresume"] = 618;
	opcodeTable["vmwrite"] = 619;
	opcodeTable["vmx0ff"] = 620;
	opcodeTable["vmxon"] = 621;
	prefixTable["a16"] = 0;
	prefixTable["a32"] = 1;
	prefixTable["lock"] = 2;
	prefixTable["o16"] = 3;
	prefixTable["o32"] = 4;
	prefixTable["rep"] = 5;
	prefixTable["repe"] = 6;
	prefixTable["repne"] = 7;
	prefixTable["repnz"] = 8;
	prefixTable["repz"] = 9;
}

void x64Parser::TokenFunc4(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 0;
}
x64Token x64Parser::tokenBranches3[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc4,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc9(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 1;
}
x64Token x64Parser::tokenBranches8[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc9,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc200(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 19;
}
x64Token x64Parser::tokenBranches199[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc200,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc346(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 34;
}
x64Token x64Parser::tokenBranches345[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc346,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc199(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc345(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches198[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc199, x64Parser::tokenBranches199 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc345, x64Parser::tokenBranches345 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc36(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 4;
}
x64Token x64Parser::tokenBranches35[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc36,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches198 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc137(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches136[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc137,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc283(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 28;
}
x64Token x64Parser::tokenBranches282[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc283,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc429(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 43;
}
x64Token x64Parser::tokenBranches428[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc429,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc35(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc136(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc282(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc428(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches34[] = {
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc35, x64Parser::tokenBranches35 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc136, x64Parser::tokenBranches136 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc282, x64Parser::tokenBranches282 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc428, x64Parser::tokenBranches428 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc97(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches33[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches34 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc97,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc227(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 22;
}
x64Token x64Parser::tokenBranches226[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc227,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc373(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 37;
}
x64Token x64Parser::tokenBranches372[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc373,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc226(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc372(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches225[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc226, x64Parser::tokenBranches226 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc372, x64Parser::tokenBranches372 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc57(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 7;
}
x64Token x64Parser::tokenBranches56[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc57,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches225 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc170(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 17;
}
x64Token x64Parser::tokenBranches169[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc170,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc316(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 32;
}
x64Token x64Parser::tokenBranches315[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc316,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc462(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 47;
}
x64Token x64Parser::tokenBranches461[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc462,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc56(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc169(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc315(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc461(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches55[] = {
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc56, x64Parser::tokenBranches56 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc169, x64Parser::tokenBranches169 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc315, x64Parser::tokenBranches315 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc461, x64Parser::tokenBranches461 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc120(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 17;
}
x64Token x64Parser::tokenBranches54[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches55 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc120,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc257(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 25;
}
x64Token x64Parser::tokenBranches256[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc257,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc403(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 40;
}
x64Token x64Parser::tokenBranches402[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc403,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc256(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc402(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches255[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc256, x64Parser::tokenBranches256 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc402, x64Parser::tokenBranches402 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc79(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 10;
}
x64Token x64Parser::tokenBranches78[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc79,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches255 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc584(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches583[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc584,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc662(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 66;
}
x64Token x64Parser::tokenBranches661[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc662,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc740(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 75;
}
x64Token x64Parser::tokenBranches739[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc740,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1034(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 102;
}
x64Token x64Parser::tokenBranches1033[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1034,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1442(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 120;
}
x64Token x64Parser::tokenBranches1441[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1442,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1670(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 138;
}
x64Token x64Parser::tokenBranches1669[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1670,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1033(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1441(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1669(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1032[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1033, x64Parser::tokenBranches1033 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1441, x64Parser::tokenBranches1441 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1669, x64Parser::tokenBranches1669 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1232(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 102;
}
x64Token x64Parser::tokenBranches1031[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1032 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1232,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1031(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1030[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1031, x64Parser::tokenBranches1031 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1043(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 103;
}
x64Token x64Parser::tokenBranches1042[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1043,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1451(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 121;
}
x64Token x64Parser::tokenBranches1450[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1451,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1679(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 139;
}
x64Token x64Parser::tokenBranches1678[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1679,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1042(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1450(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1678(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1041[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1042, x64Parser::tokenBranches1042 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1450, x64Parser::tokenBranches1450 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1678, x64Parser::tokenBranches1678 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1239(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 103;
}
x64Token x64Parser::tokenBranches1029[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1030 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1041 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1239,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc583(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc661(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc739(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1029(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches582[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc583, x64Parser::tokenBranches583 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc661, x64Parser::tokenBranches661 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc739, x64Parser::tokenBranches739 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1029, x64Parser::tokenBranches1029 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc498(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 53;
}
x64Token x64Parser::tokenBranches497[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc498,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches582 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc591(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 54;
}
x64Token x64Parser::tokenBranches590[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc591,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc669(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 67;
}
x64Token x64Parser::tokenBranches668[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc669,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc747(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 76;
}
x64Token x64Parser::tokenBranches746[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc747,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1014(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 100;
}
x64Token x64Parser::tokenBranches1013[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1014,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1422(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 118;
}
x64Token x64Parser::tokenBranches1421[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1422,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1650(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 136;
}
x64Token x64Parser::tokenBranches1649[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1650,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1013(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1421(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1649(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1012[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1013, x64Parser::tokenBranches1013 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1421, x64Parser::tokenBranches1421 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1649, x64Parser::tokenBranches1649 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1216(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 100;
}
x64Token x64Parser::tokenBranches1011[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1012 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1216,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1011(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1010[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1011, x64Parser::tokenBranches1011 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1023(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 101;
}
x64Token x64Parser::tokenBranches1022[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1023,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1431(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 119;
}
x64Token x64Parser::tokenBranches1430[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1431,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1659(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 137;
}
x64Token x64Parser::tokenBranches1658[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1659,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1022(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1430(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1658(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1021[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1022, x64Parser::tokenBranches1022 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1430, x64Parser::tokenBranches1430 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1658, x64Parser::tokenBranches1658 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1223(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 101;
}
x64Token x64Parser::tokenBranches1009[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1010 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1021 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1223,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc590(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc668(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc746(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1009(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches589[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc590, x64Parser::tokenBranches590 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc668, x64Parser::tokenBranches668 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc746, x64Parser::tokenBranches746 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1009, x64Parser::tokenBranches1009 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc847(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 81;
}
x64Token x64Parser::tokenBranches846[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc847,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc846(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches845[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc846, x64Parser::tokenBranches846 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc838(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 80;
}
x64Token x64Parser::tokenBranches837[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc838,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches845 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc837(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches836[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc837, x64Parser::tokenBranches837 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc503(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 54;
}
x64Token x64Parser::tokenBranches502[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc503,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches589 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches836 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc598(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches597[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc598,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc676(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 64;
}
x64Token x64Parser::tokenBranches675[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc676,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc754(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 73;
}
x64Token x64Parser::tokenBranches753[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc754,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1054(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches1053[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1054,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1462(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 114;
}
x64Token x64Parser::tokenBranches1461[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1462,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1690(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1689[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1690,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1053(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1461(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1689(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1052[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1053, x64Parser::tokenBranches1053 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1461, x64Parser::tokenBranches1461 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1689, x64Parser::tokenBranches1689 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1248(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches1051[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1052 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1248,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1051(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1050[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1051, x64Parser::tokenBranches1051 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1063(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches1062[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1063,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1471(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 115;
}
x64Token x64Parser::tokenBranches1470[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1471,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1699(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1698[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1699,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1062(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1470(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1698(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1061[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1062, x64Parser::tokenBranches1062 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1470, x64Parser::tokenBranches1470 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1698, x64Parser::tokenBranches1698 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1255(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches1049[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1050 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1061 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1255,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc597(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc675(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc753(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1049(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches596[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc597, x64Parser::tokenBranches597 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc675, x64Parser::tokenBranches675 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc753, x64Parser::tokenBranches753 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1049, x64Parser::tokenBranches1049 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc863(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 83;
}
x64Token x64Parser::tokenBranches862[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc863,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc862(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches861[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc862, x64Parser::tokenBranches862 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc854(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 82;
}
x64Token x64Parser::tokenBranches853[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc854,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches861 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc853(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches852[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc853, x64Parser::tokenBranches853 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc508(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches507[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc508,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches596 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches852 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc531(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 59;
}
x64Token x64Parser::tokenBranches530[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc531,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc8(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc78(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc507(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->math = 0;
	operand.values[5]->mathval = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc530(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches33 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches54 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches497 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches502 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc8, x64Parser::tokenBranches8 },
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc78, x64Parser::tokenBranches78 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc507, x64Parser::tokenBranches507 },
	{x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc530, x64Parser::tokenBranches530 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches7 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc14(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 2;
}
x64Token x64Parser::tokenBranches13[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc14,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc209(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 21;
}
x64Token x64Parser::tokenBranches208[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc209,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc355(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 36;
}
x64Token x64Parser::tokenBranches354[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc355,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc208(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc354(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches207[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc208, x64Parser::tokenBranches208 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc354, x64Parser::tokenBranches354 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc43(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 6;
}
x64Token x64Parser::tokenBranches42[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc43,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches207 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc144(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 14;
}
x64Token x64Parser::tokenBranches143[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc144,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc290(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 29;
}
x64Token x64Parser::tokenBranches289[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc290,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc436(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 44;
}
x64Token x64Parser::tokenBranches435[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc436,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc42(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc143(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc289(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc435(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches41[] = {
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc42, x64Parser::tokenBranches42 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc143, x64Parser::tokenBranches143 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc289, x64Parser::tokenBranches289 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc435, x64Parser::tokenBranches435 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc102(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 14;
}
x64Token x64Parser::tokenBranches40[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches41 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc102,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc218(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 20;
}
x64Token x64Parser::tokenBranches217[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc218,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc364(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 35;
}
x64Token x64Parser::tokenBranches363[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc364,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc217(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc363(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches216[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc217, x64Parser::tokenBranches217 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc363, x64Parser::tokenBranches363 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc50(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 5;
}
x64Token x64Parser::tokenBranches49[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc50,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches216 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc163(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches162[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc163,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc309(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 31;
}
x64Token x64Parser::tokenBranches308[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc309,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc455(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 46;
}
x64Token x64Parser::tokenBranches454[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc455,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc49(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc162(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc308(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc454(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches48[] = {
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc49, x64Parser::tokenBranches49 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc162, x64Parser::tokenBranches162 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc308, x64Parser::tokenBranches308 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc454, x64Parser::tokenBranches454 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc115(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches47[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches48 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc115,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc264(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 26;
}
x64Token x64Parser::tokenBranches263[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc264,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc410(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 41;
}
x64Token x64Parser::tokenBranches409[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc410,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc263(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc409(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches262[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc263, x64Parser::tokenBranches263 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc409, x64Parser::tokenBranches409 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc84(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 11;
}
x64Token x64Parser::tokenBranches83[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc84,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches262 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc563(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches562[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc563,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc641(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 62;
}
x64Token x64Parser::tokenBranches640[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc641,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc719(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 72;
}
x64Token x64Parser::tokenBranches718[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc719,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc974(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches973[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc974,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1382(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 112;
}
x64Token x64Parser::tokenBranches1381[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1382,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1610(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 130;
}
x64Token x64Parser::tokenBranches1609[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1610,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc973(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1381(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1609(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches972[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc973, x64Parser::tokenBranches973 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1381, x64Parser::tokenBranches1381 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1609, x64Parser::tokenBranches1609 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1184(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches971[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches972 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1184,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc971(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches970[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc971, x64Parser::tokenBranches971 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc983(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches982[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc983,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1391(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1390[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1391,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1619(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 131;
}
x64Token x64Parser::tokenBranches1618[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1619,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc982(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1390(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1618(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches981[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc982, x64Parser::tokenBranches982 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1390, x64Parser::tokenBranches1390 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1618, x64Parser::tokenBranches1618 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1191(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches969[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches970 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches981 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1191,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc562(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc640(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc718(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc969(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches561[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc562, x64Parser::tokenBranches562 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc640, x64Parser::tokenBranches640 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc718, x64Parser::tokenBranches718 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc969, x64Parser::tokenBranches969 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc483(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 49;
}
x64Token x64Parser::tokenBranches482[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc483,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches561 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc570(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches569[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc570,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc648(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 63;
}
x64Token x64Parser::tokenBranches647[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc648,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc726(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 71;
}
x64Token x64Parser::tokenBranches725[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc726,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc954(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches953[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc954,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1362(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 110;
}
x64Token x64Parser::tokenBranches1361[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1362,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1590(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 128;
}
x64Token x64Parser::tokenBranches1589[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1590,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc953(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1361(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1589(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches952[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc953, x64Parser::tokenBranches953 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1361, x64Parser::tokenBranches1361 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1589, x64Parser::tokenBranches1589 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1168(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches951[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches952 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1168,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc951(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches950[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc951, x64Parser::tokenBranches951 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc963(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches962[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc963,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1371(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 111;
}
x64Token x64Parser::tokenBranches1370[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1371,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1599(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 129;
}
x64Token x64Parser::tokenBranches1598[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1599,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc962(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1370(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1598(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches961[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc962, x64Parser::tokenBranches962 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1370, x64Parser::tokenBranches1370 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1598, x64Parser::tokenBranches1598 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1175(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches949[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches950 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches961 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1175,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc569(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc647(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc725(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc949(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches568[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc569, x64Parser::tokenBranches569 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc647, x64Parser::tokenBranches647 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc725, x64Parser::tokenBranches725 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc949, x64Parser::tokenBranches949 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc815(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 85;
}
x64Token x64Parser::tokenBranches814[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc815,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc814(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches813[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc814, x64Parser::tokenBranches814 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc806(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 84;
}
x64Token x64Parser::tokenBranches805[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc806,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches813 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc805(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches804[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc805, x64Parser::tokenBranches805 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc488(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 50;
}
x64Token x64Parser::tokenBranches487[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc488,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches568 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches804 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc577(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches576[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc577,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc655(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 65;
}
x64Token x64Parser::tokenBranches654[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc655,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc733(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 74;
}
x64Token x64Parser::tokenBranches732[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc733,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc994(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 98;
}
x64Token x64Parser::tokenBranches993[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc994,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1402(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 116;
}
x64Token x64Parser::tokenBranches1401[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1402,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1630(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 134;
}
x64Token x64Parser::tokenBranches1629[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1630,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc993(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1401(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1629(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches992[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc993, x64Parser::tokenBranches993 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1401, x64Parser::tokenBranches1401 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1629, x64Parser::tokenBranches1629 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1200(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 98;
}
x64Token x64Parser::tokenBranches991[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches992 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1200,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc991(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches990[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc991, x64Parser::tokenBranches991 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1003(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 99;
}
x64Token x64Parser::tokenBranches1002[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1003,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1411(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 117;
}
x64Token x64Parser::tokenBranches1410[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1411,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1639(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 135;
}
x64Token x64Parser::tokenBranches1638[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1639,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1002(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1410(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1638(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1001[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1002, x64Parser::tokenBranches1002 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1410, x64Parser::tokenBranches1410 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1638, x64Parser::tokenBranches1638 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1207(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 99;
}
x64Token x64Parser::tokenBranches989[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches990 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1001 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1207,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc576(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc654(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc732(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc989(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches575[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc576, x64Parser::tokenBranches576 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc654, x64Parser::tokenBranches654 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc732, x64Parser::tokenBranches732 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc989, x64Parser::tokenBranches989 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc831(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 87;
}
x64Token x64Parser::tokenBranches830[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc831,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc830(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches829[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc830, x64Parser::tokenBranches830 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc822(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 86;
}
x64Token x64Parser::tokenBranches821[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc822,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches829 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc821(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches820[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc821, x64Parser::tokenBranches821 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc493(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 52;
}
x64Token x64Parser::tokenBranches492[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc493,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches575 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches820 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc536(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 60;
}
x64Token x64Parser::tokenBranches535[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc536,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc13(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc83(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc492(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->math = 0;
	operand.values[5]->mathval = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc535(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches12[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches40 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches47 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches482 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches487 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc13, x64Parser::tokenBranches13 },
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc83, x64Parser::tokenBranches83 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc492, x64Parser::tokenBranches492 },
	{x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc535, x64Parser::tokenBranches535 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches11[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches12 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc19(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 3;
}
x64Token x64Parser::tokenBranches18[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc19,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 23;
}
x64Token x64Parser::tokenBranches235[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc382(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 38;
}
x64Token x64Parser::tokenBranches381[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc382,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc235(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc381(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches234[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc235, x64Parser::tokenBranches235 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc381, x64Parser::tokenBranches381 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc64(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 8;
}
x64Token x64Parser::tokenBranches63[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc64,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches234 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc151(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 15;
}
x64Token x64Parser::tokenBranches150[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc151,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc297(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 30;
}
x64Token x64Parser::tokenBranches296[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc297,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc443(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 45;
}
x64Token x64Parser::tokenBranches442[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc443,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc63(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc150(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc296(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc442(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches62[] = {
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc63, x64Parser::tokenBranches63 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc150, x64Parser::tokenBranches150 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc296, x64Parser::tokenBranches296 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc442, x64Parser::tokenBranches442 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc107(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 15;
}
x64Token x64Parser::tokenBranches61[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches62 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc107,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc245(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 24;
}
x64Token x64Parser::tokenBranches244[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc245,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc391(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 39;
}
x64Token x64Parser::tokenBranches390[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc391,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc244(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc390(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches243[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc244, x64Parser::tokenBranches244 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc390, x64Parser::tokenBranches390 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc71(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 9;
}
x64Token x64Parser::tokenBranches70[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc71,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches243 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc177(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 18;
}
x64Token x64Parser::tokenBranches176[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc177,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc323(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 33;
}
x64Token x64Parser::tokenBranches322[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc323,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc469(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 48;
}
x64Token x64Parser::tokenBranches468[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc469,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc70(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc176(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc322(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc468(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches69[] = {
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc70, x64Parser::tokenBranches70 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc176, x64Parser::tokenBranches176 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc322, x64Parser::tokenBranches322 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc468, x64Parser::tokenBranches468 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc125(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 18;
}
x64Token x64Parser::tokenBranches68[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches69 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc125,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc271(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 27;
}
x64Token x64Parser::tokenBranches270[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc271,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc417(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 42;
}
x64Token x64Parser::tokenBranches416[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc417,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc270(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc416(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches269[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc270, x64Parser::tokenBranches270 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc416, x64Parser::tokenBranches416 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc89(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 12;
}
x64Token x64Parser::tokenBranches88[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc89,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches269 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc605(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 148;
}
x64Token x64Parser::tokenBranches604[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc605,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc683(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 157;
}
x64Token x64Parser::tokenBranches682[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc683,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc768(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 165;
}
x64Token x64Parser::tokenBranches767[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc768,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1094(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 106;
}
x64Token x64Parser::tokenBranches1093[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1094,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1502(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 124;
}
x64Token x64Parser::tokenBranches1501[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1502,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1730(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 142;
}
x64Token x64Parser::tokenBranches1729[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1730,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1093(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1501(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1729(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1092[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1093, x64Parser::tokenBranches1093 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1501, x64Parser::tokenBranches1501 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1729, x64Parser::tokenBranches1729 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1280(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 106;
}
x64Token x64Parser::tokenBranches1091[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1092 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1280,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1091(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1090[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1091, x64Parser::tokenBranches1091 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1103(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1102[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1103,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1511(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 125;
}
x64Token x64Parser::tokenBranches1510[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1511,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1739(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 143;
}
x64Token x64Parser::tokenBranches1738[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1739,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1102(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1510(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1738(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1101[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1102, x64Parser::tokenBranches1102 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1510, x64Parser::tokenBranches1510 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1738, x64Parser::tokenBranches1738 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1287(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 107;
}
x64Token x64Parser::tokenBranches1089[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1090 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1101 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1287,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2087(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 189;
}
x64Token x64Parser::tokenBranches2086[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2087,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2343(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 206;
}
x64Token x64Parser::tokenBranches2342[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2343,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2487(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 222;
}
x64Token x64Parser::tokenBranches2486[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2487,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2086(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2342(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2486(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2085[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2086, x64Parser::tokenBranches2086 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2342, x64Parser::tokenBranches2342 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2486, x64Parser::tokenBranches2486 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2217(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 189;
}
x64Token x64Parser::tokenBranches2084[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2085 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2217,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2084(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2083[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2084, x64Parser::tokenBranches2084 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2096(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 190;
}
x64Token x64Parser::tokenBranches2095[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2096,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2352(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 207;
}
x64Token x64Parser::tokenBranches2351[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2352,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2496(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 223;
}
x64Token x64Parser::tokenBranches2495[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2496,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2095(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2351(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2495(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2094[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2095, x64Parser::tokenBranches2095 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2351, x64Parser::tokenBranches2351 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2495, x64Parser::tokenBranches2495 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2224(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 190;
}
x64Token x64Parser::tokenBranches2082[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2083 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2094 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2224,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc604(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc682(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc767(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1089(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc2082(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches603[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc604, x64Parser::tokenBranches604 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc682, x64Parser::tokenBranches682 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc767, x64Parser::tokenBranches767 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1089, x64Parser::tokenBranches1089 },
	{x64Token::REGISTERCLASS, 10, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2082, x64Parser::tokenBranches2082 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc513(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 148;
}
x64Token x64Parser::tokenBranches512[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc513,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches603 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc612(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 149;
}
x64Token x64Parser::tokenBranches611[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc612,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc690(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 158;
}
x64Token x64Parser::tokenBranches689[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc690,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc761(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 166;
}
x64Token x64Parser::tokenBranches760[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc761,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1074(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 104;
}
x64Token x64Parser::tokenBranches1073[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1074,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1482(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 122;
}
x64Token x64Parser::tokenBranches1481[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1482,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1710(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 140;
}
x64Token x64Parser::tokenBranches1709[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1710,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1073(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1481(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1709(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1072[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1073, x64Parser::tokenBranches1073 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1481, x64Parser::tokenBranches1481 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1709, x64Parser::tokenBranches1709 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1264(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 104;
}
x64Token x64Parser::tokenBranches1071[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1072 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1264,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1071(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1070[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1071, x64Parser::tokenBranches1071 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1083(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 105;
}
x64Token x64Parser::tokenBranches1082[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1083,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1491(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 123;
}
x64Token x64Parser::tokenBranches1490[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1491,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1719(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 141;
}
x64Token x64Parser::tokenBranches1718[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1719,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1082(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1490(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1718(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1081[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1082, x64Parser::tokenBranches1082 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1490, x64Parser::tokenBranches1490 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1718, x64Parser::tokenBranches1718 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1271(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 105;
}
x64Token x64Parser::tokenBranches1069[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1070 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1081 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1271,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2067(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 187;
}
x64Token x64Parser::tokenBranches2066[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2067,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2323(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 204;
}
x64Token x64Parser::tokenBranches2322[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2323,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2467(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 220;
}
x64Token x64Parser::tokenBranches2466[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2467,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2066(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2322(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2466(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2065[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2066, x64Parser::tokenBranches2066 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2322, x64Parser::tokenBranches2322 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2466, x64Parser::tokenBranches2466 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2201(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 187;
}
x64Token x64Parser::tokenBranches2064[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2065 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2201,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2064(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2063[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2064, x64Parser::tokenBranches2064 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2076(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 188;
}
x64Token x64Parser::tokenBranches2075[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2076,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2332(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 205;
}
x64Token x64Parser::tokenBranches2331[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2332,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2476(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 221;
}
x64Token x64Parser::tokenBranches2475[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2476,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2075(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2331(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2475(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2074[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2075, x64Parser::tokenBranches2075 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2331, x64Parser::tokenBranches2331 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2475, x64Parser::tokenBranches2475 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2208(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 188;
}
x64Token x64Parser::tokenBranches2062[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2063 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2074 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2208,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc611(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc689(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc760(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1069(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc2062(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches610[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc611, x64Parser::tokenBranches611 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc689, x64Parser::tokenBranches689 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc760, x64Parser::tokenBranches760 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1069, x64Parser::tokenBranches1069 },
	{x64Token::REGISTERCLASS, 10, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2062, x64Parser::tokenBranches2062 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc879(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 174;
}
x64Token x64Parser::tokenBranches878[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc879,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc878(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches877[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc878, x64Parser::tokenBranches878 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc870(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 173;
}
x64Token x64Parser::tokenBranches869[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc870,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches877 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc869(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches868[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc869, x64Parser::tokenBranches869 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc518(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 149;
}
x64Token x64Parser::tokenBranches517[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc518,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches610 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches868 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc619(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 57;
}
x64Token x64Parser::tokenBranches618[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc619,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc697(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 70;
}
x64Token x64Parser::tokenBranches696[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc697,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc775(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 79;
}
x64Token x64Parser::tokenBranches774[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc775,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1114(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches1113[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1114,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1522(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 126;
}
x64Token x64Parser::tokenBranches1521[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1522,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1750(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 144;
}
x64Token x64Parser::tokenBranches1749[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1750,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1113(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1521(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1749(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1112[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1113, x64Parser::tokenBranches1113 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1521, x64Parser::tokenBranches1521 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1749, x64Parser::tokenBranches1749 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1296(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 108;
}
x64Token x64Parser::tokenBranches1111[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1112 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1296,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1111(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1110[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1111, x64Parser::tokenBranches1111 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1123(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 109;
}
x64Token x64Parser::tokenBranches1122[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1123,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1531(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 127;
}
x64Token x64Parser::tokenBranches1530[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1531,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1759(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 145;
}
x64Token x64Parser::tokenBranches1758[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1759,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1122(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1530(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1758(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1121[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1122, x64Parser::tokenBranches1122 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1530, x64Parser::tokenBranches1530 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1758, x64Parser::tokenBranches1758 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1303(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 109;
}
x64Token x64Parser::tokenBranches1109[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1110 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches1121 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1303,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc618(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc696(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc774(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1109(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches617[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc618, x64Parser::tokenBranches618 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc696, x64Parser::tokenBranches696 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc774, x64Parser::tokenBranches774 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1109, x64Parser::tokenBranches1109 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc895(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 91;
}
x64Token x64Parser::tokenBranches894[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc895,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc894(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches893[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc894, x64Parser::tokenBranches894 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc886(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 90;
}
x64Token x64Parser::tokenBranches885[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc886,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches893 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc885(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches884[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc885, x64Parser::tokenBranches885 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc523(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 57;
}
x64Token x64Parser::tokenBranches522[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc523,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches617 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches884 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc541(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 61;
}
x64Token x64Parser::tokenBranches540[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc541,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1837(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 152;
}
x64Token x64Parser::tokenBranches1836[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1837,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1885(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 161;
}
x64Token x64Parser::tokenBranches1884[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1885,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1933(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 169;
}
x64Token x64Parser::tokenBranches1932[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1933,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2139(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 195;
}
x64Token x64Parser::tokenBranches2138[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2139,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2395(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 212;
}
x64Token x64Parser::tokenBranches2394[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2395,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2539(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 228;
}
x64Token x64Parser::tokenBranches2538[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2539,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2138(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2394(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2538(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2137[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2138, x64Parser::tokenBranches2138 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2394, x64Parser::tokenBranches2394 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2538, x64Parser::tokenBranches2538 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2257(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 195;
}
x64Token x64Parser::tokenBranches2136[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2137 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2257,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2136(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2135[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2136, x64Parser::tokenBranches2136 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2148(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 196;
}
x64Token x64Parser::tokenBranches2147[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2148,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2404(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 213;
}
x64Token x64Parser::tokenBranches2403[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2404,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2548(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 229;
}
x64Token x64Parser::tokenBranches2547[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2548,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2147(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2403(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2547(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2146[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2147, x64Parser::tokenBranches2147 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2403, x64Parser::tokenBranches2403 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2547, x64Parser::tokenBranches2547 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2264(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 196;
}
x64Token x64Parser::tokenBranches2134[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2135 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2146 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2264,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1836(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1884(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1932(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2134(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1835[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1836, x64Parser::tokenBranches1836 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1884, x64Parser::tokenBranches1884 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1932, x64Parser::tokenBranches1932 },
	{x64Token::REGISTERCLASS, 10, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2134, x64Parser::tokenBranches2134 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2008(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 180;
}
x64Token x64Parser::tokenBranches2007[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2008,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2007(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2006[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2007, x64Parser::tokenBranches2007 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1999(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 179;
}
x64Token x64Parser::tokenBranches1998[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1999,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2006 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1998(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1997[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1998, x64Parser::tokenBranches1998 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1786(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 152;
}
x64Token x64Parser::tokenBranches1785[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1786,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1835 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1997 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1844(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 153;
}
x64Token x64Parser::tokenBranches1843[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1844,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1892(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 162;
}
x64Token x64Parser::tokenBranches1891[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1892,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1940(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 170;
}
x64Token x64Parser::tokenBranches1939[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1940,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2159(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 197;
}
x64Token x64Parser::tokenBranches2158[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2159,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2415(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 214;
}
x64Token x64Parser::tokenBranches2414[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2415,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2559(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 230;
}
x64Token x64Parser::tokenBranches2558[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2559,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2158(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2414(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2558(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2157[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2158, x64Parser::tokenBranches2158 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2414, x64Parser::tokenBranches2414 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2558, x64Parser::tokenBranches2558 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2273(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 197;
}
x64Token x64Parser::tokenBranches2156[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2157 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2273,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2156(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2155[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2156, x64Parser::tokenBranches2156 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2168(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 198;
}
x64Token x64Parser::tokenBranches2167[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2168,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2424(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 215;
}
x64Token x64Parser::tokenBranches2423[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2424,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2568(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 231;
}
x64Token x64Parser::tokenBranches2567[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2568,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2167(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2423(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2567(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2166[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2167, x64Parser::tokenBranches2167 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2423, x64Parser::tokenBranches2423 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2567, x64Parser::tokenBranches2567 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2280(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 198;
}
x64Token x64Parser::tokenBranches2154[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2155 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2166 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2280,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1843(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1891(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1939(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2154(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1842[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1843, x64Parser::tokenBranches1843 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1891, x64Parser::tokenBranches1891 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1939, x64Parser::tokenBranches1939 },
	{x64Token::REGISTERCLASS, 10, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2154, x64Parser::tokenBranches2154 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2024(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 182;
}
x64Token x64Parser::tokenBranches2023[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2024,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2023(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2022[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2023, x64Parser::tokenBranches2023 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2015(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 181;
}
x64Token x64Parser::tokenBranches2014[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2015,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2022 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2014(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2013[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2014, x64Parser::tokenBranches2014 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1791(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 153;
}
x64Token x64Parser::tokenBranches1790[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1791,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1842 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2013 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2622(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 234;
}
x64Token x64Parser::tokenBranches2621[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2622,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2670(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 243;
}
x64Token x64Parser::tokenBranches2669[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2670,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2718(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 251;
}
x64Token x64Parser::tokenBranches2717[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2718,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2896(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 275;
}
x64Token x64Parser::tokenBranches2895[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2896,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3152(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 291;
}
x64Token x64Parser::tokenBranches3151[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3152,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3296(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 307;
}
x64Token x64Parser::tokenBranches3295[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3296,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2895(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3151(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3295(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2894[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2895, x64Parser::tokenBranches2895 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3151, x64Parser::tokenBranches3151 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3295, x64Parser::tokenBranches3295 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3026(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 275;
}
x64Token x64Parser::tokenBranches2893[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2894 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3026,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2893(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2892[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2893, x64Parser::tokenBranches2893 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2905(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 276;
}
x64Token x64Parser::tokenBranches2904[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2905,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3161(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 292;
}
x64Token x64Parser::tokenBranches3160[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3161,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3305(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 308;
}
x64Token x64Parser::tokenBranches3304[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3305,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2904(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3160(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3304(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2903[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2904, x64Parser::tokenBranches2904 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3160, x64Parser::tokenBranches3160 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3304, x64Parser::tokenBranches3304 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3033(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 276;
}
x64Token x64Parser::tokenBranches2891[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2892 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2903 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3033,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2621(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2669(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2717(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2891(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2620[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2621, x64Parser::tokenBranches2621 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2669, x64Parser::tokenBranches2669 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2717, x64Parser::tokenBranches2717 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2891, x64Parser::tokenBranches2891 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2579(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 234;
}
x64Token x64Parser::tokenBranches2578[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2579,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2620 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2629(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 235;
}
x64Token x64Parser::tokenBranches2628[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2629,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2677(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 244;
}
x64Token x64Parser::tokenBranches2676[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2677,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2725(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 252;
}
x64Token x64Parser::tokenBranches2724[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2725,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2876(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 273;
}
x64Token x64Parser::tokenBranches2875[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2876,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3132(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 289;
}
x64Token x64Parser::tokenBranches3131[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3132,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 305;
}
x64Token x64Parser::tokenBranches3275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2875(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3131(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3275(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2874[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2875, x64Parser::tokenBranches2875 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3131, x64Parser::tokenBranches3131 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3275, x64Parser::tokenBranches3275 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3010(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 273;
}
x64Token x64Parser::tokenBranches2873[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2874 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3010,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2873(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2872[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2873, x64Parser::tokenBranches2873 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2885(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 274;
}
x64Token x64Parser::tokenBranches2884[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2885,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3141(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 290;
}
x64Token x64Parser::tokenBranches3140[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3141,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3285(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 306;
}
x64Token x64Parser::tokenBranches3284[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3285,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2884(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3140(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3284(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2883[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2884, x64Parser::tokenBranches2884 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3140, x64Parser::tokenBranches3140 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3284, x64Parser::tokenBranches3284 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3017(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 274;
}
x64Token x64Parser::tokenBranches2871[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2872 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2883 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3017,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2628(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2676(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2724(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2871(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2627[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2628, x64Parser::tokenBranches2628 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2676, x64Parser::tokenBranches2676 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2724, x64Parser::tokenBranches2724 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2871, x64Parser::tokenBranches2871 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2777(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 260;
}
x64Token x64Parser::tokenBranches2776[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2777,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2776(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2775[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2776, x64Parser::tokenBranches2776 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2768(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 259;
}
x64Token x64Parser::tokenBranches2767[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2768,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2775 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2767(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2766[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2767, x64Parser::tokenBranches2767 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2584(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 235;
}
x64Token x64Parser::tokenBranches2583[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2584,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2627 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2766 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2646(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 238;
}
x64Token x64Parser::tokenBranches2645[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2646,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2694(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 247;
}
x64Token x64Parser::tokenBranches2693[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2694,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2742(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 255;
}
x64Token x64Parser::tokenBranches2741[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2742,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2948(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 281;
}
x64Token x64Parser::tokenBranches2947[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2948,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3204(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 297;
}
x64Token x64Parser::tokenBranches3203[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3204,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3348(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 313;
}
x64Token x64Parser::tokenBranches3347[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3348,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2947(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3203(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3347(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2946[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2947, x64Parser::tokenBranches2947 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3203, x64Parser::tokenBranches3203 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3347, x64Parser::tokenBranches3347 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3066(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 281;
}
x64Token x64Parser::tokenBranches2945[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2946 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3066,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2945(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2944[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2945, x64Parser::tokenBranches2945 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2957(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 282;
}
x64Token x64Parser::tokenBranches2956[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2957,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3213(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 298;
}
x64Token x64Parser::tokenBranches3212[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3213,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3357(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 314;
}
x64Token x64Parser::tokenBranches3356[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3357,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2956(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3212(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3356(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2955[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2956, x64Parser::tokenBranches2956 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3212, x64Parser::tokenBranches3212 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3356, x64Parser::tokenBranches3356 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3073(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 282;
}
x64Token x64Parser::tokenBranches2943[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2944 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2955 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3073,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2645(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2693(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2741(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2943(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2644[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2645, x64Parser::tokenBranches2645 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2693, x64Parser::tokenBranches2693 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2741, x64Parser::tokenBranches2741 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2943, x64Parser::tokenBranches2943 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2817(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 266;
}
x64Token x64Parser::tokenBranches2816[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2817,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2816(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2815[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2816, x64Parser::tokenBranches2816 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2808(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 265;
}
x64Token x64Parser::tokenBranches2807[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2808,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2815 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2807(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2806[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2807, x64Parser::tokenBranches2807 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2595(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 238;
}
x64Token x64Parser::tokenBranches2594[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2595,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2644 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2806 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2653(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 239;
}
x64Token x64Parser::tokenBranches2652[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2653,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2701(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 248;
}
x64Token x64Parser::tokenBranches2700[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2701,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2749(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 256;
}
x64Token x64Parser::tokenBranches2748[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2749,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2968(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 283;
}
x64Token x64Parser::tokenBranches2967[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2968,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3224(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 299;
}
x64Token x64Parser::tokenBranches3223[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3224,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3368(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 315;
}
x64Token x64Parser::tokenBranches3367[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3368,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2967(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3223(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3367(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2966[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2967, x64Parser::tokenBranches2967 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3223, x64Parser::tokenBranches3223 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3367, x64Parser::tokenBranches3367 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3082(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 283;
}
x64Token x64Parser::tokenBranches2965[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2966 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3082,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2965(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2964[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2965, x64Parser::tokenBranches2965 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2977(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 284;
}
x64Token x64Parser::tokenBranches2976[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2977,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3233(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 300;
}
x64Token x64Parser::tokenBranches3232[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3233,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3377(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 316;
}
x64Token x64Parser::tokenBranches3376[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3377,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2976(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3232(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3376(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2975[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2976, x64Parser::tokenBranches2976 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3232, x64Parser::tokenBranches3232 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3376, x64Parser::tokenBranches3376 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3089(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 284;
}
x64Token x64Parser::tokenBranches2963[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2964 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2975 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3089,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2652(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2700(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2748(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2963(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2651[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2652, x64Parser::tokenBranches2652 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2700, x64Parser::tokenBranches2700 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2748, x64Parser::tokenBranches2748 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2963, x64Parser::tokenBranches2963 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2833(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 268;
}
x64Token x64Parser::tokenBranches2832[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2833,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2832(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2831[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2832, x64Parser::tokenBranches2832 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2824(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 267;
}
x64Token x64Parser::tokenBranches2823[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2824,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2831 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2823(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2822[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2823, x64Parser::tokenBranches2823 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2600(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 239;
}
x64Token x64Parser::tokenBranches2599[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2600,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2651 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2822 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc18(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc88(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc522(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->math = 0;
	operand.values[5]->mathval = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc540(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1790(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->math = 0;
	operand.values[5]->mathval = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc2599(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->math = 0;
	operand.values[5]->mathval = 0;
	operand.values[5][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches17[] = {
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches61 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches68 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches512 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches517 },
	{x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1785 },
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2578 },
	{x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2583 },
	{x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2594 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc18, x64Parser::tokenBranches18 },
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc88, x64Parser::tokenBranches88 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc522, x64Parser::tokenBranches522 },
	{x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc540, x64Parser::tokenBranches540 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1790, x64Parser::tokenBranches1790 },
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2599, x64Parser::tokenBranches2599 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches16[] = {
	{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches17 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc184(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 19;
}
x64Token x64Parser::tokenBranches183[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc184,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc330(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 34;
}
x64Token x64Parser::tokenBranches329[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc330,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc183(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc329(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches182[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc183, x64Parser::tokenBranches183 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc329, x64Parser::tokenBranches329 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc24(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 4;
}
x64Token x64Parser::tokenBranches23[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc24,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches182 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc130(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches129[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc130,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc276(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 28;
}
x64Token x64Parser::tokenBranches275[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc276,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc422(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 43;
}
x64Token x64Parser::tokenBranches421[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc422,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc23(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc129(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc275(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc421(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches22[] = {
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc23, x64Parser::tokenBranches23 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc129, x64Parser::tokenBranches129 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc275, x64Parser::tokenBranches275 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc421, x64Parser::tokenBranches421 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc92(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 13;
}
x64Token x64Parser::tokenBranches21[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches22 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc92,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc191(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 20;
}
x64Token x64Parser::tokenBranches190[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc191,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc337(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 35;
}
x64Token x64Parser::tokenBranches336[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc337,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc190(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc336(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches189[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc190, x64Parser::tokenBranches190 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc336, x64Parser::tokenBranches336 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc29(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 5;
}
x64Token x64Parser::tokenBranches28[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc29,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches189 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc156(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches155[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc156,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc302(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 31;
}
x64Token x64Parser::tokenBranches301[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc302,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc448(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 46;
}
x64Token x64Parser::tokenBranches447[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc448,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc28(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc155(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc301(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc447(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches27[] = {
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc28, x64Parser::tokenBranches28 },
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc155, x64Parser::tokenBranches155 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc301, x64Parser::tokenBranches301 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc447, x64Parser::tokenBranches447 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc110(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 16;
}
x64Token x64Parser::tokenBranches26[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches27 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc110,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc250(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 25;
}
x64Token x64Parser::tokenBranches249[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc250,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc396(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 40;
}
x64Token x64Parser::tokenBranches395[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc396,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc249(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc395(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches248[] = {
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc249, x64Parser::tokenBranches249 },
	{x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc395, x64Parser::tokenBranches395 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc74(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 10;
}
x64Token x64Parser::tokenBranches73[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc74,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches248 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc546(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 146;
}
x64Token x64Parser::tokenBranches545[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc546,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc624(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 155;
}
x64Token x64Parser::tokenBranches623[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc624,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc707(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 163;
}
x64Token x64Parser::tokenBranches706[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc707,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc920(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches919[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc920,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1328(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 112;
}
x64Token x64Parser::tokenBranches1327[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1328,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1556(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 130;
}
x64Token x64Parser::tokenBranches1555[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1556,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc919(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1327(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1555(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches918[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc919, x64Parser::tokenBranches919 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1327, x64Parser::tokenBranches1327 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1555, x64Parser::tokenBranches1555 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1142(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 94;
}
x64Token x64Parser::tokenBranches917[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches918 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1142,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc917(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches916[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc917, x64Parser::tokenBranches917 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc927(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches926[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc927,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1335(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 113;
}
x64Token x64Parser::tokenBranches1334[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1335,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1563(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 131;
}
x64Token x64Parser::tokenBranches1562[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1563,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc926(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1334(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1562(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches925[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc926, x64Parser::tokenBranches926 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1334, x64Parser::tokenBranches1334 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1562, x64Parser::tokenBranches1562 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1147(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 95;
}
x64Token x64Parser::tokenBranches915[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches916 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches925 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1147,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2049(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 185;
}
x64Token x64Parser::tokenBranches2048[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2049,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2305(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 202;
}
x64Token x64Parser::tokenBranches2304[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2305,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2449(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 218;
}
x64Token x64Parser::tokenBranches2448[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2449,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2048(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2304(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2448(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2047[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2048, x64Parser::tokenBranches2048 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2304, x64Parser::tokenBranches2304 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2448, x64Parser::tokenBranches2448 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2187(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 185;
}
x64Token x64Parser::tokenBranches2046[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2047 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2187,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2046(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2045[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2046, x64Parser::tokenBranches2046 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2056(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 186;
}
x64Token x64Parser::tokenBranches2055[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2056,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2312(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 203;
}
x64Token x64Parser::tokenBranches2311[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2312,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2456(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 219;
}
x64Token x64Parser::tokenBranches2455[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2456,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2055(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2311(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2455(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2054[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2055, x64Parser::tokenBranches2055 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2311, x64Parser::tokenBranches2311 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2455, x64Parser::tokenBranches2455 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2192(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 186;
}
x64Token x64Parser::tokenBranches2044[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2045 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2054 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2192,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc545(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc623(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc706(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc915(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc2044(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches544[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc545, x64Parser::tokenBranches545 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc623, x64Parser::tokenBranches623 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc706, x64Parser::tokenBranches706 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc915, x64Parser::tokenBranches915 },
	{x64Token::REGISTERCLASS, 10, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2044, x64Parser::tokenBranches2044 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc472(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 146;
}
x64Token x64Parser::tokenBranches471[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc472,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches544 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc551(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 147;
}
x64Token x64Parser::tokenBranches550[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc551,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc629(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 156;
}
x64Token x64Parser::tokenBranches628[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc629,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc702(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 164;
}
x64Token x64Parser::tokenBranches701[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc702,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc904(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches903[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc904,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1312(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 110;
}
x64Token x64Parser::tokenBranches1311[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1312,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1540(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 128;
}
x64Token x64Parser::tokenBranches1539[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1540,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc903(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1311(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1539(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches902[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc903, x64Parser::tokenBranches903 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1311, x64Parser::tokenBranches1311 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1539, x64Parser::tokenBranches1539 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1130(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 92;
}
x64Token x64Parser::tokenBranches901[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches902 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1130,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc901(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches900[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc901, x64Parser::tokenBranches901 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc911(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches910[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc911,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1319(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 111;
}
x64Token x64Parser::tokenBranches1318[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1319,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1547(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 129;
}
x64Token x64Parser::tokenBranches1546[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1547,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc910(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1318(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1546(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches909[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc910, x64Parser::tokenBranches910 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1318, x64Parser::tokenBranches1318 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1546, x64Parser::tokenBranches1546 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1135(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 93;
}
x64Token x64Parser::tokenBranches899[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches900 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches909 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1135,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2033(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 183;
}
x64Token x64Parser::tokenBranches2032[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2033,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2289(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 200;
}
x64Token x64Parser::tokenBranches2288[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2289,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2433(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 216;
}
x64Token x64Parser::tokenBranches2432[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2433,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2032(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2288(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2432(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2031[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2032, x64Parser::tokenBranches2032 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2288, x64Parser::tokenBranches2288 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2432, x64Parser::tokenBranches2432 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2175(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 183;
}
x64Token x64Parser::tokenBranches2030[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2031 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2175,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2030(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2029[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2030, x64Parser::tokenBranches2030 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2040(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 184;
}
x64Token x64Parser::tokenBranches2039[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2040,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2296(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 201;
}
x64Token x64Parser::tokenBranches2295[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2296,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2440(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 217;
}
x64Token x64Parser::tokenBranches2439[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2440,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2039(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2295(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2439(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2038[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2039, x64Parser::tokenBranches2039 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2295, x64Parser::tokenBranches2295 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2439, x64Parser::tokenBranches2439 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2180(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 184;
}
x64Token x64Parser::tokenBranches2028[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2029 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2038 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2180,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc550(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc628(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc701(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc899(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc2028(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches549[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc550, x64Parser::tokenBranches550 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc628, x64Parser::tokenBranches628 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc701, x64Parser::tokenBranches701 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc899, x64Parser::tokenBranches899 },
	{x64Token::REGISTERCLASS, 10, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2028, x64Parser::tokenBranches2028 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc787(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 172;
}
x64Token x64Parser::tokenBranches786[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc787,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc786(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches785[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc786, x64Parser::tokenBranches786 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc780(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 171;
}
x64Token x64Parser::tokenBranches779[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc780,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches785 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc779(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches778[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc779, x64Parser::tokenBranches779 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc475(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 147;
}
x64Token x64Parser::tokenBranches474[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc475,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches549 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches778 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc556(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches555[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc556,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc634(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 64;
}
x64Token x64Parser::tokenBranches633[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc634,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc712(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 73;
}
x64Token x64Parser::tokenBranches711[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc712,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc936(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches935[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc936,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1344(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 114;
}
x64Token x64Parser::tokenBranches1343[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1344,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1572(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 132;
}
x64Token x64Parser::tokenBranches1571[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1572,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc935(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1343(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1571(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches934[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc935, x64Parser::tokenBranches935 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1343, x64Parser::tokenBranches1343 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1571, x64Parser::tokenBranches1571 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1154(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 96;
}
x64Token x64Parser::tokenBranches933[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches934 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1154,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc933(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches932[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc933, x64Parser::tokenBranches933 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc943(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches942[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc943,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1351(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 115;
}
x64Token x64Parser::tokenBranches1350[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1351,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1579(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 133;
}
x64Token x64Parser::tokenBranches1578[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1579,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc942(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1350(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1578(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches941[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc942, x64Parser::tokenBranches942 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1350, x64Parser::tokenBranches1350 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1578, x64Parser::tokenBranches1578 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1159(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 97;
}
x64Token x64Parser::tokenBranches931[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches932 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches941 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc1159,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc555(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc633(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc711(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc931(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches554[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc555, x64Parser::tokenBranches555 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc633, x64Parser::tokenBranches633 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc711, x64Parser::tokenBranches711 },
	{x64Token::REGISTERCLASS, 7, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc931, x64Parser::tokenBranches931 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc799(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 83;
}
x64Token x64Parser::tokenBranches798[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc799,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc798(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches797[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc798, x64Parser::tokenBranches798 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc792(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 82;
}
x64Token x64Parser::tokenBranches791[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc792,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches797 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc791(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches790[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc791, x64Parser::tokenBranches791 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc478(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 51;
}
x64Token x64Parser::tokenBranches477[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc478,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches554 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData5,  NULL, x64Parser::tokenBranches790 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc526(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 58;
}
x64Token x64Parser::tokenBranches525[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc526,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1825(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 150;
}
x64Token x64Parser::tokenBranches1824[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1825,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1873(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 159;
}
x64Token x64Parser::tokenBranches1872[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1873,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1921(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 167;
}
x64Token x64Parser::tokenBranches1920[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1921,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2105(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 191;
}
x64Token x64Parser::tokenBranches2104[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2105,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2361(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 208;
}
x64Token x64Parser::tokenBranches2360[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2361,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2505(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 224;
}
x64Token x64Parser::tokenBranches2504[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2505,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2104(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2360(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2504(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2103[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2104, x64Parser::tokenBranches2104 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2360, x64Parser::tokenBranches2360 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2504, x64Parser::tokenBranches2504 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2231(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 191;
}
x64Token x64Parser::tokenBranches2102[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2103 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2231,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2102(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2101[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2102, x64Parser::tokenBranches2102 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2112(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 192;
}
x64Token x64Parser::tokenBranches2111[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2112,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2368(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 209;
}
x64Token x64Parser::tokenBranches2367[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2368,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2512(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 225;
}
x64Token x64Parser::tokenBranches2511[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2512,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2111(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2367(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2511(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2110[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2111, x64Parser::tokenBranches2111 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2367, x64Parser::tokenBranches2367 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2511, x64Parser::tokenBranches2511 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2236(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 199;
}
x64Token x64Parser::tokenBranches2100[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2101 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2110 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2236,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1824(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1872(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1920(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2100(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1823[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1824, x64Parser::tokenBranches1824 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1872, x64Parser::tokenBranches1872 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1920, x64Parser::tokenBranches1920 },
	{x64Token::REGISTERCLASS, 10, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2100, x64Parser::tokenBranches2100 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1980(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 176;
}
x64Token x64Parser::tokenBranches1979[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1980,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1979(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1978[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1979, x64Parser::tokenBranches1979 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1973(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 175;
}
x64Token x64Parser::tokenBranches1972[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1973,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1978 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1972(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1971[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1972, x64Parser::tokenBranches1972 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1778(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 150;
}
x64Token x64Parser::tokenBranches1777[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1778,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1823 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1971 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1830(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 151;
}
x64Token x64Parser::tokenBranches1829[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1830,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1878(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 160;
}
x64Token x64Parser::tokenBranches1877[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1878,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1926(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 168;
}
x64Token x64Parser::tokenBranches1925[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1926,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2121(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 193;
}
x64Token x64Parser::tokenBranches2120[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2121,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2377(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 210;
}
x64Token x64Parser::tokenBranches2376[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2377,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2521(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 226;
}
x64Token x64Parser::tokenBranches2520[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2521,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2120(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2376(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2520(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2119[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2120, x64Parser::tokenBranches2120 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2376, x64Parser::tokenBranches2376 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2520, x64Parser::tokenBranches2520 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2243(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 193;
}
x64Token x64Parser::tokenBranches2118[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2119 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2243,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2118(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2117[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2118, x64Parser::tokenBranches2118 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2128(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 194;
}
x64Token x64Parser::tokenBranches2127[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2128,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2384(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 211;
}
x64Token x64Parser::tokenBranches2383[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2384,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2528(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 227;
}
x64Token x64Parser::tokenBranches2527[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2528,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2127(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2383(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2527(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2126[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2127, x64Parser::tokenBranches2127 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2383, x64Parser::tokenBranches2383 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2527, x64Parser::tokenBranches2527 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2248(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 194;
}
x64Token x64Parser::tokenBranches2116[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2117 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2126 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2248,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1829(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1877(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1925(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2116(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1828[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1829, x64Parser::tokenBranches1829 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1877, x64Parser::tokenBranches1877 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1925, x64Parser::tokenBranches1925 },
	{x64Token::REGISTERCLASS, 10, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2116, x64Parser::tokenBranches2116 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1992(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 178;
}
x64Token x64Parser::tokenBranches1991[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1992,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1991(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1990[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1991, x64Parser::tokenBranches1991 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1985(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 177;
}
x64Token x64Parser::tokenBranches1984[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1985,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1990 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1984(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1983[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1984, x64Parser::tokenBranches1984 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1781(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 151;
}
x64Token x64Parser::tokenBranches1780[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1781,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1828 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1983 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1796(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 154;
}
x64Token x64Parser::tokenBranches1795[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1796,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc1795(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1794[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1795, x64Parser::tokenBranches1795 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches1793[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1794 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2610(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 232;
}
x64Token x64Parser::tokenBranches2609[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2610,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2658(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 241;
}
x64Token x64Parser::tokenBranches2657[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2658,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2706(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 249;
}
x64Token x64Parser::tokenBranches2705[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2706,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2858(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 271;
}
x64Token x64Parser::tokenBranches2857[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2858,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3114(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 287;
}
x64Token x64Parser::tokenBranches3113[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3114,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3258(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 303;
}
x64Token x64Parser::tokenBranches3257[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3258,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2857(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3113(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3257(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2856[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2857, x64Parser::tokenBranches2857 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3113, x64Parser::tokenBranches3113 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3257, x64Parser::tokenBranches3257 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2996(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 271;
}
x64Token x64Parser::tokenBranches2855[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2856 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2996,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2855(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2854[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2855, x64Parser::tokenBranches2855 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2865(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 272;
}
x64Token x64Parser::tokenBranches2864[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2865,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3121(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 288;
}
x64Token x64Parser::tokenBranches3120[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3121,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3265(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 304;
}
x64Token x64Parser::tokenBranches3264[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3265,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2864(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3120(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3264(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2863[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2864, x64Parser::tokenBranches2864 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3120, x64Parser::tokenBranches3120 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3264, x64Parser::tokenBranches3264 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3001(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 272;
}
x64Token x64Parser::tokenBranches2853[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2854 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2863 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3001,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2609(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2657(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2705(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2853(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2608[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2609, x64Parser::tokenBranches2609 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2657, x64Parser::tokenBranches2657 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2705, x64Parser::tokenBranches2705 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2853, x64Parser::tokenBranches2853 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2571(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 232;
}
x64Token x64Parser::tokenBranches2570[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2571,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2608 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2615(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 233;
}
x64Token x64Parser::tokenBranches2614[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2615,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2663(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 242;
}
x64Token x64Parser::tokenBranches2662[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2663,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2711(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 250;
}
x64Token x64Parser::tokenBranches2710[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2711,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2842(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 269;
}
x64Token x64Parser::tokenBranches2841[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2842,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3098(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 285;
}
x64Token x64Parser::tokenBranches3097[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3098,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3242(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 301;
}
x64Token x64Parser::tokenBranches3241[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3242,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2841(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3097(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3241(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2840[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2841, x64Parser::tokenBranches2841 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3097, x64Parser::tokenBranches3097 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3241, x64Parser::tokenBranches3241 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2984(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 269;
}
x64Token x64Parser::tokenBranches2839[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2840 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2984,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2839(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2838[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2839, x64Parser::tokenBranches2839 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2849(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 270;
}
x64Token x64Parser::tokenBranches2848[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2849,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3105(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 286;
}
x64Token x64Parser::tokenBranches3104[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3105,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3249(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 302;
}
x64Token x64Parser::tokenBranches3248[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3249,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2848(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3104(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3248(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2847[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2848, x64Parser::tokenBranches2848 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3104, x64Parser::tokenBranches3104 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3248, x64Parser::tokenBranches3248 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2989(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 270;
}
x64Token x64Parser::tokenBranches2837[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2838 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2847 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2989,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2614(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2662(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2710(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2837(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2613[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2614, x64Parser::tokenBranches2614 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2662, x64Parser::tokenBranches2662 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2710, x64Parser::tokenBranches2710 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2837, x64Parser::tokenBranches2837 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2761(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 258;
}
x64Token x64Parser::tokenBranches2760[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2761,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2760(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2759[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2760, x64Parser::tokenBranches2760 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2754(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 257;
}
x64Token x64Parser::tokenBranches2753[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2754,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2759 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2753(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2752[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2753, x64Parser::tokenBranches2753 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2574(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 233;
}
x64Token x64Parser::tokenBranches2573[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2574,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2613 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2752 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2634(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 236;
}
x64Token x64Parser::tokenBranches2633[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2634,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2682(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 245;
}
x64Token x64Parser::tokenBranches2681[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2682,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2730(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 253;
}
x64Token x64Parser::tokenBranches2729[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2730,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2914(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 277;
}
x64Token x64Parser::tokenBranches2913[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2914,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3170(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 293;
}
x64Token x64Parser::tokenBranches3169[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3170,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3314(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 309;
}
x64Token x64Parser::tokenBranches3313[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3314,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2913(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3169(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3313(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2912[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2913, x64Parser::tokenBranches2913 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3169, x64Parser::tokenBranches3169 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3313, x64Parser::tokenBranches3313 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3040(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 277;
}
x64Token x64Parser::tokenBranches2911[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2912 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3040,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2911(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2910[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2911, x64Parser::tokenBranches2911 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2921(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 278;
}
x64Token x64Parser::tokenBranches2920[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2921,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3177(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 294;
}
x64Token x64Parser::tokenBranches3176[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3177,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3321(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 310;
}
x64Token x64Parser::tokenBranches3320[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3321,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2920(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3176(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3320(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2919[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2920, x64Parser::tokenBranches2920 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3176, x64Parser::tokenBranches3176 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3320, x64Parser::tokenBranches3320 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3045(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 278;
}
x64Token x64Parser::tokenBranches2909[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2910 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2919 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3045,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2633(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2681(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2729(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2909(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2632[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2633, x64Parser::tokenBranches2633 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2681, x64Parser::tokenBranches2681 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2729, x64Parser::tokenBranches2729 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2909, x64Parser::tokenBranches2909 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2789(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 262;
}
x64Token x64Parser::tokenBranches2788[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2789,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2788(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2787[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2788, x64Parser::tokenBranches2788 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2782(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 261;
}
x64Token x64Parser::tokenBranches2781[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2782,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2787 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2781(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2780[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2781, x64Parser::tokenBranches2781 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2587(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 236;
}
x64Token x64Parser::tokenBranches2586[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2587,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2632 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2780 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2639(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 237;
}
x64Token x64Parser::tokenBranches2638[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2639,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2687(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 246;
}
x64Token x64Parser::tokenBranches2686[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2687,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2735(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 254;
}
x64Token x64Parser::tokenBranches2734[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2735,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2930(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 279;
}
x64Token x64Parser::tokenBranches2929[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2930,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3186(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 295;
}
x64Token x64Parser::tokenBranches3185[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3186,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3330(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 311;
}
x64Token x64Parser::tokenBranches3329[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3330,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2929(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3185(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3329(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2928[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2929, x64Parser::tokenBranches2929 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3185, x64Parser::tokenBranches3185 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3329, x64Parser::tokenBranches3329 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3052(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 279;
}
x64Token x64Parser::tokenBranches2927[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2928 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3052,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2927(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2926[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2927, x64Parser::tokenBranches2927 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2937(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 280;
}
x64Token x64Parser::tokenBranches2936[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2937,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3193(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 296;
}
x64Token x64Parser::tokenBranches3192[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3193,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3337(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 312;
}
x64Token x64Parser::tokenBranches3336[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3337,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2936(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3192(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3336(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2935[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2936, x64Parser::tokenBranches2936 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3192, x64Parser::tokenBranches3192 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3336, x64Parser::tokenBranches3336 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3057(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 280;
}
x64Token x64Parser::tokenBranches2925[] = {
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2926 },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2935 },
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc3057,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2638(x64Operand &operand, int tokenPos)
{
	operand.values[3] = new Coding[2];
	CleanupValues.push_back(operand.values[3]);
	operand.values[3]->type = Coding::number;
	operand.values[3]->val = operands.size();
	operand.values[3]->bits = 0;
	operand.values[3]->field = 0;
	operand.values[3]->math = 0;
	operand.values[3]->mathval = 0;
	operand.values[3][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2686(x64Operand &operand, int tokenPos)
{
	operand.values[4] = new Coding[2];
	CleanupValues.push_back(operand.values[4]);
	operand.values[4]->type = Coding::number;
	operand.values[4]->val = operands.size();
	operand.values[4]->bits = 0;
	operand.values[4]->field = 0;
	operand.values[4]->math = 0;
	operand.values[4]->mathval = 0;
	operand.values[4][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2734(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc2925(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2637[] = {
	{x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2638, x64Parser::tokenBranches2638 },
	{x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2686, x64Parser::tokenBranches2686 },
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2734, x64Parser::tokenBranches2734 },
	{x64Token::REGISTERCLASS, 16, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2925, x64Parser::tokenBranches2925 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2801(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 264;
}
x64Token x64Parser::tokenBranches2800[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2801,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2800(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2799[] = {
	{x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2800, x64Parser::tokenBranches2800 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2794(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 263;
}
x64Token x64Parser::tokenBranches2793[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2794,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2799 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2793(x64Operand &operand, int tokenPos)
{
	operand.values[6] = new Coding[2];
	CleanupValues.push_back(operand.values[6]);
	operand.values[6]->type = Coding::number;
	operand.values[6]->val = operands.size();
	operand.values[6]->bits = 0;
	operand.values[6]->field = 0;
	operand.values[6]->math = 0;
	operand.values[6]->mathval = 0;
	operand.values[6][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2792[] = {
	{x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2793, x64Parser::tokenBranches2793 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2590(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 237;
}
x64Token x64Parser::tokenBranches2589[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2590,  },
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2637 },
	{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2792 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2605(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 240;
}
x64Token x64Parser::tokenBranches2604[] = {
	{x64Token::TOKEN, 2, 1, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2605,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc2604(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2603[] = {
	{x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2604, x64Parser::tokenBranches2604 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches2602[] = {
	{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2603 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc16(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc73(x64Operand &operand, int tokenPos)
{
	operand.values[2] = new Coding[2];
	CleanupValues.push_back(operand.values[2]);
	operand.values[2]->type = Coding::reg;
	operand.values[2]->val = inputTokens[tokenPos]->val->ival;
	operand.values[2]->bits = 0;
	operand.values[2]->field = 0;
	operand.values[2]->math = 0;
	operand.values[2]->mathval = 0;
	operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc477(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->math = 0;
	operand.values[5]->mathval = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc525(x64Operand &operand, int tokenPos)
{
	operand.values[0] = new Coding[2];
	CleanupValues.push_back(operand.values[0]);
	operand.values[0]->type = Coding::number;
	operand.values[0]->val = operands.size();
	operand.values[0]->bits = 0;
	operand.values[0]->field = 0;
	operand.values[0]->math = 0;
	operand.values[0]->mathval = 0;
	operand.values[0][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc1780(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->math = 0;
	operand.values[5]->mathval = 0;
	operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc2589(x64Operand &operand, int tokenPos)
{
	operand.values[5] = new Coding[2];
	CleanupValues.push_back(operand.values[5]);
	operand.values[5]->type = Coding::reg;
	operand.values[5]->val = inputTokens[tokenPos]->val->ival;
	operand.values[5]->bits = 0;
	operand.values[5]->field = 0;
	operand.values[5]->math = 0;
	operand.values[5]->mathval = 0;
	operand.values[5][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches2[] = {
	{x64Token::REGISTER, 95, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches6 },
	{x64Token::REGISTER, 94, 0, 0, x64Parser::RegClassData3,  NULL, x64Parser::tokenBranches11 },
	{x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches21 },
	{x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2,  NULL, x64Parser::tokenBranches26 },
	{x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches471 },
	{x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData4,  NULL, x64Parser::tokenBranches474 },
	{x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1777 },
	{x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2570 },
	{x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2573 },
	{x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2586 },
	{x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc3, x64Parser::tokenBranches3 },
	{x64Token::REGISTERCLASS, 28, 0, 0, x64Parser::RegClassData1, &x64Parser::TokenFunc16, x64Parser::tokenBranches16 },
	{x64Token::REGISTERCLASS, 23, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc73, x64Parser::tokenBranches73 },
	{x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc477, x64Parser::tokenBranches477 },
	{x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc525, x64Parser::tokenBranches525 },
	{x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc1780, x64Parser::tokenBranches1780 },
	{x64Token::TOKEN, 6, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches1793 },
	{x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData6, &x64Parser::TokenFunc2589, x64Parser::tokenBranches2589 },
	{x64Token::TOKEN, 7, 0, 0, x64Parser::RegClassData6,  NULL, x64Parser::tokenBranches2602 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3378(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3379(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3380(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3381(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 318;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3382(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3383(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 317;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3384(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 319;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3385(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 319;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3386(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 319;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3387(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 319;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3388(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 320;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3389(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 320;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3390(x64Operand &operand, int tokenPos)
{
	operand.addressCoding = 321;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1[] = {
	{x64Token::TOKEN, 1, 0, 0, x64Parser::RegClassData1,  NULL, x64Parser::tokenBranches2 },
	{x64Token::REGISTERCLASS, 1, 1, 0, x64Parser::RegClassData7, &x64Parser::TokenFunc3378,  },
	{x64Token::REGISTERCLASS, 5, 1, 0, x64Parser::RegClassData8, &x64Parser::TokenFunc3379,  },
	{x64Token::REGISTERCLASS, 8, 1, 0, x64Parser::RegClassData9, &x64Parser::TokenFunc3380,  },
	{x64Token::REGISTERCLASS, 14, 1, 0, x64Parser::RegClassData10, &x64Parser::TokenFunc3381,  },
	{x64Token::REGISTERCLASS, 18, 1, 0, x64Parser::RegClassData11, &x64Parser::TokenFunc3382,  },
	{x64Token::REGISTERCLASS, 29, 1, 0, x64Parser::RegClassData12, &x64Parser::TokenFunc3383,  },
	{x64Token::REGISTERCLASS, 2, 1, 0, x64Parser::RegClassData13, &x64Parser::TokenFunc3384,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, x64Parser::RegClassData14, &x64Parser::TokenFunc3385,  },
	{x64Token::REGISTERCLASS, 11, 1, 0, x64Parser::RegClassData15, &x64Parser::TokenFunc3386,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, x64Parser::RegClassData16, &x64Parser::TokenFunc3387,  },
	{x64Token::REGISTERCLASS, 25, 1, 0, x64Parser::RegClassData17, &x64Parser::TokenFunc3388,  },
	{x64Token::REGISTERCLASS, 24, 1, 0, x64Parser::RegClassData18, &x64Parser::TokenFunc3389,  },
	{x64Token::REGISTERCLASS, 26, 1, 0, x64Parser::RegClassData19, &x64Parser::TokenFunc3390,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3392(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 322;
}
x64Token x64Parser::tokenBranches3391[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3392,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3394(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 323;
}
x64Token x64Parser::tokenBranches3393[] = {
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3394,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3399_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3399_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3399_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3399_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3399(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3399_8;
	operand.values[9] = tokenCoding3399_9;
	operand.values[10] = tokenCoding3399_10;
	operand.values[11] = tokenCoding3399_11;
}
Coding x64Parser::tokenCoding3407_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3407_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3407_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3407_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3407(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3407_8;
	operand.values[9] = tokenCoding3407_9;
	operand.values[10] = tokenCoding3407_10;
	operand.values[11] = tokenCoding3407_11;
}
x64Token x64Parser::tokenBranches3398[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3399,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3407,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3397[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3398 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3396[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3397 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3403_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3403_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3403_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3403_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3403(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3403_8;
	operand.values[9] = tokenCoding3403_9;
	operand.values[10] = tokenCoding3403_10;
	operand.values[11] = tokenCoding3403_11;
}
Coding x64Parser::tokenCoding3411_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3411_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3411_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3411_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3411(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3411_8;
	operand.values[9] = tokenCoding3411_9;
	operand.values[10] = tokenCoding3411_10;
	operand.values[11] = tokenCoding3411_11;
}
x64Token x64Parser::tokenBranches3402[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3403,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3411,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3401[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3402 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3400[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3401 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3415_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3415_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3415_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3415_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3415(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3415_8;
	operand.values[9] = tokenCoding3415_9;
	operand.values[10] = tokenCoding3415_10;
	operand.values[11] = tokenCoding3415_11;
}
x64Token x64Parser::tokenBranches3414[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3415,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3413[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3414 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3412[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3413 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3419_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3419_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3419_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3419_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3419(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3419_8;
	operand.values[9] = tokenCoding3419_9;
	operand.values[10] = tokenCoding3419_10;
	operand.values[11] = tokenCoding3419_11;
}
x64Token x64Parser::tokenBranches3418[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3419,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3417[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3418 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3416[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3417 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3423_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3423_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3423_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3423_11[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3423(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3423_8;
	operand.values[9] = tokenCoding3423_9;
	operand.values[10] = tokenCoding3423_10;
	operand.values[11] = tokenCoding3423_11;
}
x64Token x64Parser::tokenBranches3422[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3423,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3421[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3422 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3420[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3421 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3396(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3400(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3412(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3416(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3420(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3395[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc3396, x64Parser::tokenBranches3396 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc3400, x64Parser::tokenBranches3400 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3412, x64Parser::tokenBranches3412 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc3416, x64Parser::tokenBranches3416 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc3420, x64Parser::tokenBranches3420 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3428_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3428_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3428_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3428_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3428(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3428_8;
	operand.values[9] = tokenCoding3428_9;
	operand.values[10] = tokenCoding3428_10;
	operand.values[11] = tokenCoding3428_11;
}
Coding x64Parser::tokenCoding3436_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3436_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3436_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3436_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3436(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3436_8;
	operand.values[9] = tokenCoding3436_9;
	operand.values[10] = tokenCoding3436_10;
	operand.values[11] = tokenCoding3436_11;
}
x64Token x64Parser::tokenBranches3427[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3428,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3436,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3426[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3427 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3425[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3426 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3432_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3432_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3432_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3432_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3432(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3432_8;
	operand.values[9] = tokenCoding3432_9;
	operand.values[10] = tokenCoding3432_10;
	operand.values[11] = tokenCoding3432_11;
}
Coding x64Parser::tokenCoding3440_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3440_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3440_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3440_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3440(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3440_8;
	operand.values[9] = tokenCoding3440_9;
	operand.values[10] = tokenCoding3440_10;
	operand.values[11] = tokenCoding3440_11;
}
x64Token x64Parser::tokenBranches3431[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3432,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3440,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3430[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3431 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3429[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3430 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3444_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3444_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3444_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3444_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3444(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3444_8;
	operand.values[9] = tokenCoding3444_9;
	operand.values[10] = tokenCoding3444_10;
	operand.values[11] = tokenCoding3444_11;
}
x64Token x64Parser::tokenBranches3443[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3444,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3442[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3443 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3441[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3442 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3448_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3448_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3448_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3448_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3448(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3448_8;
	operand.values[9] = tokenCoding3448_9;
	operand.values[10] = tokenCoding3448_10;
	operand.values[11] = tokenCoding3448_11;
}
x64Token x64Parser::tokenBranches3447[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3448,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3446[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3447 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3445[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3446 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3452_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3452_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3452_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3452_11[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3452(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3452_8;
	operand.values[9] = tokenCoding3452_9;
	operand.values[10] = tokenCoding3452_10;
	operand.values[11] = tokenCoding3452_11;
}
x64Token x64Parser::tokenBranches3451[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3452,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3450[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3451 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3449[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3450 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3425(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3429(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3441(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3445(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3449(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3424[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc3425, x64Parser::tokenBranches3425 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc3429, x64Parser::tokenBranches3429 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3441, x64Parser::tokenBranches3441 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc3445, x64Parser::tokenBranches3445 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc3449, x64Parser::tokenBranches3449 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3457(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 324;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3456[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3457,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3455[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3456 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3454[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3455 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3461(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 325;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3460[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3461,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3459[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3460 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3458[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3459 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3465(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 326;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3464[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3465,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3463[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3464 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3462[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3463 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3469(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 327;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3468[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3469,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3467[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3468 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3466[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3467 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3473_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3473_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3473_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3473_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 2 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3473(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3473_8;
	operand.values[9] = tokenCoding3473_9;
	operand.values[10] = tokenCoding3473_10;
	operand.values[11] = tokenCoding3473_11;
}
x64Token x64Parser::tokenBranches3472[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3473,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3471[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3472 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3470[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3471 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3477_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3477_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3477_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3477_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 3 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3477(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3477_8;
	operand.values[9] = tokenCoding3477_9;
	operand.values[10] = tokenCoding3477_10;
	operand.values[11] = tokenCoding3477_11;
}
x64Token x64Parser::tokenBranches3476[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3477,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3475[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3476 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3474[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3475 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3481_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3481_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3481_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3481_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 3 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3481(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3481_8;
	operand.values[9] = tokenCoding3481_9;
	operand.values[10] = tokenCoding3481_10;
	operand.values[11] = tokenCoding3481_11;
}
x64Token x64Parser::tokenBranches3480[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3481,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3479[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3480 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3478[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3479 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3485_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3485_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3485_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3485_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 2 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3485(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3485_8;
	operand.values[9] = tokenCoding3485_9;
	operand.values[10] = tokenCoding3485_10;
	operand.values[11] = tokenCoding3485_11;
}
x64Token x64Parser::tokenBranches3484[] = {
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3485,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3483[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3484 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3482[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3483 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3489_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3489_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3489_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3489_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 3 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3489(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3489_8;
	operand.values[9] = tokenCoding3489_9;
	operand.values[10] = tokenCoding3489_10;
	operand.values[11] = tokenCoding3489_11;
}
x64Token x64Parser::tokenBranches3488[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3489,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3487[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3488 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3486[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3487 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3493_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3493_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3493_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3493_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 3 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3493(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3493_8;
	operand.values[9] = tokenCoding3493_9;
	operand.values[10] = tokenCoding3493_10;
	operand.values[11] = tokenCoding3493_11;
}
x64Token x64Parser::tokenBranches3492[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3493,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3491[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3492 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3490[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3491 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3497_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3497_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3497_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3497_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 3 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3497(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3497_8;
	operand.values[9] = tokenCoding3497_9;
	operand.values[10] = tokenCoding3497_10;
	operand.values[11] = tokenCoding3497_11;
}
x64Token x64Parser::tokenBranches3496[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3497,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3495[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3496 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3494[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3495 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3501_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3501_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3501_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3501_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3501(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3501_8;
	operand.values[9] = tokenCoding3501_9;
	operand.values[10] = tokenCoding3501_10;
	operand.values[11] = tokenCoding3501_11;
}
x64Token x64Parser::tokenBranches3500[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3501,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3499[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3500 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3513_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3513_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3513_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3513_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3513(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3513_8;
	operand.values[9] = tokenCoding3513_9;
	operand.values[10] = tokenCoding3513_10;
	operand.values[11] = tokenCoding3513_11;
}
x64Token x64Parser::tokenBranches3512[] = {
	{x64Token::REGISTERCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3513,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3511[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3512 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3498[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3499 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3511 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3505_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3505_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3505_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3505_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3505(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3505_8;
	operand.values[9] = tokenCoding3505_9;
	operand.values[10] = tokenCoding3505_10;
	operand.values[11] = tokenCoding3505_11;
}
x64Token x64Parser::tokenBranches3504[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3505,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3503[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3504 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3517_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3517_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3517_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3517_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3517(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3517_8;
	operand.values[9] = tokenCoding3517_9;
	operand.values[10] = tokenCoding3517_10;
	operand.values[11] = tokenCoding3517_11;
}
x64Token x64Parser::tokenBranches3516[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3517,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3515[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3516 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3502[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3503 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3515 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3509_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3509_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3509_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3509_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3509(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3509_8;
	operand.values[9] = tokenCoding3509_9;
	operand.values[10] = tokenCoding3509_10;
	operand.values[11] = tokenCoding3509_11;
}
x64Token x64Parser::tokenBranches3508[] = {
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc3509,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3507[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3508 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3521_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3521_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3521_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3521_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3521(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3521_8;
	operand.values[9] = tokenCoding3521_9;
	operand.values[10] = tokenCoding3521_10;
	operand.values[11] = tokenCoding3521_11;
}
x64Token x64Parser::tokenBranches3520[] = {
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc3521,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3519[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3520 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3506[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3507 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3519 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3525_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3525_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3525_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3525_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 28, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3525(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3525_8;
	operand.values[9] = tokenCoding3525_9;
	operand.values[10] = tokenCoding3525_10;
	operand.values[11] = tokenCoding3525_11;
}
x64Token x64Parser::tokenBranches3524[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc3525,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3523[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3524 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3522[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3523 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3530_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3530(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3530_11;
}
x64Token x64Parser::tokenBranches3529[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3530,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3528[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3529 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3527[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3528 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3565_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3565(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3565_11;
}
x64Token x64Parser::tokenBranches3564[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3565,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3563[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3564 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3562[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3563 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3526[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3527 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3562 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3535_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3535(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3535_11;
}
x64Token x64Parser::tokenBranches3534[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3535,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3540_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3540(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3540_11;
}
x64Token x64Parser::tokenBranches3539[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3540,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3533[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3534 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3539 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3532[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3533 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3570_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3570(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3570_11;
}
x64Token x64Parser::tokenBranches3569[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3570,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3575_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3575(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3575_11;
}
x64Token x64Parser::tokenBranches3574[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3575,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3568[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3569 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3574 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3567[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3568 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3531[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3532 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3567 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3545_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3545(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3545_11;
}
x64Token x64Parser::tokenBranches3544[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3545,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3550_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3550(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3550_11;
}
x64Token x64Parser::tokenBranches3549[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3550,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3543[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3544 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3549 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3542[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3543 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3580_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3580(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3580_11;
}
x64Token x64Parser::tokenBranches3579[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3580,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3585_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3585(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3585_11;
}
x64Token x64Parser::tokenBranches3584[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3585,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3578[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3579 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3584 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3577[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3578 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3541[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3542 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3577 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3555_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3555(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3555_11;
}
x64Token x64Parser::tokenBranches3554[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3555,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3560_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3560(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3560_11;
}
x64Token x64Parser::tokenBranches3559[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3560,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3553[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3554 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3559 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3552[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3553 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3590_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3590(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3590_11;
}
x64Token x64Parser::tokenBranches3589[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3590,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3595_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3595(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3595_11;
}
x64Token x64Parser::tokenBranches3594[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3595,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3588[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3589 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3594 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3587[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3588 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3551[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches3552 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3587 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3599_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3599(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3599_11;
}
x64Token x64Parser::tokenBranches3598[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3599,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3597[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3598 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3596[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3597 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3603_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3603(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3603_11;
}
x64Token x64Parser::tokenBranches3602[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3603,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3601[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3602 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3600[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3601 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3607_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3607(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3607_11;
}
x64Token x64Parser::tokenBranches3606[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3607,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3611_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3611(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3611_11;
}
x64Token x64Parser::tokenBranches3610[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3611,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3605[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3606 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3610 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3604[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3605 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3615_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3615(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 329;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3615_11;
}
x64Token x64Parser::tokenBranches3614[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3615,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3619_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3619(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 330;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3619_11;
}
x64Token x64Parser::tokenBranches3618[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc3619,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3613[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3614 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3618 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3612[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3613 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3623_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3623(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3623_11;
}
x64Token x64Parser::tokenBranches3622[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3623,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3627_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3627(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3627_11;
}
x64Token x64Parser::tokenBranches3626[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3627,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3621[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3622 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3626 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3620[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3621 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3631_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3631(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 331;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3631_11;
}
x64Token x64Parser::tokenBranches3630[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3631,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3635_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3635(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 332;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3635_11;
}
x64Token x64Parser::tokenBranches3634[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc3635,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3629[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3630 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3634 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3628[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3629 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3639_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3639(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 333;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3639_11;
}
x64Token x64Parser::tokenBranches3638[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc3639,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3643_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3643(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 334;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3643_11;
}
x64Token x64Parser::tokenBranches3642[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc3643,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3637[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3638 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3642 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3636[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3637 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3470(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3474(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3478(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3482(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3486(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3490(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3494(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3453[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches3454 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches3458 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3462 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3466 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc3470, x64Parser::tokenBranches3470 },
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc3474, x64Parser::tokenBranches3474 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc3478, x64Parser::tokenBranches3478 },
	{x64Token::REGISTERCLASS, 2, 0, 0, NULL,&x64Parser::TokenFunc3482, x64Parser::tokenBranches3482 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3486, x64Parser::tokenBranches3486 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc3490, x64Parser::tokenBranches3490 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc3494, x64Parser::tokenBranches3494 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3498 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3502 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3506 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3522 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3526 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3531 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3541 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3551 },
	{x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches3596 },
	{x64Token::ADDRESSCLASS, 25, 0, 0, NULL, NULL, x64Parser::tokenBranches3600 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches3604 },
	{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches3612 },
	{x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches3620 },
	{x64Token::ADDRESSCLASS, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches3628 },
	{x64Token::ADDRESSCLASS, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches3636 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3649_11[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3649(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 335;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3649_11;
}
x64Token x64Parser::tokenBranches3648[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3649,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3668_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3668_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3668_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3668_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 28, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3668(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3668_8;
	operand.values[9] = tokenCoding3668_9;
	operand.values[10] = tokenCoding3668_10;
	operand.values[11] = tokenCoding3668_11;
}
x64Token x64Parser::tokenBranches3647[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3648 },
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3668,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3646[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3647 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3659_11[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3659(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 335;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3659_11;
}
x64Token x64Parser::tokenBranches3658[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3659,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3676_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3676_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3676_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3676_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 28, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3676(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3676_8;
	operand.values[9] = tokenCoding3676_9;
	operand.values[10] = tokenCoding3676_10;
	operand.values[11] = tokenCoding3676_11;
}
x64Token x64Parser::tokenBranches3657[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3658 },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3676,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3656[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3657 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3645[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3646 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3656 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3654_11[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3654(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 336;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3654_11;
}
x64Token x64Parser::tokenBranches3653[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3654,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3672_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3672_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3672_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3672_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 28, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3672(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3672_8;
	operand.values[9] = tokenCoding3672_9;
	operand.values[10] = tokenCoding3672_10;
	operand.values[11] = tokenCoding3672_11;
}
x64Token x64Parser::tokenBranches3652[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3653 },
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc3672,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3651[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3652 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3664_11[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3664(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 336;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3664_11;
}
x64Token x64Parser::tokenBranches3663[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3664,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3680_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3680_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3680_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3680_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 28, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3680(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3680_8;
	operand.values[9] = tokenCoding3680_9;
	operand.values[10] = tokenCoding3680_10;
	operand.values[11] = tokenCoding3680_11;
}
x64Token x64Parser::tokenBranches3662[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3663 },
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc3680,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3661[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3662 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3650[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3651 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3661 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3684_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3684_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3684_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3684_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 28, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3684(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding3684_8;
	operand.values[9] = tokenCoding3684_9;
	operand.values[10] = tokenCoding3684_10;
	operand.values[11] = tokenCoding3684_11;
}
x64Token x64Parser::tokenBranches3683[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc3684,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3682[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3683 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3681[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3682 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3644[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3645 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3650 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3681 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3694_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3694(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3694_11;
}
Coding x64Parser::tokenCoding3700_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3700(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3700_11;
}
x64Token x64Parser::tokenBranches3693[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3694,  },
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3700,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3696_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3696(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3696_11;
}
Coding x64Parser::tokenCoding3702_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3702(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3702_11;
}
x64Token x64Parser::tokenBranches3695[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3696,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3702,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3698_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3698(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3698_11;
}
Coding x64Parser::tokenCoding3704_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3704(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3704_11;
}
x64Token x64Parser::tokenBranches3697[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3698,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3704,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3706_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3706(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3706_11;
}
x64Token x64Parser::tokenBranches3705[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3706,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3686_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3686(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3686_11;
}
void x64Parser::TokenFunc3687(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3688(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 338;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
Coding x64Parser::tokenCoding3689_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3689(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3689_11;
}
void x64Parser::TokenFunc3690(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 337;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3691(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 338;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3692(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 339;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3685[] = {
	{x64Token::ADDRESSCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3686,  },
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3687,  },
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc3688,  },
	{x64Token::ADDRESSCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc3689,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3690,  },
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc3691,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc3692,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3693 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3695 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3697 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3705 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3716_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3716(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3716_11;
}
Coding x64Parser::tokenCoding3722_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3722(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3722_11;
}
x64Token x64Parser::tokenBranches3715[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3716,  },
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3722,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3718_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3718(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3718_11;
}
Coding x64Parser::tokenCoding3724_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3724(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3724_11;
}
x64Token x64Parser::tokenBranches3717[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3718,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3724,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3720_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3720(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3720_11;
}
Coding x64Parser::tokenCoding3726_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3726(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3726_11;
}
Coding x64Parser::tokenCoding3728_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3728(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3728_11;
}
x64Token x64Parser::tokenBranches3719[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3720,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3726,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3728,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3708_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3708(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3708_11;
}
Coding x64Parser::tokenCoding3709_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3709(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3709_11;
}
Coding x64Parser::tokenCoding3710_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3710(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3710_11;
}
Coding x64Parser::tokenCoding3711_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3711(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3711_11;
}
Coding x64Parser::tokenCoding3712_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3712(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3712_11;
}
Coding x64Parser::tokenCoding3713_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3713(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3713_11;
}
Coding x64Parser::tokenCoding3714_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3714(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3714_11;
}
x64Token x64Parser::tokenBranches3707[] = {
	{x64Token::ADDRESSCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3708,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3709,  },
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc3710,  },
	{x64Token::ADDRESSCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc3711,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc3712,  },
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc3713,  },
	{x64Token::ADDRESSCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc3714,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3715 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3717 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3719 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3732(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3731[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc3732,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3730[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3731 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3735(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 341;
}
x64Token x64Parser::tokenBranches3734[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc3735,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3733[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3734 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3738_11[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3738(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3738_11;
}
Coding x64Parser::tokenCoding3742_11[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3742(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3742_11;
}
x64Token x64Parser::tokenBranches3737[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3738,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3742,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3740_11[] = {
	{ Coding::indirect, 27, -1, 0, 43, 4 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3740(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3740_11;
}
Coding x64Parser::tokenCoding3744_11[] = {
	{ Coding::indirect, 27, -1, 0, 43, 4 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3744(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3744_11;
}
x64Token x64Parser::tokenBranches3739[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc3740,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc3744,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3733(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 342;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3729[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches3730 },
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc3733, x64Parser::tokenBranches3733 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3737 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches3739 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3748(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 317;
}
x64Token x64Parser::tokenBranches3747[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc3748,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3746[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3747 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3746(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 317;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
void x64Parser::TokenFunc3750(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 343;
}
x64Token x64Parser::tokenBranches3745[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc3746, x64Parser::tokenBranches3746 },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc3750,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3753_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 4 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3753(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3753_11;
}
Coding x64Parser::tokenCoding3757_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 4 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3757(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3757_11;
}
x64Token x64Parser::tokenBranches3752[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3753,  },
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc3757,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3755_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3755(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3755_11;
}
Coding x64Parser::tokenCoding3759_11[] = {
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3759(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3759_11;
}
x64Token x64Parser::tokenBranches3754[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc3755,  },
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc3759,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3751[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3752 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3754 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3761[] = {
	{x64Token::ADDRESSCLASS, 0, 1, 0, NULL, NULL,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3760[] = {
	{x64Token::TOKEN, 14, 0, 1, NULL, NULL, x64Parser::tokenBranches3761 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3765(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 344;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3764[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc3765,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3767(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 345;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3769(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3766[] = {
	{x64Token::NUMBER, 13, 1, 0, NULL,&x64Parser::TokenFunc3767,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc3769,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3770(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 345;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc3771(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 346;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3763[] = {
	{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3764 },
	{x64Token::TOKEN, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches3766 },
	{x64Token::NUMBER, 12, 1, 0, NULL,&x64Parser::TokenFunc3770,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc3771,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3776_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3776_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3776_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3776_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 29, 4, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3776(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3776_8;
	operand.values[9] = tokenCoding3776_9;
	operand.values[10] = tokenCoding3776_10;
	operand.values[11] = tokenCoding3776_11;
}
x64Token x64Parser::tokenBranches3775[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3776,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3774[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3775 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3773[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3774 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3780_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3780_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3780_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3780_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 29, 4, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3780(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3780_8;
	operand.values[9] = tokenCoding3780_9;
	operand.values[10] = tokenCoding3780_10;
	operand.values[11] = tokenCoding3780_11;
}
x64Token x64Parser::tokenBranches3779[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3780,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3778[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3779 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3777[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3778 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3784_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3784_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3784_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3784_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 29, 4, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3784(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3784_8;
	operand.values[9] = tokenCoding3784_9;
	operand.values[10] = tokenCoding3784_10;
	operand.values[11] = tokenCoding3784_11;
}
x64Token x64Parser::tokenBranches3783[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3784,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3782[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches3783 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3781[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3782 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3788_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3788_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3788_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3788_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 29, 4, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3788(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3788_8;
	operand.values[9] = tokenCoding3788_9;
	operand.values[10] = tokenCoding3788_10;
	operand.values[11] = tokenCoding3788_11;
}
x64Token x64Parser::tokenBranches3787[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3788,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3786[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches3787 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3785[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3786 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3792_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3792_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3792_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3792_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 29, 4, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3792(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3792_8;
	operand.values[9] = tokenCoding3792_9;
	operand.values[10] = tokenCoding3792_10;
	operand.values[11] = tokenCoding3792_11;
}
x64Token x64Parser::tokenBranches3791[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc3792,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3790[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches3791 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3789[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3790 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3773(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3777(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3781(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3785(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3789(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3772[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc3773, x64Parser::tokenBranches3773 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc3777, x64Parser::tokenBranches3777 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3781, x64Parser::tokenBranches3781 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc3785, x64Parser::tokenBranches3785 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc3789, x64Parser::tokenBranches3789 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3795_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3795_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 4},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 29, 4, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3795(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3795_10;
	operand.values[11] = tokenCoding3795_11;
}
Coding x64Parser::tokenCoding3797_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3797_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 4},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 29, 4, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3797(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding3797_10;
	operand.values[11] = tokenCoding3797_11;
}
x64Token x64Parser::tokenBranches3794[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3795,  },
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3797,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3793[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3794 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3811_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3811_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3811_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3811_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3811(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3811_8;
	operand.values[9] = tokenCoding3811_9;
	operand.values[10] = tokenCoding3811_10;
	operand.values[11] = tokenCoding3811_11;
}
x64Token x64Parser::tokenBranches3810[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc3811,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3801_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3801_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3801_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3801_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3801(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3801_8;
	operand.values[9] = tokenCoding3801_9;
	operand.values[10] = tokenCoding3801_10;
	operand.values[11] = tokenCoding3801_11;
}
x64Token x64Parser::tokenBranches3800[] = {
	{x64Token::ADDRESSCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3801,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3810 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3799[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3800 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3815_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3815_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3815_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3815_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3815(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3815_8;
	operand.values[9] = tokenCoding3815_9;
	operand.values[10] = tokenCoding3815_10;
	operand.values[11] = tokenCoding3815_11;
}
x64Token x64Parser::tokenBranches3814[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc3815,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3819_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3819_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3819_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3819_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3819(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3819_8;
	operand.values[9] = tokenCoding3819_9;
	operand.values[10] = tokenCoding3819_10;
	operand.values[11] = tokenCoding3819_11;
}
x64Token x64Parser::tokenBranches3818[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc3819,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3804_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3804_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3804_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3804_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3804(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3804_8;
	operand.values[9] = tokenCoding3804_9;
	operand.values[10] = tokenCoding3804_10;
	operand.values[11] = tokenCoding3804_11;
}
Coding x64Parser::tokenCoding3807_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3807_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3807_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3807_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3807(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3807_8;
	operand.values[9] = tokenCoding3807_9;
	operand.values[10] = tokenCoding3807_10;
	operand.values[11] = tokenCoding3807_11;
}
x64Token x64Parser::tokenBranches3803[] = {
	{x64Token::ADDRESSCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc3804,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc3807,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3814 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3818 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3802[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3803 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3841_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3841_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3841_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3841_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3841(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3841_8;
	operand.values[9] = tokenCoding3841_9;
	operand.values[10] = tokenCoding3841_10;
	operand.values[11] = tokenCoding3841_11;
}
x64Token x64Parser::tokenBranches3840[] = {
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3841,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3822_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3822_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3822_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3822_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3822(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3822_8;
	operand.values[9] = tokenCoding3822_9;
	operand.values[10] = tokenCoding3822_10;
	operand.values[11] = tokenCoding3822_11;
}
x64Token x64Parser::tokenBranches3821[] = {
	{x64Token::ADDRESSCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc3822,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3840 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3820[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3821 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3845_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3845_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3845_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3845_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3845(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3845_8;
	operand.values[9] = tokenCoding3845_9;
	operand.values[10] = tokenCoding3845_10;
	operand.values[11] = tokenCoding3845_11;
}
x64Token x64Parser::tokenBranches3844[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3845,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3849_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3849_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3849_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3849_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3849(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3849_8;
	operand.values[9] = tokenCoding3849_9;
	operand.values[10] = tokenCoding3849_10;
	operand.values[11] = tokenCoding3849_11;
}
x64Token x64Parser::tokenBranches3848[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3849,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3825_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3825_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3825_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3825_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3825(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3825_8;
	operand.values[9] = tokenCoding3825_9;
	operand.values[10] = tokenCoding3825_10;
	operand.values[11] = tokenCoding3825_11;
}
Coding x64Parser::tokenCoding3828_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3828_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3828_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3828_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3828(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3828_8;
	operand.values[9] = tokenCoding3828_9;
	operand.values[10] = tokenCoding3828_10;
	operand.values[11] = tokenCoding3828_11;
}
x64Token x64Parser::tokenBranches3824[] = {
	{x64Token::ADDRESSCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc3825,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc3828,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3844 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3848 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3823[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3824 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3853_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3853_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3853_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3853_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3853(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3853_8;
	operand.values[9] = tokenCoding3853_9;
	operand.values[10] = tokenCoding3853_10;
	operand.values[11] = tokenCoding3853_11;
}
x64Token x64Parser::tokenBranches3852[] = {
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc3853,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3857_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3857_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3857_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3857_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3857(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3857_8;
	operand.values[9] = tokenCoding3857_9;
	operand.values[10] = tokenCoding3857_10;
	operand.values[11] = tokenCoding3857_11;
}
x64Token x64Parser::tokenBranches3856[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc3857,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3861_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3861_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3861_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3861_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3861(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3861_8;
	operand.values[9] = tokenCoding3861_9;
	operand.values[10] = tokenCoding3861_10;
	operand.values[11] = tokenCoding3861_11;
}
x64Token x64Parser::tokenBranches3860[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc3861,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3831_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3831_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3831_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3831_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3831(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3831_8;
	operand.values[9] = tokenCoding3831_9;
	operand.values[10] = tokenCoding3831_10;
	operand.values[11] = tokenCoding3831_11;
}
Coding x64Parser::tokenCoding3834_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3834_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3834_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3834_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3834(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3834_8;
	operand.values[9] = tokenCoding3834_9;
	operand.values[10] = tokenCoding3834_10;
	operand.values[11] = tokenCoding3834_11;
}
Coding x64Parser::tokenCoding3837_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3837_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3837_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding3837_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc3837(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding3837_8;
	operand.values[9] = tokenCoding3837_9;
	operand.values[10] = tokenCoding3837_10;
	operand.values[11] = tokenCoding3837_11;
}
x64Token x64Parser::tokenBranches3830[] = {
	{x64Token::ADDRESSCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc3831,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc3834,  },
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc3837,  },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3852 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3856 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3860 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3829[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3830 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc3799(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3802(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3820(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3823(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc3829(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3798[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc3799, x64Parser::tokenBranches3799 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc3802, x64Parser::tokenBranches3802 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc3820, x64Parser::tokenBranches3820 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc3823, x64Parser::tokenBranches3823 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc3829, x64Parser::tokenBranches3829 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3865_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3865(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3865_11;
}
Coding x64Parser::tokenCoding3868_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3868(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3868_11;
}
Coding x64Parser::tokenCoding3871_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3871(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3871_11;
}
x64Token x64Parser::tokenBranches3864[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3865,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3868,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3871,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3863[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3864 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3874_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3874(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3874_11;
}
Coding x64Parser::tokenCoding3877_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3877(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3877_11;
}
Coding x64Parser::tokenCoding3880_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3880(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3880_11;
}
x64Token x64Parser::tokenBranches3873[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3874,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3877,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3880,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3872[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3873 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3885_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3885(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3885_11;
}
Coding x64Parser::tokenCoding3890_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3890(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3890_11;
}
x64Token x64Parser::tokenBranches3884[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3885,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3890,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3894_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3894(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3894_11;
}
x64Token x64Parser::tokenBranches3883[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3884 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3894,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3882[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3883 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3899_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3899(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3899_11;
}
Coding x64Parser::tokenCoding3904_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3904(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3904_11;
}
x64Token x64Parser::tokenBranches3898[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3899,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3904,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3908_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3908(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3908_11;
}
x64Token x64Parser::tokenBranches3897[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3898 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3908,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3896[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3897 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3881[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches3882 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3896 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3911_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3911(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3911_11;
}
Coding x64Parser::tokenCoding3914_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3914(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3914_11;
}
Coding x64Parser::tokenCoding3917_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3917(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3917_11;
}
x64Token x64Parser::tokenBranches3910[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3911,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3914,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3917,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3909[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3910 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3920_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3920(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3920_11;
}
Coding x64Parser::tokenCoding3923_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3923(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3923_11;
}
Coding x64Parser::tokenCoding3926_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3926(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3926_11;
}
x64Token x64Parser::tokenBranches3919[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3920,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3923,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3926,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3918[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3919 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3931_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3931(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3931_11;
}
Coding x64Parser::tokenCoding3936_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3936(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3936_11;
}
x64Token x64Parser::tokenBranches3930[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3931,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3936,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3940_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3940(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3940_11;
}
x64Token x64Parser::tokenBranches3929[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3930 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3940,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3928[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3929 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3945_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3945(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3945_11;
}
Coding x64Parser::tokenCoding3950_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3950(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3950_11;
}
x64Token x64Parser::tokenBranches3944[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3945,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3950,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3954_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3954(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3954_11;
}
x64Token x64Parser::tokenBranches3943[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3944 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3954,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3942[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3943 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3927[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches3928 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches3942 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3961_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3961(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3961_11;
}
x64Token x64Parser::tokenBranches3960[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3961,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3957_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3957(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3957_11;
}
Coding x64Parser::tokenCoding3964_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3964(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3964_11;
}
x64Token x64Parser::tokenBranches3956[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3957,  },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3960 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3964,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3955[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3956 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3971_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3971(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3971_11;
}
x64Token x64Parser::tokenBranches3970[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3971,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3967_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3967(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3967_11;
}
Coding x64Parser::tokenCoding3974_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3974(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3974_11;
}
x64Token x64Parser::tokenBranches3966[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3967,  },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3970 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3974,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3965[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3966 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3979_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3979(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3979_11;
}
Coding x64Parser::tokenCoding3984_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3984(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3984_11;
}
x64Token x64Parser::tokenBranches3978[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3979,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3984,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3988_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3988(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding3988_11;
}
x64Token x64Parser::tokenBranches3977[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3978 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc3988,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3976[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3977 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding3993_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3993(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3993_11;
}
Coding x64Parser::tokenCoding3998_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc3998(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding3998_11;
}
x64Token x64Parser::tokenBranches3992[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc3993,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc3998,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4002_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4002(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4002_11;
}
x64Token x64Parser::tokenBranches3991[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches3992 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4002,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3990[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches3991 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3975[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches3976 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches3990 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4007_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4007(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding4007_11;
}
Coding x64Parser::tokenCoding4012_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4012(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding4012_11;
}
x64Token x64Parser::tokenBranches4006[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc4007,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4012,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4016_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4016(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4016_11;
}
x64Token x64Parser::tokenBranches4005[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4006 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4016,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4004[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4005 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4021_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4021(x64Operand &operand, int tokenPos)
{
	operand.values[17] = new Coding[2];
	CleanupValues.push_back(operand.values[17]);
	operand.values[17]->type = Coding::number;
	operand.values[17]->val = operands.size();
	operand.values[17]->bits = 0;
	operand.values[17]->field = 0;
	operand.values[17]->math = 0;
	operand.values[17]->mathval = 0;
	operand.values[17][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding4021_11;
}
Coding x64Parser::tokenCoding4026_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4026(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[11] = tokenCoding4026_11;
}
x64Token x64Parser::tokenBranches4020[] = {
	{x64Token::NUMBER, 19, 1, 0, NULL,&x64Parser::TokenFunc4021,  },
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4026,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4030_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4030(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4030_11;
}
x64Token x64Parser::tokenBranches4019[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4020 },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4030,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4018[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4019 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4003[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches4004 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches4018 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches3862[] = {
	{x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches3863 },
	{x64Token::ADDRESSCLASS, 25, 0, 0, NULL, NULL, x64Parser::tokenBranches3872 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches3881 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches3909 },
	{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches3918 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches3927 },
	{x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches3955 },
	{x64Token::ADDRESSCLASS, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches3965 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches3975 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4003 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4037_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4037_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4037_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4037_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4037(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4037_8;
	operand.values[9] = tokenCoding4037_9;
	operand.values[10] = tokenCoding4037_10;
	operand.values[11] = tokenCoding4037_11;
}
Coding x64Parser::tokenCoding4043_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4043_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4043_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4043_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4043(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4043_8;
	operand.values[9] = tokenCoding4043_9;
	operand.values[10] = tokenCoding4043_10;
	operand.values[11] = tokenCoding4043_11;
}
x64Token x64Parser::tokenBranches4036[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4037,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4043,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4035[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4036 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4035(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4034[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc4035, x64Parser::tokenBranches4035 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4033[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4034 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4049_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4049_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4049_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4049_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4049(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4049_8;
	operand.values[9] = tokenCoding4049_9;
	operand.values[10] = tokenCoding4049_10;
	operand.values[11] = tokenCoding4049_11;
}
Coding x64Parser::tokenCoding4055_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4055_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4055_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4055_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4055(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4055_8;
	operand.values[9] = tokenCoding4055_9;
	operand.values[10] = tokenCoding4055_10;
	operand.values[11] = tokenCoding4055_11;
}
x64Token x64Parser::tokenBranches4048[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4049,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4055,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4047[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4048 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4047(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4046[] = {
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4047, x64Parser::tokenBranches4047 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4045[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4046 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4032[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4033 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4045 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4061_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4061_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4061_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4061_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4061(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4061_8;
	operand.values[9] = tokenCoding4061_9;
	operand.values[10] = tokenCoding4061_10;
	operand.values[11] = tokenCoding4061_11;
}
Coding x64Parser::tokenCoding4067_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4067_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4067_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4067_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4067(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4067_8;
	operand.values[9] = tokenCoding4067_9;
	operand.values[10] = tokenCoding4067_10;
	operand.values[11] = tokenCoding4067_11;
}
x64Token x64Parser::tokenBranches4060[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4061,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4067,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4059[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4060 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4059(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4058[] = {
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc4059, x64Parser::tokenBranches4059 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4057[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4058 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4073_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4073_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4073_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4073_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4073(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4073_8;
	operand.values[9] = tokenCoding4073_9;
	operand.values[10] = tokenCoding4073_10;
	operand.values[11] = tokenCoding4073_11;
}
Coding x64Parser::tokenCoding4079_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4079_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4079_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4079_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4079(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4079_8;
	operand.values[9] = tokenCoding4079_9;
	operand.values[10] = tokenCoding4079_10;
	operand.values[11] = tokenCoding4079_11;
}
x64Token x64Parser::tokenBranches4072[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4073,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4079,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4071[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4072 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4071(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4070[] = {
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc4071, x64Parser::tokenBranches4071 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4069[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4070 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4056[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches4057 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches4069 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4085_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4085_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4085_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4085_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4085(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4085_8;
	operand.values[9] = tokenCoding4085_9;
	operand.values[10] = tokenCoding4085_10;
	operand.values[11] = tokenCoding4085_11;
}
Coding x64Parser::tokenCoding4091_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4091_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4091_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4091_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4091(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4091_8;
	operand.values[9] = tokenCoding4091_9;
	operand.values[10] = tokenCoding4091_10;
	operand.values[11] = tokenCoding4091_11;
}
x64Token x64Parser::tokenBranches4084[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4085,  },
	{x64Token::REGISTER, 9, 1, 0, NULL,&x64Parser::TokenFunc4091,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4083[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4084 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4083(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4082[] = {
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4083, x64Parser::tokenBranches4083 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4081[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4082 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4080[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches4081 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4031[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4032 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4056 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4080 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4092[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL, NULL,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4097_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4097_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4097_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4097(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4097_8;
	operand.values[9] = tokenCoding4097_9;
	operand.values[10] = tokenCoding4097_10;
}
x64Token x64Parser::tokenBranches4096[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4097,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4095[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4096 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4100_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4100_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4100_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4100(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4100_8;
	operand.values[9] = tokenCoding4100_9;
	operand.values[10] = tokenCoding4100_10;
}
x64Token x64Parser::tokenBranches4099[] = {
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4100,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4098[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4099 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4095(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4098(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4094[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc4095, x64Parser::tokenBranches4095 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc4098, x64Parser::tokenBranches4098 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4104_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4104_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4104_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4104_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4104(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4104_8;
	operand.values[9] = tokenCoding4104_9;
	operand.values[10] = tokenCoding4104_10;
	operand.values[11] = tokenCoding4104_11;
}
x64Token x64Parser::tokenBranches4103[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4104,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4102[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4103 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4107_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4107_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4107_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4107_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4107(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4107_8;
	operand.values[9] = tokenCoding4107_9;
	operand.values[10] = tokenCoding4107_10;
	operand.values[11] = tokenCoding4107_11;
}
x64Token x64Parser::tokenBranches4106[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4107,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4105[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4106 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4110_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4110_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4110_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4110_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4110(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4110_8;
	operand.values[9] = tokenCoding4110_9;
	operand.values[10] = tokenCoding4110_10;
	operand.values[11] = tokenCoding4110_11;
}
x64Token x64Parser::tokenBranches4109[] = {
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc4110,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4108[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4109 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4113_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4113_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4113_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4113_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4113(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4113_8;
	operand.values[9] = tokenCoding4113_9;
	operand.values[10] = tokenCoding4113_10;
	operand.values[11] = tokenCoding4113_11;
}
x64Token x64Parser::tokenBranches4112[] = {
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc4113,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4111[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4112 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4102(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4105(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4101[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc4102, x64Parser::tokenBranches4102 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc4105, x64Parser::tokenBranches4105 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4108 },
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches4111 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4117_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4117_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4117_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4117_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4117(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4117_8;
	operand.values[9] = tokenCoding4117_9;
	operand.values[10] = tokenCoding4117_10;
	operand.values[11] = tokenCoding4117_11;
}
x64Token x64Parser::tokenBranches4116[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4117,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4115[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4116 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4120_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4120_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4120_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4120_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4120(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4120_8;
	operand.values[9] = tokenCoding4120_9;
	operand.values[10] = tokenCoding4120_10;
	operand.values[11] = tokenCoding4120_11;
}
x64Token x64Parser::tokenBranches4119[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4120,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4118[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4119 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4123_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4123_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4123_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4123_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 16 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4123(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4123_8;
	operand.values[9] = tokenCoding4123_9;
	operand.values[10] = tokenCoding4123_10;
	operand.values[11] = tokenCoding4123_11;
}
x64Token x64Parser::tokenBranches4122[] = {
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc4123,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4121[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4122 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4126_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4126_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4126_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4126_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 16 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4126(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4126_8;
	operand.values[9] = tokenCoding4126_9;
	operand.values[10] = tokenCoding4126_10;
	operand.values[11] = tokenCoding4126_11;
}
x64Token x64Parser::tokenBranches4125[] = {
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc4126,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4124[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4125 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4115(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4118(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4114[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc4115, x64Parser::tokenBranches4115 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc4118, x64Parser::tokenBranches4118 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4121 },
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches4124 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4130_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4130_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4130_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4130_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4130(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4130_8;
	operand.values[9] = tokenCoding4130_9;
	operand.values[10] = tokenCoding4130_10;
	operand.values[11] = tokenCoding4130_11;
}
x64Token x64Parser::tokenBranches4129[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4130,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4128[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4129 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4133_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4133_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4133_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4133_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4133(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4133_8;
	operand.values[9] = tokenCoding4133_9;
	operand.values[10] = tokenCoding4133_10;
	operand.values[11] = tokenCoding4133_11;
}
x64Token x64Parser::tokenBranches4132[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4133,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4131[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4132 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4136_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4136_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4136_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4136_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4136(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4136_8;
	operand.values[9] = tokenCoding4136_9;
	operand.values[10] = tokenCoding4136_10;
	operand.values[11] = tokenCoding4136_11;
}
x64Token x64Parser::tokenBranches4135[] = {
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc4136,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4134[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4135 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4139_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4139_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4139_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4139_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4139(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4139_8;
	operand.values[9] = tokenCoding4139_9;
	operand.values[10] = tokenCoding4139_10;
	operand.values[11] = tokenCoding4139_11;
}
x64Token x64Parser::tokenBranches4138[] = {
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc4139,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4137[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4138 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4128(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4131(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4127[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc4128, x64Parser::tokenBranches4128 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc4131, x64Parser::tokenBranches4131 },
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4134 },
	{x64Token::ADDRESSCLASS, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4137 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4143_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4143_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4143_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4143(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4143_8;
	operand.values[9] = tokenCoding4143_9;
	operand.values[10] = tokenCoding4143_10;
}
Coding x64Parser::tokenCoding4146_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4146_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4146_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4146(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4146_8;
	operand.values[9] = tokenCoding4146_9;
	operand.values[10] = tokenCoding4146_10;
}
x64Token x64Parser::tokenBranches4142[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4143,  },
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4146,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4141[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4142 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4141(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4140[] = {
	{x64Token::REGISTERCLASS, 25, 0, 0, NULL,&x64Parser::TokenFunc4141, x64Parser::tokenBranches4141 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4150_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4150_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4150_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4150(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4150_8;
	operand.values[9] = tokenCoding4150_9;
	operand.values[10] = tokenCoding4150_10;
}
x64Token x64Parser::tokenBranches4149[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4150,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4148[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4149 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4153_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4153_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4153_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4153(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4153_8;
	operand.values[9] = tokenCoding4153_9;
	operand.values[10] = tokenCoding4153_10;
}
x64Token x64Parser::tokenBranches4152[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4153,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4151[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4152 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4148(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4151(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4147[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc4148, x64Parser::tokenBranches4148 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc4151, x64Parser::tokenBranches4151 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4157_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4157_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4157_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4157(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4157_8;
	operand.values[9] = tokenCoding4157_9;
	operand.values[10] = tokenCoding4157_10;
}
x64Token x64Parser::tokenBranches4156[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4157,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4155[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4156 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4160_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4160_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4160_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4160(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4160_8;
	operand.values[9] = tokenCoding4160_9;
	operand.values[10] = tokenCoding4160_10;
}
x64Token x64Parser::tokenBranches4159[] = {
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4160,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4158[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4159 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4163_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4163_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4163_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4163(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4163_8;
	operand.values[9] = tokenCoding4163_9;
	operand.values[10] = tokenCoding4163_10;
}
x64Token x64Parser::tokenBranches4162[] = {
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4163,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4161[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4162 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4155(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4158(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4161(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4154[] = {
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc4155, x64Parser::tokenBranches4155 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc4158, x64Parser::tokenBranches4158 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4161, x64Parser::tokenBranches4161 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4168_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4168_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4168_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4168(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4168_8;
	operand.values[9] = tokenCoding4168_9;
	operand.values[10] = tokenCoding4168_10;
}
x64Token x64Parser::tokenBranches4167[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4168,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4176_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4176_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4176_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4176(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4176_8;
	operand.values[9] = tokenCoding4176_9;
	operand.values[10] = tokenCoding4176_10;
}
x64Token x64Parser::tokenBranches4175[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc4176,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4166[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4167 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4175 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4165[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4166 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4172_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4172_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4172_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4172(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4172_8;
	operand.values[9] = tokenCoding4172_9;
	operand.values[10] = tokenCoding4172_10;
}
x64Token x64Parser::tokenBranches4171[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc4172,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4180_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4180_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4180_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4180(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4180_8;
	operand.values[9] = tokenCoding4180_9;
	operand.values[10] = tokenCoding4180_10;
}
x64Token x64Parser::tokenBranches4179[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc4180,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4170[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4171 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4179 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4169[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4170 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4165(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4169(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4164[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc4165, x64Parser::tokenBranches4165 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc4169, x64Parser::tokenBranches4169 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4184_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4184_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4184_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4184_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4184(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4184_8;
	operand.values[9] = tokenCoding4184_9;
	operand.values[18] = tokenCoding4184_18;
	operand.values[10] = tokenCoding4184_10;
}
x64Token x64Parser::tokenBranches4183[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4184,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4182[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4183 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4187_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4187_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4187_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4187_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4187(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4187_8;
	operand.values[9] = tokenCoding4187_9;
	operand.values[18] = tokenCoding4187_18;
	operand.values[10] = tokenCoding4187_10;
}
x64Token x64Parser::tokenBranches4186[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4187,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4185[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4186 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4190_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4190_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4190_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4190_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4190(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4190_8;
	operand.values[9] = tokenCoding4190_9;
	operand.values[18] = tokenCoding4190_18;
	operand.values[10] = tokenCoding4190_10;
}
x64Token x64Parser::tokenBranches4189[] = {
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4190,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4188[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4189 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4182(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4185(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4188(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4181[] = {
	{x64Token::REGISTERCLASS, 25, 0, 0, NULL,&x64Parser::TokenFunc4182, x64Parser::tokenBranches4182 },
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc4185, x64Parser::tokenBranches4185 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc4188, x64Parser::tokenBranches4188 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4196_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4196_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4196_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4196(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4196_8;
	operand.values[9] = tokenCoding4196_9;
	operand.values[10] = tokenCoding4196_10;
}
x64Token x64Parser::tokenBranches4195[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4196,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4194[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4195 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4193[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4194 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4192[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4193 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4201_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4201_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4201_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4201(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4201_8;
	operand.values[9] = tokenCoding4201_9;
	operand.values[10] = tokenCoding4201_10;
}
x64Token x64Parser::tokenBranches4200[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4201,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4199[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4200 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4198[] = {
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches4199 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4197[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4198 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4192(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4197(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4191[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc4192, x64Parser::tokenBranches4192 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc4197, x64Parser::tokenBranches4197 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4205_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4205_10[] = {
	{ Coding::indirect, 30, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4205_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4205(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[18] = tokenCoding4205_18;
	operand.values[10] = tokenCoding4205_10;
	operand.values[11] = tokenCoding4205_11;
}
Coding x64Parser::tokenCoding4214_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4214_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4214_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4214_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4214_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 28, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4214(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4214_8;
	operand.values[9] = tokenCoding4214_9;
	operand.values[18] = tokenCoding4214_18;
	operand.values[10] = tokenCoding4214_10;
	operand.values[11] = tokenCoding4214_11;
}
x64Token x64Parser::tokenBranches4204[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4205,  },
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4214,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4203[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4204 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4208_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4208_10[] = {
	{ Coding::indirect, 30, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4208_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4208(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[18] = tokenCoding4208_18;
	operand.values[10] = tokenCoding4208_10;
	operand.values[11] = tokenCoding4208_11;
}
Coding x64Parser::tokenCoding4217_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4217_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4217_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4217_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4217_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 28, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4217(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4217_8;
	operand.values[9] = tokenCoding4217_9;
	operand.values[18] = tokenCoding4217_18;
	operand.values[10] = tokenCoding4217_10;
	operand.values[11] = tokenCoding4217_11;
}
x64Token x64Parser::tokenBranches4207[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4208,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc4217,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4206[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4207 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4211_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4211_10[] = {
	{ Coding::indirect, 30, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4211_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4211(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[18] = tokenCoding4211_18;
	operand.values[10] = tokenCoding4211_10;
	operand.values[11] = tokenCoding4211_11;
}
Coding x64Parser::tokenCoding4220_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4220_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4220_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4220_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4220_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 28, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4220(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4220_8;
	operand.values[9] = tokenCoding4220_9;
	operand.values[18] = tokenCoding4220_18;
	operand.values[10] = tokenCoding4220_10;
	operand.values[11] = tokenCoding4220_11;
}
x64Token x64Parser::tokenBranches4210[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4211,  },
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4220,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4209[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4210 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4203(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4206(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4209(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4202[] = {
	{x64Token::REGISTERCLASS, 25, 0, 0, NULL,&x64Parser::TokenFunc4203, x64Parser::tokenBranches4203 },
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc4206, x64Parser::tokenBranches4206 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc4209, x64Parser::tokenBranches4209 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4226_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4226_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4226_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4226(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4226_8;
	operand.values[9] = tokenCoding4226_9;
	operand.values[10] = tokenCoding4226_10;
}
x64Token x64Parser::tokenBranches4225[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4226,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4224[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4225 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4223[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4224 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4222[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4223 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4231_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4231_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4231_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4231(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4231_8;
	operand.values[9] = tokenCoding4231_9;
	operand.values[10] = tokenCoding4231_10;
}
x64Token x64Parser::tokenBranches4230[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4231,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4229[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4230 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4228[] = {
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches4229 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4227[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4228 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4222(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4227(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4221[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc4222, x64Parser::tokenBranches4222 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc4227, x64Parser::tokenBranches4227 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4237_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4237_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4237_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4237(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4237_8;
	operand.values[9] = tokenCoding4237_9;
	operand.values[10] = tokenCoding4237_10;
}
x64Token x64Parser::tokenBranches4236[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4237,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4235[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4236 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4234[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches4235 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4233[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4234 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4233(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4232[] = {
	{x64Token::REGISTERCLASS, 25, 0, 0, NULL,&x64Parser::TokenFunc4233, x64Parser::tokenBranches4233 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4248_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4248_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4248_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4248_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4248(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4248_8;
	operand.values[9] = tokenCoding4248_9;
	operand.values[10] = tokenCoding4248_10;
	operand.values[11] = tokenCoding4248_11;
}
x64Token x64Parser::tokenBranches4247[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4248,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4246[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4247 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4251_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4251_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4251_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4251_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4251(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4251_8;
	operand.values[9] = tokenCoding4251_9;
	operand.values[10] = tokenCoding4251_10;
	operand.values[11] = tokenCoding4251_11;
}
x64Token x64Parser::tokenBranches4250[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc4251,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4249[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4250 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4245[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4246 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4249 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4256_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4256_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4256_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4256(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 348;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4256_8;
	operand.values[9] = tokenCoding4256_9;
	operand.values[10] = tokenCoding4256_10;
}
Coding x64Parser::tokenCoding4257_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4257_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4257_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4257(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 348;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4257_8;
	operand.values[9] = tokenCoding4257_9;
	operand.values[10] = tokenCoding4257_10;
}
Coding x64Parser::tokenCoding4258_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4258_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4258_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4258(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 349;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4258_8;
	operand.values[9] = tokenCoding4258_9;
	operand.values[10] = tokenCoding4258_10;
}
x64Token x64Parser::tokenBranches4255[] = {
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4256,  },
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc4257,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4258,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4267(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 350;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4266[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4267,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4271(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 351;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4270[] = {
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc4271,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4265[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4266 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4270 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4264[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4265 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4279_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4279_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4279(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4279_10;
	operand.values[11] = tokenCoding4279_11;
}
x64Token x64Parser::tokenBranches4278[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4279,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4281_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4281_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4281(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4281_10;
	operand.values[11] = tokenCoding4281_11;
}
x64Token x64Parser::tokenBranches4280[] = {
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4281,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4283_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4283_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4283(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4283_10;
	operand.values[11] = tokenCoding4283_11;
}
x64Token x64Parser::tokenBranches4282[] = {
	{x64Token::ADDRESSCLASS, 18, 1, 0, NULL,&x64Parser::TokenFunc4283,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4285(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 354;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4287(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 355;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4289_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4289_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4289(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4289_10;
	operand.values[11] = tokenCoding4289_11;
}
Coding x64Parser::tokenCoding4291_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4291_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4291(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4291_10;
	operand.values[11] = tokenCoding4291_11;
}
x64Token x64Parser::tokenBranches4284[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc4285,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc4287,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc4289,  },
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc4291,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4264(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::number;
	operand.values[1]->val = operands.size();
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4272(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 352;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc4273(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 353;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding4274_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4274_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4274(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4274_10;
	operand.values[11] = tokenCoding4274_11;
}
Coding x64Parser::tokenCoding4275_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4275_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4275(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4275_10;
	operand.values[11] = tokenCoding4275_11;
}
Coding x64Parser::tokenCoding4276_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4276_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4276(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4276_10;
	operand.values[11] = tokenCoding4276_11;
}
Coding x64Parser::tokenCoding4277_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4277_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4277(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4277_10;
	operand.values[11] = tokenCoding4277_11;
}
x64Token x64Parser::tokenBranches4263[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc4264, x64Parser::tokenBranches4264 },
	{x64Token::NUMBER, 14, 1, 0, NULL,&x64Parser::TokenFunc4272,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc4273,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc4274,  },
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc4275,  },
	{x64Token::ADDRESSCLASS, 22, 1, 0, NULL,&x64Parser::TokenFunc4276,  },
	{x64Token::ADDRESSCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc4277,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4278 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4280 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4282 },
	{x64Token::TOKEN, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches4284 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4344(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 356;
}
x64Token x64Parser::tokenBranches4343[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4344,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4342[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4343 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4341[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4342 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4340[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4341 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4339[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4340 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4338[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4339 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4337[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4338 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4336[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4337 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4370(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 358;
}
x64Token x64Parser::tokenBranches4369[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4370,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4368[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4369 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4367[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4368 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4366[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4367 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4365[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4366 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4364[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4365 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4363[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4364 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4362[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4363 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4335[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4336 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4362 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4334[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4335 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4357(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 357;
}
x64Token x64Parser::tokenBranches4356[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4357,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4355[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4356 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4354[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4355 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4353[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4354 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4352[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4353 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4351[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4352 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4350[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4351 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4349[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4350 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4383(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 359;
}
x64Token x64Parser::tokenBranches4382[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4383,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4381[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4382 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4380[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4381 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4379[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4380 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4378[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4379 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4377[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4378 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4376[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4377 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4375[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4376 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4405(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 361;
}
x64Token x64Parser::tokenBranches4404[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4405,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4403[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4404 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4402[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4403 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4401[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4402 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4400[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4401 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4399[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4400 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4398[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4399 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4397[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4398 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4348[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4349 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4375 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4397 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4347[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4348 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4392(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 360;
}
x64Token x64Parser::tokenBranches4391[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4392,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4390[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4391 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4389[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4390 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4388[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4389 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4387[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4388 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4386[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4387 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4347(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4333[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4334 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc4347, x64Parser::tokenBranches4347 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4386 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4332[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4333 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4418(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 362;
}
x64Token x64Parser::tokenBranches4417[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4418,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4416[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4417 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4415[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4416 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4414[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4415 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4413[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4414 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4412[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4413 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4411[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4412 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4410[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4411 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4444(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 364;
}
x64Token x64Parser::tokenBranches4443[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4444,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4442[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4443 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4441[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4442 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4440[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4441 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4439[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4440 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4438[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4439 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4437[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4438 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4436[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4437 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4409[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4410 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4436 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4408[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4409 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4431(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 363;
}
x64Token x64Parser::tokenBranches4430[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4431,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4429[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4430 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4428[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4429 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4427[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4428 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4426[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4427 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4425[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4426 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4424[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4425 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4423[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4424 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4457(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 365;
}
x64Token x64Parser::tokenBranches4456[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4457,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4455[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4456 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4454[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4455 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4453[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4454 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4452[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4453 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4451[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4452 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4450[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4451 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4449[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4450 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4477(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 367;
}
x64Token x64Parser::tokenBranches4476[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4477,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4475[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4476 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4474[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4475 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4473[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4474 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4472[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4473 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4471[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4472 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4422[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4423 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4449 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4471 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4421[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4422 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4466(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 366;
}
x64Token x64Parser::tokenBranches4465[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4466,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4464[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4465 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4463[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4464 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4462[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4463 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4461[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4462 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4460[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4461 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4421(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4407[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4408 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc4421, x64Parser::tokenBranches4421 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4460 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4406[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4407 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4490(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 368;
}
x64Token x64Parser::tokenBranches4489[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4490,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4488[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4489 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4487[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4488 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4486[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4487 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4485[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4486 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4484[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4485 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4483[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4484 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4482[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4483 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4516(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 370;
}
x64Token x64Parser::tokenBranches4515[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4516,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4514[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4515 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4513[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4514 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4512[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4513 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4511[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4512 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4510[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4511 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4509[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4510 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4508[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4509 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4481[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4482 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4508 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4480[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4481 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4503(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 369;
}
x64Token x64Parser::tokenBranches4502[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4503,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4501[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches4502 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4500[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4501 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4499[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4500 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4498[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4499 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4497[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4498 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4496[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4497 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4495[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4496 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4529(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 371;
}
x64Token x64Parser::tokenBranches4528[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4529,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4527[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4528 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4526[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4527 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4525[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4526 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4524[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4525 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4523[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4524 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4522[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4523 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4521[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4522 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4549(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 373;
}
x64Token x64Parser::tokenBranches4548[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4549,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4547[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4548 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4546[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4547 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4545[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4546 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4544[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4545 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4543[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4544 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4494[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches4495 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4521 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4543 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4493[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4494 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4538(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 372;
}
x64Token x64Parser::tokenBranches4537[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4538,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4536[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4537 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4535[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4536 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4534[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4535 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4533[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4534 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4532[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4533 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4493(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4479[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4480 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc4493, x64Parser::tokenBranches4493 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4532 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4478[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4479 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4562(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 374;
}
x64Token x64Parser::tokenBranches4561[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4562,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4560[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4561 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4559[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4560 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4558[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4559 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4557[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4558 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4556[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4557 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4555[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4556 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4554[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4555 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4553[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4554 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4552[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4553 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4575(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 375;
}
x64Token x64Parser::tokenBranches4574[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4575,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4573[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches4574 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4572[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4573 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4571[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4572 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4570[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches4571 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4569[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4570 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4568[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4569 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4567[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4568 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4595(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 377;
}
x64Token x64Parser::tokenBranches4594[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4595,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4593[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4594 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4592[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4593 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4591[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4592 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4590[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4591 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4589[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4590 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4566[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches4567 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4589 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4565[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4566 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4584(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 376;
}
x64Token x64Parser::tokenBranches4583[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc4584,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4582[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches4583 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4581[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4582 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4580[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4581 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4579[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4580 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4578[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches4579 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4565(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4551[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches4552 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc4565, x64Parser::tokenBranches4565 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches4578 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4550[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches4551 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4331[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4332 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches4406 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4478 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4550 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4604_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4604_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4604_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4604(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4604_8;
	operand.values[9] = tokenCoding4604_9;
	operand.values[10] = tokenCoding4604_10;
}
x64Token x64Parser::tokenBranches4603[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4604,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4602[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4603 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4608_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4608_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4608_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4608(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4608_8;
	operand.values[9] = tokenCoding4608_9;
	operand.values[10] = tokenCoding4608_10;
}
x64Token x64Parser::tokenBranches4607[] = {
	{x64Token::REGISTERCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4608,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4606[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4607 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4601[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches4602 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches4606 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4612_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4612_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4612_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4612(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4612_8;
	operand.values[9] = tokenCoding4612_9;
	operand.values[10] = tokenCoding4612_10;
}
x64Token x64Parser::tokenBranches4611[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4612,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4610[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4611 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4616_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4616_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4616_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4616(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4616_8;
	operand.values[9] = tokenCoding4616_9;
	operand.values[10] = tokenCoding4616_10;
}
x64Token x64Parser::tokenBranches4615[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc4616,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4614[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4615 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4609[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches4610 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4614 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4620_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4620_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4620_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4620(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4620_8;
	operand.values[9] = tokenCoding4620_9;
	operand.values[10] = tokenCoding4620_10;
}
x64Token x64Parser::tokenBranches4619[] = {
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc4620,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4618[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4619 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4624_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4624_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4624_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4624(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4624_8;
	operand.values[9] = tokenCoding4624_9;
	operand.values[10] = tokenCoding4624_10;
}
x64Token x64Parser::tokenBranches4623[] = {
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc4624,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4622[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4623 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4617[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches4618 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches4622 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4628_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4628_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4628_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4628(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding4628_8;
	operand.values[9] = tokenCoding4628_9;
	operand.values[10] = tokenCoding4628_10;
}
x64Token x64Parser::tokenBranches4627[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc4628,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4626[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4627 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4625[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches4626 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4600[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4601 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4609 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4617 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4625 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4630_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4630_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4630(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4630_10;
	operand.values[11] = tokenCoding4630_11;
}
x64Token x64Parser::tokenBranches4629[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4630,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4632_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4632_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4632(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 378;
	operand.values[10] = tokenCoding4632_10;
	operand.values[11] = tokenCoding4632_11;
}
x64Token x64Parser::tokenBranches4631[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4632,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4646(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 379;
	operand.values[20] = new Coding[2];
	CleanupValues.push_back(operand.values[20]);
	operand.values[20]->type = Coding::number;
	operand.values[20]->val = operands.size();
	operand.values[20]->bits = 0;
	operand.values[20]->field = 0;
	operand.values[20]->math = 0;
	operand.values[20]->mathval = 0;
	operand.values[20][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4645[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc4646,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4644[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4645 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4643[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4644 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4643(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4642[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc4643, x64Parser::tokenBranches4643 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4641[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4642 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4650_10[] = {
	{ Coding::indirect, 14, -1, 0, 38, 7 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4650_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 27, 5},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 3, 0, 62, 3 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4650(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4650_10;
	operand.values[11] = tokenCoding4650_11;
}
x64Token x64Parser::tokenBranches4649[] = {
	{x64Token::ADDRESSCLASS, 0, 1, 0, NULL,&x64Parser::TokenFunc4650,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4648[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4649 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4648(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4647[] = {
	{x64Token::NUMBER, 2, 0, 0, NULL,&x64Parser::TokenFunc4648, x64Parser::tokenBranches4648 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4663(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4662[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4663,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4661[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4662 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4660[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4661 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4667(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4666[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4667,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4665[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4666 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4664[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4665 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4671(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4670[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4671,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4669[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4670 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4668[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4669 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4675(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4674[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4675,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4673[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4674 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4672[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4673 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4679(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4678[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4679,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4677[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4678 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4676[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4677 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4683(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4682[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4683,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4681[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4682 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4680[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4681 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4687(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4686[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4687,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4685[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4686 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4684[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4685 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4691(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4690[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4691,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4689[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4690 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4688[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4689 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4695(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4694[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4695,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4693[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4694 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4698_11[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4698(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4698_11;
}
Coding x64Parser::tokenCoding4702_11[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4702(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4702_11;
}
x64Token x64Parser::tokenBranches4697[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4698,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4702,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4700_11[] = {
	{ Coding::indirect, 27, -1, 0, 43, 4 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4700(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4700_11;
}
Coding x64Parser::tokenCoding4704_11[] = {
	{ Coding::indirect, 27, -1, 0, 43, 4 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4704(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4704_11;
}
x64Token x64Parser::tokenBranches4699[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4700,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4704,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4696(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4692[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4693 },
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4696,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4697 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4699 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4708(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4707[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4708,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4706[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4707 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4705[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4706 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4712(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4711[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4712,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4710[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4711 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4709[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4710 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4716(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4715[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4716,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4714[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4715 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4713[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4714 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4720_11[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4720(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4720_11;
}
Coding x64Parser::tokenCoding4724_11[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4724(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4724_11;
}
x64Token x64Parser::tokenBranches4719[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4720,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4724,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4722_11[] = {
	{ Coding::indirect, 27, -1, 0, 43, 4 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4722(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4722_11;
}
Coding x64Parser::tokenCoding4726_11[] = {
	{ Coding::indirect, 27, -1, 0, 43, 4 },
	{ Coding::eot },
};
void x64Parser::TokenFunc4726(x64Operand &operand, int tokenPos)
{
	operand.values[11] = tokenCoding4726_11;
}
x64Token x64Parser::tokenBranches4721[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4722,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4726,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4718(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4717[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4718,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4719 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4721 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4730(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4729[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4730,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4728[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4729 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4727[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4728 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4734(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4733[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4734,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4732[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4733 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4731[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4732 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4745_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4745_11[] = {
	{ Coding::valSpecified, 221},
	{ Coding::eot },
};
void x64Parser::TokenFunc4745(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4745_10;
	operand.values[11] = tokenCoding4745_11;
}
x64Token x64Parser::tokenBranches4744[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc4745,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4747_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4747_11[] = {
	{ Coding::valSpecified, 223},
	{ Coding::eot },
};
void x64Parser::TokenFunc4747(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4747_10;
	operand.values[11] = tokenCoding4747_11;
}
x64Token x64Parser::tokenBranches4746[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc4747,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4755_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4755_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4755(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4755_10;
	operand.values[11] = tokenCoding4755_11;
}
x64Token x64Parser::tokenBranches4754[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4755,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4753[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4754 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4763_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4763_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4763(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4763_10;
	operand.values[11] = tokenCoding4763_11;
}
x64Token x64Parser::tokenBranches4762[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4763,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4761[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4762 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4769_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4769_11[] = {
	{ Coding::valSpecified, 217},
	{ Coding::eot },
};
void x64Parser::TokenFunc4769(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4769_10;
	operand.values[11] = tokenCoding4769_11;
}
x64Token x64Parser::tokenBranches4768[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4769,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4771_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4771_11[] = {
	{ Coding::valSpecified, 221},
	{ Coding::eot },
};
void x64Parser::TokenFunc4771(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4771_10;
	operand.values[11] = tokenCoding4771_11;
}
x64Token x64Parser::tokenBranches4770[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4771,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4773_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4773_11[] = {
	{ Coding::valSpecified, 219},
	{ Coding::eot },
};
void x64Parser::TokenFunc4773(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4773_10;
	operand.values[11] = tokenCoding4773_11;
}
x64Token x64Parser::tokenBranches4772[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4773,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4767_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4767_11[] = {
	{ Coding::valSpecified, 217},
	{ Coding::eot },
};
void x64Parser::TokenFunc4767(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4767_10;
	operand.values[11] = tokenCoding4767_11;
}
x64Token x64Parser::tokenBranches4766[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc4767,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4768 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4770 },
	{x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4772 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4777_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4777_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4777(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4777_10;
	operand.values[11] = tokenCoding4777_11;
}
x64Token x64Parser::tokenBranches4776[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4777,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4775[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4776 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4779_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4779_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4779(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4779_10;
	operand.values[11] = tokenCoding4779_11;
}
x64Token x64Parser::tokenBranches4778[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4779,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4790_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4790_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4790(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4790_10;
	operand.values[11] = tokenCoding4790_11;
}
x64Token x64Parser::tokenBranches4789[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4790,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4797_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4797_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4797(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4797_10;
	operand.values[11] = tokenCoding4797_11;
}
x64Token x64Parser::tokenBranches4796[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4797,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4799_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4799_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4799(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4799_10;
	operand.values[11] = tokenCoding4799_11;
}
x64Token x64Parser::tokenBranches4798[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4799,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4808_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4808_11[] = {
	{ Coding::valSpecified, 217},
	{ Coding::eot },
};
void x64Parser::TokenFunc4808(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4808_10;
	operand.values[11] = tokenCoding4808_11;
}
x64Token x64Parser::tokenBranches4807[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4808,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4810_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4810_11[] = {
	{ Coding::valSpecified, 221},
	{ Coding::eot },
};
void x64Parser::TokenFunc4810(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4810_10;
	operand.values[11] = tokenCoding4810_11;
}
x64Token x64Parser::tokenBranches4809[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4810,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4806_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4806_11[] = {
	{ Coding::valSpecified, 221},
	{ Coding::eot },
};
void x64Parser::TokenFunc4806(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4806_10;
	operand.values[11] = tokenCoding4806_11;
}
x64Token x64Parser::tokenBranches4805[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc4806,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4807 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4809 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4813_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4813_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4813(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4813_10;
	operand.values[11] = tokenCoding4813_11;
}
x64Token x64Parser::tokenBranches4812[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4813,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4811[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4812 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4816_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4816_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4816(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4816_10;
	operand.values[11] = tokenCoding4816_11;
}
x64Token x64Parser::tokenBranches4815[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4816,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4814[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4815 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4818_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4818_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4818(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4818_10;
	operand.values[11] = tokenCoding4818_11;
}
x64Token x64Parser::tokenBranches4817[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4818,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4820_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4820_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4820(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4820_10;
	operand.values[11] = tokenCoding4820_11;
}
x64Token x64Parser::tokenBranches4819[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4820,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4824_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4824_11[] = {
	{ Coding::valSpecified, 217},
	{ Coding::eot },
};
void x64Parser::TokenFunc4824(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4824_10;
	operand.values[11] = tokenCoding4824_11;
}
Coding x64Parser::tokenCoding4830_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4830_11[] = {
	{ Coding::valSpecified, 217},
	{ Coding::eot },
};
void x64Parser::TokenFunc4830(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4830_10;
	operand.values[11] = tokenCoding4830_11;
}
x64Token x64Parser::tokenBranches4823[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4824,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4830,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4826_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4826_11[] = {
	{ Coding::valSpecified, 221},
	{ Coding::eot },
};
void x64Parser::TokenFunc4826(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4826_10;
	operand.values[11] = tokenCoding4826_11;
}
Coding x64Parser::tokenCoding4832_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4832_11[] = {
	{ Coding::valSpecified, 221},
	{ Coding::eot },
};
void x64Parser::TokenFunc4832(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4832_10;
	operand.values[11] = tokenCoding4832_11;
}
x64Token x64Parser::tokenBranches4825[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4826,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4832,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4828_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4828_11[] = {
	{ Coding::valSpecified, 219},
	{ Coding::eot },
};
void x64Parser::TokenFunc4828(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4828_10;
	operand.values[11] = tokenCoding4828_11;
}
Coding x64Parser::tokenCoding4834_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4834_11[] = {
	{ Coding::valSpecified, 219},
	{ Coding::eot },
};
void x64Parser::TokenFunc4834(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4834_10;
	operand.values[11] = tokenCoding4834_11;
}
x64Token x64Parser::tokenBranches4827[] = {
	{x64Token::ADDRESSCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc4828,  },
	{x64Token::ADDRESSCLASS, 12, 1, 0, NULL,&x64Parser::TokenFunc4834,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4822_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4822_11[] = {
	{ Coding::valSpecified, 221},
	{ Coding::eot },
};
void x64Parser::TokenFunc4822(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4822_10;
	operand.values[11] = tokenCoding4822_11;
}
x64Token x64Parser::tokenBranches4821[] = {
	{x64Token::ADDRESSCLASS, 23, 1, 0, NULL,&x64Parser::TokenFunc4822,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches4823 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches4825 },
	{x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches4827 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4838(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
}
x64Token x64Parser::tokenBranches4837[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc4838,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4836[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4837 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4836(x64Operand &operand, int tokenPos)
{
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4835[] = {
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4836, x64Parser::tokenBranches4836 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4842(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
}
x64Token x64Parser::tokenBranches4841[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc4842,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4840[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4841 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4840(x64Operand &operand, int tokenPos)
{
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4839[] = {
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4840, x64Parser::tokenBranches4840 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4846(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
}
x64Token x64Parser::tokenBranches4845[] = {
	{x64Token::REGISTER, 98, 1, 0, NULL,&x64Parser::TokenFunc4846,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4844[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4845 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4844(x64Operand &operand, int tokenPos)
{
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4843[] = {
	{x64Token::REGISTERCLASS, 29, 0, 0, NULL,&x64Parser::TokenFunc4844, x64Parser::tokenBranches4844 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4849_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4849_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4849(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4849_10;
	operand.values[11] = tokenCoding4849_11;
}
x64Token x64Parser::tokenBranches4848[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4849,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4850(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 380;
}
x64Token x64Parser::tokenBranches4847[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4848 },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc4850,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4853_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4853_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4853(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4853_10;
	operand.values[11] = tokenCoding4853_11;
}
x64Token x64Parser::tokenBranches4852[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4853,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4854(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 381;
}
x64Token x64Parser::tokenBranches4851[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4852 },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc4854,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4864(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4863[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4864,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4862[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4863 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4861[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4862 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4868(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4867[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4868,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4866[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4867 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4865[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4866 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4877(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4876[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4877,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4875[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4876 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4874[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4875 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4881(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 340;
	operand.values[7] = new Coding[2];
	CleanupValues.push_back(operand.values[7]);
	operand.values[7]->type = Coding::reg;
	operand.values[7]->val = inputTokens[tokenPos]->val->ival;
	operand.values[7]->bits = 0;
	operand.values[7]->field = 0;
	operand.values[7]->math = 0;
	operand.values[7]->mathval = 0;
	operand.values[7][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4880[] = {
	{x64Token::REGISTERCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc4881,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4879[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4880 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4878[] = {
	{x64Token::REGISTER, 98, 0, 0, NULL, NULL, x64Parser::tokenBranches4879 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4883_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4883_11[] = {
	{ Coding::valSpecified, 15},
	{ Coding::valSpecified, 174},
	{ Coding::eot },
};
void x64Parser::TokenFunc4883(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4883_10;
	operand.values[11] = tokenCoding4883_11;
}
x64Token x64Parser::tokenBranches4882[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4883,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4885_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4885_11[] = {
	{ Coding::valSpecified, 15},
	{ Coding::valSpecified, 174},
	{ Coding::eot },
};
void x64Parser::TokenFunc4885(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding4885_10;
	operand.values[11] = tokenCoding4885_11;
}
x64Token x64Parser::tokenBranches4884[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc4885,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4900_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4900_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4900_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4900_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4900(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->math = 0;
	operand.values[21]->mathval = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4900_8;
	operand.values[9] = tokenCoding4900_9;
	operand.values[10] = tokenCoding4900_10;
	operand.values[11] = tokenCoding4900_11;
}
x64Token x64Parser::tokenBranches4899[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4900,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4906_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4906_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4906_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4906_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4906(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4906_8;
	operand.values[9] = tokenCoding4906_9;
	operand.values[10] = tokenCoding4906_10;
	operand.values[11] = tokenCoding4906_11;
}
x64Token x64Parser::tokenBranches4898[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4899 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4906,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4897[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4898 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4897_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4897_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4897_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4897_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4897(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4897_8;
	operand.values[9] = tokenCoding4897_9;
	operand.values[10] = tokenCoding4897_10;
	operand.values[11] = tokenCoding4897_11;
}
void x64Parser::TokenFunc4935(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 386;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4896[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc4897, x64Parser::tokenBranches4897 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4935,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4931(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 385;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4930[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4931,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4895[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4896 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4930 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4894[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4895 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4917_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4917_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4917_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4917_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4917(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->math = 0;
	operand.values[21]->mathval = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4917_8;
	operand.values[9] = tokenCoding4917_9;
	operand.values[10] = tokenCoding4917_10;
	operand.values[11] = tokenCoding4917_11;
}
x64Token x64Parser::tokenBranches4916[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4917,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4923_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4923_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4923_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4923_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4923(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4923_8;
	operand.values[9] = tokenCoding4923_9;
	operand.values[10] = tokenCoding4923_10;
	operand.values[11] = tokenCoding4923_11;
}
x64Token x64Parser::tokenBranches4915[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4916 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4923,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4914[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4915 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4914_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4914_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4914_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4914_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4914(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4914_8;
	operand.values[9] = tokenCoding4914_9;
	operand.values[10] = tokenCoding4914_10;
	operand.values[11] = tokenCoding4914_11;
}
void x64Parser::TokenFunc4943(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4913[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc4914, x64Parser::tokenBranches4914 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4943,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4939(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4938[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4939,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4912[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4913 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4938 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4911[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4912 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4950_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4950_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4950_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4950_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4950(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->math = 0;
	operand.values[21]->mathval = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4950_8;
	operand.values[9] = tokenCoding4950_9;
	operand.values[10] = tokenCoding4950_10;
	operand.values[11] = tokenCoding4950_11;
}
x64Token x64Parser::tokenBranches4949[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4950,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4956_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4956_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4956_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4956_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4956(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4956_8;
	operand.values[9] = tokenCoding4956_9;
	operand.values[10] = tokenCoding4956_10;
	operand.values[11] = tokenCoding4956_11;
}
x64Token x64Parser::tokenBranches4948[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4949 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc4956,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4947[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4948 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4947_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4947_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4947_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4947_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4947(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4947_8;
	operand.values[9] = tokenCoding4947_9;
	operand.values[10] = tokenCoding4947_10;
	operand.values[11] = tokenCoding4947_11;
}
void x64Parser::TokenFunc5002(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 386;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4946[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc4947, x64Parser::tokenBranches4947 },
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5002,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4998(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 385;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4997[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4998,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4945[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches4946 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4997 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4944[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4945 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4967_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4967_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4967_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4967_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4967(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->math = 0;
	operand.values[21]->mathval = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4967_8;
	operand.values[9] = tokenCoding4967_9;
	operand.values[10] = tokenCoding4967_10;
	operand.values[11] = tokenCoding4967_11;
}
x64Token x64Parser::tokenBranches4966[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4967,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4973_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4973_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4973_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4973_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4973(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4973_8;
	operand.values[9] = tokenCoding4973_9;
	operand.values[10] = tokenCoding4973_10;
	operand.values[11] = tokenCoding4973_11;
}
x64Token x64Parser::tokenBranches4965[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4966 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc4973,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4964[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4965 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4964_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4964_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4964_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4964_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4964(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4964_8;
	operand.values[9] = tokenCoding4964_9;
	operand.values[10] = tokenCoding4964_10;
	operand.values[11] = tokenCoding4964_11;
}
void x64Parser::TokenFunc5010(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 388;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4963[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc4964, x64Parser::tokenBranches4964 },
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5010,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5006(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 387;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5005[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc5006,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4962[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches4963 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5005 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4961[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4962 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4984_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4984_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4984_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4984_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4984(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 382;
	operand.values[21] = new Coding[2];
	CleanupValues.push_back(operand.values[21]);
	operand.values[21]->type = Coding::number;
	operand.values[21]->val = operands.size();
	operand.values[21]->bits = 0;
	operand.values[21]->field = 0;
	operand.values[21]->math = 0;
	operand.values[21]->mathval = 0;
	operand.values[21][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4984_8;
	operand.values[9] = tokenCoding4984_9;
	operand.values[10] = tokenCoding4984_10;
	operand.values[11] = tokenCoding4984_11;
}
x64Token x64Parser::tokenBranches4983[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc4984,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4990_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4990_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4990_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4990_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4990(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding4990_8;
	operand.values[9] = tokenCoding4990_9;
	operand.values[10] = tokenCoding4990_10;
	operand.values[11] = tokenCoding4990_11;
}
x64Token x64Parser::tokenBranches4982[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches4983 },
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc4990,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4981[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4982 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding4981_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4981_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4981_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding4981_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc4981(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding4981_8;
	operand.values[9] = tokenCoding4981_9;
	operand.values[10] = tokenCoding4981_10;
	operand.values[11] = tokenCoding4981_11;
}
void x64Parser::TokenFunc5018(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 391;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4980[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc4981, x64Parser::tokenBranches4981 },
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc5018,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5014(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 390;
	operand.values[15] = new Coding[2];
	CleanupValues.push_back(operand.values[15]);
	operand.values[15]->type = Coding::number;
	operand.values[15]->val = operands.size();
	operand.values[15]->bits = 0;
	operand.values[15]->field = 0;
	operand.values[15]->math = 0;
	operand.values[15]->mathval = 0;
	operand.values[15][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5013[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc5014,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4979[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches4980 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5013 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches4978[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches4979 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc4894(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4911(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4944(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4961(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc4978(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches4893[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc4894, x64Parser::tokenBranches4894 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc4911, x64Parser::tokenBranches4911 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc4944, x64Parser::tokenBranches4944 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc4961, x64Parser::tokenBranches4961 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc4978, x64Parser::tokenBranches4978 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5023(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 392;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->math = 0;
	operand.values[22]->mathval = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5022[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5023,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5038(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 396;
}
x64Token x64Parser::tokenBranches5021[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5022 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5038,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5020[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5021 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5027(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 393;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->math = 0;
	operand.values[22]->mathval = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5026[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5027,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5041(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 397;
}
x64Token x64Parser::tokenBranches5025[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5026 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5041,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5024[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5025 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5031(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 394;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->math = 0;
	operand.values[22]->mathval = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5030[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5031,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5044(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 398;
}
x64Token x64Parser::tokenBranches5029[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5030 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5044,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5028[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5029 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5035(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 395;
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->math = 0;
	operand.values[22]->mathval = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5034[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5035,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5047(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 399;
}
x64Token x64Parser::tokenBranches5033[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5034 },
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5047,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5032[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5033 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5019[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches5020 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5024 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5028 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5032 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5056(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 400;
}
x64Token x64Parser::tokenBranches5055[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5056,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5054[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5055 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5053[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5054 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5072(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 402;
}
x64Token x64Parser::tokenBranches5071[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5072,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5070[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5071 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5069[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5070 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5052[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5053 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5069 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5051[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5052 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5050[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5051 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5064(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 401;
}
x64Token x64Parser::tokenBranches5063[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5064,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5062[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5063 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5061[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5062 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5080(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 403;
}
x64Token x64Parser::tokenBranches5079[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5080,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5078[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5079 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5077[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5078 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5094(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 405;
}
x64Token x64Parser::tokenBranches5093[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5094,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5092[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5093 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5091[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5092 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5060[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5061 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5077 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5091 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5059[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5060 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5086(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 404;
}
x64Token x64Parser::tokenBranches5085[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5086,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5084[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5085 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5083[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5084 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5059(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5058[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5059, x64Parser::tokenBranches5059 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5083 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5049[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5050 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5058 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5102(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 406;
}
x64Token x64Parser::tokenBranches5101[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5102,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5100[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5101 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5099[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5100 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5118(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 408;
}
x64Token x64Parser::tokenBranches5117[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5118,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5116[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5117 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5115[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5116 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5098[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5099 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5115 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5097[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5098 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5096[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5097 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5110(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 407;
}
x64Token x64Parser::tokenBranches5109[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5110,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5108[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5109 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5107[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5108 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5126(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 409;
}
x64Token x64Parser::tokenBranches5125[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5126,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5124[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5125 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5123[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5124 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5140(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 411;
}
x64Token x64Parser::tokenBranches5139[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5140,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5138[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5139 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5137[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5138 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5106[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5107 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5123 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5137 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5105[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5106 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5132(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 410;
}
x64Token x64Parser::tokenBranches5131[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5132,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5130[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5131 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5129[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5130 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5105(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5104[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5105, x64Parser::tokenBranches5105 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5129 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5095[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5096 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5104 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5148(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 412;
}
x64Token x64Parser::tokenBranches5147[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5148,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5146[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5147 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5145[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5146 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5164(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 414;
}
x64Token x64Parser::tokenBranches5163[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5164,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5162[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5163 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5161[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5162 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5144[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5145 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5161 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5143[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5144 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5142[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5143 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5156(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 413;
}
x64Token x64Parser::tokenBranches5155[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5156,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5154[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5155 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5153[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5154 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5172(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 415;
}
x64Token x64Parser::tokenBranches5171[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5172,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5170[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5171 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5169[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5170 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5186(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 417;
}
x64Token x64Parser::tokenBranches5185[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5186,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5184[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5185 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5183[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5184 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5152[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5153 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5169 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5183 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5151[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5152 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5178(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 416;
}
x64Token x64Parser::tokenBranches5177[] = {
	{x64Token::REGISTER, 20, 1, 0, NULL,&x64Parser::TokenFunc5178,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5176[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5177 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5175[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5176 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5151(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5150[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5151, x64Parser::tokenBranches5151 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5175 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5141[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5142 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5150 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5048[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5049 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5095 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5141 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5194(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 418;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5193[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5194,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5192[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5193 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5200_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5200_11[] = {
	{ Coding::valSpecified, 15},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5200(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5200_10;
	operand.values[11] = tokenCoding5200_11;
}
x64Token x64Parser::tokenBranches5199[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5200,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5211(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 419;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5210[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5211,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5213(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 420;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5212[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5213,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5224(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 421;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5223[] = {
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc5224,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5229(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 422;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5228[] = {
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc5229,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5222[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5223 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5228 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5221[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5222 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5221(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::number;
	operand.values[1]->val = operands.size();
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5231(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 423;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5233(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 424;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5235_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5235_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5235(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5235_10;
	operand.values[11] = tokenCoding5235_11;
}
Coding x64Parser::tokenCoding5237_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5237_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5237(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5237_10;
	operand.values[11] = tokenCoding5237_11;
}
x64Token x64Parser::tokenBranches5220[] = {
	{x64Token::NUMBER, 4, 0, 0, NULL,&x64Parser::TokenFunc5221, x64Parser::tokenBranches5221 },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc5231,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc5233,  },
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5235,  },
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc5237,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5239(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 425;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5238[] = {
	{x64Token::NUMBER, 10, 1, 0, NULL,&x64Parser::TokenFunc5239,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5241(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 426;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5243(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 427;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5240[] = {
	{x64Token::NUMBER, 15, 1, 0, NULL,&x64Parser::TokenFunc5241,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc5243,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5251_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5251_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5251(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5251_10;
	operand.values[11] = tokenCoding5251_11;
}
x64Token x64Parser::tokenBranches5250[] = {
	{x64Token::ADDRESSCLASS, 7, 1, 0, NULL,&x64Parser::TokenFunc5251,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5253_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5253_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5253(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5253_10;
	operand.values[11] = tokenCoding5253_11;
}
x64Token x64Parser::tokenBranches5252[] = {
	{x64Token::ADDRESSCLASS, 10, 1, 0, NULL,&x64Parser::TokenFunc5253,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5244(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 426;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5245(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 427;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5246_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5246_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5246(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5246_10;
	operand.values[11] = tokenCoding5246_11;
}
Coding x64Parser::tokenCoding5247_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5247_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5247(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5247_10;
	operand.values[11] = tokenCoding5247_11;
}
Coding x64Parser::tokenCoding5248_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5248_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5248(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5248_10;
	operand.values[11] = tokenCoding5248_11;
}
Coding x64Parser::tokenCoding5249_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5249_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5249(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5249_10;
	operand.values[11] = tokenCoding5249_11;
}
x64Token x64Parser::tokenBranches5219[] = {
	{x64Token::TOKEN, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches5220 },
	{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches5238 },
	{x64Token::TOKEN, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches5240 },
	{x64Token::NUMBER, 14, 1, 0, NULL,&x64Parser::TokenFunc5244,  },
	{x64Token::NUMBER, 16, 1, 0, NULL,&x64Parser::TokenFunc5245,  },
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc5246,  },
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5247,  },
	{x64Token::ADDRESSCLASS, 22, 1, 0, NULL,&x64Parser::TokenFunc5248,  },
	{x64Token::ADDRESSCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5249,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5250 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5252 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5286_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5286_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5286(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5286_10;
	operand.values[11] = tokenCoding5286_11;
}
Coding x64Parser::tokenCoding5287_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5287_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5287(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5287_10;
	operand.values[11] = tokenCoding5287_11;
}
x64Token x64Parser::tokenBranches5285[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc5286,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc5287,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5294(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 428;
}
x64Token x64Parser::tokenBranches5293[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5294,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5306(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 430;
}
x64Token x64Parser::tokenBranches5305[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5306,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5292[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5293 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5305 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5291[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5292 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5300(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 429;
}
x64Token x64Parser::tokenBranches5299[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5300,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5312(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 431;
}
x64Token x64Parser::tokenBranches5311[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5312,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5322(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 433;
}
x64Token x64Parser::tokenBranches5321[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5322,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5298[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5299 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5311 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5321 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5297[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5298 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5316(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 432;
}
x64Token x64Parser::tokenBranches5315[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5316,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5297(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5290[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5291 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5297, x64Parser::tokenBranches5297 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5315 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5289[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5290 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5328(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 434;
}
x64Token x64Parser::tokenBranches5327[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5328,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5340(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 436;
}
x64Token x64Parser::tokenBranches5339[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5340,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5326[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5327 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5339 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5325[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5326 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5334(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 435;
}
x64Token x64Parser::tokenBranches5333[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5334,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5346(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 437;
}
x64Token x64Parser::tokenBranches5345[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5346,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5356(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 439;
}
x64Token x64Parser::tokenBranches5355[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5356,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5332[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5333 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5345 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5355 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5331[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5332 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5350(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 438;
}
x64Token x64Parser::tokenBranches5349[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5350,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5331(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5324[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5325 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5331, x64Parser::tokenBranches5331 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5349 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5323[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5324 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5362(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 440;
}
x64Token x64Parser::tokenBranches5361[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5362,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5374(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 442;
}
x64Token x64Parser::tokenBranches5373[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5374,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5360[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5361 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5373 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5359[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5360 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5368(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 441;
}
x64Token x64Parser::tokenBranches5367[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5368,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5380(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 443;
}
x64Token x64Parser::tokenBranches5379[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5380,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5390(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 445;
}
x64Token x64Parser::tokenBranches5389[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5390,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5366[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5367 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5379 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5389 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5365[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5366 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5384(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 444;
}
x64Token x64Parser::tokenBranches5383[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5384,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5365(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5358[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5359 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5365, x64Parser::tokenBranches5365 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5383 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5357[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5358 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5396(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 446;
}
x64Token x64Parser::tokenBranches5395[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5396,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5394[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5395 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5393[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5394 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5402(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 447;
}
x64Token x64Parser::tokenBranches5401[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5402,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5412(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 449;
}
x64Token x64Parser::tokenBranches5411[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5412,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5400[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5401 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5411 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5399[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5400 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5406(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 448;
}
x64Token x64Parser::tokenBranches5405[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5406,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5399(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5392[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5393 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5399, x64Parser::tokenBranches5399 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5405 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5391[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5392 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5288[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5289 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5323 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5357 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5391 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5418(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 450;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5417[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5418,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5420(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 451;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5419[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5420,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5422(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 452;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5421[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5422,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5424(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 452;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5423[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5424,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5426(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 451;
	operand.values[16] = new Coding[2];
	CleanupValues.push_back(operand.values[16]);
	operand.values[16]->type = Coding::number;
	operand.values[16]->val = operands.size();
	operand.values[16]->bits = 0;
	operand.values[16]->field = 0;
	operand.values[16]->math = 0;
	operand.values[16]->mathval = 0;
	operand.values[16][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5425[] = {
	{x64Token::NUMBER, 11, 1, 0, NULL,&x64Parser::TokenFunc5426,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5430_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5430_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5430(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5430_10;
	operand.values[11] = tokenCoding5430_11;
}
Coding x64Parser::tokenCoding5431_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5431_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5431(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5431_10;
	operand.values[11] = tokenCoding5431_11;
}
x64Token x64Parser::tokenBranches5429[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5430,  },
	{x64Token::ADDRESSCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5431,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5435_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 23, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5435_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 34, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5435(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5435_10;
	operand.values[11] = tokenCoding5435_11;
}
x64Token x64Parser::tokenBranches5434[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5435,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5433[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5434 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5438_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 24, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5438_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 35, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5438(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5438_10;
	operand.values[11] = tokenCoding5438_11;
}
x64Token x64Parser::tokenBranches5437[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5438,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5436[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5437 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5441_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 25, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5441_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 38, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5441(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5441_10;
	operand.values[11] = tokenCoding5441_11;
}
x64Token x64Parser::tokenBranches5440[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5441,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5439[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5440 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5447(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 453;
}
x64Token x64Parser::tokenBranches5446[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5447,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5455(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 454;
}
x64Token x64Parser::tokenBranches5454[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5455,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5469(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 456;
}
x64Token x64Parser::tokenBranches5468[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5469,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5454(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5468(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5453[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5454, x64Parser::tokenBranches5454 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5468, x64Parser::tokenBranches5468 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5452[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5453 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5461(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 455;
}
x64Token x64Parser::tokenBranches5460[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5461,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5446(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5452(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5460(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5445[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5446, x64Parser::tokenBranches5446 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5452, x64Parser::tokenBranches5452 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5460, x64Parser::tokenBranches5460 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5444[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5445 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5443[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5444 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5442[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5443 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5475(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 457;
}
x64Token x64Parser::tokenBranches5474[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5475,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5483(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 458;
}
x64Token x64Parser::tokenBranches5482[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5483,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5497(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 460;
}
x64Token x64Parser::tokenBranches5496[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5497,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5482(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5496(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5481[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5482, x64Parser::tokenBranches5482 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5496, x64Parser::tokenBranches5496 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5480[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5481 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5489(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 459;
}
x64Token x64Parser::tokenBranches5488[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5489,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5474(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5480(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5488(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5473[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5474, x64Parser::tokenBranches5474 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5480, x64Parser::tokenBranches5480 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5488, x64Parser::tokenBranches5488 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5472[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5473 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5471[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5472 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5470[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5471 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5503(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 461;
}
x64Token x64Parser::tokenBranches5502[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5503,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5511(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 462;
}
x64Token x64Parser::tokenBranches5510[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5511,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5525(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 464;
}
x64Token x64Parser::tokenBranches5524[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5525,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5510(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5524(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5509[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5510, x64Parser::tokenBranches5510 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5524, x64Parser::tokenBranches5524 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5508[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5509 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5517(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 463;
}
x64Token x64Parser::tokenBranches5516[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5517,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5502(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5508(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5516(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5501[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5502, x64Parser::tokenBranches5502 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5508, x64Parser::tokenBranches5508 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5516, x64Parser::tokenBranches5516 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5500[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5501 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5499[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5500 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5498[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5499 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5531(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 465;
}
x64Token x64Parser::tokenBranches5530[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5531,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5539(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 466;
}
x64Token x64Parser::tokenBranches5538[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5539,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5553(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 468;
}
x64Token x64Parser::tokenBranches5552[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5553,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5538(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5552(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5537[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5538, x64Parser::tokenBranches5538 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc5552, x64Parser::tokenBranches5552 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5536[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5537 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5545(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 467;
}
x64Token x64Parser::tokenBranches5544[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5545,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5530(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5536(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5544(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5529[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5530, x64Parser::tokenBranches5530 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5536, x64Parser::tokenBranches5536 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc5544, x64Parser::tokenBranches5544 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5528[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5529 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5527[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5528 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5526[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5527 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5557(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 469;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5585_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5585_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5585_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5585_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 138, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5585(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5585_8;
	operand.values[9] = tokenCoding5585_9;
	operand.values[10] = tokenCoding5585_10;
	operand.values[11] = tokenCoding5585_11;
}
x64Token x64Parser::tokenBranches5556[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5557,  },
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc5585,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5555[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5556 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5554[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5555 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5561(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 470;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5589_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5589_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5589_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5589_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5589(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5589_8;
	operand.values[9] = tokenCoding5589_9;
	operand.values[10] = tokenCoding5589_10;
	operand.values[11] = tokenCoding5589_11;
}
x64Token x64Parser::tokenBranches5560[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5561,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5589,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5559[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5560 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5558[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5559 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5565(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 471;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5593_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5593_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5593_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5593_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5593(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5593_8;
	operand.values[9] = tokenCoding5593_9;
	operand.values[10] = tokenCoding5593_10;
	operand.values[11] = tokenCoding5593_11;
}
x64Token x64Parser::tokenBranches5564[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5565,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5593,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5563[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5564 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5562[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5563 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5569(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 469;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5597_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5597_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5597_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5597_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 138, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5597(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5597_8;
	operand.values[9] = tokenCoding5597_9;
	operand.values[10] = tokenCoding5597_10;
	operand.values[11] = tokenCoding5597_11;
}
x64Token x64Parser::tokenBranches5568[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5569,  },
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc5597,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5567[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5568 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5566[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5567 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5573(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 470;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5601_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5601_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5601_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5601_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5601(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5601_8;
	operand.values[9] = tokenCoding5601_9;
	operand.values[10] = tokenCoding5601_10;
	operand.values[11] = tokenCoding5601_11;
}
x64Token x64Parser::tokenBranches5572[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5573,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc5601,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5571[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5572 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5570[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5571 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5577(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 471;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5605_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5605_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5605_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5605_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5605(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5605_8;
	operand.values[9] = tokenCoding5605_9;
	operand.values[10] = tokenCoding5605_10;
	operand.values[11] = tokenCoding5605_11;
}
x64Token x64Parser::tokenBranches5576[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5577,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc5605,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5575[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5576 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5574[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5575 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5581(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 472;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5609_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5609_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5609_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5609_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5609(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5609_8;
	operand.values[9] = tokenCoding5609_9;
	operand.values[10] = tokenCoding5609_10;
	operand.values[11] = tokenCoding5609_11;
}
x64Token x64Parser::tokenBranches5580[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc5581,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc5609,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5579[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5580 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5578[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5579 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5614_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5614_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5614(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5614_10;
	operand.values[11] = tokenCoding5614_11;
}
x64Token x64Parser::tokenBranches5613[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5614,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5612[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5613 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5611[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5612 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5634_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5634_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5634(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5634_10;
	operand.values[11] = tokenCoding5634_11;
}
x64Token x64Parser::tokenBranches5633[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5634,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5632[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5633 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5631[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5632 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5610[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5611 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5631 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5619_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5619_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5619(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5619_10;
	operand.values[11] = tokenCoding5619_11;
}
x64Token x64Parser::tokenBranches5618[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5619,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5617[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5618 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5616[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5617 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5639_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5639_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5639(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5639_10;
	operand.values[11] = tokenCoding5639_11;
}
x64Token x64Parser::tokenBranches5638[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5639,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5637[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5638 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5636[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5637 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5615[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5616 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches5636 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5624_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5624_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5624(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5624_10;
	operand.values[11] = tokenCoding5624_11;
}
x64Token x64Parser::tokenBranches5623[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5624,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5622[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5623 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5621[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5622 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5644_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5644_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5644(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5644_10;
	operand.values[11] = tokenCoding5644_11;
}
x64Token x64Parser::tokenBranches5643[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5644,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5642[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5643 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5641[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5642 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5620[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5621 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches5641 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5629_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5629_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5629(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5629_10;
	operand.values[11] = tokenCoding5629_11;
}
x64Token x64Parser::tokenBranches5628[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5629,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5627[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5628 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5626[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5627 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5649_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5649_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5649(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5649_10;
	operand.values[11] = tokenCoding5649_11;
}
x64Token x64Parser::tokenBranches5648[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5649,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5647[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5648 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5646[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5647 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5625[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches5626 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches5646 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5850_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5850_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5850(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5850_10;
	operand.values[11] = tokenCoding5850_11;
}
x64Token x64Parser::tokenBranches5849[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5850,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5652_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 23, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5652_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 32, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5652(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::reg;
	operand.values[23]->val = inputTokens[tokenPos]->val->ival;
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->math = 0;
	operand.values[23]->mathval = 0;
	operand.values[23][1].type = Coding::eot;
	operand.values[10] = tokenCoding5652_10;
	operand.values[11] = tokenCoding5652_11;
}
Coding x64Parser::tokenCoding5655_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 24, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5655_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5655(x64Operand &operand, int tokenPos)
{
	operand.values[24] = new Coding[2];
	CleanupValues.push_back(operand.values[24]);
	operand.values[24]->type = Coding::reg;
	operand.values[24]->val = inputTokens[tokenPos]->val->ival;
	operand.values[24]->bits = 0;
	operand.values[24]->field = 0;
	operand.values[24]->math = 0;
	operand.values[24]->mathval = 0;
	operand.values[24][1].type = Coding::eot;
	operand.values[10] = tokenCoding5655_10;
	operand.values[11] = tokenCoding5655_11;
}
Coding x64Parser::tokenCoding5658_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 25, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5658_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5658(x64Operand &operand, int tokenPos)
{
	operand.values[25] = new Coding[2];
	CleanupValues.push_back(operand.values[25]);
	operand.values[25]->type = Coding::reg;
	operand.values[25]->val = inputTokens[tokenPos]->val->ival;
	operand.values[25]->bits = 0;
	operand.values[25]->field = 0;
	operand.values[25]->math = 0;
	operand.values[25]->mathval = 0;
	operand.values[25][1].type = Coding::eot;
	operand.values[10] = tokenCoding5658_10;
	operand.values[11] = tokenCoding5658_11;
}
x64Token x64Parser::tokenBranches5651[] = {
	{x64Token::REGISTERCLASS, 30, 1, 0, NULL,&x64Parser::TokenFunc5652,  },
	{x64Token::REGISTERCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5655,  },
	{x64Token::REGISTERCLASS, 32, 1, 0, NULL,&x64Parser::TokenFunc5658,  },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5849 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5650[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5651 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5664(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 473;
}
x64Token x64Parser::tokenBranches5663[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5664,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5662[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5663 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5661[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5662 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5672(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 474;
}
x64Token x64Parser::tokenBranches5671[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5672,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5670[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5671 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5669[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5670 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5686(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 476;
}
x64Token x64Parser::tokenBranches5685[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5686,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5684[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5685 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5683[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5684 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5669(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5683(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5668[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5669, x64Parser::tokenBranches5669 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5683, x64Parser::tokenBranches5683 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5667[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5668 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5678(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 475;
}
x64Token x64Parser::tokenBranches5677[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc5678,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5676[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5677 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5675[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5676 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5661(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5667(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5675(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5660[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5661, x64Parser::tokenBranches5661 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5667, x64Parser::tokenBranches5667 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5675, x64Parser::tokenBranches5675 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5774_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5774_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5774_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5774_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 136, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5774(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5774_8;
	operand.values[9] = tokenCoding5774_9;
	operand.values[10] = tokenCoding5774_10;
	operand.values[11] = tokenCoding5774_11;
}
x64Token x64Parser::tokenBranches5773[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc5774,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5772[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5773 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5786_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5786_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5786_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5786_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 136, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5786(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5786_8;
	operand.values[9] = tokenCoding5786_9;
	operand.values[10] = tokenCoding5786_10;
	operand.values[11] = tokenCoding5786_11;
}
x64Token x64Parser::tokenBranches5785[] = {
	{x64Token::REGISTERCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc5786,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5784[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5785 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5659[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5660 },
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5772 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5784 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5692(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 477;
}
x64Token x64Parser::tokenBranches5691[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5692,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5690[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5691 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5689[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5690 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5700(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 478;
}
x64Token x64Parser::tokenBranches5699[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5700,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5698[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5699 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5697[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5698 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5714(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 480;
}
x64Token x64Parser::tokenBranches5713[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5714,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5712[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5713 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5711[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5712 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5697(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5711(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5696[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5697, x64Parser::tokenBranches5697 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5711, x64Parser::tokenBranches5711 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5695[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5696 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5706(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 479;
}
x64Token x64Parser::tokenBranches5705[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc5706,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5704[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5705 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5703[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5704 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5689(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5695(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5703(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5688[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5689, x64Parser::tokenBranches5689 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5695, x64Parser::tokenBranches5695 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5703, x64Parser::tokenBranches5703 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5778_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5778_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5778_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5778_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5778(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5778_8;
	operand.values[9] = tokenCoding5778_9;
	operand.values[10] = tokenCoding5778_10;
	operand.values[11] = tokenCoding5778_11;
}
Coding x64Parser::tokenCoding5810_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5810_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5810(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->math = 0;
	operand.values[26]->mathval = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[10] = tokenCoding5810_10;
	operand.values[11] = tokenCoding5810_11;
}
x64Token x64Parser::tokenBranches5777[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc5778,  },
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc5810,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5776[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5777 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5790_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5790_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5790_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5790_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5790(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5790_8;
	operand.values[9] = tokenCoding5790_9;
	operand.values[10] = tokenCoding5790_10;
	operand.values[11] = tokenCoding5790_11;
}
Coding x64Parser::tokenCoding5830_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5830_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5830(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->math = 0;
	operand.values[26]->mathval = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[10] = tokenCoding5830_10;
	operand.values[11] = tokenCoding5830_11;
}
x64Token x64Parser::tokenBranches5789[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc5790,  },
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc5830,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5788[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5789 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5687[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5688 },
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5776 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches5788 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5720(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 481;
}
x64Token x64Parser::tokenBranches5719[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5720,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5718[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5719 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5717[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5718 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5728(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 482;
}
x64Token x64Parser::tokenBranches5727[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5728,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5726[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5727 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5725[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5726 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5742(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 484;
}
x64Token x64Parser::tokenBranches5741[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5742,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5740[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5741 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5739[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5740 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5725(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5739(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5724[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5725, x64Parser::tokenBranches5725 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5739, x64Parser::tokenBranches5739 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5723[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5724 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5734(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 483;
}
x64Token x64Parser::tokenBranches5733[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc5734,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5732[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5733 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5731[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5732 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5717(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5723(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5731(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5716[] = {
	{x64Token::NUMBER, 7, 0, 0, NULL,&x64Parser::TokenFunc5717, x64Parser::tokenBranches5717 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5723, x64Parser::tokenBranches5723 },
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5731, x64Parser::tokenBranches5731 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5782_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5782_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5782_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5782_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5782(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5782_8;
	operand.values[9] = tokenCoding5782_9;
	operand.values[10] = tokenCoding5782_10;
	operand.values[11] = tokenCoding5782_11;
}
x64Token x64Parser::tokenBranches5781[] = {
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc5782,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5780[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5781 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5794_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5794_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5794_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5794_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5794(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5794_8;
	operand.values[9] = tokenCoding5794_9;
	operand.values[10] = tokenCoding5794_10;
	operand.values[11] = tokenCoding5794_11;
}
x64Token x64Parser::tokenBranches5793[] = {
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc5794,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5792[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5793 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5814_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5814_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5814(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->math = 0;
	operand.values[26]->mathval = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[10] = tokenCoding5814_10;
	operand.values[11] = tokenCoding5814_11;
}
x64Token x64Parser::tokenBranches5813[] = {
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc5814,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5812[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5813 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5834_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5834_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5834(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->math = 0;
	operand.values[26]->mathval = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[10] = tokenCoding5834_10;
	operand.values[11] = tokenCoding5834_11;
}
x64Token x64Parser::tokenBranches5833[] = {
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc5834,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5832[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5833 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5838_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5838_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5838(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->math = 0;
	operand.values[26]->mathval = 0;
	operand.values[26][1].type = Coding::eot;
	operand.values[10] = tokenCoding5838_10;
	operand.values[11] = tokenCoding5838_11;
}
x64Token x64Parser::tokenBranches5837[] = {
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc5838,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5836[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5837 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5715[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5716 },
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5780 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches5792 },
	{x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches5812 },
	{x64Token::ADDRESSCLASS, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches5832 },
	{x64Token::ADDRESSCLASS, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches5836 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5748(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 485;
}
x64Token x64Parser::tokenBranches5747[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5748,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5746[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5747 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5745[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5746 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5756(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 486;
}
x64Token x64Parser::tokenBranches5755[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5756,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5754[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5755 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5753[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5754 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5770(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 488;
}
x64Token x64Parser::tokenBranches5769[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5770,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5768[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5769 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5767[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5768 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5753(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5767(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5752[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5753, x64Parser::tokenBranches5753 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc5767, x64Parser::tokenBranches5767 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5751[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5752 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5762(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 487;
}
x64Token x64Parser::tokenBranches5761[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc5762,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5760[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5761 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5759[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5760 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5745(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc5751(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc5759(x64Operand &operand, int tokenPos)
{
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5744[] = {
	{x64Token::NUMBER, 8, 0, 0, NULL,&x64Parser::TokenFunc5745, x64Parser::tokenBranches5745 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5751, x64Parser::tokenBranches5751 },
	{x64Token::NUMBER, 9, 0, 0, NULL,&x64Parser::TokenFunc5759, x64Parser::tokenBranches5759 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5798_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5798_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5798_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5798_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5798(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding5798_8;
	operand.values[9] = tokenCoding5798_9;
	operand.values[10] = tokenCoding5798_10;
	operand.values[11] = tokenCoding5798_11;
}
x64Token x64Parser::tokenBranches5797[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc5798,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5796[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5797 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5743[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5744 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches5796 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5802_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5802_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5802_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5802_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5802(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5802_8;
	operand.values[9] = tokenCoding5802_9;
	operand.values[10] = tokenCoding5802_10;
	operand.values[11] = tokenCoding5802_11;
}
Coding x64Parser::tokenCoding5818_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5818_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5818_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5818_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5818(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding5818_8;
	operand.values[9] = tokenCoding5818_9;
	operand.values[10] = tokenCoding5818_10;
	operand.values[11] = tokenCoding5818_11;
}
x64Token x64Parser::tokenBranches5801[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc5802,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc5818,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5806_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5806_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5806(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5806_10;
	operand.values[11] = tokenCoding5806_11;
}
Coding x64Parser::tokenCoding5822_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5822_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5822(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5822_10;
	operand.values[11] = tokenCoding5822_11;
}
Coding x64Parser::tokenCoding5826_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 26, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5826_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5826(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding5826_10;
	operand.values[11] = tokenCoding5826_11;
}
x64Token x64Parser::tokenBranches5805[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc5806,  },
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc5822,  },
	{x64Token::ADDRESSCLASS, 31, 1, 0, NULL,&x64Parser::TokenFunc5826,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5800[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5801 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5805 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5799[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5800 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5842_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5842_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5842(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5842_10;
	operand.values[11] = tokenCoding5842_11;
}
x64Token x64Parser::tokenBranches5841[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5842,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5840[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5841 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5839[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5840 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5846_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5846_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5846(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5846_10;
	operand.values[11] = tokenCoding5846_11;
}
x64Token x64Parser::tokenBranches5845[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5846,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5844[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5845 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5843[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5844 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5854_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5854_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5854(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5854_10;
	operand.values[11] = tokenCoding5854_11;
}
x64Token x64Parser::tokenBranches5853[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc5854,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5852[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5853 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5851[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5852 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5858_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5858_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5858(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5858_10;
	operand.values[11] = tokenCoding5858_11;
}
x64Token x64Parser::tokenBranches5857[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc5858,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5856[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5857 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5855[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5856 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5862_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5862_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5862(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5862_10;
	operand.values[11] = tokenCoding5862_11;
}
x64Token x64Parser::tokenBranches5861[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc5862,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5860[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5861 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5859[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5860 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding5866_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding5866_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc5866(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding5866_10;
	operand.values[11] = tokenCoding5866_11;
}
x64Token x64Parser::tokenBranches5865[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc5866,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5864[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5865 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5863[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5864 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5433(x64Operand &operand, int tokenPos)
{
	operand.values[23] = new Coding[2];
	CleanupValues.push_back(operand.values[23]);
	operand.values[23]->type = Coding::reg;
	operand.values[23]->val = inputTokens[tokenPos]->val->ival;
	operand.values[23]->bits = 0;
	operand.values[23]->field = 0;
	operand.values[23]->math = 0;
	operand.values[23]->mathval = 0;
	operand.values[23][1].type = Coding::eot;
}
void x64Parser::TokenFunc5436(x64Operand &operand, int tokenPos)
{
	operand.values[24] = new Coding[2];
	CleanupValues.push_back(operand.values[24]);
	operand.values[24]->type = Coding::reg;
	operand.values[24]->val = inputTokens[tokenPos]->val->ival;
	operand.values[24]->bits = 0;
	operand.values[24]->field = 0;
	operand.values[24]->math = 0;
	operand.values[24]->mathval = 0;
	operand.values[24][1].type = Coding::eot;
}
void x64Parser::TokenFunc5439(x64Operand &operand, int tokenPos)
{
	operand.values[25] = new Coding[2];
	CleanupValues.push_back(operand.values[25]);
	operand.values[25]->type = Coding::reg;
	operand.values[25]->val = inputTokens[tokenPos]->val->ival;
	operand.values[25]->bits = 0;
	operand.values[25]->field = 0;
	operand.values[25]->math = 0;
	operand.values[25]->mathval = 0;
	operand.values[25][1].type = Coding::eot;
}
void x64Parser::TokenFunc5554(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5558(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5562(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5566(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5570(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5574(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5578(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc5799(x64Operand &operand, int tokenPos)
{
	operand.values[26] = new Coding[2];
	CleanupValues.push_back(operand.values[26]);
	operand.values[26]->type = Coding::reg;
	operand.values[26]->val = inputTokens[tokenPos]->val->ival;
	operand.values[26]->bits = 0;
	operand.values[26]->field = 0;
	operand.values[26]->math = 0;
	operand.values[26]->mathval = 0;
	operand.values[26][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5432[] = {
	{x64Token::REGISTERCLASS, 30, 0, 0, NULL,&x64Parser::TokenFunc5433, x64Parser::tokenBranches5433 },
	{x64Token::REGISTERCLASS, 31, 0, 0, NULL,&x64Parser::TokenFunc5436, x64Parser::tokenBranches5436 },
	{x64Token::REGISTERCLASS, 32, 0, 0, NULL,&x64Parser::TokenFunc5439, x64Parser::tokenBranches5439 },
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches5442 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5470 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5498 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5526 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc5554, x64Parser::tokenBranches5554 },
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc5558, x64Parser::tokenBranches5558 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc5562, x64Parser::tokenBranches5562 },
	{x64Token::REGISTERCLASS, 2, 0, 0, NULL,&x64Parser::TokenFunc5566, x64Parser::tokenBranches5566 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc5570, x64Parser::tokenBranches5570 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc5574, x64Parser::tokenBranches5574 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc5578, x64Parser::tokenBranches5578 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5610 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5615 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5620 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches5625 },
	{x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches5650 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches5659 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5687 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5715 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5743 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5799, x64Parser::tokenBranches5799 },
	{x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches5839 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches5843 },
	{x64Token::ADDRESSCLASS, 25, 0, 0, NULL, NULL, x64Parser::tokenBranches5851 },
	{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches5855 },
	{x64Token::ADDRESSCLASS, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches5859 },
	{x64Token::ADDRESSCLASS, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches5863 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5880(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 489;
}
x64Token x64Parser::tokenBranches5879[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5880,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5878[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5879 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5877[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5878 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5893(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 490;
}
x64Token x64Parser::tokenBranches5892[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5893,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5891[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5892 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5890[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5891 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5890(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5876[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5877 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5890, x64Parser::tokenBranches5890 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5875[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5876 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5874[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5875 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5873[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5874 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5872[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5873 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5906(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 491;
}
x64Token x64Parser::tokenBranches5905[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5906,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5904[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5905 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5903[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5904 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5919(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 492;
}
x64Token x64Parser::tokenBranches5918[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5919,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5917[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5918 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5916[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5917 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5916(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5902[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5903 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5916, x64Parser::tokenBranches5916 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5901[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5902 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5900[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5901 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5899[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5900 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5898[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5899 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5871[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5872 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5898 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5870[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5871 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5869[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5870 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5928(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 493;
}
x64Token x64Parser::tokenBranches5927[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5928,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5939(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 494;
}
x64Token x64Parser::tokenBranches5938[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5939,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5937[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5938 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5936[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5937 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5936(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5926[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5927 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5936, x64Parser::tokenBranches5936 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5925[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5926 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5924[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5925 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5923[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5924 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5922[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5923 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5921[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5922 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5868[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5869 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5921 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5952(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 495;
}
x64Token x64Parser::tokenBranches5951[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5952,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5950[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5951 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5949[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5950 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5965(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 496;
}
x64Token x64Parser::tokenBranches5964[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5965,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5963[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5964 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5962[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5963 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5962(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5948[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5949 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5962, x64Parser::tokenBranches5962 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5947[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5948 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5946[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5947 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5945[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5946 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5944[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5945 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5978(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 497;
}
x64Token x64Parser::tokenBranches5977[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5978,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5976[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5977 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5975[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5976 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5991(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 498;
}
x64Token x64Parser::tokenBranches5990[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc5991,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5989[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5990 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5988[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5989 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc5988(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5974[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches5975 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc5988, x64Parser::tokenBranches5988 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5973[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5974 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5972[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5973 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5971[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5972 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5970[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5971 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5943[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5944 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5970 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5942[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5943 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5941[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5942 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6000(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 499;
}
x64Token x64Parser::tokenBranches5999[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6000,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6011(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 500;
}
x64Token x64Parser::tokenBranches6010[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6011,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6009[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6010 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6008[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6009 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6008(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5998[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches5999 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6008, x64Parser::tokenBranches6008 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5997[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5998 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5996[] = {
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5997 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5995[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5996 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5994[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5995 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5993[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches5994 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5940[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches5941 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5993 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6024(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 501;
}
x64Token x64Parser::tokenBranches6023[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6024,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6022[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6023 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6021[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6022 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6037(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 502;
}
x64Token x64Parser::tokenBranches6036[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6037,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6035[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6036 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6034[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6035 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6034(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6020[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6021 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6034, x64Parser::tokenBranches6034 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6019[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6020 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6018[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6019 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6017[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6018 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6016[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6017 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6050(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 503;
}
x64Token x64Parser::tokenBranches6049[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6050,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6048[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6049 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6047[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6048 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6063(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 504;
}
x64Token x64Parser::tokenBranches6062[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6063,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6061[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6062 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6060[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6061 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6060(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6046[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6047 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6060, x64Parser::tokenBranches6060 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6045[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6046 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6044[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6045 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6043[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6044 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6042[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6043 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6015[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6016 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6042 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6014[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6015 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6013[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6014 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6072(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 505;
}
x64Token x64Parser::tokenBranches6071[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6072,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6083(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 506;
}
x64Token x64Parser::tokenBranches6082[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6083,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6081[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6082 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6080[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6081 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6080(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6070[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6071 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6080, x64Parser::tokenBranches6080 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6069[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6070 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6068[] = {
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6069 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6067[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6068 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6066[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6067 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6065[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6066 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6012[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6013 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6065 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6096(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 507;
}
x64Token x64Parser::tokenBranches6095[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6096,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6094[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6095 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6093[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6094 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6109(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 508;
}
x64Token x64Parser::tokenBranches6108[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6109,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6107[] = {
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6108 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6106[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6107 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6106(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6092[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6093 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6106, x64Parser::tokenBranches6106 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6091[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6092 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6090[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6091 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6089[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6090 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6088[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6089 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6087[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6088 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6086[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6087 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6085[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6086 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6118(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 507;
}
x64Token x64Parser::tokenBranches6117[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6118,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6129(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 508;
}
x64Token x64Parser::tokenBranches6128[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6129,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6127[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6128 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6126[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6127 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6126(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6116[] = {
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6117 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6126, x64Parser::tokenBranches6126 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6115[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6116 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6114[] = {
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6115 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6113[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6114 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6112[] = {
	{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6113 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6111[] = {
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6112 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6084[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6085 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6111 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches5867[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5868 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5940 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6012 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6084 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6134_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6134_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6134_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6134_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc6134(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6134_8;
	operand.values[9] = tokenCoding6134_9;
	operand.values[10] = tokenCoding6134_10;
	operand.values[11] = tokenCoding6134_11;
}
x64Token x64Parser::tokenBranches6133[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6134,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6132[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6133 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6131[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6132 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6138_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6138_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6138_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6138_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc6138(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6138_8;
	operand.values[9] = tokenCoding6138_9;
	operand.values[10] = tokenCoding6138_10;
	operand.values[11] = tokenCoding6138_11;
}
x64Token x64Parser::tokenBranches6137[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6138,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6136[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6137 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6135[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6136 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6142_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6142_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6142_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6142_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc6142(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6142_8;
	operand.values[9] = tokenCoding6142_9;
	operand.values[10] = tokenCoding6142_10;
	operand.values[11] = tokenCoding6142_11;
}
x64Token x64Parser::tokenBranches6141[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6142,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6140[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6141 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6139[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6140 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6146_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6146_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6146_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6146_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc6146(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6146_8;
	operand.values[9] = tokenCoding6146_9;
	operand.values[10] = tokenCoding6146_10;
	operand.values[11] = tokenCoding6146_11;
}
x64Token x64Parser::tokenBranches6145[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6146,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6144[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6145 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6143[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6144 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6150_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6150_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6150_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6150_11[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc6150(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6150_8;
	operand.values[9] = tokenCoding6150_9;
	operand.values[10] = tokenCoding6150_10;
	operand.values[11] = tokenCoding6150_11;
}
x64Token x64Parser::tokenBranches6149[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6150,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6148[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6149 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6147[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6148 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6154_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6154_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6154_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6154_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc6154(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6154_8;
	operand.values[9] = tokenCoding6154_9;
	operand.values[10] = tokenCoding6154_10;
	operand.values[11] = tokenCoding6154_11;
}
x64Token x64Parser::tokenBranches6153[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6154,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6152[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6153 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6162_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6162_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6162_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6162_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc6162(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6162_8;
	operand.values[9] = tokenCoding6162_9;
	operand.values[10] = tokenCoding6162_10;
	operand.values[11] = tokenCoding6162_11;
}
x64Token x64Parser::tokenBranches6161[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc6162,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6160[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6161 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6151[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6152 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6160 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6158_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6158_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6158_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6158_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc6158(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6158_8;
	operand.values[9] = tokenCoding6158_9;
	operand.values[10] = tokenCoding6158_10;
	operand.values[11] = tokenCoding6158_11;
}
x64Token x64Parser::tokenBranches6157[] = {
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6158,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6156[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6157 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6166_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6166_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6166_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6166_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc6166(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6166_8;
	operand.values[9] = tokenCoding6166_9;
	operand.values[10] = tokenCoding6166_10;
	operand.values[11] = tokenCoding6166_11;
}
x64Token x64Parser::tokenBranches6165[] = {
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc6166,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6164[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6165 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6155[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6156 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches6164 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6170_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6170_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6170_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6170_11[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::indirect, 27, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc6170(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6170_8;
	operand.values[9] = tokenCoding6170_9;
	operand.values[10] = tokenCoding6170_10;
	operand.values[11] = tokenCoding6170_11;
}
x64Token x64Parser::tokenBranches6169[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6170,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6168[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6169 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6167[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches6168 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6131(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6135(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6139(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6143(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6147(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6130[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc6131, x64Parser::tokenBranches6131 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc6135, x64Parser::tokenBranches6135 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6139, x64Parser::tokenBranches6139 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc6143, x64Parser::tokenBranches6143 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6147, x64Parser::tokenBranches6147 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6151 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6155 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6167 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6176_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6176_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6176_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6176_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6176_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6176(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6176_8;
	operand.values[9] = tokenCoding6176_9;
	operand.values[18] = tokenCoding6176_18;
	operand.values[10] = tokenCoding6176_10;
	operand.values[11] = tokenCoding6176_11;
}
x64Token x64Parser::tokenBranches6175[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6176,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6174[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6175 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6179_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6179_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6179_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6179_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6179_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6179(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6179_8;
	operand.values[9] = tokenCoding6179_9;
	operand.values[18] = tokenCoding6179_18;
	operand.values[10] = tokenCoding6179_10;
	operand.values[11] = tokenCoding6179_11;
}
x64Token x64Parser::tokenBranches6178[] = {
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc6179,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6177[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6178 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6182_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6182_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6182_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6182_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6182_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 17, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6182(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6182_8;
	operand.values[9] = tokenCoding6182_9;
	operand.values[18] = tokenCoding6182_18;
	operand.values[10] = tokenCoding6182_10;
	operand.values[11] = tokenCoding6182_11;
}
Coding x64Parser::tokenCoding6185_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6185_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6185_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6185_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6185_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 17, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6185(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6185_8;
	operand.values[9] = tokenCoding6185_9;
	operand.values[18] = tokenCoding6185_18;
	operand.values[10] = tokenCoding6185_10;
	operand.values[11] = tokenCoding6185_11;
}
x64Token x64Parser::tokenBranches6181[] = {
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc6182,  },
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc6185,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6180[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6181 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6174(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6177(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6173[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc6174, x64Parser::tokenBranches6174 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc6177, x64Parser::tokenBranches6177 },
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6180 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6196_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6196_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6196_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6196_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6196(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6196_8;
	operand.values[9] = tokenCoding6196_9;
	operand.values[10] = tokenCoding6196_10;
	operand.values[11] = tokenCoding6196_11;
}
x64Token x64Parser::tokenBranches6195[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6196,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6192_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6192_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6192_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6192_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6192(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6192_8;
	operand.values[9] = tokenCoding6192_9;
	operand.values[10] = tokenCoding6192_10;
	operand.values[11] = tokenCoding6192_11;
}
x64Token x64Parser::tokenBranches6191[] = {
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc6192,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6195 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6190[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6191 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6206_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6206_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6206_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6206_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6206(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6206_8;
	operand.values[9] = tokenCoding6206_9;
	operand.values[10] = tokenCoding6206_10;
	operand.values[11] = tokenCoding6206_11;
}
x64Token x64Parser::tokenBranches6205[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6206,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6199_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6199_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6199_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6199_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6199(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6199_8;
	operand.values[9] = tokenCoding6199_9;
	operand.values[10] = tokenCoding6199_10;
	operand.values[11] = tokenCoding6199_11;
}
x64Token x64Parser::tokenBranches6198[] = {
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc6199,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6205 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6197[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6198 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6210_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6210_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6210_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6210_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6210(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6210_8;
	operand.values[9] = tokenCoding6210_9;
	operand.values[10] = tokenCoding6210_10;
	operand.values[11] = tokenCoding6210_11;
}
x64Token x64Parser::tokenBranches6209[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6210,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6202_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6202_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6202_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6202_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6202(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6202_8;
	operand.values[9] = tokenCoding6202_9;
	operand.values[10] = tokenCoding6202_10;
	operand.values[11] = tokenCoding6202_11;
}
x64Token x64Parser::tokenBranches6201[] = {
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc6202,  },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6209 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6200[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6201 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6190(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6197(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6200(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6189[] = {
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc6190, x64Parser::tokenBranches6190 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc6197, x64Parser::tokenBranches6197 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6200, x64Parser::tokenBranches6200 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6220(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 509;
}
x64Token x64Parser::tokenBranches6219[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc6220,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6218[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6219 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6218(x64Operand &operand, int tokenPos)
{
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->math = 0;
	operand.values[22]->mathval = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6217[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc6218, x64Parser::tokenBranches6218 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6224(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 510;
}
x64Token x64Parser::tokenBranches6223[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc6224,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6222[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6223 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6222(x64Operand &operand, int tokenPos)
{
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->math = 0;
	operand.values[22]->mathval = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6221[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc6222, x64Parser::tokenBranches6222 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6228(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 511;
}
x64Token x64Parser::tokenBranches6227[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc6228,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6226[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6227 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6226(x64Operand &operand, int tokenPos)
{
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->math = 0;
	operand.values[22]->mathval = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6225[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc6226, x64Parser::tokenBranches6226 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6232(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 512;
}
x64Token x64Parser::tokenBranches6231[] = {
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc6232,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6230[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6231 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6230(x64Operand &operand, int tokenPos)
{
	operand.values[22] = new Coding[2];
	CleanupValues.push_back(operand.values[22]);
	operand.values[22]->type = Coding::number;
	operand.values[22]->val = operands.size();
	operand.values[22]->bits = 0;
	operand.values[22]->field = 0;
	operand.values[22]->math = 0;
	operand.values[22]->mathval = 0;
	operand.values[22][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6229[] = {
	{x64Token::NUMBER, 3, 0, 0, NULL,&x64Parser::TokenFunc6230, x64Parser::tokenBranches6230 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6235(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 513;
}
void x64Parser::TokenFunc6238(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 514;
}
void x64Parser::TokenFunc6241(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 515;
}
void x64Parser::TokenFunc6244(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 516;
}
x64Token x64Parser::tokenBranches6234[] = {
	{x64Token::REGISTER, 0, 1, 0, NULL,&x64Parser::TokenFunc6235,  },
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc6238,  },
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc6241,  },
	{x64Token::REGISTER, 4, 1, 0, NULL,&x64Parser::TokenFunc6244,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6233[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6234 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6216[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6217 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6221 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6225 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6229 },
	{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches6233 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6253(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 517;
}
x64Token x64Parser::tokenBranches6252[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6253,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6269(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 519;
}
x64Token x64Parser::tokenBranches6268[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6269,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6251[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6252 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6268 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6250[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6251 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6261(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 518;
}
x64Token x64Parser::tokenBranches6260[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6261,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6277(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 520;
}
x64Token x64Parser::tokenBranches6276[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6277,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6291(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 522;
}
x64Token x64Parser::tokenBranches6290[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6291,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6259[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6260 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6276 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6290 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6258[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6259 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6283(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 521;
}
x64Token x64Parser::tokenBranches6282[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6283,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6258(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6249[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6250 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6258, x64Parser::tokenBranches6258 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6282 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6248[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6249 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6299(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 523;
}
x64Token x64Parser::tokenBranches6298[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6299,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6315(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 525;
}
x64Token x64Parser::tokenBranches6314[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6315,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6297[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6298 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6314 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6296[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6297 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6307(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 524;
}
x64Token x64Parser::tokenBranches6306[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6307,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6323(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 526;
}
x64Token x64Parser::tokenBranches6322[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6323,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6337(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 528;
}
x64Token x64Parser::tokenBranches6336[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6337,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6305[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6306 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6322 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6336 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6304[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6305 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6329(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 527;
}
x64Token x64Parser::tokenBranches6328[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6329,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6304(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6295[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6296 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6304, x64Parser::tokenBranches6304 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6328 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6294[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6295 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6345(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 529;
}
x64Token x64Parser::tokenBranches6344[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6345,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6361(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 531;
}
x64Token x64Parser::tokenBranches6360[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6361,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6343[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6344 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6360 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6342[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6343 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6353(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 530;
}
x64Token x64Parser::tokenBranches6352[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6353,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6369(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 532;
}
x64Token x64Parser::tokenBranches6368[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6369,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6383(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 534;
}
x64Token x64Parser::tokenBranches6382[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6383,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6351[] = {
	{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6352 },
	{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6368 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6382 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6350[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6351 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6375(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 533;
}
x64Token x64Parser::tokenBranches6374[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6375,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6350(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6341[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches6342 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6350, x64Parser::tokenBranches6350 },
	{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6374 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6340[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6341 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6247[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6248 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6294 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6340 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6246[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6247 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6245[] = {
	{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches6246 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6395_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6395_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6395(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6395_10;
	operand.values[11] = tokenCoding6395_11;
}
Coding x64Parser::tokenCoding6401_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6401_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6401(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6401_10;
	operand.values[11] = tokenCoding6401_11;
}
x64Token x64Parser::tokenBranches6394[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6395,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6401,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6397_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6397_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6397(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6397_10;
	operand.values[11] = tokenCoding6397_11;
}
Coding x64Parser::tokenCoding6403_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6403_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6403(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6403_10;
	operand.values[11] = tokenCoding6403_11;
}
x64Token x64Parser::tokenBranches6396[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6397,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6403,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6399_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6399_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6399(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6399_10;
	operand.values[11] = tokenCoding6399_11;
}
Coding x64Parser::tokenCoding6405_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6405_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6405(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6405_10;
	operand.values[11] = tokenCoding6405_11;
}
x64Token x64Parser::tokenBranches6398[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc6399,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6405,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6388(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 535;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6389(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 536;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6390(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 537;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6391(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 538;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6392(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 539;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6393(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 540;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6406(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 541;
}
void x64Parser::TokenFunc6407(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 542;
}
void x64Parser::TokenFunc6408(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 543;
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6387[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6388,  },
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6389,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc6390,  },
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc6391,  },
	{x64Token::REGISTERCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6392,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6393,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6394 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6396 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6398 },
	{x64Token::REGISTER, 96, 1, 0, NULL,&x64Parser::TokenFunc6406,  },
	{x64Token::REGISTER, 97, 1, 0, NULL,&x64Parser::TokenFunc6407,  },
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc6408,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6418_8[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6418_9[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6418_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6418_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6418(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6418_8;
	operand.values[9] = tokenCoding6418_9;
	operand.values[10] = tokenCoding6418_10;
	operand.values[11] = tokenCoding6418_11;
}
x64Token x64Parser::tokenBranches6417[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6418,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6420_8[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6420_9[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6420_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6420_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6420(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6420_8;
	operand.values[9] = tokenCoding6420_9;
	operand.values[10] = tokenCoding6420_10;
	operand.values[11] = tokenCoding6420_11;
}
x64Token x64Parser::tokenBranches6419[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6420,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6422_8[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6422_9[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6422_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6422_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6422(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6422_8;
	operand.values[9] = tokenCoding6422_9;
	operand.values[10] = tokenCoding6422_10;
	operand.values[11] = tokenCoding6422_11;
}
x64Token x64Parser::tokenBranches6421[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6422,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6424_8[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6424_9[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6424_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6424_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6424(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6424_8;
	operand.values[9] = tokenCoding6424_9;
	operand.values[10] = tokenCoding6424_10;
	operand.values[11] = tokenCoding6424_11;
}
x64Token x64Parser::tokenBranches6423[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6424,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6433(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 550;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6432[] = {
	{x64Token::NUMBER, 1, 1, 0, NULL,&x64Parser::TokenFunc6433,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6438(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 551;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6444_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6444_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6444(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 555;
	operand.values[10] = tokenCoding6444_10;
	operand.values[11] = tokenCoding6444_11;
}
Coding x64Parser::tokenCoding6450_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6450_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6450(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 555;
	operand.values[10] = tokenCoding6450_10;
	operand.values[11] = tokenCoding6450_11;
}
x64Token x64Parser::tokenBranches6437[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6438,  },
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6444,  },
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6450,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6440(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 552;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6446_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6446_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6446(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 556;
	operand.values[10] = tokenCoding6446_10;
	operand.values[11] = tokenCoding6446_11;
}
Coding x64Parser::tokenCoding6452_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6452_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6452(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 556;
	operand.values[10] = tokenCoding6452_10;
	operand.values[11] = tokenCoding6452_11;
}
x64Token x64Parser::tokenBranches6439[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6440,  },
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6446,  },
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6452,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6442(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 554;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6448_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6448_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6448(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 556;
	operand.values[10] = tokenCoding6448_10;
	operand.values[11] = tokenCoding6448_11;
}
Coding x64Parser::tokenCoding6454_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6454_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6454(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 556;
	operand.values[10] = tokenCoding6454_10;
	operand.values[11] = tokenCoding6454_11;
}
x64Token x64Parser::tokenBranches6441[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6442,  },
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc6448,  },
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6454,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6426(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 544;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6427(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 545;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6428(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 546;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6429(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 547;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6430(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 548;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6431(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 549;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6434(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 551;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6435(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 552;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6436(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 553;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6455(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 557;
}
void x64Parser::TokenFunc6456(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 558;
}
void x64Parser::TokenFunc6457(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 559;
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6425[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6426,  },
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6427,  },
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc6428,  },
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc6429,  },
	{x64Token::REGISTERCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6430,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6431,  },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6432 },
	{x64Token::NUMBER, 7, 1, 0, NULL,&x64Parser::TokenFunc6434,  },
	{x64Token::NUMBER, 8, 1, 0, NULL,&x64Parser::TokenFunc6435,  },
	{x64Token::NUMBER, 9, 1, 0, NULL,&x64Parser::TokenFunc6436,  },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6437 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6439 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6441 },
	{x64Token::REGISTER, 96, 1, 0, NULL,&x64Parser::TokenFunc6455,  },
	{x64Token::REGISTER, 97, 1, 0, NULL,&x64Parser::TokenFunc6456,  },
	{x64Token::REGISTERCLASS, 28, 1, 0, NULL,&x64Parser::TokenFunc6457,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6471(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 560;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6472(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 561;
}
x64Token x64Parser::tokenBranches6470[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6471,  },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6472,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6474(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 562;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
void x64Parser::TokenFunc6475(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 563;
}
x64Token x64Parser::tokenBranches6473[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6474,  },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc6475,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6489(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 564;
}
x64Token x64Parser::tokenBranches6488[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6489,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6501(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 566;
}
x64Token x64Parser::tokenBranches6500[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6501,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6487[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6488 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6500 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6486[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6487 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6485[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6486 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6495(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 565;
}
x64Token x64Parser::tokenBranches6494[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6495,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6507(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 567;
}
x64Token x64Parser::tokenBranches6506[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6507,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6517(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 569;
}
x64Token x64Parser::tokenBranches6516[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6517,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6493[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6494 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6506 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6516 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6492[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6493 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6511(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 568;
}
x64Token x64Parser::tokenBranches6510[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6511,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6492(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6491[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6492, x64Parser::tokenBranches6492 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6510 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6484[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6485 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6491 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6523(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 570;
}
x64Token x64Parser::tokenBranches6522[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6523,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6535(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 572;
}
x64Token x64Parser::tokenBranches6534[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6535,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6521[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6522 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6534 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6520[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6521 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6519[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6520 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6529(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 571;
}
x64Token x64Parser::tokenBranches6528[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6529,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6541(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 573;
}
x64Token x64Parser::tokenBranches6540[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6541,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6551(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 575;
}
x64Token x64Parser::tokenBranches6550[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6551,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6527[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6528 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6540 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6550 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6526[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6527 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6545(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 574;
}
x64Token x64Parser::tokenBranches6544[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6545,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6526(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6525[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6526, x64Parser::tokenBranches6526 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6544 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6518[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6519 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6525 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6557(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 576;
}
x64Token x64Parser::tokenBranches6556[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6557,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6569(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 578;
}
x64Token x64Parser::tokenBranches6568[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6569,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6555[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6556 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6568 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6554[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6555 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6553[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6554 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6563(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 577;
}
x64Token x64Parser::tokenBranches6562[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6563,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6575(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 579;
}
x64Token x64Parser::tokenBranches6574[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6575,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6585(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 581;
}
x64Token x64Parser::tokenBranches6584[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6585,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6561[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6562 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6574 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6584 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6560[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6561 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6579(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 580;
}
x64Token x64Parser::tokenBranches6578[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6579,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6560(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6559[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6560, x64Parser::tokenBranches6560 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6578 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6552[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6553 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6559 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6591(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 582;
}
x64Token x64Parser::tokenBranches6590[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6591,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6589[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6590 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6588[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6589 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6587[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6588 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6597(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 583;
}
x64Token x64Parser::tokenBranches6596[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6597,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6607(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 583;
}
x64Token x64Parser::tokenBranches6606[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6607,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6595[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6596 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6606 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6594[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6595 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6601(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 582;
}
x64Token x64Parser::tokenBranches6600[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6601,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6594(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6593[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6594, x64Parser::tokenBranches6594 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6600 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6586[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6587 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6593 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6483[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6484 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6518 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6552 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6586 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6650_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6650_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6650(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6650_10;
	operand.values[11] = tokenCoding6650_11;
}
Coding x64Parser::tokenCoding6651_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6651_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6651(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6651_10;
	operand.values[11] = tokenCoding6651_11;
}
x64Token x64Parser::tokenBranches6649[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6650,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc6651,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6661(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 584;
}
x64Token x64Parser::tokenBranches6660[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6661,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6673(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 586;
}
x64Token x64Parser::tokenBranches6672[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6673,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6659[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6660 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6672 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6658[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6659 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6657[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6658 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6667(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 585;
}
x64Token x64Parser::tokenBranches6666[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6667,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6679(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 587;
}
x64Token x64Parser::tokenBranches6678[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6679,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6689(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 589;
}
x64Token x64Parser::tokenBranches6688[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6689,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6665[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6666 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6678 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6688 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6664[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6665 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6683(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 588;
}
x64Token x64Parser::tokenBranches6682[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6683,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6664(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6663[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6664, x64Parser::tokenBranches6664 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6682 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6656[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6657 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6663 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6695(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 590;
}
x64Token x64Parser::tokenBranches6694[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6695,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6707(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 592;
}
x64Token x64Parser::tokenBranches6706[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6707,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6693[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6694 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6706 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6692[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6693 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6691[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6692 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6701(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 591;
}
x64Token x64Parser::tokenBranches6700[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6701,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6713(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 593;
}
x64Token x64Parser::tokenBranches6712[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6713,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6723(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 595;
}
x64Token x64Parser::tokenBranches6722[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6723,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6699[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6700 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6712 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6722 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6698[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6699 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6717(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 594;
}
x64Token x64Parser::tokenBranches6716[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6717,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6698(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6697[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6698, x64Parser::tokenBranches6698 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6716 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6690[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6691 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6697 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6729(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 596;
}
x64Token x64Parser::tokenBranches6728[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6729,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6741(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 598;
}
x64Token x64Parser::tokenBranches6740[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6741,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6727[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6728 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6740 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6726[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6727 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6725[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6726 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6735(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 597;
}
x64Token x64Parser::tokenBranches6734[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6735,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6747(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 599;
}
x64Token x64Parser::tokenBranches6746[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6747,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6757(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 601;
}
x64Token x64Parser::tokenBranches6756[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6757,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6733[] = {
	{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6734 },
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6746 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6756 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6732[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6733 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6751(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 600;
}
x64Token x64Parser::tokenBranches6750[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6751,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6732(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6731[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6732, x64Parser::tokenBranches6732 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6750 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6724[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6725 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6731 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6763(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 602;
}
x64Token x64Parser::tokenBranches6762[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6763,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6761[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6762 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6760[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6761 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6759[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6760 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6769(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 603;
}
x64Token x64Parser::tokenBranches6768[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6769,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6779(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 603;
}
x64Token x64Parser::tokenBranches6778[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6779,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6767[] = {
	{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6768 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6778 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6766[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6767 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6773(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 602;
}
x64Token x64Parser::tokenBranches6772[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc6773,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6766(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6765[] = {
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc6766, x64Parser::tokenBranches6766 },
	{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6772 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6758[] = {
	{x64Token::REGISTER, 92, 0, 0, NULL, NULL, x64Parser::tokenBranches6759 },
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6765 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6655[] = {
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6656 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6690 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6724 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6758 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6785_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6785_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6785(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6785_10;
	operand.values[11] = tokenCoding6785_11;
}
Coding x64Parser::tokenCoding6786_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6786_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6786(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6786_10;
	operand.values[11] = tokenCoding6786_11;
}
Coding x64Parser::tokenCoding6787_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6787_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6787(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6787_10;
	operand.values[11] = tokenCoding6787_11;
}
Coding x64Parser::tokenCoding6788_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6788_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6788(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6788_10;
	operand.values[11] = tokenCoding6788_11;
}
x64Token x64Parser::tokenBranches6784[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6785,  },
	{x64Token::ADDRESSCLASS, 21, 1, 0, NULL,&x64Parser::TokenFunc6786,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc6787,  },
	{x64Token::ADDRESSCLASS, 29, 1, 0, NULL,&x64Parser::TokenFunc6788,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6798(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 604;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6797[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6798,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6796[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6797 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6795[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6796 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6802(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 605;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6801[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6802,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6800[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6801 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6799[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6800 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6806(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 606;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6805[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6806,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6804[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6805 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6803[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6804 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6810(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 607;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6809[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6810,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6808[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6809 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6807[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6808 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6814_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6814_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6814_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6814_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6814(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6814_8;
	operand.values[9] = tokenCoding6814_9;
	operand.values[10] = tokenCoding6814_10;
	operand.values[11] = tokenCoding6814_11;
}
x64Token x64Parser::tokenBranches6813[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6814,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6812[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6813 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6826_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6826_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6826_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6826_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6826(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6826_8;
	operand.values[9] = tokenCoding6826_9;
	operand.values[10] = tokenCoding6826_10;
	operand.values[11] = tokenCoding6826_11;
}
x64Token x64Parser::tokenBranches6825[] = {
	{x64Token::REGISTERCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc6826,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6824[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6825 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6811[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6812 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6824 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6818_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6818_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6818_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6818_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::valSpecified, 133},
	{ Coding::eot },
};
void x64Parser::TokenFunc6818(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6818_8;
	operand.values[9] = tokenCoding6818_9;
	operand.values[10] = tokenCoding6818_10;
	operand.values[11] = tokenCoding6818_11;
}
x64Token x64Parser::tokenBranches6817[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6818,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6816[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6817 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6830_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6830_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6830_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6830_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::valSpecified, 133},
	{ Coding::eot },
};
void x64Parser::TokenFunc6830(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6830_8;
	operand.values[9] = tokenCoding6830_9;
	operand.values[10] = tokenCoding6830_10;
	operand.values[11] = tokenCoding6830_11;
}
x64Token x64Parser::tokenBranches6829[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc6830,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6828[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6829 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6815[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6816 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6828 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6822_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6822_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6822_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6822_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::valSpecified, 133},
	{ Coding::eot },
};
void x64Parser::TokenFunc6822(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6822_8;
	operand.values[9] = tokenCoding6822_9;
	operand.values[10] = tokenCoding6822_10;
	operand.values[11] = tokenCoding6822_11;
}
x64Token x64Parser::tokenBranches6821[] = {
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6822,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6820[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6821 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6834_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6834_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6834_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6834_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::valSpecified, 133},
	{ Coding::eot },
};
void x64Parser::TokenFunc6834(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6834_8;
	operand.values[9] = tokenCoding6834_9;
	operand.values[10] = tokenCoding6834_10;
	operand.values[11] = tokenCoding6834_11;
}
x64Token x64Parser::tokenBranches6833[] = {
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc6834,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6832[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6833 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6819[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6820 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches6832 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6838_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6838_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6838_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6838_11[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::valSpecified, 133},
	{ Coding::eot },
};
void x64Parser::TokenFunc6838(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6838_8;
	operand.values[9] = tokenCoding6838_9;
	operand.values[10] = tokenCoding6838_10;
	operand.values[11] = tokenCoding6838_11;
}
x64Token x64Parser::tokenBranches6837[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6838,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6836[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6837 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6835[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches6836 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6842_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6842_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6842_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6842_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6842(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6842_8;
	operand.values[9] = tokenCoding6842_9;
	operand.values[10] = tokenCoding6842_10;
	operand.values[11] = tokenCoding6842_11;
}
x64Token x64Parser::tokenBranches6841[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc6842,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6840[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6841 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6839[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6840 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6846_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6846_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6846_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6846_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::valSpecified, 133},
	{ Coding::eot },
};
void x64Parser::TokenFunc6846(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6846_8;
	operand.values[9] = tokenCoding6846_9;
	operand.values[10] = tokenCoding6846_10;
	operand.values[11] = tokenCoding6846_11;
}
x64Token x64Parser::tokenBranches6845[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6846,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6844[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6845 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6843[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6844 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6850_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6850_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6850_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6850_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::valSpecified, 133},
	{ Coding::eot },
};
void x64Parser::TokenFunc6850(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6850_8;
	operand.values[9] = tokenCoding6850_9;
	operand.values[10] = tokenCoding6850_10;
	operand.values[11] = tokenCoding6850_11;
}
x64Token x64Parser::tokenBranches6849[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6850,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6848[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6849 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6847[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6848 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6854_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6854_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6854_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6854_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6854(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6854_8;
	operand.values[9] = tokenCoding6854_9;
	operand.values[10] = tokenCoding6854_10;
	operand.values[11] = tokenCoding6854_11;
}
x64Token x64Parser::tokenBranches6853[] = {
	{x64Token::ADDRESSCLASS, 13, 1, 0, NULL,&x64Parser::TokenFunc6854,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6852[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6853 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6851[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6852 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6858_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6858_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6858_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6858_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::valSpecified, 133},
	{ Coding::eot },
};
void x64Parser::TokenFunc6858(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6858_8;
	operand.values[9] = tokenCoding6858_9;
	operand.values[10] = tokenCoding6858_10;
	operand.values[11] = tokenCoding6858_11;
}
x64Token x64Parser::tokenBranches6857[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6858,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6856[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6857 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6855[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6856 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6862_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6862_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6862_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6862_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::valSpecified, 133},
	{ Coding::eot },
};
void x64Parser::TokenFunc6862(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6862_8;
	operand.values[9] = tokenCoding6862_9;
	operand.values[10] = tokenCoding6862_10;
	operand.values[11] = tokenCoding6862_11;
}
x64Token x64Parser::tokenBranches6861[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6862,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6860[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6861 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6859[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6860 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6866_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6866_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6866_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6866_11[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::valSpecified, 133},
	{ Coding::eot },
};
void x64Parser::TokenFunc6866(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6866_8;
	operand.values[9] = tokenCoding6866_9;
	operand.values[10] = tokenCoding6866_10;
	operand.values[11] = tokenCoding6866_11;
}
x64Token x64Parser::tokenBranches6865[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc6866,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6864[] = {
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6865 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6863[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6864 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6869_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6869_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6869(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6869_10;
	operand.values[11] = tokenCoding6869_11;
}
x64Token x64Parser::tokenBranches6868[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6869,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6867[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6868 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6872_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6872_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6872(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6872_10;
	operand.values[11] = tokenCoding6872_11;
}
x64Token x64Parser::tokenBranches6871[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6872,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6870[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6871 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6875_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6875_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6875(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6875_10;
	operand.values[11] = tokenCoding6875_11;
}
x64Token x64Parser::tokenBranches6874[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6875,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6873[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6874 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6878_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6878_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6878(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6878_10;
	operand.values[11] = tokenCoding6878_11;
}
x64Token x64Parser::tokenBranches6877[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6878,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6876[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6877 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6881_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6881_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6881(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6881_10;
	operand.values[11] = tokenCoding6881_11;
}
x64Token x64Parser::tokenBranches6880[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6881,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6879[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6880 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6884_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6884_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6884(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6884_10;
	operand.values[11] = tokenCoding6884_11;
}
x64Token x64Parser::tokenBranches6883[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6884,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6882[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6883 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6887_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6887_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6887(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6887_10;
	operand.values[11] = tokenCoding6887_11;
}
x64Token x64Parser::tokenBranches6886[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6887,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6885[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6886 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6891_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6891_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6891(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6891_10;
	operand.values[11] = tokenCoding6891_11;
}
x64Token x64Parser::tokenBranches6890[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6891,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6889[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6890 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6907_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6907_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6907(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 328;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6907_10;
	operand.values[11] = tokenCoding6907_11;
}
x64Token x64Parser::tokenBranches6906[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc6907,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6905[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6906 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6888[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6889 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6905 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6895_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6895_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6895(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6895_10;
	operand.values[11] = tokenCoding6895_11;
}
x64Token x64Parser::tokenBranches6894[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6895,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6893[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6894 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6911_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6911_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6911(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 383;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6911_10;
	operand.values[11] = tokenCoding6911_11;
}
x64Token x64Parser::tokenBranches6910[] = {
	{x64Token::NUMBER, 4, 1, 0, NULL,&x64Parser::TokenFunc6911,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6909[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6910 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6892[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6893 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6909 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6899_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6899_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6899(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6899_10;
	operand.values[11] = tokenCoding6899_11;
}
x64Token x64Parser::tokenBranches6898[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6899,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6897[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6898 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6915_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6915_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6915(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 384;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6915_10;
	operand.values[11] = tokenCoding6915_11;
}
x64Token x64Parser::tokenBranches6914[] = {
	{x64Token::NUMBER, 5, 1, 0, NULL,&x64Parser::TokenFunc6915,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6913[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6914 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6896[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6897 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches6913 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6903_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6903_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6903(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6903_10;
	operand.values[11] = tokenCoding6903_11;
}
x64Token x64Parser::tokenBranches6902[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6903,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6901[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6902 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6919_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6919_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6919(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 389;
	operand.values[14] = new Coding[2];
	CleanupValues.push_back(operand.values[14]);
	operand.values[14]->type = Coding::number;
	operand.values[14]->val = operands.size();
	operand.values[14]->bits = 0;
	operand.values[14]->field = 0;
	operand.values[14]->math = 0;
	operand.values[14]->mathval = 0;
	operand.values[14][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding6919_10;
	operand.values[11] = tokenCoding6919_11;
}
x64Token x64Parser::tokenBranches6918[] = {
	{x64Token::NUMBER, 6, 1, 0, NULL,&x64Parser::TokenFunc6919,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6917[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6918 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6900[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches6901 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches6917 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6839(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6843(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6847(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6851(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6855(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6859(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6863(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6794[] = {
	{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches6795 },
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6799 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6803 },
	{x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6807 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6811 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6815 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6819 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6835 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc6839, x64Parser::tokenBranches6839 },
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc6843, x64Parser::tokenBranches6843 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc6847, x64Parser::tokenBranches6847 },
	{x64Token::REGISTERCLASS, 2, 0, 0, NULL,&x64Parser::TokenFunc6851, x64Parser::tokenBranches6851 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6855, x64Parser::tokenBranches6855 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc6859, x64Parser::tokenBranches6859 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc6863, x64Parser::tokenBranches6863 },
	{x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches6867 },
	{x64Token::ADDRESSCLASS, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches6870 },
	{x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches6873 },
	{x64Token::ADDRESSCLASS, 25, 0, 0, NULL, NULL, x64Parser::tokenBranches6876 },
	{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches6879 },
	{x64Token::ADDRESSCLASS, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches6882 },
	{x64Token::ADDRESSCLASS, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches6885 },
	{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6888 },
	{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6892 },
	{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6896 },
	{x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6900 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6922_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6922_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6922(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6922_10;
	operand.values[11] = tokenCoding6922_11;
}
Coding x64Parser::tokenCoding6923_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6923_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6923(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6923_10;
	operand.values[11] = tokenCoding6923_11;
}
x64Token x64Parser::tokenBranches6921[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6922,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc6923,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6925_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6925_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6925(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6925_10;
	operand.values[11] = tokenCoding6925_11;
}
Coding x64Parser::tokenCoding6926_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6926_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6926(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding6926_10;
	operand.values[11] = tokenCoding6926_11;
}
x64Token x64Parser::tokenBranches6924[] = {
	{x64Token::ADDRESSCLASS, 20, 1, 0, NULL,&x64Parser::TokenFunc6925,  },
	{x64Token::ADDRESSCLASS, 27, 1, 0, NULL,&x64Parser::TokenFunc6926,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6934_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6934_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6934_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6934_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6934(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6934_8;
	operand.values[9] = tokenCoding6934_9;
	operand.values[10] = tokenCoding6934_10;
	operand.values[11] = tokenCoding6934_11;
}
x64Token x64Parser::tokenBranches6933[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc6934,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6932[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6933 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6938_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6938_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6938_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6938_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6938(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6938_8;
	operand.values[9] = tokenCoding6938_9;
	operand.values[10] = tokenCoding6938_10;
	operand.values[11] = tokenCoding6938_11;
}
x64Token x64Parser::tokenBranches6937[] = {
	{x64Token::REGISTERCLASS, 2, 1, 0, NULL,&x64Parser::TokenFunc6938,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6936[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6937 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6931[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6932 },
	{x64Token::ADDRESSCLASS, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6936 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6942_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6942_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6942_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6942_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6942(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6942_8;
	operand.values[9] = tokenCoding6942_9;
	operand.values[10] = tokenCoding6942_10;
	operand.values[11] = tokenCoding6942_11;
}
x64Token x64Parser::tokenBranches6941[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6942,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6940[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6941 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6946_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6946_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6946_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6946_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6946(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6946_8;
	operand.values[9] = tokenCoding6946_9;
	operand.values[10] = tokenCoding6946_10;
	operand.values[11] = tokenCoding6946_11;
}
x64Token x64Parser::tokenBranches6945[] = {
	{x64Token::REGISTERCLASS, 19, 1, 0, NULL,&x64Parser::TokenFunc6946,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6944[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6945 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6939[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6940 },
	{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6944 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6950_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6950_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6950_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6950_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6950(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6950_8;
	operand.values[9] = tokenCoding6950_9;
	operand.values[10] = tokenCoding6950_10;
	operand.values[11] = tokenCoding6950_11;
}
x64Token x64Parser::tokenBranches6949[] = {
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6950,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6948[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6949 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6954_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6954_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6954_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6954_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6954(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6954_8;
	operand.values[9] = tokenCoding6954_9;
	operand.values[10] = tokenCoding6954_10;
	operand.values[11] = tokenCoding6954_11;
}
x64Token x64Parser::tokenBranches6953[] = {
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc6954,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6952[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6953 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6947[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6948 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches6952 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6958_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6958_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6958_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6958_11[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6958(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding6958_8;
	operand.values[9] = tokenCoding6958_9;
	operand.values[10] = tokenCoding6958_10;
	operand.values[11] = tokenCoding6958_11;
}
x64Token x64Parser::tokenBranches6957[] = {
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc6958,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6956[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6957 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6955[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches6956 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6930[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6931 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6939 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6947 },
	{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches6955 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6963_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6963_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6963_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6963_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6963(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6963_8;
	operand.values[9] = tokenCoding6963_9;
	operand.values[10] = tokenCoding6963_10;
	operand.values[11] = tokenCoding6963_11;
}
x64Token x64Parser::tokenBranches6962[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6963,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6961[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6962 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6960[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6961 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6967_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6967_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6967_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6967_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6967(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6967_8;
	operand.values[9] = tokenCoding6967_9;
	operand.values[10] = tokenCoding6967_10;
	operand.values[11] = tokenCoding6967_11;
}
x64Token x64Parser::tokenBranches6966[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6967,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6965[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6966 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6964[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6965 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6971_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6971_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6971_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6971_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6971(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6971_8;
	operand.values[9] = tokenCoding6971_9;
	operand.values[10] = tokenCoding6971_10;
	operand.values[11] = tokenCoding6971_11;
}
x64Token x64Parser::tokenBranches6970[] = {
	{x64Token::ADDRESSCLASS, 14, 1, 0, NULL,&x64Parser::TokenFunc6971,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6969[] = {
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6970 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6968[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6969 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6975_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6975_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6975_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6975_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6975(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6975_8;
	operand.values[9] = tokenCoding6975_9;
	operand.values[10] = tokenCoding6975_10;
	operand.values[11] = tokenCoding6975_11;
}
x64Token x64Parser::tokenBranches6974[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc6975,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6973[] = {
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6974 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6972[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6973 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6960(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6964(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6968(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6972(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6959[] = {
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc6960, x64Parser::tokenBranches6960 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc6964, x64Parser::tokenBranches6964 },
	{x64Token::REGISTERCLASS, 19, 0, 0, NULL,&x64Parser::TokenFunc6968, x64Parser::tokenBranches6968 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc6972, x64Parser::tokenBranches6972 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6979(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 608;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6978[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc6979,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6977[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6978 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6982(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 609;
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6981[] = {
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc6982,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6980[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6981 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6996_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6996_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6996_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6996_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6996(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6996_8;
	operand.values[9] = tokenCoding6996_9;
	operand.values[10] = tokenCoding6996_10;
	operand.values[11] = tokenCoding6996_11;
}
x64Token x64Parser::tokenBranches6995[] = {
	{x64Token::ADDRESSCLASS, 4, 1, 0, NULL,&x64Parser::TokenFunc6996,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6985(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 608;
}
x64Token x64Parser::tokenBranches6984[] = {
	{x64Token::REGISTER, 2, 1, 0, NULL,&x64Parser::TokenFunc6985,  },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6995 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6983[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6984 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7000_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7000_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7000_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7000_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7000(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7000_8;
	operand.values[9] = tokenCoding7000_9;
	operand.values[10] = tokenCoding7000_10;
	operand.values[11] = tokenCoding7000_11;
}
x64Token x64Parser::tokenBranches6999[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc7000,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6988(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 609;
}
x64Token x64Parser::tokenBranches6987[] = {
	{x64Token::REGISTER, 3, 1, 0, NULL,&x64Parser::TokenFunc6988,  },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6999 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6986[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6987 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding6992_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6992_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6992_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding6992_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc6992(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding6992_8;
	operand.values[9] = tokenCoding6992_9;
	operand.values[10] = tokenCoding6992_10;
	operand.values[11] = tokenCoding6992_11;
}
x64Token x64Parser::tokenBranches6991[] = {
	{x64Token::ADDRESSCLASS, 3, 1, 0, NULL,&x64Parser::TokenFunc6992,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6990[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches6991 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches6989[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6990 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7004_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7004_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7004_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7004_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7004(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7004_8;
	operand.values[9] = tokenCoding7004_9;
	operand.values[10] = tokenCoding7004_10;
	operand.values[11] = tokenCoding7004_11;
}
x64Token x64Parser::tokenBranches7003[] = {
	{x64Token::REGISTERCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc7004,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7002[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7003 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7001[] = {
	{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7002 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7008_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7008_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7008_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7008_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7008(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7008_8;
	operand.values[9] = tokenCoding7008_9;
	operand.values[10] = tokenCoding7008_10;
	operand.values[11] = tokenCoding7008_11;
}
x64Token x64Parser::tokenBranches7007[] = {
	{x64Token::REGISTERCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc7008,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7006[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7007 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7005[] = {
	{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches7006 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7012_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7012_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7012_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7012_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7012(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7012_8;
	operand.values[9] = tokenCoding7012_9;
	operand.values[10] = tokenCoding7012_10;
	operand.values[11] = tokenCoding7012_11;
}
x64Token x64Parser::tokenBranches7011[] = {
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc7012,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7010[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7011 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7009[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7010 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc6983(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6986(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc6989(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6976[] = {
	{x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6977 },
	{x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6980 },
	{x64Token::REGISTERCLASS, 5, 0, 0, NULL,&x64Parser::TokenFunc6983, x64Parser::tokenBranches6983 },
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc6986, x64Parser::tokenBranches6986 },
	{x64Token::REGISTERCLASS, 1, 0, 0, NULL,&x64Parser::TokenFunc6989, x64Parser::tokenBranches6989 },
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches7001 },
	{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches7005 },
	{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches7009 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7019(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 610;
}
x64Token x64Parser::tokenBranches7018[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7019,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7031(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 612;
}
x64Token x64Parser::tokenBranches7030[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7031,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7043(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 614;
}
x64Token x64Parser::tokenBranches7042[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7043,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7017[] = {
	{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches7018 },
	{x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches7030 },
	{x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches7042 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7016[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7017 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7025(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 611;
}
x64Token x64Parser::tokenBranches7024[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7025,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7037(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 613;
}
x64Token x64Parser::tokenBranches7036[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7037,  },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7049(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 615;
}
x64Token x64Parser::tokenBranches7048[] = {
	{x64Token::TOKEN, 2, 1, 0, NULL,&x64Parser::TokenFunc7049,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7023[] = {
	{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches7024 },
	{x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches7036 },
	{x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches7048 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7022[] = {
	{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7023 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7022(x64Operand &operand, int tokenPos)
{
	operand.values[1] = new Coding[2];
	CleanupValues.push_back(operand.values[1]);
	operand.values[1]->type = Coding::reg;
	operand.values[1]->val = inputTokens[tokenPos]->val->ival;
	operand.values[1]->bits = 0;
	operand.values[1]->field = 0;
	operand.values[1]->math = 0;
	operand.values[1]->mathval = 0;
	operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7015[] = {
	{x64Token::REGISTER, 95, 0, 0, NULL, NULL, x64Parser::tokenBranches7016 },
	{x64Token::REGISTERCLASS, 28, 0, 0, NULL,&x64Parser::TokenFunc7022, x64Parser::tokenBranches7022 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7014[] = {
	{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7015 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7050(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 616;
}
x64Token x64Parser::tokenBranches7013[] = {
	{x64Token::TOKEN, 13, 0, 1, NULL, NULL, x64Parser::tokenBranches7014 },
	{x64Token::EMPTY, 0, 1, 0, NULL,&x64Parser::TokenFunc7050,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7054_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7054_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7054(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding7054_10;
	operand.values[11] = tokenCoding7054_11;
}
x64Token x64Parser::tokenBranches7053[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc7054,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7056_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7056_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7056(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 378;
	operand.values[10] = tokenCoding7056_10;
	operand.values[11] = tokenCoding7056_11;
}
x64Token x64Parser::tokenBranches7055[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc7056,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7058_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7058_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7058(x64Operand &operand, int tokenPos)
{
	operand.values[10] = tokenCoding7058_10;
	operand.values[11] = tokenCoding7058_11;
}
x64Token x64Parser::tokenBranches7057[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc7058,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7060_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7060_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7060(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 378;
	operand.values[10] = tokenCoding7060_10;
	operand.values[11] = tokenCoding7060_11;
}
x64Token x64Parser::tokenBranches7059[] = {
	{x64Token::ADDRESSCLASS, 1, 1, 0, NULL,&x64Parser::TokenFunc7060,  },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7111_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7111_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7111_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7111_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7111_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7111(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7111_8;
	operand.values[9] = tokenCoding7111_9;
	operand.values[18] = tokenCoding7111_18;
	operand.values[10] = tokenCoding7111_10;
	operand.values[11] = tokenCoding7111_11;
}
Coding x64Parser::tokenCoding7114_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7114_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7114_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7114_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7114_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7114(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7114_8;
	operand.values[9] = tokenCoding7114_9;
	operand.values[18] = tokenCoding7114_18;
	operand.values[10] = tokenCoding7114_10;
	operand.values[11] = tokenCoding7114_11;
}
x64Token x64Parser::tokenBranches7110[] = {
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc7111,  },
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc7114,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7109[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7110 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7108[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7109 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7118_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7118_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7118_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7118_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7118_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7118(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7118_8;
	operand.values[9] = tokenCoding7118_9;
	operand.values[18] = tokenCoding7118_18;
	operand.values[10] = tokenCoding7118_10;
	operand.values[11] = tokenCoding7118_11;
}
x64Token x64Parser::tokenBranches7117[] = {
	{x64Token::REGISTERCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc7118,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7116[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7117 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7115[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7116 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7135_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7135_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7135_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7135_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7135_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7135(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7135_8;
	operand.values[9] = tokenCoding7135_9;
	operand.values[18] = tokenCoding7135_18;
	operand.values[10] = tokenCoding7135_10;
	operand.values[11] = tokenCoding7135_11;
}
x64Token x64Parser::tokenBranches7134[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc7135,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7133[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7134 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7138_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7138_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7138_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7138_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7138_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7138(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7138_8;
	operand.values[9] = tokenCoding7138_9;
	operand.values[18] = tokenCoding7138_18;
	operand.values[10] = tokenCoding7138_10;
	operand.values[11] = tokenCoding7138_11;
}
x64Token x64Parser::tokenBranches7137[] = {
	{x64Token::ADDRESSCLASS, 5, 1, 0, NULL,&x64Parser::TokenFunc7138,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7136[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7137 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7141_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7141_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7141_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7141_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7141_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7141(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7141_8;
	operand.values[9] = tokenCoding7141_9;
	operand.values[18] = tokenCoding7141_18;
	operand.values[10] = tokenCoding7141_10;
	operand.values[11] = tokenCoding7141_11;
}
x64Token x64Parser::tokenBranches7140[] = {
	{x64Token::ADDRESSCLASS, 15, 1, 0, NULL,&x64Parser::TokenFunc7141,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7139[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7140 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7144_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7144_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7144_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7144_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7144_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7144(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7144_8;
	operand.values[9] = tokenCoding7144_9;
	operand.values[18] = tokenCoding7144_18;
	operand.values[10] = tokenCoding7144_10;
	operand.values[11] = tokenCoding7144_11;
}
Coding x64Parser::tokenCoding7147_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7147_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7147_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7147_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7147_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7147(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7147_8;
	operand.values[9] = tokenCoding7147_9;
	operand.values[18] = tokenCoding7147_18;
	operand.values[10] = tokenCoding7147_10;
	operand.values[11] = tokenCoding7147_11;
}
x64Token x64Parser::tokenBranches7143[] = {
	{x64Token::REGISTERCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc7144,  },
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc7147,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7142[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7143 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7150_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7150_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7150_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7150_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7150_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7150(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7150_8;
	operand.values[9] = tokenCoding7150_9;
	operand.values[18] = tokenCoding7150_18;
	operand.values[10] = tokenCoding7150_10;
	operand.values[11] = tokenCoding7150_11;
}
x64Token x64Parser::tokenBranches7149[] = {
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc7150,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7148[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7149 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7133(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7136(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7139(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7132[] = {
	{x64Token::REGISTERCLASS, 25, 0, 0, NULL,&x64Parser::TokenFunc7133, x64Parser::tokenBranches7133 },
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7136, x64Parser::tokenBranches7136 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7139, x64Parser::tokenBranches7139 },
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7142 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7148 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7154_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7154_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7154_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7154_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7154_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7154(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7154_8;
	operand.values[9] = tokenCoding7154_9;
	operand.values[18] = tokenCoding7154_18;
	operand.values[10] = tokenCoding7154_10;
	operand.values[11] = tokenCoding7154_11;
}
x64Token x64Parser::tokenBranches7153[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc7154,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7152[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7153 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7157_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7157_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7157_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7157_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7157_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7157(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7157_8;
	operand.values[9] = tokenCoding7157_9;
	operand.values[18] = tokenCoding7157_18;
	operand.values[10] = tokenCoding7157_10;
	operand.values[11] = tokenCoding7157_11;
}
x64Token x64Parser::tokenBranches7156[] = {
	{x64Token::ADDRESSCLASS, 6, 1, 0, NULL,&x64Parser::TokenFunc7157,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7155[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7156 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7160_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7160_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7160_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7160_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7160_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7160(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7160_8;
	operand.values[9] = tokenCoding7160_9;
	operand.values[18] = tokenCoding7160_18;
	operand.values[10] = tokenCoding7160_10;
	operand.values[11] = tokenCoding7160_11;
}
x64Token x64Parser::tokenBranches7159[] = {
	{x64Token::ADDRESSCLASS, 16, 1, 0, NULL,&x64Parser::TokenFunc7160,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7158[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7159 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7163_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7163_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7163_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7163_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7163_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7163(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7163_8;
	operand.values[9] = tokenCoding7163_9;
	operand.values[18] = tokenCoding7163_18;
	operand.values[10] = tokenCoding7163_10;
	operand.values[11] = tokenCoding7163_11;
}
Coding x64Parser::tokenCoding7166_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7166_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7166_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7166_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7166_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7166(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7166_8;
	operand.values[9] = tokenCoding7166_9;
	operand.values[18] = tokenCoding7166_18;
	operand.values[10] = tokenCoding7166_10;
	operand.values[11] = tokenCoding7166_11;
}
x64Token x64Parser::tokenBranches7162[] = {
	{x64Token::REGISTERCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc7163,  },
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc7166,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7161[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7162 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7169_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7169_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7169_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7169_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7169_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7169(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7169_8;
	operand.values[9] = tokenCoding7169_9;
	operand.values[18] = tokenCoding7169_18;
	operand.values[10] = tokenCoding7169_10;
	operand.values[11] = tokenCoding7169_11;
}
x64Token x64Parser::tokenBranches7168[] = {
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc7169,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7167[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7168 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7152(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7155(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7158(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7151[] = {
	{x64Token::REGISTERCLASS, 25, 0, 0, NULL,&x64Parser::TokenFunc7152, x64Parser::tokenBranches7152 },
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7155, x64Parser::tokenBranches7155 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7158, x64Parser::tokenBranches7158 },
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches7161 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches7167 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7177_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7177_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7177_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7177_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7177_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7177(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->math = 0;
	operand.values[13]->mathval = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[8] = tokenCoding7177_8;
	operand.values[9] = tokenCoding7177_9;
	operand.values[18] = tokenCoding7177_18;
	operand.values[10] = tokenCoding7177_10;
	operand.values[11] = tokenCoding7177_11;
}
x64Token x64Parser::tokenBranches7176[] = {
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc7177,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7175[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7176 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7180_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7180_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7180_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7180_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7180_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7180(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->math = 0;
	operand.values[13]->mathval = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[8] = tokenCoding7180_8;
	operand.values[9] = tokenCoding7180_9;
	operand.values[18] = tokenCoding7180_18;
	operand.values[10] = tokenCoding7180_10;
	operand.values[11] = tokenCoding7180_11;
}
x64Token x64Parser::tokenBranches7179[] = {
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc7180,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7178[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7179 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7175(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7178(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7174[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7175, x64Parser::tokenBranches7175 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7178, x64Parser::tokenBranches7178 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7186_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7186_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7186_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7186_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7186_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7186(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->math = 0;
	operand.values[13]->mathval = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[8] = tokenCoding7186_8;
	operand.values[9] = tokenCoding7186_9;
	operand.values[18] = tokenCoding7186_18;
	operand.values[10] = tokenCoding7186_10;
	operand.values[11] = tokenCoding7186_11;
}
x64Token x64Parser::tokenBranches7185[] = {
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc7186,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7184[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7185 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7189_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7189_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7189_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7189_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7189_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7189(x64Operand &operand, int tokenPos)
{
	operand.values[13] = new Coding[2];
	CleanupValues.push_back(operand.values[13]);
	operand.values[13]->type = Coding::reg;
	operand.values[13]->val = inputTokens[tokenPos]->val->ival;
	operand.values[13]->bits = 0;
	operand.values[13]->field = 0;
	operand.values[13]->math = 0;
	operand.values[13]->mathval = 0;
	operand.values[13][1].type = Coding::eot;
	operand.values[8] = tokenCoding7189_8;
	operand.values[9] = tokenCoding7189_9;
	operand.values[18] = tokenCoding7189_18;
	operand.values[10] = tokenCoding7189_10;
	operand.values[11] = tokenCoding7189_11;
}
x64Token x64Parser::tokenBranches7188[] = {
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc7189,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7187[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7188 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7184(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7187(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7183[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7184, x64Parser::tokenBranches7184 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7187, x64Parser::tokenBranches7187 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7197_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7197_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7197_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7197_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7197_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7197(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7197_8;
	operand.values[9] = tokenCoding7197_9;
	operand.values[18] = tokenCoding7197_18;
	operand.values[10] = tokenCoding7197_10;
	operand.values[11] = tokenCoding7197_11;
}
x64Token x64Parser::tokenBranches7196[] = {
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc7197,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7195[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7196 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7200_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7200_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7200_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7200_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7200_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7200(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7200_8;
	operand.values[9] = tokenCoding7200_9;
	operand.values[18] = tokenCoding7200_18;
	operand.values[10] = tokenCoding7200_10;
	operand.values[11] = tokenCoding7200_11;
}
x64Token x64Parser::tokenBranches7199[] = {
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc7200,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7198[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7199 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7194[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7195 },
	{x64Token::ADDRESSCLASS, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7198 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7204_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7204_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7204_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7204(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7204_8;
	operand.values[9] = tokenCoding7204_9;
	operand.values[10] = tokenCoding7204_10;
}
Coding x64Parser::tokenCoding7207_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7207_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7207_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7207(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7207_8;
	operand.values[9] = tokenCoding7207_9;
	operand.values[10] = tokenCoding7207_10;
}
Coding x64Parser::tokenCoding7210_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7210_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7210_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7210(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7210_8;
	operand.values[9] = tokenCoding7210_9;
	operand.values[10] = tokenCoding7210_10;
}
x64Token x64Parser::tokenBranches7203[] = {
	{x64Token::REGISTERCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc7204,  },
	{x64Token::REGISTERCLASS, 11, 1, 0, NULL,&x64Parser::TokenFunc7207,  },
	{x64Token::REGISTERCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc7210,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7202[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7203 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7201[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7202 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7214_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7214_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7214_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7214_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7214_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7214(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7214_8;
	operand.values[9] = tokenCoding7214_9;
	operand.values[18] = tokenCoding7214_18;
	operand.values[10] = tokenCoding7214_10;
	operand.values[11] = tokenCoding7214_11;
}
x64Token x64Parser::tokenBranches7213[] = {
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc7214,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7212[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7213 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7217_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7217_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7217_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7217_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7217_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7217(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7217_8;
	operand.values[9] = tokenCoding7217_9;
	operand.values[18] = tokenCoding7217_18;
	operand.values[10] = tokenCoding7217_10;
	operand.values[11] = tokenCoding7217_11;
}
x64Token x64Parser::tokenBranches7216[] = {
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc7217,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7215[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7216 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7211[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7212 },
	{x64Token::ADDRESSCLASS, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7215 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7221_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7221_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7221_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7221_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7221_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7221(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7221_8;
	operand.values[9] = tokenCoding7221_9;
	operand.values[18] = tokenCoding7221_18;
	operand.values[10] = tokenCoding7221_10;
	operand.values[11] = tokenCoding7221_11;
}
x64Token x64Parser::tokenBranches7220[] = {
	{x64Token::REGISTERCLASS, 24, 1, 0, NULL,&x64Parser::TokenFunc7221,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7219[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7220 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7224_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7224_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7224_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7224_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7224_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7224(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7224_8;
	operand.values[9] = tokenCoding7224_9;
	operand.values[18] = tokenCoding7224_18;
	operand.values[10] = tokenCoding7224_10;
	operand.values[11] = tokenCoding7224_11;
}
x64Token x64Parser::tokenBranches7223[] = {
	{x64Token::REGISTERCLASS, 26, 1, 0, NULL,&x64Parser::TokenFunc7224,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7222[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7223 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7218[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7219 },
	{x64Token::ADDRESSCLASS, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7222 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7228_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7228_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7228_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7228_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7228_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7228(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7228_8;
	operand.values[9] = tokenCoding7228_9;
	operand.values[18] = tokenCoding7228_18;
	operand.values[10] = tokenCoding7228_10;
	operand.values[11] = tokenCoding7228_11;
}
x64Token x64Parser::tokenBranches7227[] = {
	{x64Token::REGISTERCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc7228,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7226[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7227 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7225[] = {
	{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7226 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7232_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7232_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7232_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7232_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7232_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8},
	{ Coding::eot },
};
void x64Parser::TokenFunc7232(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
	operand.values[8] = tokenCoding7232_8;
	operand.values[9] = tokenCoding7232_9;
	operand.values[18] = tokenCoding7232_18;
	operand.values[10] = tokenCoding7232_10;
	operand.values[11] = tokenCoding7232_11;
}
x64Token x64Parser::tokenBranches7231[] = {
	{x64Token::REGISTERCLASS, 25, 1, 0, NULL,&x64Parser::TokenFunc7232,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7230[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7231 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7230(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7229[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7230, x64Parser::tokenBranches7230 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7260_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7260_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7260_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7260_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7260(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7260_8;
	operand.values[9] = tokenCoding7260_9;
	operand.values[18] = tokenCoding7260_18;
	operand.values[10] = tokenCoding7260_10;
}
x64Token x64Parser::tokenBranches7259[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7260,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7258[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7259 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7257[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7258 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7256[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7257 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7265_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7265_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7265_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7265_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7265(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7265_8;
	operand.values[9] = tokenCoding7265_9;
	operand.values[18] = tokenCoding7265_18;
	operand.values[10] = tokenCoding7265_10;
}
x64Token x64Parser::tokenBranches7264[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7265,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7263[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7264 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7262[] = {
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches7263 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7261[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7262 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7270_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7270_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7270_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7270_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7270(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7270_8;
	operand.values[9] = tokenCoding7270_9;
	operand.values[18] = tokenCoding7270_18;
	operand.values[10] = tokenCoding7270_10;
}
x64Token x64Parser::tokenBranches7269[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7270,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7268[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7269 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7267[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7268 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7266[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7267 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7256(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7261(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7266(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7255[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7256, x64Parser::tokenBranches7256 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7261, x64Parser::tokenBranches7261 },
	{x64Token::REGISTERCLASS, 25, 0, 0, NULL,&x64Parser::TokenFunc7266, x64Parser::tokenBranches7266 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7291_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7291_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7291_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7291_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7291(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7291_8;
	operand.values[9] = tokenCoding7291_9;
	operand.values[18] = tokenCoding7291_18;
	operand.values[10] = tokenCoding7291_10;
}
x64Token x64Parser::tokenBranches7290[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7291,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7289[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7290 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7289(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7288[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7289, x64Parser::tokenBranches7289 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7287[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7288 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7296_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7296_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7296_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7296_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7296(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7296_8;
	operand.values[9] = tokenCoding7296_9;
	operand.values[18] = tokenCoding7296_18;
	operand.values[10] = tokenCoding7296_10;
}
x64Token x64Parser::tokenBranches7295[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7296,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7294[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7295 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7294(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7293[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7294, x64Parser::tokenBranches7294 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7292[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7293 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7286[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7287 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7292 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7302_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7302_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7302_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7302_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7302(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7302_8;
	operand.values[9] = tokenCoding7302_9;
	operand.values[18] = tokenCoding7302_18;
	operand.values[10] = tokenCoding7302_10;
}
x64Token x64Parser::tokenBranches7301[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7302,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7300[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7301 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7300(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7299[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7300, x64Parser::tokenBranches7300 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7298[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7299 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7307_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7307_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7307_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7307_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7307(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7307_8;
	operand.values[9] = tokenCoding7307_9;
	operand.values[18] = tokenCoding7307_18;
	operand.values[10] = tokenCoding7307_10;
}
x64Token x64Parser::tokenBranches7306[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7307,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7305[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7306 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7305(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7304[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7305, x64Parser::tokenBranches7305 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7303[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7304 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7297[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7298 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7303 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7313_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7313_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7313_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7313_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7313(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7313_8;
	operand.values[9] = tokenCoding7313_9;
	operand.values[18] = tokenCoding7313_18;
	operand.values[10] = tokenCoding7313_10;
}
x64Token x64Parser::tokenBranches7312[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7313,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7311[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7312 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7311(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7310[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7311, x64Parser::tokenBranches7311 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7309[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7310 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7318_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7318_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7318_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7318_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7318(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7318_8;
	operand.values[9] = tokenCoding7318_9;
	operand.values[18] = tokenCoding7318_18;
	operand.values[10] = tokenCoding7318_10;
}
x64Token x64Parser::tokenBranches7317[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7318,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7316[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7317 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7316(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7315[] = {
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7316, x64Parser::tokenBranches7316 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7314[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7315 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7308[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches7309 },
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches7314 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7324_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7324_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7324_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7324_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7324(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7324_8;
	operand.values[9] = tokenCoding7324_9;
	operand.values[18] = tokenCoding7324_18;
	operand.values[10] = tokenCoding7324_10;
}
x64Token x64Parser::tokenBranches7323[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7324,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7322[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7323 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7334_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7334_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7334_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7334_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7334(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7334_8;
	operand.values[9] = tokenCoding7334_9;
	operand.values[18] = tokenCoding7334_18;
	operand.values[10] = tokenCoding7334_10;
}
x64Token x64Parser::tokenBranches7333[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7334,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7332[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7333 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7321[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7322 },
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7332 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7320[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7321 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7329_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7329_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7329_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7329_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7329(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7329_8;
	operand.values[9] = tokenCoding7329_9;
	operand.values[18] = tokenCoding7329_18;
	operand.values[10] = tokenCoding7329_10;
}
x64Token x64Parser::tokenBranches7328[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7329,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7327[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7328 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7339_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7339_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7339_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7339_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7339(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7339_8;
	operand.values[9] = tokenCoding7339_9;
	operand.values[18] = tokenCoding7339_18;
	operand.values[10] = tokenCoding7339_10;
}
x64Token x64Parser::tokenBranches7338[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7339,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7337[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7338 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7326[] = {
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches7327 },
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7337 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7325[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7326 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7344_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7344_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7344_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7344_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7344(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7344_8;
	operand.values[9] = tokenCoding7344_9;
	operand.values[18] = tokenCoding7344_18;
	operand.values[10] = tokenCoding7344_10;
}
x64Token x64Parser::tokenBranches7343[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7344,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7342[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7343 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7341[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7342 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7340[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7341 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7349_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7349_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7349_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7349_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7349(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7349_8;
	operand.values[9] = tokenCoding7349_9;
	operand.values[18] = tokenCoding7349_18;
	operand.values[10] = tokenCoding7349_10;
}
x64Token x64Parser::tokenBranches7348[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7349,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7347[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7348 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7354_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7354_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7354_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7354_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7354(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7354_8;
	operand.values[9] = tokenCoding7354_9;
	operand.values[18] = tokenCoding7354_18;
	operand.values[10] = tokenCoding7354_10;
}
x64Token x64Parser::tokenBranches7353[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7354,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7352[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7353 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7346[] = {
	{x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches7347 },
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7352 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7345[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7346 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7320(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7325(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7340(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7345(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7319[] = {
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc7320, x64Parser::tokenBranches7320 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc7325, x64Parser::tokenBranches7325 },
	{x64Token::REGISTERCLASS, 14, 0, 0, NULL,&x64Parser::TokenFunc7340, x64Parser::tokenBranches7340 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc7345, x64Parser::tokenBranches7345 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7360_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7360_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7360_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7360_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7360(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7360_8;
	operand.values[9] = tokenCoding7360_9;
	operand.values[18] = tokenCoding7360_18;
	operand.values[10] = tokenCoding7360_10;
}
x64Token x64Parser::tokenBranches7359[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7360,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7358[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7359 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7357[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7358 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7356[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7357 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7365_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7365_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7365_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7365_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7365(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7365_8;
	operand.values[9] = tokenCoding7365_9;
	operand.values[18] = tokenCoding7365_18;
	operand.values[10] = tokenCoding7365_10;
}
x64Token x64Parser::tokenBranches7364[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7365,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7363[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7364 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7362[] = {
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7363 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7361[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7362 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7356(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7361(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7355[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7356, x64Parser::tokenBranches7356 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7361, x64Parser::tokenBranches7361 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7371_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7371_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7371_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7371_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7371(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7371_8;
	operand.values[9] = tokenCoding7371_9;
	operand.values[18] = tokenCoding7371_18;
	operand.values[10] = tokenCoding7371_10;
}
x64Token x64Parser::tokenBranches7370[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7371,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7369[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7370 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7368[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7369 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7367[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7368 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7376_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7376_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7376_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7376_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7376(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7376_8;
	operand.values[9] = tokenCoding7376_9;
	operand.values[18] = tokenCoding7376_18;
	operand.values[10] = tokenCoding7376_10;
}
x64Token x64Parser::tokenBranches7375[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7376,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7374[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7375 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7373[] = {
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7374 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7372[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7373 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7367(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7372(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7366[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7367, x64Parser::tokenBranches7367 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7372, x64Parser::tokenBranches7372 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7382_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7382_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7382_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7382_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7382(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7382_8;
	operand.values[9] = tokenCoding7382_9;
	operand.values[18] = tokenCoding7382_18;
	operand.values[10] = tokenCoding7382_10;
}
x64Token x64Parser::tokenBranches7381[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7382,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7380[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7381 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7379[] = {
	{x64Token::ADDRESSCLASS, 6, 0, 0, NULL, NULL, x64Parser::tokenBranches7380 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7378[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7379 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7387_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7387_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7387_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7387_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7387(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7387_8;
	operand.values[9] = tokenCoding7387_9;
	operand.values[18] = tokenCoding7387_18;
	operand.values[10] = tokenCoding7387_10;
}
x64Token x64Parser::tokenBranches7386[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7387,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7385[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7386 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7384[] = {
	{x64Token::ADDRESSCLASS, 16, 0, 0, NULL, NULL, x64Parser::tokenBranches7385 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7383[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7384 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7378(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7383(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7377[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7378, x64Parser::tokenBranches7378 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7383, x64Parser::tokenBranches7383 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7393_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7393_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7393_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7393_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7393(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7393_8;
	operand.values[9] = tokenCoding7393_9;
	operand.values[18] = tokenCoding7393_18;
	operand.values[10] = tokenCoding7393_10;
}
x64Token x64Parser::tokenBranches7392[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7393,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7391[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7392 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7390[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7391 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7389[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7390 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7398_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7398_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7398_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7398_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7398(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7398_8;
	operand.values[9] = tokenCoding7398_9;
	operand.values[18] = tokenCoding7398_18;
	operand.values[10] = tokenCoding7398_10;
}
x64Token x64Parser::tokenBranches7397[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7398,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7396[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7397 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7395[] = {
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7396 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7394[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7395 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7403_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7403_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7403_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7403_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7403(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7403_8;
	operand.values[9] = tokenCoding7403_9;
	operand.values[18] = tokenCoding7403_18;
	operand.values[10] = tokenCoding7403_10;
}
x64Token x64Parser::tokenBranches7402[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7403,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7401[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7402 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7408_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7408_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7408_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7408_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7408(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7408_8;
	operand.values[9] = tokenCoding7408_9;
	operand.values[18] = tokenCoding7408_18;
	operand.values[10] = tokenCoding7408_10;
}
x64Token x64Parser::tokenBranches7407[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7408,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7406[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7407 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7400[] = {
	{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7401 },
	{x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches7406 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7399[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7400 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7389(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7394(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7399(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7388[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7389, x64Parser::tokenBranches7389 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7394, x64Parser::tokenBranches7394 },
	{x64Token::REGISTERCLASS, 25, 0, 0, NULL,&x64Parser::TokenFunc7399, x64Parser::tokenBranches7399 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7417_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7417_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7417_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7417_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7417(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7417_8;
	operand.values[9] = tokenCoding7417_9;
	operand.values[18] = tokenCoding7417_18;
	operand.values[10] = tokenCoding7417_10;
}
Coding x64Parser::tokenCoding7423_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7423_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7423_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7423_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7423(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7423_8;
	operand.values[9] = tokenCoding7423_9;
	operand.values[18] = tokenCoding7423_18;
	operand.values[10] = tokenCoding7423_10;
}
x64Token x64Parser::tokenBranches7416[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc7417,  },
	{x64Token::ADDRESSCLASS, 9, 1, 0, NULL,&x64Parser::TokenFunc7423,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7415[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7416 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7420_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7420_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7420_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7420_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7420(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7420_8;
	operand.values[9] = tokenCoding7420_9;
	operand.values[18] = tokenCoding7420_18;
	operand.values[10] = tokenCoding7420_10;
}
Coding x64Parser::tokenCoding7429_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7429_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7429_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7429_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7429(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7429_8;
	operand.values[9] = tokenCoding7429_9;
	operand.values[18] = tokenCoding7429_18;
	operand.values[10] = tokenCoding7429_10;
}
x64Token x64Parser::tokenBranches7419[] = {
	{x64Token::ADDRESSCLASS, 8, 1, 0, NULL,&x64Parser::TokenFunc7420,  },
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc7429,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7418[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7419 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7426_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7426_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7426_18[] = {
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7426_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7426(x64Operand &operand, int tokenPos)
{
	operand.values[8] = tokenCoding7426_8;
	operand.values[9] = tokenCoding7426_9;
	operand.values[18] = tokenCoding7426_18;
	operand.values[10] = tokenCoding7426_10;
}
x64Token x64Parser::tokenBranches7425[] = {
	{x64Token::ADDRESSCLASS, 17, 1, 0, NULL,&x64Parser::TokenFunc7426,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7424[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7425 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7415(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7418(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7424(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7414[] = {
	{x64Token::REGISTERCLASS, 8, 0, 0, NULL,&x64Parser::TokenFunc7415, x64Parser::tokenBranches7415 },
	{x64Token::REGISTERCLASS, 17, 0, 0, NULL,&x64Parser::TokenFunc7418, x64Parser::tokenBranches7418 },
	{x64Token::REGISTERCLASS, 11, 0, 0, NULL,&x64Parser::TokenFunc7424, x64Parser::tokenBranches7424 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7443_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7443_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7443_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7443(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7443_8;
	operand.values[9] = tokenCoding7443_9;
	operand.values[10] = tokenCoding7443_10;
}
x64Token x64Parser::tokenBranches7442[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7443,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7441[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7442 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7440[] = {
	{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7441 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7439[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7440 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7439(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7438[] = {
	{x64Token::REGISTERCLASS, 25, 0, 0, NULL,&x64Parser::TokenFunc7439, x64Parser::tokenBranches7439 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7448_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
void x64Parser::TokenFunc7448(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding7448_10;
}
x64Token x64Parser::tokenBranches7447[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7448,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7446[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7447 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7451_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
void x64Parser::TokenFunc7451(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding7451_10;
}
x64Token x64Parser::tokenBranches7450[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7451,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7449[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7450 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7446(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7449(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7445[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7446, x64Parser::tokenBranches7446 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7449, x64Parser::tokenBranches7449 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7460_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
void x64Parser::TokenFunc7460(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding7460_10;
}
x64Token x64Parser::tokenBranches7459[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7460,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7458[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7459 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7463_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
void x64Parser::TokenFunc7463(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[10] = tokenCoding7463_10;
}
x64Token x64Parser::tokenBranches7462[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7463,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7461[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7462 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7458(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7461(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7457[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7458, x64Parser::tokenBranches7458 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7461, x64Parser::tokenBranches7461 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7493_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7493_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7493_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7493(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7493_8;
	operand.values[9] = tokenCoding7493_9;
	operand.values[10] = tokenCoding7493_10;
}
x64Token x64Parser::tokenBranches7492[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7493,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7491[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7492 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7490[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7491 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7489[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7490 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7498_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7498_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7498_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7498(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7498_8;
	operand.values[9] = tokenCoding7498_9;
	operand.values[10] = tokenCoding7498_10;
}
x64Token x64Parser::tokenBranches7497[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7498,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7496[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7497 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7495[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7496 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7494[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7495 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7489(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7494(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7488[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7489, x64Parser::tokenBranches7489 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7494, x64Parser::tokenBranches7494 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7504_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7504_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7504_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7504(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7504_8;
	operand.values[9] = tokenCoding7504_9;
	operand.values[10] = tokenCoding7504_10;
}
x64Token x64Parser::tokenBranches7503[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7504,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7502[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7503 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7501[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7502 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7500[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7501 },
	{x64Token::EOT }
};
Coding x64Parser::tokenCoding7509_8[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 1 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7509_9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 2 },
	{ Coding::eot },
};
Coding x64Parser::tokenCoding7509_10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 12, -1, 0 },
	{ Coding::eot },
};
void x64Parser::TokenFunc7509(x64Operand &operand, int tokenPos)
{
	operand.operandCoding = 347;
	operand.values[19] = new Coding[2];
	CleanupValues.push_back(operand.values[19]);
	operand.values[19]->type = Coding::number;
	operand.values[19]->val = operands.size();
	operand.values[19]->bits = 0;
	operand.values[19]->field = 0;
	operand.values[19]->math = 0;
	operand.values[19]->mathval = 0;
	operand.values[19][1].type = Coding::eot;
	operands.push_back(numeric);
	operand.values[8] = tokenCoding7509_8;
	operand.values[9] = tokenCoding7509_9;
	operand.values[10] = tokenCoding7509_10;
}
x64Token x64Parser::tokenBranches7508[] = {
	{x64Token::NUMBER, 3, 1, 0, NULL,&x64Parser::TokenFunc7509,  },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7507[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7508 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7506[] = {
	{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7507 },
	{x64Token::EOT }
};
x64Token x64Parser::tokenBranches7505[] = {
	{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7506 },
	{x64Token::EOT }
};
void x64Parser::TokenFunc7500(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
void x64Parser::TokenFunc7505(x64Operand &operand, int tokenPos)
{
	operand.values[12] = new Coding[2];
	CleanupValues.push_back(operand.values[12]);
	operand.values[12]->type = Coding::reg;
	operand.values[12]->val = inputTokens[tokenPos]->val->ival;
	operand.values[12]->bits = 0;
	operand.values[12]->field = 0;
	operand.values[12]->math = 0;
	operand.values[12]->mathval = 0;
	operand.values[12][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7499[] = {
	{x64Token::REGISTERCLASS, 24, 0, 0, NULL,&x64Parser::TokenFunc7500, x64Parser::tokenBranches7500 },
	{x64Token::REGISTERCLASS, 26, 0, 0, NULL,&x64Parser::TokenFunc7505, x64Parser::tokenBranches7505 },
	{x64Token::EOT }
};
bool x64Parser::Opcode0(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3391, operand);
	return rv;
}
bool x64Parser::Opcode1(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3393, operand);
	return rv;
}
bool x64Parser::Opcode2(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3395, operand);
	return rv;
}
bool x64Parser::Opcode3(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3424, operand);
	return rv;
}
bool x64Parser::Opcode4(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3453, operand);
	return rv;
}
bool x64Parser::Opcode5(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3644, operand);
	return rv;
}
bool x64Parser::Opcode6(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3685, operand);
	return rv;
}
bool x64Parser::Opcode7(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3707, operand);
	return rv;
}
bool x64Parser::Opcode8(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3729, operand);
	return rv;
}
bool x64Parser::Opcode9(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3745, operand);
	return rv;
}
bool x64Parser::Opcode10(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3751, operand);
	return rv;
}
bool x64Parser::Opcode11(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3760, operand);
	return rv;
}
bool x64Parser::Opcode12(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3763, operand);
	return rv;
}
bool x64Parser::Opcode13(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3772, operand);
	return rv;
}
bool x64Parser::Opcode14(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3793, operand);
	return rv;
}
bool x64Parser::Opcode15(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3798, operand);
	return rv;
}
bool x64Parser::Opcode16(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches3862, operand);
	return rv;
}
bool x64Parser::Opcode17(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4031, operand);
	return rv;
}
bool x64Parser::Opcode18(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4092, operand);
	return rv;
}
bool x64Parser::Opcode19(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4094, operand);
	return rv;
}
bool x64Parser::Opcode20(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4101, operand);
	return rv;
}
bool x64Parser::Opcode21(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4114, operand);
	return rv;
}
bool x64Parser::Opcode22(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4127, operand);
	return rv;
}
bool x64Parser::Opcode23(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4140, operand);
	return rv;
}
bool x64Parser::Opcode24(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4147, operand);
	return rv;
}
bool x64Parser::Opcode25(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4154, operand);
	return rv;
}
bool x64Parser::Opcode26(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4164, operand);
	return rv;
}
bool x64Parser::Opcode27(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4181, operand);
	return rv;
}
bool x64Parser::Opcode28(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4191, operand);
	return rv;
}
bool x64Parser::Opcode29(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4202, operand);
	return rv;
}
bool x64Parser::Opcode30(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4221, operand);
	return rv;
}
bool x64Parser::Opcode31(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4232, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings32_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 55, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode32(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings32_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings33_11[] = {
	{ Coding::valSpecified, 213},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode33(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings33_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings34_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode34(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings34_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings35_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 63, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode35(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings35_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings36_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings36_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings36_28[] = {
	{ Coding::valSpecified, 16},
	{ Coding::eot },
};
bool x64Parser::Opcode36(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings36_10;
	operand.values[27] = OpcodeCodings36_27;
	operand.values[28] = OpcodeCodings36_28;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings37_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings37_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings37_28[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
bool x64Parser::Opcode37(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings37_10;
	operand.values[27] = OpcodeCodings37_27;
	operand.values[28] = OpcodeCodings37_28;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings38_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings38_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings38_28[] = {
	{ Coding::valSpecified, 32},
	{ Coding::eot },
};
bool x64Parser::Opcode38(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings38_10;
	operand.values[27] = OpcodeCodings38_27;
	operand.values[28] = OpcodeCodings38_28;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode39(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4245, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings40_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode40(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings40_27;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings41_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 188, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode41(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings41_27;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings42_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 189, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode42(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings42_27;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
bool x64Parser::Opcode43(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4255, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings44_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings44_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings44_28[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode44(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings44_10;
	operand.values[27] = OpcodeCodings44_27;
	operand.values[28] = OpcodeCodings44_28;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings45_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings45_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings45_28[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 187, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode45(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings45_10;
	operand.values[27] = OpcodeCodings45_27;
	operand.values[28] = OpcodeCodings45_28;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings46_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings46_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings46_28[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 179, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode46(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings46_10;
	operand.values[27] = OpcodeCodings46_27;
	operand.values[28] = OpcodeCodings46_28;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings47_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings47_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings47_28[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode47(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings47_10;
	operand.values[27] = OpcodeCodings47_27;
	operand.values[28] = OpcodeCodings47_28;
	bool rv;
	{
		rv = Opcode5(operand);
	}
	return rv;
}
bool x64Parser::Opcode48(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4263, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings49_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode49(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings49_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings50_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode50(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings50_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings51_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode51(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings51_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings52_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode52(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings52_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings53_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode53(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings53_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings54_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode54(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings54_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings55_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode55(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings55_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings56_11[] = {
	{ Coding::valSpecified, 245},
	{ Coding::eot },
};
bool x64Parser::Opcode56(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings56_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings57_29[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
bool x64Parser::Opcode57(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings57_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings58_29[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode58(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings58_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings59_29[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode59(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings59_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings60_29[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
bool x64Parser::Opcode60(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings60_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings61_29[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode61(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings61_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings62_29[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
bool x64Parser::Opcode62(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings62_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings63_29[] = {
	{ Coding::valSpecified, 15},
	{ Coding::eot },
};
bool x64Parser::Opcode63(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings63_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings64_29[] = {
	{ Coding::valSpecified, 13},
	{ Coding::eot },
};
bool x64Parser::Opcode64(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings64_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings65_29[] = {
	{ Coding::valSpecified, 12},
	{ Coding::eot },
};
bool x64Parser::Opcode65(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings65_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings66_29[] = {
	{ Coding::valSpecified, 14},
	{ Coding::eot },
};
bool x64Parser::Opcode66(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings66_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings67_29[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
bool x64Parser::Opcode67(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings67_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings68_29[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode68(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings68_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings69_29[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode69(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings69_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings70_29[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
bool x64Parser::Opcode70(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings70_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings71_29[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode71(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings71_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings72_29[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
bool x64Parser::Opcode72(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings72_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings73_29[] = {
	{ Coding::valSpecified, 14},
	{ Coding::eot },
};
bool x64Parser::Opcode73(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings73_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings74_29[] = {
	{ Coding::valSpecified, 12},
	{ Coding::eot },
};
bool x64Parser::Opcode74(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings74_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings75_29[] = {
	{ Coding::valSpecified, 13},
	{ Coding::eot },
};
bool x64Parser::Opcode75(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings75_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings76_29[] = {
	{ Coding::valSpecified, 15},
	{ Coding::eot },
};
bool x64Parser::Opcode76(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings76_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings77_29[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
bool x64Parser::Opcode77(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings77_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings78_29[] = {
	{ Coding::valSpecified, 11},
	{ Coding::eot },
};
bool x64Parser::Opcode78(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings78_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings79_29[] = {
	{ Coding::valSpecified, 9},
	{ Coding::eot },
};
bool x64Parser::Opcode79(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings79_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings80_29[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
bool x64Parser::Opcode80(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings80_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings81_29[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
bool x64Parser::Opcode81(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings81_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings82_29[] = {
	{ Coding::valSpecified, 10},
	{ Coding::eot },
};
bool x64Parser::Opcode82(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings82_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings83_29[] = {
	{ Coding::valSpecified, 10},
	{ Coding::eot },
};
bool x64Parser::Opcode83(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings83_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings84_29[] = {
	{ Coding::valSpecified, 11},
	{ Coding::eot },
};
bool x64Parser::Opcode84(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings84_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings85_29[] = {
	{ Coding::valSpecified, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode85(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings85_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings86_29[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
bool x64Parser::Opcode86(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings86_29;
	bool rv;
	{
		rv = Opcode13(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings87_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings87_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 60, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings87_28[] = {
	{ Coding::valSpecified, 56},
	{ Coding::eot },
};
bool x64Parser::Opcode87(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings87_10;
	operand.values[27] = OpcodeCodings87_27;
	operand.values[28] = OpcodeCodings87_28;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode88(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4331, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings89_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode89(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings89_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings90_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode90(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings90_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings91_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode91(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings91_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings92_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode92(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings92_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings93_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 176, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode93(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings93_11;
	bool rv = ParseOperands(tokenBranches4600, operand);
	return rv;
}
bool x64Parser::Opcode94(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4629, operand);
	return rv;
}
bool x64Parser::Opcode95(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4631, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings96_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode96(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings96_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings97_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode97(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings97_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings98_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode98(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings98_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings99_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode99(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings99_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings100_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 39, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode100(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings100_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings101_11[] = {
	{ Coding::valSpecified, 47},
	{ Coding::eot },
};
bool x64Parser::Opcode101(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings101_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings102_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings102_11[] = {
	{ Coding::valSpecified, 9},
	{ Coding::eot },
};
bool x64Parser::Opcode102(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings102_10;
	operand.values[11] = OpcodeCodings102_11;
	bool rv;
	{
		rv = Opcode6(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings103_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
bool x64Parser::Opcode103(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings103_10;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
bool x64Parser::Opcode104(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4641, operand);
	return rv;
}
bool x64Parser::Opcode105(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4647, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings106_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode106(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings106_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings107_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode107(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings107_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings108_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings108_30[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings108_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode108(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings108_10;
	operand.values[30] = OpcodeCodings108_30;
	operand.values[27] = OpcodeCodings108_27;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings109_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings109_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode109(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings109_10;
	operand.values[11] = OpcodeCodings109_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings110_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings110_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode110(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings110_10;
	operand.values[11] = OpcodeCodings110_11;
	bool rv;
	{
		rv = Opcode11(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings111_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings111_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode111(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings111_10;
	operand.values[11] = OpcodeCodings111_11;
	bool rv;
	{
		rv = Opcode11(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings112_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode112(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings112_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings113_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode113(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings113_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings114_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode114(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings114_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings115_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings115_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode115(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings115_10;
	operand.values[27] = OpcodeCodings115_27;
	bool rv = ParseOperands(tokenBranches4660, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings116_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings116_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode116(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings116_10;
	operand.values[27] = OpcodeCodings116_27;
	bool rv = ParseOperands(tokenBranches4664, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings117_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings117_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode117(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings117_10;
	operand.values[27] = OpcodeCodings117_27;
	bool rv = ParseOperands(tokenBranches4668, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings118_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings118_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode118(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings118_10;
	operand.values[27] = OpcodeCodings118_27;
	bool rv = ParseOperands(tokenBranches4672, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings119_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings119_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode119(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings119_10;
	operand.values[27] = OpcodeCodings119_27;
	bool rv = ParseOperands(tokenBranches4676, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings120_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings120_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode120(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings120_10;
	operand.values[27] = OpcodeCodings120_27;
	bool rv = ParseOperands(tokenBranches4680, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings121_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings121_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode121(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings121_10;
	operand.values[27] = OpcodeCodings121_27;
	bool rv = ParseOperands(tokenBranches4684, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings122_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings122_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode122(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings122_10;
	operand.values[27] = OpcodeCodings122_27;
	bool rv = ParseOperands(tokenBranches4688, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings123_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings123_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode123(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings123_10;
	operand.values[27] = OpcodeCodings123_27;
	bool rv = ParseOperands(tokenBranches4692, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings124_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings124_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode124(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings124_10;
	operand.values[27] = OpcodeCodings124_27;
	bool rv = ParseOperands(tokenBranches4705, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings125_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings125_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode125(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings125_10;
	operand.values[27] = OpcodeCodings125_27;
	bool rv = ParseOperands(tokenBranches4709, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings126_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings126_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode126(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings126_10;
	operand.values[27] = OpcodeCodings126_27;
	bool rv = ParseOperands(tokenBranches4713, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings127_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings127_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode127(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings127_10;
	operand.values[27] = OpcodeCodings127_27;
	bool rv = ParseOperands(tokenBranches4717, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings128_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings128_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode128(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings128_10;
	operand.values[27] = OpcodeCodings128_27;
	bool rv = ParseOperands(tokenBranches4727, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings129_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings129_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode129(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings129_10;
	operand.values[27] = OpcodeCodings129_27;
	bool rv = ParseOperands(tokenBranches4731, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings130_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode130(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings130_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings131_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode131(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings131_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings132_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode132(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings132_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings133_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode133(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings133_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings134_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings134_30[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings134_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode134(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings134_10;
	operand.values[30] = OpcodeCodings134_30;
	operand.values[27] = OpcodeCodings134_27;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings135_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings135_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode135(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings135_10;
	operand.values[11] = OpcodeCodings135_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings136_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings136_30[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings136_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode136(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings136_10;
	operand.values[30] = OpcodeCodings136_30;
	operand.values[27] = OpcodeCodings136_27;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings137_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings137_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode137(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings137_10;
	operand.values[11] = OpcodeCodings137_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings138_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode138(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings138_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode139(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4744, operand);
	return rv;
}
bool x64Parser::Opcode140(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4746, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings141_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings141_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode141(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings141_10;
	operand.values[27] = OpcodeCodings141_27;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings142_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings142_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode142(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings142_10;
	operand.values[27] = OpcodeCodings142_27;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings143_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings143_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode143(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings143_10;
	operand.values[27] = OpcodeCodings143_27;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings144_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings144_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode144(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings144_10;
	operand.values[27] = OpcodeCodings144_27;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings145_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings145_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode145(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings145_10;
	operand.values[27] = OpcodeCodings145_27;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings146_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings146_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode146(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings146_10;
	operand.values[27] = OpcodeCodings146_27;
	bool rv = ParseOperands(tokenBranches4753, operand);
	if (!rv)
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings147_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings147_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode147(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings147_10;
	operand.values[27] = OpcodeCodings147_27;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings148_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode148(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings148_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings149_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode149(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings149_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings150_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode150(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings150_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings151_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings151_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode151(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings151_10;
	operand.values[27] = OpcodeCodings151_27;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings152_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings152_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode152(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings152_10;
	operand.values[27] = OpcodeCodings152_27;
	bool rv = ParseOperands(tokenBranches4761, operand);
	if (!rv)
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings153_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings153_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode153(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings153_10;
	operand.values[27] = OpcodeCodings153_27;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings154_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings154_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode154(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings154_10;
	operand.values[27] = OpcodeCodings154_27;
	bool rv;
	{
		rv = Opcode10(operand);
	}
	return rv;
}
bool x64Parser::Opcode155(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4766, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings156_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode156(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings156_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode157(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4775, operand);
	return rv;
}
bool x64Parser::Opcode158(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4778, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings159_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode159(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings159_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings160_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode160(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings160_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings161_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode161(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings161_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings162_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode162(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings162_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings163_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode163(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings163_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings164_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode164(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings164_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings165_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings165_30[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings165_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode165(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings165_10;
	operand.values[30] = OpcodeCodings165_30;
	operand.values[27] = OpcodeCodings165_27;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings166_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings166_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode166(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings166_10;
	operand.values[11] = OpcodeCodings166_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings167_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode167(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings167_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode168(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4789, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings169_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode169(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings169_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings170_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode170(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings170_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings171_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::valSpecified, 245},
	{ Coding::eot },
};
bool x64Parser::Opcode171(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings171_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings172_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode172(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings172_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings173_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode173(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings173_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode174(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4796, operand);
	return rv;
}
bool x64Parser::Opcode175(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4798, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings176_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode176(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings176_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings177_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode177(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings177_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings178_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode178(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings178_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings179_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode179(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings179_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings180_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode180(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings180_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode181(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4805, operand);
	return rv;
}
bool x64Parser::Opcode182(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4811, operand);
	return rv;
}
bool x64Parser::Opcode183(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4814, operand);
	return rv;
}
bool x64Parser::Opcode184(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4817, operand);
	return rv;
}
bool x64Parser::Opcode185(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4819, operand);
	return rv;
}
bool x64Parser::Opcode186(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4821, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings187_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings187_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode187(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings187_10;
	operand.values[27] = OpcodeCodings187_27;
	bool rv = ParseOperands(tokenBranches4835, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings188_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings188_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode188(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings188_10;
	operand.values[27] = OpcodeCodings188_27;
	bool rv = ParseOperands(tokenBranches4839, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings189_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings189_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode189(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings189_10;
	operand.values[27] = OpcodeCodings189_27;
	bool rv = ParseOperands(tokenBranches4843, operand);
	return rv;
}
bool x64Parser::Opcode190(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4847, operand);
	return rv;
}
bool x64Parser::Opcode191(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4851, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings192_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings192_30[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings192_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode192(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings192_10;
	operand.values[30] = OpcodeCodings192_30;
	operand.values[27] = OpcodeCodings192_27;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings193_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings193_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode193(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings193_10;
	operand.values[11] = OpcodeCodings193_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings194_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings194_30[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings194_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode194(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings194_10;
	operand.values[30] = OpcodeCodings194_30;
	operand.values[27] = OpcodeCodings194_27;
	bool rv;
	{
		rv = Opcode8(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings195_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings195_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode195(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings195_10;
	operand.values[11] = OpcodeCodings195_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings196_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode196(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings196_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings197_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings197_11[] = {
	{ Coding::valSpecified, 221},
	{ Coding::eot },
};
bool x64Parser::Opcode197(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings197_10;
	operand.values[11] = OpcodeCodings197_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings198_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings198_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode198(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings198_10;
	operand.values[27] = OpcodeCodings198_27;
	bool rv = ParseOperands(tokenBranches4861, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings199_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings199_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode199(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings199_10;
	operand.values[27] = OpcodeCodings199_27;
	bool rv = ParseOperands(tokenBranches4865, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings200_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings200_11[] = {
	{ Coding::valSpecified, 221},
	{ Coding::eot },
};
bool x64Parser::Opcode200(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings200_10;
	operand.values[11] = OpcodeCodings200_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings201_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode201(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings201_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings202_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode202(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings202_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings203_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::valSpecified, 229},
	{ Coding::eot },
};
bool x64Parser::Opcode203(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings203_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings204_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings204_11[] = {
	{ Coding::valSpecified, 217},
	{ Coding::eot },
};
bool x64Parser::Opcode204(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings204_10;
	operand.values[11] = OpcodeCodings204_11;
	bool rv;
	{
		rv = Opcode9(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings205_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings205_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode205(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings205_10;
	operand.values[27] = OpcodeCodings205_27;
	bool rv = ParseOperands(tokenBranches4874, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings206_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings206_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode206(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings206_10;
	operand.values[27] = OpcodeCodings206_27;
	bool rv = ParseOperands(tokenBranches4878, operand);
	return rv;
}
bool x64Parser::Opcode207(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4882, operand);
	return rv;
}
bool x64Parser::Opcode208(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches4884, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings209_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode209(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings209_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings210_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode210(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings210_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings211_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode211(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings211_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings212_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode212(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings212_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings213_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode213(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings213_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings214_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode214(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings214_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings215_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
bool x64Parser::Opcode215(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings215_10;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings216_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
bool x64Parser::Opcode216(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings216_10;
	bool rv = ParseOperands(tokenBranches4893, operand);
	if (!rv)
	{
		rv = Opcode7(operand);
	}
	return rv;
}
bool x64Parser::Opcode217(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5019, operand);
	return rv;
}
bool x64Parser::Opcode218(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5048, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings219_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode219(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings219_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings220_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode220(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings220_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings221_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode221(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings221_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings222_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode222(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings222_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings223_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings223_11[] = {
	{ Coding::valSpecified, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode223(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings223_10;
	operand.values[11] = OpcodeCodings223_11;
	bool rv;
	{
		rv = Opcode6(operand);
	}
	return rv;
}
bool x64Parser::Opcode224(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5192, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings225_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode225(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings225_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings226_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 204, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode226(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings226_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings227_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 206, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode227(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings227_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings228_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode228(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings228_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode229(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5199, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings230_11[] = {
	{ Coding::valSpecified, 207},
	{ Coding::eot },
};
bool x64Parser::Opcode230(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings230_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings231_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::valSpecified, 207},
	{ Coding::eot },
};
bool x64Parser::Opcode231(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings231_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings232_11[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::valSpecified, 207},
	{ Coding::eot },
};
bool x64Parser::Opcode232(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings232_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings233_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::valSpecified, 207},
	{ Coding::eot },
};
bool x64Parser::Opcode233(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings233_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings234_29[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
bool x64Parser::Opcode234(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings234_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings235_29[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode235(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings235_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings236_29[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode236(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings236_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings237_29[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
bool x64Parser::Opcode237(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings237_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings238_29[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode238(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings238_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
bool x64Parser::Opcode239(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5210, operand);
	return rv;
}
bool x64Parser::Opcode240(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5212, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings241_29[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
bool x64Parser::Opcode241(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings241_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings242_29[] = {
	{ Coding::valSpecified, 15},
	{ Coding::eot },
};
bool x64Parser::Opcode242(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings242_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings243_29[] = {
	{ Coding::valSpecified, 13},
	{ Coding::eot },
};
bool x64Parser::Opcode243(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings243_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings244_29[] = {
	{ Coding::valSpecified, 12},
	{ Coding::eot },
};
bool x64Parser::Opcode244(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings244_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings245_29[] = {
	{ Coding::valSpecified, 14},
	{ Coding::eot },
};
bool x64Parser::Opcode245(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings245_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
bool x64Parser::Opcode246(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5219, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings247_29[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
bool x64Parser::Opcode247(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings247_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings248_29[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode248(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings248_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings249_29[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode249(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings249_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings250_29[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
bool x64Parser::Opcode250(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings250_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings251_29[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode251(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings251_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings252_29[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
bool x64Parser::Opcode252(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings252_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings253_29[] = {
	{ Coding::valSpecified, 14},
	{ Coding::eot },
};
bool x64Parser::Opcode253(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings253_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings254_29[] = {
	{ Coding::valSpecified, 12},
	{ Coding::eot },
};
bool x64Parser::Opcode254(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings254_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings255_29[] = {
	{ Coding::valSpecified, 13},
	{ Coding::eot },
};
bool x64Parser::Opcode255(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings255_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings256_29[] = {
	{ Coding::valSpecified, 15},
	{ Coding::eot },
};
bool x64Parser::Opcode256(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings256_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings257_29[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
bool x64Parser::Opcode257(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings257_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings258_29[] = {
	{ Coding::valSpecified, 11},
	{ Coding::eot },
};
bool x64Parser::Opcode258(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings258_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings259_29[] = {
	{ Coding::valSpecified, 9},
	{ Coding::eot },
};
bool x64Parser::Opcode259(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings259_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings260_29[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
bool x64Parser::Opcode260(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings260_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings261_29[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
bool x64Parser::Opcode261(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings261_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings262_29[] = {
	{ Coding::valSpecified, 10},
	{ Coding::eot },
};
bool x64Parser::Opcode262(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings262_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings263_29[] = {
	{ Coding::valSpecified, 10},
	{ Coding::eot },
};
bool x64Parser::Opcode263(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings263_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings264_29[] = {
	{ Coding::valSpecified, 11},
	{ Coding::eot },
};
bool x64Parser::Opcode264(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings264_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings265_29[] = {
	{ Coding::valSpecified, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode265(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings265_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings266_29[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
bool x64Parser::Opcode266(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings266_29;
	bool rv;
	{
		rv = Opcode12(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings267_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 159, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode267(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings267_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings268_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode268(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings268_27;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings269_27[] = {
	{ Coding::valSpecified, 197},
	{ Coding::eot },
};
bool x64Parser::Opcode269(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings269_27;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings270_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 141, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode270(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings270_27;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings271_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 201, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode271(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings271_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings272_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode272(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings272_27;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings273_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode273(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings273_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings274_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 180, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode274(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings274_27;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings275_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings275_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode275(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings275_10;
	operand.values[11] = OpcodeCodings275_11;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings276_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::valSpecified, 181},
	{ Coding::eot },
};
bool x64Parser::Opcode276(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings276_27;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings277_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings277_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode277(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings277_10;
	operand.values[11] = OpcodeCodings277_11;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings278_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings278_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode278(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings278_10;
	operand.values[11] = OpcodeCodings278_11;
	bool rv = ParseOperands(tokenBranches5285, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
bool x64Parser::Opcode279(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5288, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings280_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode280(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings280_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings281_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode281(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings281_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings282_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode282(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings282_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings283_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode283(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings283_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode284(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5417, operand);
	return rv;
}
bool x64Parser::Opcode285(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5419, operand);
	return rv;
}
bool x64Parser::Opcode286(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5421, operand);
	return rv;
}
bool x64Parser::Opcode287(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5423, operand);
	return rv;
}
bool x64Parser::Opcode288(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5425, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings289_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode289(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings289_27;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings290_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 178, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode290(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings290_27;
	bool rv;
	{
		rv = Opcode3(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings291_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings291_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode291(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings291_10;
	operand.values[11] = OpcodeCodings291_11;
	bool rv = ParseOperands(tokenBranches5429, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
bool x64Parser::Opcode292(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5432, operand);
	return rv;
}
bool x64Parser::Opcode293(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches5867, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings294_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 56, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode294(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings294_27;
	bool rv = ParseOperands(tokenBranches6130, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings295_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode295(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings295_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings296_11[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
bool x64Parser::Opcode296(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings296_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode297(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6173, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings298_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
bool x64Parser::Opcode298(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings298_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings299_27[] = {
	{ Coding::valSpecified, 190},
	{ Coding::eot },
};
bool x64Parser::Opcode299(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings299_27;
	bool rv;
	{
		rv = Opcode15(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings300_27[] = {
	{ Coding::valSpecified, 182},
	{ Coding::eot },
};
bool x64Parser::Opcode300(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings300_27;
	bool rv;
	{
		rv = Opcode15(operand);
	}
	return rv;
}
bool x64Parser::Opcode301(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6189, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings302_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
bool x64Parser::Opcode302(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings302_10;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings303_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode303(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings303_10;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings304_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 144, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode304(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings304_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings305_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode305(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings305_10;
	bool rv;
	{
		rv = Opcode7(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings306_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings306_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 12, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings306_28[] = {
	{ Coding::valSpecified, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode306(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings306_10;
	operand.values[27] = OpcodeCodings306_27;
	operand.values[28] = OpcodeCodings306_28;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode307(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6216, operand);
	return rv;
}
bool x64Parser::Opcode308(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6245, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings309_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode309(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings309_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings310_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode310(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings310_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings311_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode311(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings311_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode312(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6387, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings313_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode313(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings313_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings314_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode314(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings314_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings315_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode315(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings315_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings316_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings316_31[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 184, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode316(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings316_18;
	operand.values[31] = OpcodeCodings316_31;
	bool rv;
	{
		rv = Opcode2(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings317_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode317(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings317_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings318_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode318(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings318_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings319_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode319(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings319_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings320_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode320(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings320_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode321(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6417, operand);
	return rv;
}
bool x64Parser::Opcode322(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6419, operand);
	return rv;
}
bool x64Parser::Opcode323(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6421, operand);
	return rv;
}
bool x64Parser::Opcode324(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6423, operand);
	return rv;
}
bool x64Parser::Opcode325(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6425, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings326_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode326(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings326_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings327_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode327(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings327_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings328_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode328(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings328_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings329_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode329(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings329_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings330_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode330(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings330_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings331_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode331(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings331_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings332_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode332(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings332_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings333_10[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode333(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings333_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings334_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode334(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings334_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings335_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 50, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode335(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings335_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings336_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 51, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode336(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings336_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings337_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 49, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode337(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings337_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode338(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6470, operand);
	return rv;
}
bool x64Parser::Opcode339(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6473, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings340_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
bool x64Parser::Opcode340(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings340_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings341_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
bool x64Parser::Opcode341(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings341_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings342_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode342(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings342_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings343_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 158, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode343(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings343_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings344_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
bool x64Parser::Opcode344(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings344_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings345_10[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
bool x64Parser::Opcode345(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings345_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings346_10[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings346_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 28, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings346_28[] = {
	{ Coding::valSpecified, 24},
	{ Coding::eot },
};
bool x64Parser::Opcode346(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings346_10;
	operand.values[27] = OpcodeCodings346_27;
	operand.values[28] = OpcodeCodings346_28;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode347(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6483, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings348_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode348(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings348_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings349_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode349(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings349_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings350_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode350(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings350_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings351_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode351(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings351_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings352_29[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
bool x64Parser::Opcode352(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings352_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings353_29[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode353(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings353_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings354_29[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode354(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings354_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings355_29[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
bool x64Parser::Opcode355(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings355_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings356_29[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode356(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings356_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings357_29[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
bool x64Parser::Opcode357(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings357_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings358_29[] = {
	{ Coding::valSpecified, 15},
	{ Coding::eot },
};
bool x64Parser::Opcode358(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings358_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings359_29[] = {
	{ Coding::valSpecified, 13},
	{ Coding::eot },
};
bool x64Parser::Opcode359(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings359_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings360_29[] = {
	{ Coding::valSpecified, 12},
	{ Coding::eot },
};
bool x64Parser::Opcode360(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings360_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings361_29[] = {
	{ Coding::valSpecified, 14},
	{ Coding::eot },
};
bool x64Parser::Opcode361(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings361_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings362_29[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
bool x64Parser::Opcode362(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings362_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings363_29[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
bool x64Parser::Opcode363(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings363_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings364_29[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode364(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings364_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings365_29[] = {
	{ Coding::valSpecified, 7},
	{ Coding::eot },
};
bool x64Parser::Opcode365(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings365_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings366_29[] = {
	{ Coding::valSpecified, 3},
	{ Coding::eot },
};
bool x64Parser::Opcode366(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings366_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings367_29[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
bool x64Parser::Opcode367(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings367_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings368_29[] = {
	{ Coding::valSpecified, 14},
	{ Coding::eot },
};
bool x64Parser::Opcode368(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings368_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings369_29[] = {
	{ Coding::valSpecified, 12},
	{ Coding::eot },
};
bool x64Parser::Opcode369(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings369_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings370_29[] = {
	{ Coding::valSpecified, 13},
	{ Coding::eot },
};
bool x64Parser::Opcode370(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings370_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings371_29[] = {
	{ Coding::valSpecified, 15},
	{ Coding::eot },
};
bool x64Parser::Opcode371(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings371_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings372_29[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
bool x64Parser::Opcode372(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings372_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings373_29[] = {
	{ Coding::valSpecified, 11},
	{ Coding::eot },
};
bool x64Parser::Opcode373(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings373_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings374_29[] = {
	{ Coding::valSpecified, 9},
	{ Coding::eot },
};
bool x64Parser::Opcode374(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings374_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings375_29[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
bool x64Parser::Opcode375(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings375_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings376_29[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
bool x64Parser::Opcode376(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings376_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings377_29[] = {
	{ Coding::valSpecified, 10},
	{ Coding::eot },
};
bool x64Parser::Opcode377(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings377_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings378_29[] = {
	{ Coding::valSpecified, 10},
	{ Coding::eot },
};
bool x64Parser::Opcode378(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings378_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings379_29[] = {
	{ Coding::valSpecified, 11},
	{ Coding::eot },
};
bool x64Parser::Opcode379(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings379_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings380_29[] = {
	{ Coding::valSpecified, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode380(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings380_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings381_29[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
bool x64Parser::Opcode381(x64Operand &operand)
{
	operand.values[29] = OpcodeCodings381_29;
	bool rv;
	{
		rv = Opcode14(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings382_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode382(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings382_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings383_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
bool x64Parser::Opcode383(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings383_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings384_27[] = {
	{ Coding::valSpecified, 164},
	{ Coding::eot },
};
bool x64Parser::Opcode384(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings384_27;
	bool rv;
	{
		rv = Opcode17(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings385_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
bool x64Parser::Opcode385(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings385_10;
	bool rv;
	{
		rv = Opcode16(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings386_27[] = {
	{ Coding::valSpecified, 172},
	{ Coding::eot },
};
bool x64Parser::Opcode386(x64Operand &operand)
{
	operand.values[27] = OpcodeCodings386_27;
	bool rv;
	{
		rv = Opcode17(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings387_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings387_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode387(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings387_10;
	operand.values[11] = OpcodeCodings387_11;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings388_10[] = {
	{ Coding::valSpecified, 0},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings388_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode388(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings388_10;
	operand.values[11] = OpcodeCodings388_11;
	bool rv;
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings389_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings389_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode389(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings389_10;
	operand.values[11] = OpcodeCodings389_11;
	bool rv = ParseOperands(tokenBranches6649, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings390_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode390(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings390_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings391_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode391(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings391_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings392_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode392(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings392_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
bool x64Parser::Opcode393(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6655, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings394_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode394(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings394_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings395_11[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode395(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings395_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings396_11[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode396(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings396_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings397_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode397(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings397_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings398_10[] = {
	{ Coding::valSpecified, 1},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings398_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode398(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings398_10;
	operand.values[11] = OpcodeCodings398_11;
	bool rv = ParseOperands(tokenBranches6784, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings399_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings399_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings399_28[] = {
	{ Coding::valSpecified, 40},
	{ Coding::eot },
};
bool x64Parser::Opcode399(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings399_10;
	operand.values[27] = OpcodeCodings399_27;
	operand.values[28] = OpcodeCodings399_28;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings400_11[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
bool x64Parser::Opcode400(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings400_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings401_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode401(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings401_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings402_11[] = {
	{ Coding::valSpecified, 53},
	{ Coding::eot },
};
bool x64Parser::Opcode402(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings402_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings403_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode403(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings403_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode404(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6794, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings405_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode405(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings405_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings406_10[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings406_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode406(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings406_10;
	operand.values[11] = OpcodeCodings406_11;
	bool rv = ParseOperands(tokenBranches6921, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings407_10[] = {
	{ Coding::valSpecified, 5},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings407_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode407(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings407_10;
	operand.values[11] = OpcodeCodings407_11;
	bool rv = ParseOperands(tokenBranches6924, operand);
	if (!rv)
	{
		rv = Opcode18(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings408_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode408(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings408_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings409_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode409(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings409_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings410_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 48, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode410(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings410_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
bool x64Parser::Opcode411(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6930, operand);
	return rv;
}
bool x64Parser::Opcode412(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6959, operand);
	return rv;
}
bool x64Parser::Opcode413(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches6976, operand);
	return rv;
}
bool x64Parser::Opcode414(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7013, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings415_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode415(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings415_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings416_10[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings416_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings416_28[] = {
	{ Coding::valSpecified, 48},
	{ Coding::eot },
};
bool x64Parser::Opcode416(x64Operand &operand)
{
	operand.values[10] = OpcodeCodings416_10;
	operand.values[27] = OpcodeCodings416_27;
	operand.values[28] = OpcodeCodings416_28;
	bool rv;
	{
		rv = Opcode4(operand);
	}
	return rv;
}
bool x64Parser::Opcode417(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7053, operand);
	return rv;
}
bool x64Parser::Opcode418(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7055, operand);
	return rv;
}
bool x64Parser::Opcode419(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7057, operand);
	return rv;
}
bool x64Parser::Opcode420(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7059, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings421_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode421(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings421_11;
	bool rv;
	{
		rv = Opcode1(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings422_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings422_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode422(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings422_18;
	operand.values[11] = OpcodeCodings422_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings423_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings423_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode423(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings423_18;
	operand.values[11] = OpcodeCodings423_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings424_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings424_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode424(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings424_18;
	operand.values[11] = OpcodeCodings424_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings425_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings425_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode425(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings425_18;
	operand.values[11] = OpcodeCodings425_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings426_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings426_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode426(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings426_18;
	operand.values[11] = OpcodeCodings426_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings427_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings427_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode427(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings427_18;
	operand.values[11] = OpcodeCodings427_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings428_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings428_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode428(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings428_18;
	operand.values[11] = OpcodeCodings428_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings429_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings429_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode429(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings429_18;
	operand.values[11] = OpcodeCodings429_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings430_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings430_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode430(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings430_18;
	operand.values[11] = OpcodeCodings430_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings431_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings431_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode431(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings431_18;
	operand.values[11] = OpcodeCodings431_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings432_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings432_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 13, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode432(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings432_18;
	operand.values[11] = OpcodeCodings432_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings433_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings433_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 13, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode433(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings433_18;
	operand.values[11] = OpcodeCodings433_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings434_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings434_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode434(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings434_18;
	operand.values[11] = OpcodeCodings434_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings435_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings435_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode435(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings435_18;
	operand.values[11] = OpcodeCodings435_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings436_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings436_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode436(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings436_18;
	operand.values[11] = OpcodeCodings436_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings437_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings437_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode437(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings437_18;
	operand.values[11] = OpcodeCodings437_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings438_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings438_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode438(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings438_18;
	operand.values[11] = OpcodeCodings438_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings439_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings439_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode439(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings439_18;
	operand.values[11] = OpcodeCodings439_11;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings440_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings440_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode440(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings440_18;
	operand.values[11] = OpcodeCodings440_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings441_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings441_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode441(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings441_18;
	operand.values[11] = OpcodeCodings441_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings442_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings442_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode442(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings442_18;
	operand.values[11] = OpcodeCodings442_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings443_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings443_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode443(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings443_18;
	operand.values[11] = OpcodeCodings443_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings444_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings444_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode444(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings444_18;
	operand.values[11] = OpcodeCodings444_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings445_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings445_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode445(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings445_18;
	operand.values[11] = OpcodeCodings445_11;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings446_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings446_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode446(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings446_18;
	operand.values[11] = OpcodeCodings446_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings447_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings447_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode447(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings447_18;
	operand.values[11] = OpcodeCodings447_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings448_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings448_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode448(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings448_18;
	operand.values[11] = OpcodeCodings448_11;
	bool rv;
	{
		rv = Opcode26(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings449_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings449_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode449(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings449_18;
	operand.values[11] = OpcodeCodings449_11;
	bool rv;
	{
		rv = Opcode26(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings450_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings450_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode450(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings450_18;
	operand.values[11] = OpcodeCodings450_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings451_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings451_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode451(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings451_18;
	operand.values[11] = OpcodeCodings451_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings452_18[] = {
	{ Coding::valSpecified, 102},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings452_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode452(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings452_18;
	operand.values[11] = OpcodeCodings452_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings453_18[] = {
	{ Coding::valSpecified, 102},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings453_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode453(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings453_18;
	operand.values[11] = OpcodeCodings453_11;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings454_18[] = {
	{ Coding::valSpecified, 243},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings454_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode454(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings454_18;
	operand.values[11] = OpcodeCodings454_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings455_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings455_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode455(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings455_18;
	operand.values[11] = OpcodeCodings455_11;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings456_18[] = {
	{ Coding::valSpecified, 242},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings456_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode456(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings456_18;
	operand.values[11] = OpcodeCodings456_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings457_18[] = {
	{ Coding::valSpecified, 243},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings457_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode457(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings457_18;
	operand.values[11] = OpcodeCodings457_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings458_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings458_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode458(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings458_18;
	operand.values[11] = OpcodeCodings458_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings459_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings459_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode459(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings459_18;
	operand.values[11] = OpcodeCodings459_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings460_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings460_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode460(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings460_18;
	operand.values[11] = OpcodeCodings460_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings461_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings461_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode461(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings461_18;
	operand.values[11] = OpcodeCodings461_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings462_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings462_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 65, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode462(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings462_18;
	operand.values[11] = OpcodeCodings462_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings463_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings463_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 65, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode463(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings463_18;
	operand.values[11] = OpcodeCodings463_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings464_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings464_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode464(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings464_18;
	operand.values[11] = OpcodeCodings464_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings465_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings465_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode465(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings465_18;
	operand.values[11] = OpcodeCodings465_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings466_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings466_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode466(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings466_18;
	operand.values[11] = OpcodeCodings466_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings467_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings467_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode467(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings467_18;
	operand.values[11] = OpcodeCodings467_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
bool x64Parser::Opcode468(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7108, operand);
	return rv;
}
bool x64Parser::Opcode469(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7115, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings470_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings470_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode470(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings470_18;
	operand.values[11] = OpcodeCodings470_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings471_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings471_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode471(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings471_18;
	operand.values[11] = OpcodeCodings471_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings472_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings472_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode472(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings472_18;
	operand.values[11] = OpcodeCodings472_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings473_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings473_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode473(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings473_18;
	operand.values[11] = OpcodeCodings473_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings474_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings474_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode474(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings474_18;
	operand.values[11] = OpcodeCodings474_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings475_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode475(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings475_11;
	bool rv;
	{
		rv = Opcode0(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings476_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings476_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode476(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings476_18;
	operand.values[11] = OpcodeCodings476_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings477_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings477_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode477(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings477_18;
	operand.values[11] = OpcodeCodings477_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings478_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings478_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode478(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings478_18;
	operand.values[11] = OpcodeCodings478_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings479_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 7},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings479_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode479(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings479_18;
	operand.values[11] = OpcodeCodings479_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings480_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode480(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings480_11;
	bool rv = true;
	return rv;
}
Coding x64Parser::OpcodeCodings481_18[] = {
	{ Coding::valSpecified, 102},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings481_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode481(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings481_18;
	operand.values[27] = OpcodeCodings481_27;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings482_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings482_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode482(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings482_18;
	operand.values[27] = OpcodeCodings482_27;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
bool x64Parser::Opcode483(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7132, operand);
	return rv;
}
bool x64Parser::Opcode484(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7151, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings485_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings485_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode485(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings485_18;
	operand.values[11] = OpcodeCodings485_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings486_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings486_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode486(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings486_18;
	operand.values[11] = OpcodeCodings486_11;
	bool rv;
	{
		rv = Opcode23(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings487_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings487_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode487(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings487_18;
	operand.values[11] = OpcodeCodings487_11;
	bool rv;
	{
		rv = Opcode21(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings488_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings488_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode488(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings488_18;
	operand.values[11] = OpcodeCodings488_11;
	bool rv;
	{
		rv = Opcode21(operand);
	}
	return rv;
}
bool x64Parser::Opcode489(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7174, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings490_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings490_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode490(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings490_18;
	operand.values[11] = OpcodeCodings490_11;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings491_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings491_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode491(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings491_18;
	operand.values[11] = OpcodeCodings491_11;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
bool x64Parser::Opcode492(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7183, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings493_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings493_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode493(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings493_18;
	operand.values[11] = OpcodeCodings493_11;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings494_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings494_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode494(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings494_18;
	operand.values[11] = OpcodeCodings494_11;
	bool rv;
	{
		rv = Opcode22(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings495_18[] = {
	{ Coding::valSpecified, 102},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings495_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode495(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings495_18;
	operand.values[11] = OpcodeCodings495_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings496_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings496_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode496(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings496_18;
	operand.values[11] = OpcodeCodings496_11;
	bool rv;
	{
		rv = Opcode25(operand);
	}
	return rv;
}
bool x64Parser::Opcode497(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7194, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings498_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode498(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings498_11;
	bool rv = ParseOperands(tokenBranches7201, operand);
	return rv;
}
bool x64Parser::Opcode499(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7211, operand);
	return rv;
}
bool x64Parser::Opcode500(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7218, operand);
	return rv;
}
bool x64Parser::Opcode501(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7225, operand);
	return rv;
}
bool x64Parser::Opcode502(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7229, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings503_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings503_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode503(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings503_18;
	operand.values[11] = OpcodeCodings503_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings504_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings504_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode504(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings504_18;
	operand.values[11] = OpcodeCodings504_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings505_18[] = {
	{ Coding::valSpecified, 243},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings505_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode505(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings505_18;
	operand.values[27] = OpcodeCodings505_27;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings506_18[] = {
	{ Coding::valSpecified, 102},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings506_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode506(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings506_18;
	operand.values[27] = OpcodeCodings506_27;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings507_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings507_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode507(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings507_18;
	operand.values[27] = OpcodeCodings507_27;
	bool rv;
	{
		rv = Opcode20(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings508_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings508_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 66, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode508(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings508_18;
	operand.values[11] = OpcodeCodings508_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings509_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings509_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode509(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings509_18;
	operand.values[11] = OpcodeCodings509_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings510_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings510_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode510(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings510_18;
	operand.values[11] = OpcodeCodings510_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings511_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings511_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode511(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings511_18;
	operand.values[11] = OpcodeCodings511_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings512_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings512_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode512(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings512_18;
	operand.values[11] = OpcodeCodings512_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings513_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings513_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode513(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings513_18;
	operand.values[11] = OpcodeCodings513_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings514_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings514_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode514(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings514_18;
	operand.values[11] = OpcodeCodings514_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings515_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode515(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings515_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings516_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode516(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings516_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings517_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode517(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings517_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings518_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode518(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings518_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings519_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode519(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings519_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings520_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode520(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings520_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings521_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode521(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings521_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings522_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode522(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings522_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings523_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode523(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings523_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings524_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode524(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings524_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings525_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode525(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings525_11;
	bool rv = ParseOperands(tokenBranches7255, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings526_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode526(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings526_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings527_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode527(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings527_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings528_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode528(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings528_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings529_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode529(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings529_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings530_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings530_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 14, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode530(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings530_18;
	operand.values[11] = OpcodeCodings530_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings531_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode531(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings531_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings532_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode532(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings532_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings533_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 213, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode533(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings533_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings534_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings534_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode534(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings534_18;
	operand.values[11] = OpcodeCodings534_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings535_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings535_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode535(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings535_18;
	operand.values[11] = OpcodeCodings535_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings536_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 100, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode536(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings536_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings537_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode537(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings537_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings538_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 101, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode538(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings538_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings539_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings539_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode539(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings539_18;
	operand.values[11] = OpcodeCodings539_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings540_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings540_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode540(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings540_18;
	operand.values[11] = OpcodeCodings540_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings541_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode541(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings541_11;
	bool rv = ParseOperands(tokenBranches7286, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings542_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode542(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings542_11;
	bool rv = ParseOperands(tokenBranches7297, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings543_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode543(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings543_11;
	bool rv = ParseOperands(tokenBranches7308, operand);
	return rv;
}
bool x64Parser::Opcode544(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7319, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings545_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode545(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings545_11;
	bool rv = ParseOperands(tokenBranches7355, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings546_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode546(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings546_11;
	bool rv = ParseOperands(tokenBranches7366, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings547_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode547(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings547_11;
	bool rv = ParseOperands(tokenBranches7377, operand);
	return rv;
}
bool x64Parser::Opcode548(x64Operand &operand)
{
	bool rv = ParseOperands(tokenBranches7388, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings549_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 245, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode549(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings549_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings550_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode550(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings550_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings551_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode551(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings551_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings552_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode552(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings552_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings553_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode553(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings553_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings554_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode554(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings554_11;
	bool rv = ParseOperands(tokenBranches7414, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings555_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode555(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings555_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings556_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 229, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode556(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings556_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings557_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 213, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode557(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings557_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings558_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode558(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings558_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings559_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode559(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings559_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings560_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings560_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode560(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings560_18;
	operand.values[11] = OpcodeCodings560_11;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings561_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings561_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode561(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings561_18;
	operand.values[11] = OpcodeCodings561_11;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings562_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings562_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode562(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings562_18;
	operand.values[11] = OpcodeCodings562_11;
	bool rv;
	{
		rv = Opcode28(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings563_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings563_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode563(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings563_18;
	operand.values[11] = OpcodeCodings563_11;
	bool rv = ParseOperands(tokenBranches7438, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings564_30[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings564_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings564_28[] = {
	{ Coding::valSpecified, 242},
	{ Coding::eot },
};
bool x64Parser::Opcode564(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings564_30;
	operand.values[27] = OpcodeCodings564_27;
	operand.values[28] = OpcodeCodings564_28;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings565_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings565_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode565(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings565_18;
	operand.values[11] = OpcodeCodings565_11;
	bool rv = ParseOperands(tokenBranches7445, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings566_30[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings566_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings566_28[] = {
	{ Coding::valSpecified, 243},
	{ Coding::eot },
};
bool x64Parser::Opcode566(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings566_30;
	operand.values[27] = OpcodeCodings566_27;
	operand.values[28] = OpcodeCodings566_28;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings567_30[] = {
	{ Coding::valSpecified, 6},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings567_32[] = {
	{ Coding::valSpecified, 241},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings567_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode567(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings567_30;
	operand.values[32] = OpcodeCodings567_32;
	operand.values[27] = OpcodeCodings567_27;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings568_30[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings568_32[] = {
	{ Coding::valSpecified, 226},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings568_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode568(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings568_30;
	operand.values[32] = OpcodeCodings568_32;
	operand.values[27] = OpcodeCodings568_27;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings569_30[] = {
	{ Coding::valSpecified, 4},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings569_32[] = {
	{ Coding::valSpecified, 225},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings569_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode569(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings569_30;
	operand.values[32] = OpcodeCodings569_32;
	operand.values[27] = OpcodeCodings569_27;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings570_30[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings570_32[] = {
	{ Coding::valSpecified, 210},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings570_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode570(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings570_30;
	operand.values[32] = OpcodeCodings570_32;
	operand.values[27] = OpcodeCodings570_27;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings571_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings571_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode571(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings571_18;
	operand.values[11] = OpcodeCodings571_11;
	bool rv = ParseOperands(tokenBranches7457, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings572_30[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings572_32[] = {
	{ Coding::valSpecified, 211},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings572_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode572(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings572_30;
	operand.values[32] = OpcodeCodings572_32;
	operand.values[27] = OpcodeCodings572_27;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings573_30[] = {
	{ Coding::valSpecified, 2},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings573_32[] = {
	{ Coding::valSpecified, 209},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings573_27[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode573(x64Operand &operand)
{
	operand.values[30] = OpcodeCodings573_30;
	operand.values[32] = OpcodeCodings573_32;
	operand.values[27] = OpcodeCodings573_27;
	bool rv;
	{
		rv = Opcode29(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings574_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode574(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings574_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings575_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode575(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings575_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings576_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode576(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings576_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings577_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode577(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings577_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings578_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode578(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings578_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings579_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode579(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings579_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings580_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode580(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings580_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings581_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode581(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings581_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings582_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode582(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings582_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings583_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings583_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode583(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings583_18;
	operand.values[11] = OpcodeCodings583_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings584_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode584(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings584_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings585_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode585(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings585_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings586_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode586(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings586_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings587_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings587_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode587(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings587_18;
	operand.values[11] = OpcodeCodings587_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings588_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode588(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings588_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings589_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode589(x64Operand &operand)
{
	operand.values[11] = OpcodeCodings589_11;
	bool rv;
	{
		rv = Opcode27(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings590_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings590_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode590(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings590_18;
	operand.values[11] = OpcodeCodings590_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings591_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings591_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode591(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings591_18;
	operand.values[11] = OpcodeCodings591_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings592_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings592_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode592(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings592_18;
	operand.values[11] = OpcodeCodings592_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings593_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings593_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode593(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings593_18;
	operand.values[11] = OpcodeCodings593_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings594_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings594_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode594(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings594_18;
	operand.values[11] = OpcodeCodings594_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings595_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings595_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode595(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings595_18;
	operand.values[11] = OpcodeCodings595_11;
	bool rv;
	{
		rv = Opcode30(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings596_18[] = {
	{ Coding::valSpecified, 102},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings596_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode596(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings596_18;
	operand.values[11] = OpcodeCodings596_11;
	bool rv = ParseOperands(tokenBranches7488, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings597_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings597_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode597(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings597_18;
	operand.values[11] = OpcodeCodings597_11;
	bool rv = ParseOperands(tokenBranches7499, operand);
	return rv;
}
Coding x64Parser::OpcodeCodings598_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings598_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode598(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings598_18;
	operand.values[11] = OpcodeCodings598_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings599_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings599_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode599(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings599_18;
	operand.values[11] = OpcodeCodings599_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings600_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings600_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode600(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings600_18;
	operand.values[11] = OpcodeCodings600_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings601_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings601_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode601(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings601_18;
	operand.values[11] = OpcodeCodings601_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings602_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings602_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode602(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings602_18;
	operand.values[11] = OpcodeCodings602_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings603_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings603_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode603(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings603_18;
	operand.values[11] = OpcodeCodings603_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings604_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings604_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode604(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings604_18;
	operand.values[11] = OpcodeCodings604_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings605_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings605_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode605(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings605_18;
	operand.values[11] = OpcodeCodings605_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings606_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings606_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode606(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings606_18;
	operand.values[11] = OpcodeCodings606_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings607_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings607_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode607(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings607_18;
	operand.values[11] = OpcodeCodings607_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings608_18[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8},
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings608_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode608(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings608_18;
	operand.values[11] = OpcodeCodings608_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
Coding x64Parser::OpcodeCodings609_18[] = {
	{ Coding::eot },
};
Coding x64Parser::OpcodeCodings609_11[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8},
	{ Coding::eot },
};
bool x64Parser::Opcode609(x64Operand &operand)
{
	operand.values[18] = OpcodeCodings609_18;
	operand.values[11] = OpcodeCodings609_11;
	bool rv;
	{
		rv = Opcode19(operand);
	}
	return rv;
}
bool x64Parser::Opcode610(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode611(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode612(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode613(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode614(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode615(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode616(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode617(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode618(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode619(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode620(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
bool x64Parser::Opcode621(x64Operand &operand)
{
	bool rv = true;
	return rv;
}
x64Parser::DispatchType x64Parser::DispatchTable[622] = {
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&x64Parser::Opcode32,
	&x64Parser::Opcode33,
	&x64Parser::Opcode34,
	&x64Parser::Opcode35,
	&x64Parser::Opcode36,
	&x64Parser::Opcode37,
	&x64Parser::Opcode38,
	&x64Parser::Opcode39,
	&x64Parser::Opcode40,
	&x64Parser::Opcode41,
	&x64Parser::Opcode42,
	&x64Parser::Opcode43,
	&x64Parser::Opcode44,
	&x64Parser::Opcode45,
	&x64Parser::Opcode46,
	&x64Parser::Opcode47,
	&x64Parser::Opcode48,
	&x64Parser::Opcode49,
	&x64Parser::Opcode50,
	&x64Parser::Opcode51,
	&x64Parser::Opcode52,
	&x64Parser::Opcode53,
	&x64Parser::Opcode54,
	&x64Parser::Opcode55,
	&x64Parser::Opcode56,
	&x64Parser::Opcode57,
	&x64Parser::Opcode58,
	&x64Parser::Opcode59,
	&x64Parser::Opcode60,
	&x64Parser::Opcode61,
	&x64Parser::Opcode62,
	&x64Parser::Opcode63,
	&x64Parser::Opcode64,
	&x64Parser::Opcode65,
	&x64Parser::Opcode66,
	&x64Parser::Opcode67,
	&x64Parser::Opcode68,
	&x64Parser::Opcode69,
	&x64Parser::Opcode70,
	&x64Parser::Opcode71,
	&x64Parser::Opcode72,
	&x64Parser::Opcode73,
	&x64Parser::Opcode74,
	&x64Parser::Opcode75,
	&x64Parser::Opcode76,
	&x64Parser::Opcode77,
	&x64Parser::Opcode78,
	&x64Parser::Opcode79,
	&x64Parser::Opcode80,
	&x64Parser::Opcode81,
	&x64Parser::Opcode82,
	&x64Parser::Opcode83,
	&x64Parser::Opcode84,
	&x64Parser::Opcode85,
	&x64Parser::Opcode86,
	&x64Parser::Opcode87,
	&x64Parser::Opcode88,
	&x64Parser::Opcode89,
	&x64Parser::Opcode90,
	&x64Parser::Opcode91,
	&x64Parser::Opcode92,
	&x64Parser::Opcode93,
	&x64Parser::Opcode94,
	&x64Parser::Opcode95,
	&x64Parser::Opcode96,
	&x64Parser::Opcode97,
	&x64Parser::Opcode98,
	&x64Parser::Opcode99,
	&x64Parser::Opcode100,
	&x64Parser::Opcode101,
	&x64Parser::Opcode102,
	&x64Parser::Opcode103,
	&x64Parser::Opcode104,
	&x64Parser::Opcode105,
	&x64Parser::Opcode106,
	&x64Parser::Opcode107,
	&x64Parser::Opcode108,
	&x64Parser::Opcode109,
	&x64Parser::Opcode110,
	&x64Parser::Opcode111,
	&x64Parser::Opcode112,
	&x64Parser::Opcode113,
	&x64Parser::Opcode114,
	&x64Parser::Opcode115,
	&x64Parser::Opcode116,
	&x64Parser::Opcode117,
	&x64Parser::Opcode118,
	&x64Parser::Opcode119,
	&x64Parser::Opcode120,
	&x64Parser::Opcode121,
	&x64Parser::Opcode122,
	&x64Parser::Opcode123,
	&x64Parser::Opcode124,
	&x64Parser::Opcode125,
	&x64Parser::Opcode126,
	&x64Parser::Opcode127,
	&x64Parser::Opcode128,
	&x64Parser::Opcode129,
	&x64Parser::Opcode130,
	&x64Parser::Opcode131,
	&x64Parser::Opcode132,
	&x64Parser::Opcode133,
	&x64Parser::Opcode134,
	&x64Parser::Opcode135,
	&x64Parser::Opcode136,
	&x64Parser::Opcode137,
	&x64Parser::Opcode138,
	&x64Parser::Opcode139,
	&x64Parser::Opcode140,
	&x64Parser::Opcode141,
	&x64Parser::Opcode142,
	&x64Parser::Opcode143,
	&x64Parser::Opcode144,
	&x64Parser::Opcode145,
	&x64Parser::Opcode146,
	&x64Parser::Opcode147,
	&x64Parser::Opcode148,
	&x64Parser::Opcode149,
	&x64Parser::Opcode150,
	&x64Parser::Opcode151,
	&x64Parser::Opcode152,
	&x64Parser::Opcode153,
	&x64Parser::Opcode154,
	&x64Parser::Opcode155,
	&x64Parser::Opcode156,
	&x64Parser::Opcode157,
	&x64Parser::Opcode158,
	&x64Parser::Opcode159,
	&x64Parser::Opcode160,
	&x64Parser::Opcode161,
	&x64Parser::Opcode162,
	&x64Parser::Opcode163,
	&x64Parser::Opcode164,
	&x64Parser::Opcode165,
	&x64Parser::Opcode166,
	&x64Parser::Opcode167,
	&x64Parser::Opcode168,
	&x64Parser::Opcode169,
	&x64Parser::Opcode170,
	&x64Parser::Opcode171,
	&x64Parser::Opcode172,
	&x64Parser::Opcode173,
	&x64Parser::Opcode174,
	&x64Parser::Opcode175,
	&x64Parser::Opcode176,
	&x64Parser::Opcode177,
	&x64Parser::Opcode178,
	&x64Parser::Opcode179,
	&x64Parser::Opcode180,
	&x64Parser::Opcode181,
	&x64Parser::Opcode182,
	&x64Parser::Opcode183,
	&x64Parser::Opcode184,
	&x64Parser::Opcode185,
	&x64Parser::Opcode186,
	&x64Parser::Opcode187,
	&x64Parser::Opcode188,
	&x64Parser::Opcode189,
	&x64Parser::Opcode190,
	&x64Parser::Opcode191,
	&x64Parser::Opcode192,
	&x64Parser::Opcode193,
	&x64Parser::Opcode194,
	&x64Parser::Opcode195,
	&x64Parser::Opcode196,
	&x64Parser::Opcode197,
	&x64Parser::Opcode198,
	&x64Parser::Opcode199,
	&x64Parser::Opcode200,
	&x64Parser::Opcode201,
	&x64Parser::Opcode202,
	&x64Parser::Opcode203,
	&x64Parser::Opcode204,
	&x64Parser::Opcode205,
	&x64Parser::Opcode206,
	&x64Parser::Opcode207,
	&x64Parser::Opcode208,
	&x64Parser::Opcode209,
	&x64Parser::Opcode210,
	&x64Parser::Opcode211,
	&x64Parser::Opcode212,
	&x64Parser::Opcode213,
	&x64Parser::Opcode214,
	&x64Parser::Opcode215,
	&x64Parser::Opcode216,
	&x64Parser::Opcode217,
	&x64Parser::Opcode218,
	&x64Parser::Opcode219,
	&x64Parser::Opcode220,
	&x64Parser::Opcode221,
	&x64Parser::Opcode222,
	&x64Parser::Opcode223,
	&x64Parser::Opcode224,
	&x64Parser::Opcode225,
	&x64Parser::Opcode226,
	&x64Parser::Opcode227,
	&x64Parser::Opcode228,
	&x64Parser::Opcode229,
	&x64Parser::Opcode230,
	&x64Parser::Opcode231,
	&x64Parser::Opcode232,
	&x64Parser::Opcode233,
	&x64Parser::Opcode234,
	&x64Parser::Opcode235,
	&x64Parser::Opcode236,
	&x64Parser::Opcode237,
	&x64Parser::Opcode238,
	&x64Parser::Opcode239,
	&x64Parser::Opcode240,
	&x64Parser::Opcode241,
	&x64Parser::Opcode242,
	&x64Parser::Opcode243,
	&x64Parser::Opcode244,
	&x64Parser::Opcode245,
	&x64Parser::Opcode246,
	&x64Parser::Opcode247,
	&x64Parser::Opcode248,
	&x64Parser::Opcode249,
	&x64Parser::Opcode250,
	&x64Parser::Opcode251,
	&x64Parser::Opcode252,
	&x64Parser::Opcode253,
	&x64Parser::Opcode254,
	&x64Parser::Opcode255,
	&x64Parser::Opcode256,
	&x64Parser::Opcode257,
	&x64Parser::Opcode258,
	&x64Parser::Opcode259,
	&x64Parser::Opcode260,
	&x64Parser::Opcode261,
	&x64Parser::Opcode262,
	&x64Parser::Opcode263,
	&x64Parser::Opcode264,
	&x64Parser::Opcode265,
	&x64Parser::Opcode266,
	&x64Parser::Opcode267,
	&x64Parser::Opcode268,
	&x64Parser::Opcode269,
	&x64Parser::Opcode270,
	&x64Parser::Opcode271,
	&x64Parser::Opcode272,
	&x64Parser::Opcode273,
	&x64Parser::Opcode274,
	&x64Parser::Opcode275,
	&x64Parser::Opcode276,
	&x64Parser::Opcode277,
	&x64Parser::Opcode278,
	&x64Parser::Opcode279,
	&x64Parser::Opcode280,
	&x64Parser::Opcode281,
	&x64Parser::Opcode282,
	&x64Parser::Opcode283,
	&x64Parser::Opcode284,
	&x64Parser::Opcode285,
	&x64Parser::Opcode286,
	&x64Parser::Opcode287,
	&x64Parser::Opcode288,
	&x64Parser::Opcode289,
	&x64Parser::Opcode290,
	&x64Parser::Opcode291,
	&x64Parser::Opcode292,
	&x64Parser::Opcode293,
	&x64Parser::Opcode294,
	&x64Parser::Opcode295,
	&x64Parser::Opcode296,
	&x64Parser::Opcode297,
	&x64Parser::Opcode298,
	&x64Parser::Opcode299,
	&x64Parser::Opcode300,
	&x64Parser::Opcode301,
	&x64Parser::Opcode302,
	&x64Parser::Opcode303,
	&x64Parser::Opcode304,
	&x64Parser::Opcode305,
	&x64Parser::Opcode306,
	&x64Parser::Opcode307,
	&x64Parser::Opcode308,
	&x64Parser::Opcode309,
	&x64Parser::Opcode310,
	&x64Parser::Opcode311,
	&x64Parser::Opcode312,
	&x64Parser::Opcode313,
	&x64Parser::Opcode314,
	&x64Parser::Opcode315,
	&x64Parser::Opcode316,
	&x64Parser::Opcode317,
	&x64Parser::Opcode318,
	&x64Parser::Opcode319,
	&x64Parser::Opcode320,
	&x64Parser::Opcode321,
	&x64Parser::Opcode322,
	&x64Parser::Opcode323,
	&x64Parser::Opcode324,
	&x64Parser::Opcode325,
	&x64Parser::Opcode326,
	&x64Parser::Opcode327,
	&x64Parser::Opcode328,
	&x64Parser::Opcode329,
	&x64Parser::Opcode330,
	&x64Parser::Opcode331,
	&x64Parser::Opcode332,
	&x64Parser::Opcode333,
	&x64Parser::Opcode334,
	&x64Parser::Opcode335,
	&x64Parser::Opcode336,
	&x64Parser::Opcode337,
	&x64Parser::Opcode338,
	&x64Parser::Opcode339,
	&x64Parser::Opcode340,
	&x64Parser::Opcode341,
	&x64Parser::Opcode342,
	&x64Parser::Opcode343,
	&x64Parser::Opcode344,
	&x64Parser::Opcode345,
	&x64Parser::Opcode346,
	&x64Parser::Opcode347,
	&x64Parser::Opcode348,
	&x64Parser::Opcode349,
	&x64Parser::Opcode350,
	&x64Parser::Opcode351,
	&x64Parser::Opcode352,
	&x64Parser::Opcode353,
	&x64Parser::Opcode354,
	&x64Parser::Opcode355,
	&x64Parser::Opcode356,
	&x64Parser::Opcode357,
	&x64Parser::Opcode358,
	&x64Parser::Opcode359,
	&x64Parser::Opcode360,
	&x64Parser::Opcode361,
	&x64Parser::Opcode362,
	&x64Parser::Opcode363,
	&x64Parser::Opcode364,
	&x64Parser::Opcode365,
	&x64Parser::Opcode366,
	&x64Parser::Opcode367,
	&x64Parser::Opcode368,
	&x64Parser::Opcode369,
	&x64Parser::Opcode370,
	&x64Parser::Opcode371,
	&x64Parser::Opcode372,
	&x64Parser::Opcode373,
	&x64Parser::Opcode374,
	&x64Parser::Opcode375,
	&x64Parser::Opcode376,
	&x64Parser::Opcode377,
	&x64Parser::Opcode378,
	&x64Parser::Opcode379,
	&x64Parser::Opcode380,
	&x64Parser::Opcode381,
	&x64Parser::Opcode382,
	&x64Parser::Opcode383,
	&x64Parser::Opcode384,
	&x64Parser::Opcode385,
	&x64Parser::Opcode386,
	&x64Parser::Opcode387,
	&x64Parser::Opcode388,
	&x64Parser::Opcode389,
	&x64Parser::Opcode390,
	&x64Parser::Opcode391,
	&x64Parser::Opcode392,
	&x64Parser::Opcode393,
	&x64Parser::Opcode394,
	&x64Parser::Opcode395,
	&x64Parser::Opcode396,
	&x64Parser::Opcode397,
	&x64Parser::Opcode398,
	&x64Parser::Opcode399,
	&x64Parser::Opcode400,
	&x64Parser::Opcode401,
	&x64Parser::Opcode402,
	&x64Parser::Opcode403,
	&x64Parser::Opcode404,
	&x64Parser::Opcode405,
	&x64Parser::Opcode406,
	&x64Parser::Opcode407,
	&x64Parser::Opcode408,
	&x64Parser::Opcode409,
	&x64Parser::Opcode410,
	&x64Parser::Opcode411,
	&x64Parser::Opcode412,
	&x64Parser::Opcode413,
	&x64Parser::Opcode414,
	&x64Parser::Opcode415,
	&x64Parser::Opcode416,
	&x64Parser::Opcode417,
	&x64Parser::Opcode418,
	&x64Parser::Opcode419,
	&x64Parser::Opcode420,
	&x64Parser::Opcode421,
	&x64Parser::Opcode422,
	&x64Parser::Opcode423,
	&x64Parser::Opcode424,
	&x64Parser::Opcode425,
	&x64Parser::Opcode426,
	&x64Parser::Opcode427,
	&x64Parser::Opcode428,
	&x64Parser::Opcode429,
	&x64Parser::Opcode430,
	&x64Parser::Opcode431,
	&x64Parser::Opcode432,
	&x64Parser::Opcode433,
	&x64Parser::Opcode434,
	&x64Parser::Opcode435,
	&x64Parser::Opcode436,
	&x64Parser::Opcode437,
	&x64Parser::Opcode438,
	&x64Parser::Opcode439,
	&x64Parser::Opcode440,
	&x64Parser::Opcode441,
	&x64Parser::Opcode442,
	&x64Parser::Opcode443,
	&x64Parser::Opcode444,
	&x64Parser::Opcode445,
	&x64Parser::Opcode446,
	&x64Parser::Opcode447,
	&x64Parser::Opcode448,
	&x64Parser::Opcode449,
	&x64Parser::Opcode450,
	&x64Parser::Opcode451,
	&x64Parser::Opcode452,
	&x64Parser::Opcode453,
	&x64Parser::Opcode454,
	&x64Parser::Opcode455,
	&x64Parser::Opcode456,
	&x64Parser::Opcode457,
	&x64Parser::Opcode458,
	&x64Parser::Opcode459,
	&x64Parser::Opcode460,
	&x64Parser::Opcode461,
	&x64Parser::Opcode462,
	&x64Parser::Opcode463,
	&x64Parser::Opcode464,
	&x64Parser::Opcode465,
	&x64Parser::Opcode466,
	&x64Parser::Opcode467,
	&x64Parser::Opcode468,
	&x64Parser::Opcode469,
	&x64Parser::Opcode470,
	&x64Parser::Opcode471,
	&x64Parser::Opcode472,
	&x64Parser::Opcode473,
	&x64Parser::Opcode474,
	&x64Parser::Opcode475,
	&x64Parser::Opcode476,
	&x64Parser::Opcode477,
	&x64Parser::Opcode478,
	&x64Parser::Opcode479,
	&x64Parser::Opcode480,
	&x64Parser::Opcode481,
	&x64Parser::Opcode482,
	&x64Parser::Opcode483,
	&x64Parser::Opcode484,
	&x64Parser::Opcode485,
	&x64Parser::Opcode486,
	&x64Parser::Opcode487,
	&x64Parser::Opcode488,
	&x64Parser::Opcode489,
	&x64Parser::Opcode490,
	&x64Parser::Opcode491,
	&x64Parser::Opcode492,
	&x64Parser::Opcode493,
	&x64Parser::Opcode494,
	&x64Parser::Opcode495,
	&x64Parser::Opcode496,
	&x64Parser::Opcode497,
	&x64Parser::Opcode498,
	&x64Parser::Opcode499,
	&x64Parser::Opcode500,
	&x64Parser::Opcode501,
	&x64Parser::Opcode502,
	&x64Parser::Opcode503,
	&x64Parser::Opcode504,
	&x64Parser::Opcode505,
	&x64Parser::Opcode506,
	&x64Parser::Opcode507,
	&x64Parser::Opcode508,
	&x64Parser::Opcode509,
	&x64Parser::Opcode510,
	&x64Parser::Opcode511,
	&x64Parser::Opcode512,
	&x64Parser::Opcode513,
	&x64Parser::Opcode514,
	&x64Parser::Opcode515,
	&x64Parser::Opcode516,
	&x64Parser::Opcode517,
	&x64Parser::Opcode518,
	&x64Parser::Opcode519,
	&x64Parser::Opcode520,
	&x64Parser::Opcode521,
	&x64Parser::Opcode522,
	&x64Parser::Opcode523,
	&x64Parser::Opcode524,
	&x64Parser::Opcode525,
	&x64Parser::Opcode526,
	&x64Parser::Opcode527,
	&x64Parser::Opcode528,
	&x64Parser::Opcode529,
	&x64Parser::Opcode530,
	&x64Parser::Opcode531,
	&x64Parser::Opcode532,
	&x64Parser::Opcode533,
	&x64Parser::Opcode534,
	&x64Parser::Opcode535,
	&x64Parser::Opcode536,
	&x64Parser::Opcode537,
	&x64Parser::Opcode538,
	&x64Parser::Opcode539,
	&x64Parser::Opcode540,
	&x64Parser::Opcode541,
	&x64Parser::Opcode542,
	&x64Parser::Opcode543,
	&x64Parser::Opcode544,
	&x64Parser::Opcode545,
	&x64Parser::Opcode546,
	&x64Parser::Opcode547,
	&x64Parser::Opcode548,
	&x64Parser::Opcode549,
	&x64Parser::Opcode550,
	&x64Parser::Opcode551,
	&x64Parser::Opcode552,
	&x64Parser::Opcode553,
	&x64Parser::Opcode554,
	&x64Parser::Opcode555,
	&x64Parser::Opcode556,
	&x64Parser::Opcode557,
	&x64Parser::Opcode558,
	&x64Parser::Opcode559,
	&x64Parser::Opcode560,
	&x64Parser::Opcode561,
	&x64Parser::Opcode562,
	&x64Parser::Opcode563,
	&x64Parser::Opcode564,
	&x64Parser::Opcode565,
	&x64Parser::Opcode566,
	&x64Parser::Opcode567,
	&x64Parser::Opcode568,
	&x64Parser::Opcode569,
	&x64Parser::Opcode570,
	&x64Parser::Opcode571,
	&x64Parser::Opcode572,
	&x64Parser::Opcode573,
	&x64Parser::Opcode574,
	&x64Parser::Opcode575,
	&x64Parser::Opcode576,
	&x64Parser::Opcode577,
	&x64Parser::Opcode578,
	&x64Parser::Opcode579,
	&x64Parser::Opcode580,
	&x64Parser::Opcode581,
	&x64Parser::Opcode582,
	&x64Parser::Opcode583,
	&x64Parser::Opcode584,
	&x64Parser::Opcode585,
	&x64Parser::Opcode586,
	&x64Parser::Opcode587,
	&x64Parser::Opcode588,
	&x64Parser::Opcode589,
	&x64Parser::Opcode590,
	&x64Parser::Opcode591,
	&x64Parser::Opcode592,
	&x64Parser::Opcode593,
	&x64Parser::Opcode594,
	&x64Parser::Opcode595,
	&x64Parser::Opcode596,
	&x64Parser::Opcode597,
	&x64Parser::Opcode598,
	&x64Parser::Opcode599,
	&x64Parser::Opcode600,
	&x64Parser::Opcode601,
	&x64Parser::Opcode602,
	&x64Parser::Opcode603,
	&x64Parser::Opcode604,
	&x64Parser::Opcode605,
	&x64Parser::Opcode606,
	&x64Parser::Opcode607,
	&x64Parser::Opcode608,
	&x64Parser::Opcode609,
	&x64Parser::Opcode610,
	&x64Parser::Opcode611,
	&x64Parser::Opcode612,
	&x64Parser::Opcode613,
	&x64Parser::Opcode614,
	&x64Parser::Opcode615,
	&x64Parser::Opcode616,
	&x64Parser::Opcode617,
	&x64Parser::Opcode618,
	&x64Parser::Opcode619,
	&x64Parser::Opcode620,
	&x64Parser::Opcode621,
};
Coding x64Parser::Coding1[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding2[] = {
	{ Coding::indirect, 18, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding3[] = {
	{ Coding::indirect, 18, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding4[] = {
	{ Coding::indirect, 18, -1, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding5[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ Coding::eot },
};
Coding x64Parser::Coding6[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ Coding::eot },
};
Coding x64Parser::Coding7[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ Coding::eot },
};
Coding x64Parser::Coding8[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ Coding::eot },
};
Coding x64Parser::Coding9[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ Coding::eot },
};
Coding x64Parser::Coding10[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ Coding::eot },
};
Coding x64Parser::Coding11[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 4, 43, 4 },
	{ Coding::eot },
};
Coding x64Parser::Coding12[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 4, 43, 4 },
	{ Coding::eot },
};
Coding x64Parser::Coding13[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 4, 43, 4 },
	{ Coding::eot },
};
Coding x64Parser::Coding14[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding15[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding16[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding17[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding18[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding19[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding20[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding21[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding22[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding23[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding24[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding25[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding26[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 4, 43, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding27[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 4, 43, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding28[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 4, 43, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding29[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding30[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::valSpecified, 54},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding31[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding32[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding33[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding34[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding35[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding36[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding37[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding38[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding39[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding40[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 1, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding41[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 4, 43, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding42[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 4, 43, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding43[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 4, 43, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding44[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding45[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding46[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding47[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding48[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding49[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding50[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding51[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding52[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding53[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding54[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding55[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding56[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding57[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding58[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding59[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::valSpecified, 37},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding60[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding61[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding62[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding63[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding64[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding65[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding66[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding67[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding68[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding69[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding70[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding71[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding72[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding73[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding74[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding75[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding76[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding77[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding78[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding79[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding80[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding81[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding82[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding83[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding84[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding85[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding86[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding87[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding88[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding89[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding90[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding91[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding92[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding93[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding94[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding95[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding96[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding97[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding98[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding99[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding100[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding101[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding102[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding103[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding104[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding105[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding106[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding107[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding108[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding109[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding110[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding111[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding112[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding113[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding114[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding115[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding116[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding117[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding118[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding119[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding120[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding121[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding122[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding123[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding124[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding125[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding126[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding127[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding128[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding129[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding130[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding131[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding132[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding133[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding134[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding135[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding136[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding137[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding138[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding139[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding140[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8},
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding141[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding142[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding143[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding144[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding145[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding146[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding147[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding148[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding149[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding150[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding151[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding152[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding153[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding154[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding155[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding156[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding157[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding158[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding159[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding160[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding161[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding162[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding163[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding164[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding165[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding166[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding167[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding168[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding169[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding170[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding171[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding172[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding173[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding174[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding175[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding176[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding177[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding178[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding179[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding180[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding181[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding182[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding183[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding184[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding185[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding186[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding187[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding188[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding189[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding190[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding191[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding192[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding193[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 0, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding194[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding195[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding196[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding197[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding198[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding199[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding200[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding201[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding202[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding203[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding204[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding205[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding206[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding207[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding208[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding209[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding210[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding211[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding212[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding213[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding214[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding215[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding216[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding217[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding218[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding219[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding220[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding221[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding222[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding223[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding224[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding225[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding226[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding227[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding228[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding229[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding230[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding231[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding232[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding233[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding234[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding235[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding236[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding237[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding238[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding239[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding240[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding241[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding242[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding243[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding244[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding245[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding246[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding247[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding248[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding249[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding250[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding251[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding252[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding253[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding254[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding255[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding256[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding257[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding258[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding259[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding260[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding261[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 64},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding262[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding263[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding264[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding265[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding266[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding267[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding268[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32},
	{ Coding::eot },
};
Coding x64Parser::Coding269[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 66},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding270[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding271[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding272[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding273[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding274[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding275[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding276[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding277[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding278[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding279[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding280[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding281[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding282[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding283[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding284[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding285[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding286[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding287[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding288[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding289[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding290[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding291[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding292[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding293[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding294[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding295[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding296[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding297[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding298[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding299[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding300[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding301[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 4, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding302[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding303[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding304[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding305[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding306[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding307[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding308[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding309[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding310[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding311[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding312[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding313[] = {
	{ Coding::stateFunc, 2 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding314[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding315[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding316[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 6, 2, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding317[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::valSpecified, 67},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 2, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 5, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 0, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding318[] = {
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 7, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding319[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 7, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding320[] = {
	{ Coding::valSpecified, 65},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 7, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding321[] = {
	{ Coding::indirect, 18, -1, 0 },
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 7, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding322[] = {
	{ Coding::indirect, 18, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 65, 8},
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 7, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding323[] = {
	{ Coding::indirect, 11, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding324[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::indirect, 11, -1, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding325[] = {
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding326[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding327[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding328[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 27, 8, 0, 43, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding329[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding330[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 15, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding331[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding332[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 15, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding333[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding334[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 15, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding335[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding336[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding337[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding338[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 11, 5, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding339[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 11, 5, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding340[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 11, 5, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding341[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 7, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding342[] = {
	{ Coding::indirect, 27, -1, 0, 43, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 30, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 7, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding343[] = {
	{ Coding::indirect, 27, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 30, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 7, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding344[] = {
	{ Coding::indirect, 11, -1, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 10, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding345[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 4},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 29, 4, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding346[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::valSpecified, 15},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 29, 4, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding347[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::valSpecified, 15},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 29, 4, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding348[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 19, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding349[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding350[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding351[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 1, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding352[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 1, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding353[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding354[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding355[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16},
	{ Coding::eot },
};
Coding x64Parser::Coding356[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16},
	{ Coding::eot },
};
Coding x64Parser::Coding357[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding358[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding359[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding360[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding361[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding362[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding363[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding364[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding365[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding366[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding367[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding368[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding369[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding370[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding371[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding372[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding373[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding374[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding375[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding376[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding377[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding378[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding379[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::native },
	{ Coding::eot },
};
Coding x64Parser::Coding380[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 20, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding381[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding382[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding383[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 21, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding384[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding385[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding386[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 15, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding387[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding388[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 15, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding389[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding390[] = {
	{ Coding::native },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 64, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding391[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 15, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding392[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding393[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 22, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding394[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::valSpecified, 229},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 22, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding395[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::valSpecified, 229},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 22, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding396[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::valSpecified, 229},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 22, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding397[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding398[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding399[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding400[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding401[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding402[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding403[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding404[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding405[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding406[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding407[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding408[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding409[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding410[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding411[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding412[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding413[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding414[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding415[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding416[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding417[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding418[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding419[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 205, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding420[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding421[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding422[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 1, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding423[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 1, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding424[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16},
	{ Coding::eot },
};
Coding x64Parser::Coding425[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16},
	{ Coding::eot },
};
Coding x64Parser::Coding426[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding427[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding428[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding429[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding430[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding431[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding432[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding433[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding434[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding435[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding436[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding437[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding438[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding439[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding440[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding441[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding442[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding443[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding444[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding445[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding446[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding447[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding448[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding449[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding450[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding451[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding452[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding453[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 16, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding454[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding455[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding456[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding457[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding458[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding459[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding460[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding461[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding462[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding463[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding464[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding465[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding466[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding467[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding468[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 64, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding469[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 64, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding470[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding471[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding472[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding473[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding474[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding475[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding476[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding477[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding478[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding479[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding480[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding481[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding482[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding483[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding484[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding485[] = {
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding486[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding487[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding488[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding489[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding490[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding491[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding492[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding493[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding494[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding495[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding496[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding497[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding498[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding499[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding500[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding501[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding502[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding503[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding504[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding505[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding506[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding507[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding508[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding509[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ Coding::valSpecified, 165},
	{ Coding::eot },
};
Coding x64Parser::Coding510[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 22, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding511[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 22, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding512[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 22, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding513[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 22, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding514[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding515[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding516[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding517[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding518[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding519[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding520[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding521[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding522[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding523[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding524[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding525[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding526[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding527[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding528[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding529[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding530[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding531[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding532[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding533[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding534[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding535[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding536[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding537[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding538[] = {
	{ Coding::valSpecified, 64},
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding539[] = {
	{ Coding::valSpecified, 64},
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding540[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding541[] = {
	{ Coding::valSpecified, 72},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding542[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding543[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding544[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding545[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding546[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding547[] = {
	{ Coding::valSpecified, 72},
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding548[] = {
	{ Coding::valSpecified, 72},
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding549[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding550[] = {
	{ Coding::valSpecified, 72},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding551[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding552[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding553[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding554[] = {
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 64, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding555[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding556[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::native },
	{ Coding::eot },
};
Coding x64Parser::Coding557[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::native },
	{ Coding::eot },
};
Coding x64Parser::Coding558[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding559[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8},
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding560[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 3, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3},
	{ Coding::eot },
};
Coding x64Parser::Coding561[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding562[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding563[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 202, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding564[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 203, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding565[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding566[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding567[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding568[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding569[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding570[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding571[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding572[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding573[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding574[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding575[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding576[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding577[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding578[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding579[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding580[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding581[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding582[] = {
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding583[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding584[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding585[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding586[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding587[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding588[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding589[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding590[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding591[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding592[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding593[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding594[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding595[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding596[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding597[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding598[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding599[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding600[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding601[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding602[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding603[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding604[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 5 },
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 1, 8, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding605[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 8, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding606[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 16, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding607[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 32, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding608[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8},
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8},
	{ (Coding::Type)(Coding::indirect | Coding::bitSpecified), 14, 64, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding609[] = {
	{ Coding::stateFunc, 3 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding610[] = {
	{ Coding::stateFunc, 4 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5},
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified | Coding::bitSpecified), 12, 3, 0 },
	{ Coding::eot },
};
Coding x64Parser::Coding611[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding612[] = {
	{ Coding::stateFunc, 0 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding613[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding614[] = {
	{ Coding::stateFunc, 1 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding615[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding616[] = {
	{ Coding::stateFunc, 2 },
	{ (Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, -1, 5 },
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8},
	{ Coding::eot },
};
Coding x64Parser::Coding617[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8},
	{ Coding::eot },
};
Coding * x64Parser::Codings[617] = {
	x64Parser::Coding1,
	x64Parser::Coding2,
	x64Parser::Coding3,
	x64Parser::Coding4,
	x64Parser::Coding5,
	x64Parser::Coding6,
	x64Parser::Coding7,
	x64Parser::Coding8,
	x64Parser::Coding9,
	x64Parser::Coding10,
	x64Parser::Coding11,
	x64Parser::Coding12,
	x64Parser::Coding13,
	x64Parser::Coding14,
	x64Parser::Coding15,
	x64Parser::Coding16,
	x64Parser::Coding17,
	x64Parser::Coding18,
	x64Parser::Coding19,
	x64Parser::Coding20,
	x64Parser::Coding21,
	x64Parser::Coding22,
	x64Parser::Coding23,
	x64Parser::Coding24,
	x64Parser::Coding25,
	x64Parser::Coding26,
	x64Parser::Coding27,
	x64Parser::Coding28,
	x64Parser::Coding29,
	x64Parser::Coding30,
	x64Parser::Coding31,
	x64Parser::Coding32,
	x64Parser::Coding33,
	x64Parser::Coding34,
	x64Parser::Coding35,
	x64Parser::Coding36,
	x64Parser::Coding37,
	x64Parser::Coding38,
	x64Parser::Coding39,
	x64Parser::Coding40,
	x64Parser::Coding41,
	x64Parser::Coding42,
	x64Parser::Coding43,
	x64Parser::Coding44,
	x64Parser::Coding45,
	x64Parser::Coding46,
	x64Parser::Coding47,
	x64Parser::Coding48,
	x64Parser::Coding49,
	x64Parser::Coding50,
	x64Parser::Coding51,
	x64Parser::Coding52,
	x64Parser::Coding53,
	x64Parser::Coding54,
	x64Parser::Coding55,
	x64Parser::Coding56,
	x64Parser::Coding57,
	x64Parser::Coding58,
	x64Parser::Coding59,
	x64Parser::Coding60,
	x64Parser::Coding61,
	x64Parser::Coding62,
	x64Parser::Coding63,
	x64Parser::Coding64,
	x64Parser::Coding65,
	x64Parser::Coding66,
	x64Parser::Coding67,
	x64Parser::Coding68,
	x64Parser::Coding69,
	x64Parser::Coding70,
	x64Parser::Coding71,
	x64Parser::Coding72,
	x64Parser::Coding73,
	x64Parser::Coding74,
	x64Parser::Coding75,
	x64Parser::Coding76,
	x64Parser::Coding77,
	x64Parser::Coding78,
	x64Parser::Coding79,
	x64Parser::Coding80,
	x64Parser::Coding81,
	x64Parser::Coding82,
	x64Parser::Coding83,
	x64Parser::Coding84,
	x64Parser::Coding85,
	x64Parser::Coding86,
	x64Parser::Coding87,
	x64Parser::Coding88,
	x64Parser::Coding89,
	x64Parser::Coding90,
	x64Parser::Coding91,
	x64Parser::Coding92,
	x64Parser::Coding93,
	x64Parser::Coding94,
	x64Parser::Coding95,
	x64Parser::Coding96,
	x64Parser::Coding97,
	x64Parser::Coding98,
	x64Parser::Coding99,
	x64Parser::Coding100,
	x64Parser::Coding101,
	x64Parser::Coding102,
	x64Parser::Coding103,
	x64Parser::Coding104,
	x64Parser::Coding105,
	x64Parser::Coding106,
	x64Parser::Coding107,
	x64Parser::Coding108,
	x64Parser::Coding109,
	x64Parser::Coding110,
	x64Parser::Coding111,
	x64Parser::Coding112,
	x64Parser::Coding113,
	x64Parser::Coding114,
	x64Parser::Coding115,
	x64Parser::Coding116,
	x64Parser::Coding117,
	x64Parser::Coding118,
	x64Parser::Coding119,
	x64Parser::Coding120,
	x64Parser::Coding121,
	x64Parser::Coding122,
	x64Parser::Coding123,
	x64Parser::Coding124,
	x64Parser::Coding125,
	x64Parser::Coding126,
	x64Parser::Coding127,
	x64Parser::Coding128,
	x64Parser::Coding129,
	x64Parser::Coding130,
	x64Parser::Coding131,
	x64Parser::Coding132,
	x64Parser::Coding133,
	x64Parser::Coding134,
	x64Parser::Coding135,
	x64Parser::Coding136,
	x64Parser::Coding137,
	x64Parser::Coding138,
	x64Parser::Coding139,
	x64Parser::Coding140,
	x64Parser::Coding141,
	x64Parser::Coding142,
	x64Parser::Coding143,
	x64Parser::Coding144,
	x64Parser::Coding145,
	x64Parser::Coding146,
	x64Parser::Coding147,
	x64Parser::Coding148,
	x64Parser::Coding149,
	x64Parser::Coding150,
	x64Parser::Coding151,
	x64Parser::Coding152,
	x64Parser::Coding153,
	x64Parser::Coding154,
	x64Parser::Coding155,
	x64Parser::Coding156,
	x64Parser::Coding157,
	x64Parser::Coding158,
	x64Parser::Coding159,
	x64Parser::Coding160,
	x64Parser::Coding161,
	x64Parser::Coding162,
	x64Parser::Coding163,
	x64Parser::Coding164,
	x64Parser::Coding165,
	x64Parser::Coding166,
	x64Parser::Coding167,
	x64Parser::Coding168,
	x64Parser::Coding169,
	x64Parser::Coding170,
	x64Parser::Coding171,
	x64Parser::Coding172,
	x64Parser::Coding173,
	x64Parser::Coding174,
	x64Parser::Coding175,
	x64Parser::Coding176,
	x64Parser::Coding177,
	x64Parser::Coding178,
	x64Parser::Coding179,
	x64Parser::Coding180,
	x64Parser::Coding181,
	x64Parser::Coding182,
	x64Parser::Coding183,
	x64Parser::Coding184,
	x64Parser::Coding185,
	x64Parser::Coding186,
	x64Parser::Coding187,
	x64Parser::Coding188,
	x64Parser::Coding189,
	x64Parser::Coding190,
	x64Parser::Coding191,
	x64Parser::Coding192,
	x64Parser::Coding193,
	x64Parser::Coding194,
	x64Parser::Coding195,
	x64Parser::Coding196,
	x64Parser::Coding197,
	x64Parser::Coding198,
	x64Parser::Coding199,
	x64Parser::Coding200,
	x64Parser::Coding201,
	x64Parser::Coding202,
	x64Parser::Coding203,
	x64Parser::Coding204,
	x64Parser::Coding205,
	x64Parser::Coding206,
	x64Parser::Coding207,
	x64Parser::Coding208,
	x64Parser::Coding209,
	x64Parser::Coding210,
	x64Parser::Coding211,
	x64Parser::Coding212,
	x64Parser::Coding213,
	x64Parser::Coding214,
	x64Parser::Coding215,
	x64Parser::Coding216,
	x64Parser::Coding217,
	x64Parser::Coding218,
	x64Parser::Coding219,
	x64Parser::Coding220,
	x64Parser::Coding221,
	x64Parser::Coding222,
	x64Parser::Coding223,
	x64Parser::Coding224,
	x64Parser::Coding225,
	x64Parser::Coding226,
	x64Parser::Coding227,
	x64Parser::Coding228,
	x64Parser::Coding229,
	x64Parser::Coding230,
	x64Parser::Coding231,
	x64Parser::Coding232,
	x64Parser::Coding233,
	x64Parser::Coding234,
	x64Parser::Coding235,
	x64Parser::Coding236,
	x64Parser::Coding237,
	x64Parser::Coding238,
	x64Parser::Coding239,
	x64Parser::Coding240,
	x64Parser::Coding241,
	x64Parser::Coding242,
	x64Parser::Coding243,
	x64Parser::Coding244,
	x64Parser::Coding245,
	x64Parser::Coding246,
	x64Parser::Coding247,
	x64Parser::Coding248,
	x64Parser::Coding249,
	x64Parser::Coding250,
	x64Parser::Coding251,
	x64Parser::Coding252,
	x64Parser::Coding253,
	x64Parser::Coding254,
	x64Parser::Coding255,
	x64Parser::Coding256,
	x64Parser::Coding257,
	x64Parser::Coding258,
	x64Parser::Coding259,
	x64Parser::Coding260,
	x64Parser::Coding261,
	x64Parser::Coding262,
	x64Parser::Coding263,
	x64Parser::Coding264,
	x64Parser::Coding265,
	x64Parser::Coding266,
	x64Parser::Coding267,
	x64Parser::Coding268,
	x64Parser::Coding269,
	x64Parser::Coding270,
	x64Parser::Coding271,
	x64Parser::Coding272,
	x64Parser::Coding273,
	x64Parser::Coding274,
	x64Parser::Coding275,
	x64Parser::Coding276,
	x64Parser::Coding277,
	x64Parser::Coding278,
	x64Parser::Coding279,
	x64Parser::Coding280,
	x64Parser::Coding281,
	x64Parser::Coding282,
	x64Parser::Coding283,
	x64Parser::Coding284,
	x64Parser::Coding285,
	x64Parser::Coding286,
	x64Parser::Coding287,
	x64Parser::Coding288,
	x64Parser::Coding289,
	x64Parser::Coding290,
	x64Parser::Coding291,
	x64Parser::Coding292,
	x64Parser::Coding293,
	x64Parser::Coding294,
	x64Parser::Coding295,
	x64Parser::Coding296,
	x64Parser::Coding297,
	x64Parser::Coding298,
	x64Parser::Coding299,
	x64Parser::Coding300,
	x64Parser::Coding301,
	x64Parser::Coding302,
	x64Parser::Coding303,
	x64Parser::Coding304,
	x64Parser::Coding305,
	x64Parser::Coding306,
	x64Parser::Coding307,
	x64Parser::Coding308,
	x64Parser::Coding309,
	x64Parser::Coding310,
	x64Parser::Coding311,
	x64Parser::Coding312,
	x64Parser::Coding313,
	x64Parser::Coding314,
	x64Parser::Coding315,
	x64Parser::Coding316,
	x64Parser::Coding317,
	x64Parser::Coding318,
	x64Parser::Coding319,
	x64Parser::Coding320,
	x64Parser::Coding321,
	x64Parser::Coding322,
	x64Parser::Coding323,
	x64Parser::Coding324,
	x64Parser::Coding325,
	x64Parser::Coding326,
	x64Parser::Coding327,
	x64Parser::Coding328,
	x64Parser::Coding329,
	x64Parser::Coding330,
	x64Parser::Coding331,
	x64Parser::Coding332,
	x64Parser::Coding333,
	x64Parser::Coding334,
	x64Parser::Coding335,
	x64Parser::Coding336,
	x64Parser::Coding337,
	x64Parser::Coding338,
	x64Parser::Coding339,
	x64Parser::Coding340,
	x64Parser::Coding341,
	x64Parser::Coding342,
	x64Parser::Coding343,
	x64Parser::Coding344,
	x64Parser::Coding345,
	x64Parser::Coding346,
	x64Parser::Coding347,
	x64Parser::Coding348,
	x64Parser::Coding349,
	x64Parser::Coding350,
	x64Parser::Coding351,
	x64Parser::Coding352,
	x64Parser::Coding353,
	x64Parser::Coding354,
	x64Parser::Coding355,
	x64Parser::Coding356,
	x64Parser::Coding357,
	x64Parser::Coding358,
	x64Parser::Coding359,
	x64Parser::Coding360,
	x64Parser::Coding361,
	x64Parser::Coding362,
	x64Parser::Coding363,
	x64Parser::Coding364,
	x64Parser::Coding365,
	x64Parser::Coding366,
	x64Parser::Coding367,
	x64Parser::Coding368,
	x64Parser::Coding369,
	x64Parser::Coding370,
	x64Parser::Coding371,
	x64Parser::Coding372,
	x64Parser::Coding373,
	x64Parser::Coding374,
	x64Parser::Coding375,
	x64Parser::Coding376,
	x64Parser::Coding377,
	x64Parser::Coding378,
	x64Parser::Coding379,
	x64Parser::Coding380,
	x64Parser::Coding381,
	x64Parser::Coding382,
	x64Parser::Coding383,
	x64Parser::Coding384,
	x64Parser::Coding385,
	x64Parser::Coding386,
	x64Parser::Coding387,
	x64Parser::Coding388,
	x64Parser::Coding389,
	x64Parser::Coding390,
	x64Parser::Coding391,
	x64Parser::Coding392,
	x64Parser::Coding393,
	x64Parser::Coding394,
	x64Parser::Coding395,
	x64Parser::Coding396,
	x64Parser::Coding397,
	x64Parser::Coding398,
	x64Parser::Coding399,
	x64Parser::Coding400,
	x64Parser::Coding401,
	x64Parser::Coding402,
	x64Parser::Coding403,
	x64Parser::Coding404,
	x64Parser::Coding405,
	x64Parser::Coding406,
	x64Parser::Coding407,
	x64Parser::Coding408,
	x64Parser::Coding409,
	x64Parser::Coding410,
	x64Parser::Coding411,
	x64Parser::Coding412,
	x64Parser::Coding413,
	x64Parser::Coding414,
	x64Parser::Coding415,
	x64Parser::Coding416,
	x64Parser::Coding417,
	x64Parser::Coding418,
	x64Parser::Coding419,
	x64Parser::Coding420,
	x64Parser::Coding421,
	x64Parser::Coding422,
	x64Parser::Coding423,
	x64Parser::Coding424,
	x64Parser::Coding425,
	x64Parser::Coding426,
	x64Parser::Coding427,
	x64Parser::Coding428,
	x64Parser::Coding429,
	x64Parser::Coding430,
	x64Parser::Coding431,
	x64Parser::Coding432,
	x64Parser::Coding433,
	x64Parser::Coding434,
	x64Parser::Coding435,
	x64Parser::Coding436,
	x64Parser::Coding437,
	x64Parser::Coding438,
	x64Parser::Coding439,
	x64Parser::Coding440,
	x64Parser::Coding441,
	x64Parser::Coding442,
	x64Parser::Coding443,
	x64Parser::Coding444,
	x64Parser::Coding445,
	x64Parser::Coding446,
	x64Parser::Coding447,
	x64Parser::Coding448,
	x64Parser::Coding449,
	x64Parser::Coding450,
	x64Parser::Coding451,
	x64Parser::Coding452,
	x64Parser::Coding453,
	x64Parser::Coding454,
	x64Parser::Coding455,
	x64Parser::Coding456,
	x64Parser::Coding457,
	x64Parser::Coding458,
	x64Parser::Coding459,
	x64Parser::Coding460,
	x64Parser::Coding461,
	x64Parser::Coding462,
	x64Parser::Coding463,
	x64Parser::Coding464,
	x64Parser::Coding465,
	x64Parser::Coding466,
	x64Parser::Coding467,
	x64Parser::Coding468,
	x64Parser::Coding469,
	x64Parser::Coding470,
	x64Parser::Coding471,
	x64Parser::Coding472,
	x64Parser::Coding473,
	x64Parser::Coding474,
	x64Parser::Coding475,
	x64Parser::Coding476,
	x64Parser::Coding477,
	x64Parser::Coding478,
	x64Parser::Coding479,
	x64Parser::Coding480,
	x64Parser::Coding481,
	x64Parser::Coding482,
	x64Parser::Coding483,
	x64Parser::Coding484,
	x64Parser::Coding485,
	x64Parser::Coding486,
	x64Parser::Coding487,
	x64Parser::Coding488,
	x64Parser::Coding489,
	x64Parser::Coding490,
	x64Parser::Coding491,
	x64Parser::Coding492,
	x64Parser::Coding493,
	x64Parser::Coding494,
	x64Parser::Coding495,
	x64Parser::Coding496,
	x64Parser::Coding497,
	x64Parser::Coding498,
	x64Parser::Coding499,
	x64Parser::Coding500,
	x64Parser::Coding501,
	x64Parser::Coding502,
	x64Parser::Coding503,
	x64Parser::Coding504,
	x64Parser::Coding505,
	x64Parser::Coding506,
	x64Parser::Coding507,
	x64Parser::Coding508,
	x64Parser::Coding509,
	x64Parser::Coding510,
	x64Parser::Coding511,
	x64Parser::Coding512,
	x64Parser::Coding513,
	x64Parser::Coding514,
	x64Parser::Coding515,
	x64Parser::Coding516,
	x64Parser::Coding517,
	x64Parser::Coding518,
	x64Parser::Coding519,
	x64Parser::Coding520,
	x64Parser::Coding521,
	x64Parser::Coding522,
	x64Parser::Coding523,
	x64Parser::Coding524,
	x64Parser::Coding525,
	x64Parser::Coding526,
	x64Parser::Coding527,
	x64Parser::Coding528,
	x64Parser::Coding529,
	x64Parser::Coding530,
	x64Parser::Coding531,
	x64Parser::Coding532,
	x64Parser::Coding533,
	x64Parser::Coding534,
	x64Parser::Coding535,
	x64Parser::Coding536,
	x64Parser::Coding537,
	x64Parser::Coding538,
	x64Parser::Coding539,
	x64Parser::Coding540,
	x64Parser::Coding541,
	x64Parser::Coding542,
	x64Parser::Coding543,
	x64Parser::Coding544,
	x64Parser::Coding545,
	x64Parser::Coding546,
	x64Parser::Coding547,
	x64Parser::Coding548,
	x64Parser::Coding549,
	x64Parser::Coding550,
	x64Parser::Coding551,
	x64Parser::Coding552,
	x64Parser::Coding553,
	x64Parser::Coding554,
	x64Parser::Coding555,
	x64Parser::Coding556,
	x64Parser::Coding557,
	x64Parser::Coding558,
	x64Parser::Coding559,
	x64Parser::Coding560,
	x64Parser::Coding561,
	x64Parser::Coding562,
	x64Parser::Coding563,
	x64Parser::Coding564,
	x64Parser::Coding565,
	x64Parser::Coding566,
	x64Parser::Coding567,
	x64Parser::Coding568,
	x64Parser::Coding569,
	x64Parser::Coding570,
	x64Parser::Coding571,
	x64Parser::Coding572,
	x64Parser::Coding573,
	x64Parser::Coding574,
	x64Parser::Coding575,
	x64Parser::Coding576,
	x64Parser::Coding577,
	x64Parser::Coding578,
	x64Parser::Coding579,
	x64Parser::Coding580,
	x64Parser::Coding581,
	x64Parser::Coding582,
	x64Parser::Coding583,
	x64Parser::Coding584,
	x64Parser::Coding585,
	x64Parser::Coding586,
	x64Parser::Coding587,
	x64Parser::Coding588,
	x64Parser::Coding589,
	x64Parser::Coding590,
	x64Parser::Coding591,
	x64Parser::Coding592,
	x64Parser::Coding593,
	x64Parser::Coding594,
	x64Parser::Coding595,
	x64Parser::Coding596,
	x64Parser::Coding597,
	x64Parser::Coding598,
	x64Parser::Coding599,
	x64Parser::Coding600,
	x64Parser::Coding601,
	x64Parser::Coding602,
	x64Parser::Coding603,
	x64Parser::Coding604,
	x64Parser::Coding605,
	x64Parser::Coding606,
	x64Parser::Coding607,
	x64Parser::Coding608,
	x64Parser::Coding609,
	x64Parser::Coding610,
	x64Parser::Coding611,
	x64Parser::Coding612,
	x64Parser::Coding613,
	x64Parser::Coding614,
	x64Parser::Coding615,
	x64Parser::Coding616,
	x64Parser::Coding617,
};
Coding x64Parser::prefixCoding1[] = {
	{ Coding::stateFunc, 0 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding2[] = {
	{ Coding::stateFunc, 1 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding3[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8},
	{ Coding::eot },
};
Coding x64Parser::prefixCoding4[] = {
	{ Coding::stateFunc, 3 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding5[] = {
	{ Coding::stateFunc, 4 },
	{ Coding::eot },
};
Coding x64Parser::prefixCoding6[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::prefixCoding7[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding x64Parser::prefixCoding8[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::prefixCoding9[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8},
	{ Coding::eot },
};
Coding x64Parser::prefixCoding10[] = {
	{ (Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8},
	{ Coding::eot },
};
Coding *x64Parser::prefixCodings[] = {
	x64Parser::prefixCoding1,
	x64Parser::prefixCoding2,
	x64Parser::prefixCoding3,
	x64Parser::prefixCoding4,
	x64Parser::prefixCoding5,
	x64Parser::prefixCoding6,
	x64Parser::prefixCoding7,
	x64Parser::prefixCoding8,
	x64Parser::prefixCoding9,
	x64Parser::prefixCoding10,
};
bool x64Parser::MatchesToken(int token, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::TOKEN && inputTokens[tokenPos]->val->ival == token;
}
	bool x64Parser::MatchesRegister(int reg, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER && inputTokens[tokenPos]->val->ival == reg;
}
	bool x64Parser::MatchesRegisterClass(int cclass, int tokenPos)
{
	return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER && (registerDataIndirect[cclass][inputTokens[tokenPos]->val->ival >> 3] & (1 << (inputTokens[tokenPos]->val->ival & 7)));
}
bool x64Parser::ParseAddresses(x64Operand &operand, int addrClass, int &tokenPos)
{
	int level = 0;
	bool rv = false;
	x64Token *t = tokenBranches1;
	while (t->type != x64Token::EOT)
	{
		bool matches = false;
		if (t->addrClass[addrClass >> 3] & (1 << (addrClass & 7)))
		{
			switch (t->type)
			{
				case x64Token::EMPTY:
					matches = true;
					break;
				case x64Token::TOKEN:
					matches = MatchesToken(t->id, tokenPos);
					break;
				case x64Token::REGISTER:
					matches = MatchesRegister(t->id, tokenPos);
					break;
				case x64Token::REGISTERCLASS:
					matches = MatchesRegisterClass(t->id, tokenPos);
					break;
				case x64Token::NUMBER:
					if (tokenPos < inputTokens.size())
						matches = (this->*numberFuncs[t->id])(tokenPos);
					break;
				default:
					matches = false;
					break;
			}
		}
		if (!matches)
		{
			if (t->level > level)
			{
				t = t->next;
				continue;
			}
		}
		else
			level = t->level;
		if (matches)
		{
			if (t->tokenFunc)
				(this->*(t->tokenFunc))(operand, tokenPos);
			if (t->eos && (tokenPos == inputTokens.size()-1 || !t->next))
			{
				rv = true;
				break;
			}
			t = t->next;
			tokenPos++;
		}
		else
		{
			t++;
		}
	}
	return rv;
}

bool x64Parser::ParseOperands2(x64Token *tokenList, x64Operand &operand, int tokenPos, int level)
{
	bool rv = false;
	x64Token *t = tokenList;
	while (t && t->type != x64Token::EOT)
	{
		bool matches = false;
		int last = tokenPos;
		switch (t->type)
		{
			case x64Token::EMPTY:
				matches = true;
				break;
			case x64Token::TOKEN:
				matches = MatchesToken(t->id, tokenPos);
				break;
			case x64Token::REGISTER:
				matches = MatchesRegister(t->id, tokenPos);
				break;
			case x64Token::REGISTERCLASS:
				matches = MatchesRegisterClass(t->id,tokenPos);
				break;
			case x64Token::ADDRESSCLASS:
				matches = ParseAddresses(operand, t->id, tokenPos);
				break;
			case x64Token::NUMBER:
				if (tokenPos < inputTokens.size())
					matches = (this->*numberFuncs[t->id])(tokenPos);
				break;
			default:
				matches = false;
				break;
		}
		if (!matches)
		{
			if (t->level > level)
			{
				if (ParseOperands2(t->next, operand, tokenPos, t->level))
				{
					rv = true;
					break;
				}
			}
		}
		else
		{
			if (t->tokenFunc)
				(this->*(t->tokenFunc))(operand, last);
			if (t->eos && (!t->next || tokenPos == inputTokens.size()-1))
			{
				if (tokenPos >= (int)(inputTokens.size()-1))
					eol = true;
				rv = true;
				break;
			}
			if (tokenPos < inputTokens.size() && ParseOperands2(t->next, operand, tokenPos+1, t->level))
			{
				rv = true;
				break;
			}
		}
		tokenPos = last;
		t++;
	}
	return rv;
}

bool x64Parser::ParseOperands(x64Token *tokenList, x64Operand &operand)
{
	return ParseOperands2(tokenList, operand, 0, 0);
}

bool x64Parser::ProcessCoding(CodingHelper &base, x64Operand &operand, Coding *coding)
{
	CodingHelper current;

	while (coding->type != Coding::eot)
	{
		current = base;
		if (coding->type & Coding::bitSpecified)
			current.bits = coding->bits;
		if (coding->type & Coding::fieldSpecified)
			current.field = coding->field;
		if (coding->math)
		{
			current.math = coding->math;
			current.mathval = coding->mathval;
		}
		if (coding->type & Coding::valSpecified)
		{
			int n = current.DoMath(coding->val);
			bits.Add(n, current.bits);
		}
		else if (coding->type & Coding::reg)
		{
			int n = coding->val;
			if (current.field != -1)
				n = registerValues[n][current.field];
			n = current.DoMath(n);
			bits.Add(n, current.bits);
		}
		else if (coding->type & Coding::stateFunc)
		{
			Coding *c = (this->*stateFuncs[coding->val])();
			if (!ProcessCoding(current, operand,c))
				return false;
		}
		else if (coding->type & Coding::stateVar)
		{
			int n = current.DoMath(stateVars[coding->val]);
			bits.Add(n, current.bits);
		}
		else if (coding->type & Coding::number)
		{
			int n = coding->val;
			auto it = operands.begin();
			for (int i=0; i < n; i++)
			{
				++it;
			}
			(*it)->used = true;
			(*it)->pos = this->bits.GetBits();
			bits.Add((*it)->node->ival, current.bits);
		}
		else if (coding->type & Coding::native)
		{
			if (operand.addressCoding == -1)
				return false;
			if (!ProcessCoding(current, operand, Codings[operand.addressCoding]))
				return false;
		}
		else if (coding->type & Coding::indirect)
		{
			if (!operand.values[coding->val])
				return false;
			if (!ProcessCoding(current, operand, operand.values[coding->val]))
				return false;
		}
		else if (coding->type & Coding::illegal)
		{
			return false;
		}
		else
		{
			return false;
		}
		coding++;
	}
	return true;
}

bool x64Parser::DispatchOpcode(int opcode)
{
	bool rv;
	if (opcode == -1)
	{
		rv = true;
		x64Operand operand;
		CodingHelper base;
		for (auto& a : prefixes)
			rv &= ProcessCoding(base, operand, prefixCodings[a]);
	}
	else
	{
		x64Operand operand;
		operand.opcode = opcode;
		rv = (this->*DispatchTable[opcode])(operand);
		if (rv)
		{
			CodingHelper base;
			for (auto& a : prefixes)
				rv &= ProcessCoding(base, operand, prefixCodings[a]);
			if (rv)
			{
				if (operand.operandCoding != -1)
					rv = ProcessCoding(base, operand, Codings[operand.operandCoding]);
				else if (operand.addressCoding != -1)
					rv = ProcessCoding(base, operand, Codings[operand.addressCoding]);
				else rv = false;
			}
		}
	}
	return rv;
}
