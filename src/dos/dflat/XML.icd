	SECTION	code
_isspecial:

*************************FUNCTION isspecial********************************
;
; Line 36:	static int isspecial(int t)

;
	BLOCK	1
	PROLOGUE	#0.N,#0.N
;
; Line 37:	{

;
;
; Line 38:	    return t == '>' || t == '<' || t == '=' || t == '&' || t == '\'' || t == '\"' ;

;
	CONDGO	L_3:PC ; _t:LINK(8).I == #3E.I
	BLOCK	2
	CONDGO	L_3:PC ; _t:LINK(8).I == #3C.I
	BLOCK	3
	CONDGO	L_3:PC ; _t:LINK(8).I == #3D.I
	BLOCK	4
	CONDGO	L_3:PC ; _t:LINK(8).I == #26.I
	BLOCK	5
	CONDGO	L_3:PC ; _t:LINK(8).I == #27.I
	BLOCK	6
	CONDGO	L_3:PC ; _t:LINK(8).I == #22.I
	BLOCK	7
	T3.UI = #0
	GOTO	L_4:PC
	BLOCK	8
L_3:
	T4.UI = #1
	BLOCK	9
L_4:
	T5.I =   T0.UI
	RV.T6.I =   T5.I
;
; Line 39:	}

;
	BLOCK	10
L_2:
	EPILOGUE	#0.N
	RET	#0.N
_skipspace:

*************************FUNCTION skipspace********************************
;
; Line 41:	static int skipspace(char **s)

;
	BLOCK	1
	PROLOGUE	#0.N,#0.N
;
; Line 42:	{

;
;
; Line 43:	    while (isspace(**s)) (*s)++ ;

;
	GOTO	L_9:PC
	BLOCK	2
L_7:
	T15.A =   *_s:LINK(8).A.A
	T16.A = T15.A + #1.UI
	BLOCK	3
L_9:
	T10.A =   *_s:LINK(8).A.A
	T11.C =   *T10.A.C
	T12.A =  ARRIND __ctype:RAM.A,T11.C
	T13.I =   *T12.A.UC
	T14.I = T13.I & #1.I
	CONDGO	L_7:PC ; T14.I != #0.I
	BLOCK	4
L_8:
;
; Line 44:	

;;
; Line 45:	    if (**s)

;
	T17.A =   *_s:LINK(8).A.A
	T18.C =   *T17.A.C
	CONDGO	L_10:PC ; T18.C == #0.C
	BLOCK	5
;
; Line 46:	        return TRUE ;

;
	RV.T19.I =   #1.I
	GOTO	L_6:PC
	BLOCK	6
L_10:
;
; Line 47:	    return FALSE ;

;
	RV.T20.I =   #0.I
;
; Line 48:	}

;
	BLOCK	7
L_6:
	EPILOGUE	#0.N
	RET	#0.N
_convertchar:

*************************FUNCTION convertchar********************************
;
; Line 52:	static int convertchar(char **s)

;
	BLOCK	1
	PROLOGUE	#0.N,#0.N
;
; Line 53:	{

;
;
; Line 54:	    if (**s != '&')

;
	T52.A =   *_s:LINK(8).A.A
	T53.I =   *T52.A.C
	CONDGO	L_13:PC ; T53.I == #26.I
	BLOCK	2
;
; Line 55:	        return *(*s)++ ;

;
	T54.A =   *_s:LINK(8).A.A
	T55.A =   *_s:LINK(8).A.A
	T56.A = T55.A + #1.UI
	T57.I =   *T54.A.C
	RV.T58.I =   T57.I
	GOTO	L_12:PC
	BLOCK	3
L_13:
;
; Line 56:	    if (!strncmp((*s)+1,"amp;",4)) {

;
	GOSUB	PRELUDE
	PARM	#4.I
	PARM	#L_15:PC.A
	T60.A =   *_s:LINK(8).A.A
	T61.A = T60.A + #1.UI
	PARM	T61.A
	GOSUB	#_strncmp:PC.A
	PARMADJ	#C.N
	T62.I =   RV.T9.I
	GOSUB	POSTLUDE
	CONDGO	L_14:PC ; T62.I != #0.I
	BLOCK	4
;
; Line 57:	          (*s)+=5 ;

;
	T63.A =   *_s:LINK(8).A.A
	T64.A = T63.A + #14.UI
	*_s:LINK(8).A.A =   T64.A
;
; Line 58:	          return '&' ;

;
	RV.T66.I =   #26.C
	GOTO	L_12:PC
;
; Line 59:	    } else if (!strncmp((*s)+1,"quot;",5)) {

;
	GOTO	L_16:PC
	BLOCK	5
L_14:
	GOSUB	PRELUDE
	PARM	#5.I
	PARM	#L_18:PC.A
	T68.A =   *_s:LINK(8).A.A
	T69.A = T68.A + #1.UI
	PARM	T69.A
	GOSUB	#_strncmp:PC.A
	PARMADJ	#C.N
	T70.I =   RV.T18.I
	GOSUB	POSTLUDE
	CONDGO	L_17:PC ; T70.I != #0.I
	BLOCK	6
;
; Line 60:	          (*s)+=6 ;

;
	T71.A =   *_s:LINK(8).A.A
	T72.A = T71.A + #18.UI
	*_s:LINK(8).A.A =   T72.A
;
; Line 61:	          return '"' ;

;
	RV.T74.I =   #22.C
	GOTO	L_12:PC
;
; Line 62:	    } else if (!strncmp((*s)+1,"apos;",5)) {

;
	GOTO	L_19:PC
	BLOCK	7
L_17:
	GOSUB	PRELUDE
	T75.UI =   T15.UI
	PARM	T75.UI
	PARM	#L_21:PC.A
	T76.A =   *_s:LINK(8).A.A
	T77.A = T76.A + #1.UI
	PARM	T77.A
	GOSUB	#_strncmp:PC.A
	PARMADJ	#C.N
	T78.I =   RV.T27.I
	GOSUB	POSTLUDE
	CONDGO	L_20:PC ; T78.I != #0.I
	BLOCK	8
;
; Line 63:	          (*s)+=6 ;

;
	T79.A =   *_s:LINK(8).A.A
	T80.A = T79.A + #18.UI
	*_s:LINK(8).A.A =   T80.A
;
; Line 64:	          return '\'' ;

;
	RV.T82.I =   #27.C
	GOTO	L_12:PC
;
; Line 65:	    } else if (!strncmp((*s)+1,"lt;",3)) {

;
	GOTO	L_22:PC
	BLOCK	9
L_20:
	GOSUB	PRELUDE
	PARM	#3.I
	PARM	#L_24:PC.A
	T84.A =   *_s:LINK(8).A.A
	T85.A = T84.A + #1.UI
	PARM	T85.A
	GOSUB	#_strncmp:PC.A
	PARMADJ	#C.N
	T86.I =   RV.T36.I
	GOSUB	POSTLUDE
	CONDGO	L_23:PC ; T86.I != #0.I
	BLOCK	10
;
; Line 66:	          (*s)+=4 ;

;
	T87.A =   *_s:LINK(8).A.A
	T88.A = T87.A + #10.UI
	*_s:LINK(8).A.A =   T88.A
;
; Line 67:	          return '<' ;

;
	RV.T90.I =   #3C.C
	GOTO	L_12:PC
;
; Line 68:	    } else if (!strncmp((*s)+1,"gt;",3)) {

;
	GOTO	L_25:PC
	BLOCK	11
L_23:
	GOSUB	PRELUDE
	T91.UI =   T33.UI
	PARM	T91.UI
	PARM	#L_27:PC.A
	T92.A =   *_s:LINK(8).A.A
	T93.A = T92.A + #1.UI
	PARM	T93.A
	GOSUB	#_strncmp:PC.A
	PARMADJ	#C.N
	T94.I =   RV.T45.I
	GOSUB	POSTLUDE
	CONDGO	L_26:PC ; T94.I != #0.I
	BLOCK	12
;
; Line 69:	          (*s)+=4 ;

;
	T95.A =   *_s:LINK(8).A.A
	T96.A = T95.A + #10.UI
	*_s:LINK(8).A.A =   T96.A
;
; Line 70:	          return '>' ;

;
	RV.T98.I =   #3E.C
	GOTO	L_12:PC
;
; Line 71:	    }

;
	BLOCK	13
L_26:
	BLOCK	14
L_25:
	BLOCK	15
L_22:
	BLOCK	16
L_19:
	BLOCK	17
L_16:
;
; Line 72:	   return 0 ;

;
	RV.T99.I =   #0.I
;
; Line 73:	

;;
; Line 74:	}

;
	BLOCK	18
L_12:
	EPILOGUE	#0.N
	RET	#0.N
_GetName:

*************************FUNCTION GetName********************************
;
; Line 78:	static void GetName(char *name, char ** s)

;
	BLOCK	1
	PROLOGUE	#0.N,#0.N
;
; Line 79:	{

;
;
; Line 80:	  if (!isalpha(**s)) {

;
	T14.A =   *_s:LINK(12).A.A
	T15.C =   *T14.A.C
	T16.A =  ARRIND __ctype:RAM.A,T15.C
	T17.I =   *T16.A.UC
	T18.I = T17.I & #C.I
	CONDGO	L_33:PC ; T18.I != #0.I
	BLOCK	2
;
; Line 81:	      *name = 0 ;

;
	*_name:LINK(8).A.C =   #0.C
;
; Line 82:	      return ;

;
	GOTO	L_29:PC
;
; Line 83:	  }

;
	BLOCK	3
L_30:
	BLOCK	4
L_31:
;
; Line 85:	    if (!isalnum(**s))

;
	T24.A =   *_s:LINK(12).A.A
	T25.C =   *T24.A.C
	T26.A =  ARRIND __ctype:RAM.A,T25.C
	T27.I =   *T26.A.UC
	T28.I = T27.I & #E.I
	CONDGO	L_32:PC ; T28.I == #0.I
	BLOCK	6
L_34:
	BLOCK	7
L_33:
;
; Line 84:	  while(*name++=*(*s)++)    

;
	T19.A =   *_s:LINK(12).A.A
	T20.A =   *_s:LINK(12).A.A
	T21.A = T20.A + #1.UI
	T22.A =   _name:LINK(8).A
	_name:LINK(8).A = _name:LINK(8).A + #1.UI
	*T22.A.C =   *T19.A.C
	T23.C =   *T22.A.C
	CONDGO	L_31:PC ; T23.C != #0.C
	BLOCK	8
L_32:
;
; Line 87:	

;;
; Line 88:	  *name = 0 ;

;
	*_name:LINK(8).A.C =   #0.C
;
; Line 89:	}

;
	BLOCK	9
L_29:
	EPILOGUE	#0.N
	RET	#0.N
_InsertAttr:

*************************FUNCTION InsertAttr********************************
;
; Line 91:	static int InsertAttr(struct xmlNode *Node, char *name, char *attr)

;
	BLOCK	1
	PROLOGUE	#0.N,#8.N
;
; Line 92:	{

;
;
; Line 93:	    struct xmlAttr *map = calloc(sizeof(struct xmlAttr),1),**p=&Node->attribs ;

;
	GOSUB	PRELUDE
	PARM	#1.I
	PARM	#C.UI
	GOSUB	#_calloc:PC.A
	PARMADJ	#8.N
	T21.A =   RV.T1.A
	GOSUB	POSTLUDE
	T22[map].A =   T21.A
	T23.A =  STRUCT _Node:LINK(8).A,#C.I
	T24[p].A =   T23.A
;
; Line 94:	    if (!map)

;
	CONDGO	L_37:PC ; T22[map].A != #0.A
	BLOCK	2
;
; Line 95:	        return FALSE ;

;
	RV.T25.I =   #0.I
	GOTO	L_36:PC
	BLOCK	3
L_37:
;
; Line 96:	    map->name = strdup(name) ;

;
	GOSUB	PRELUDE
	PARM	_name:LINK(12).A
	GOSUB	#_strdup:PC.A
	PARMADJ	#4.N
	T26.A =   RV.T5.A
	GOSUB	POSTLUDE
	T27.A =  STRUCT T22[map].A,#4.I
	*T27.A.A =   T26.A
;
; Line 97:	    map->value = strdup(attr) ;

;
	GOSUB	PRELUDE
	PARM	_attr:LINK(16).A
	GOSUB	#_strdup:PC.A
	PARMADJ	#4.N
	T28.A =   RV.T8.A
	GOSUB	POSTLUDE
	T29.A =  STRUCT T22[map].A,#8.I
	*T29.A.A =   T28.A
;
; Line 98:	    if (!map->name || !map->value) {

;
	T30.A =   T7.A
	T31.A =   *T30.A.A
	CONDGO	L_42:PC ; T31.A == #0.A
	BLOCK	4
	T32.A =   T10.A
	T33.A =   *T32.A.A
	CONDGO	L_41:PC ; T33.A != #0.A
	BLOCK	5
L_42:
;
; Line 99:	        free(map) ;

;
	GOSUB	PRELUDE
	PARM	T22[map].A
	GOSUB	#_free:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 100:	        return FALSE ;

;
	RV.T37.I =   #0.I
	GOTO	L_36:PC
;
; Line 101:	    }

;
	BLOCK	6
L_38:
	BLOCK	7
L_39:
;
; Line 103:	        p = &(*p)->next ;

;
	T35[p].A =   *T24[p].A.A
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	8
L_41:
;
; Line 102:	    while (*p)

;
	T34.A =   *T24[p].A.A
	CONDGO	L_39:PC ; T34.A != #0.A
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	9
L_40:
;
; Line 104:	    *p = map ;

;
	*T24[p].A.A =   T22[map].A
;
; Line 105:	    return TRUE ;

;
	RV.T36.I =   T0.UI
;
; Line 106:	}

;
	BLOCK	10
L_36:
	EPILOGUE	#0.N
	RET	#0.N
_stripdup:

*************************FUNCTION stripdup********************************
;
; Line 111:	static char *stripdup(char *p)

;
	BLOCK	1
	PROLOGUE	#0.N,#804.N
;
; Line 112:	{

;
;
; Line 113:	#ifdef STRIPTEXT

;;
; Line 114:	    char buf[MAX_XML_TEXT_LEN],*q=buf ;

;
;
; Line 115:	

;;
; Line 116:	    while (isspace(*p))

;
	GOTO	L_47:PC
	BLOCK	2
L_45:
;
; Line 117:	        p++ ;

;
	_p:LINK(8).A = _p:LINK(8).A + #1.UI
	BLOCK	3
L_47:
	T19.C =   *_p:LINK(8).A.C
	T20.A =  ARRIND __ctype:RAM.A,T19.C
	T21.I =   *T20.A.UC
	T22.I = T21.I & #1.I
	CONDGO	L_45:PC ; T22.I != #0.I
	BLOCK	4
L_46:
	GOTO	L_50:PC
	BLOCK	5
L_48:
;
; Line 120:	        *q++ = *p++ ;

;
	T24.A =   _p:LINK(8).A
	_p:LINK(8).A = _p:LINK(8).A + #1.UI
	T25.A =   #_buf:LINK(-2048).A
	T26[q].A = #_buf:LINK(-2048).A + #1.UI
	*T25.A.C =   *T24.A.C
	BLOCK END	1
;	Live: TEMP17, 
	BLOCK	6
L_50:
;
; Line 118:	

;;
; Line 119:	    while (*p)

;
	T23.C =   *_p:LINK(8).A.C
	CONDGO	L_48:PC ; T23.C != #0.C
	BLOCK END	1
;	Live: TEMP17, 
	BLOCK	7
L_49:
	GOTO	L_53:PC
	BLOCK END	1
;	Live: TEMP17, 
	BLOCK	8
L_51:
;
; Line 123:	        q-- ;

;
	T34[q].A = #_buf:LINK(-2048).A - #1.UI
	BLOCK END	1
;	Live: TEMP17, 
	BLOCK	9
L_53:
;
; Line 121:	

;;
; Line 122:	    while (q != buf && isspace(*(q-1)))

;
	CONDGO	L_54:PC ; #_buf:LINK(-2048).A == #_buf:LINK(-2048).A
	BLOCK END	1
;	Live: TEMP17, 
	BLOCK	10
	T28.A = #_buf:LINK(-2048).A - #1.N
	T29.C =   *T28.A.C
	T30.I =  ARRIND T29.C,#1.I
	T31.A =  ARRIND __ctype:RAM.A,T30.I
	T32.I =   *T31.A.UC
	T33.I = T32.I & #1.I
	CONDGO	L_51:PC ; T33.I != #0.I
	BLOCK END	1
;	Live: TEMP17, 
	BLOCK	11
L_54:
	BLOCK END	1
;	Live: TEMP17, 
	BLOCK	12
L_52:
;
; Line 124:	    *q = 0 ;

;
	*T18[q].A.C =   #0.C
;
; Line 125:	

;;
; Line 126:	    return strdup(buf) ;

;
	GOSUB	PRELUDE
	PARM	#_buf:LINK(-2048).A
	GOSUB	#_strdup:PC.A
	PARMADJ	#4.N
	T35.A =   RV.T14.A
	GOSUB	POSTLUDE
	RV.T36.A =   T35.A
;
; Line 127:	#else

;;
; Line 128:	    return strdup(p) ;

;;
; Line 129:	#endif

;;
; Line 130:	}

;
	BLOCK	13
L_44:
	EPILOGUE	#0.N
	RET	#0.N
_ParseNode:

*************************FUNCTION ParseNode********************************
;
; Line 132:	static int ParseNode(struct xmlNode* Node, char **s)

;
	BLOCK	1
	PROLOGUE	#0.N,#90C.N
;
; Line 133:	{

;
;
; Line 136:	  int j ;

;;
; Line 137:	

;;
; Line 138:	   

;;
; Line 139:	  if (!skipspace(s))

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_skipspace:PC.A
	PARMADJ	#4.N
	T159.I =   RV.T0.I
	GOSUB	POSTLUDE
	CONDGO	L_57:PC ; T159.I != #0.I
	BLOCK	2
;
; Line 140:	    return FALSE ;

;
	RV.T160.I =   #0.I
	GOTO	L_56:PC
	BLOCK	3
L_57:
;
; Line 141:	

;;
; Line 142:	  if (**s != '<')

;
	T161.A =   *_s:LINK(12).A.A
	T162.I =   *T161.A.C
	CONDGO	L_58:PC ; T162.I == #3C.I
	BLOCK	4
;
; Line 143:	    return FALSE ;

;
	RV.T163.I =   #0.I
	GOTO	L_56:PC
	BLOCK	5
L_58:
;
; Line 144:	  (*s)++ ;

;
	T164.A =   *_s:LINK(12).A.A
	T165.A = T164.A + #1.UI
;
; Line 145:	  

;;
; Line 146:	  if (!skipspace(s))

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_skipspace:PC.A
	PARMADJ	#4.N
	T166.I =   RV.T7.I
	GOSUB	POSTLUDE
	CONDGO	L_59:PC ; T166.I != #0.I
	BLOCK	6
;
; Line 147:	    return FALSE ;

;
	RV.T167.I =   #0.I
	GOTO	L_56:PC
	BLOCK	7
L_59:
;
; Line 148:	

;;
; Line 149:	   

;;
; Line 150:	  GetName(attr,s);

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	PARM	#_attr:LINK(-2176).A
	GOSUB	#_GetName:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
;
; Line 151:	  Node->elementType = strdup(attr) ;

;
	GOSUB	PRELUDE
	PARM	#_attr:LINK(-2176).A
	GOSUB	#_strdup:PC.A
	PARMADJ	#4.N
	T168.A =   RV.T10.A
	GOSUB	POSTLUDE
	T169.A =  STRUCT _Node:LINK(8).A,#4.I
	*T169.A.A =   T168.A
;
; Line 152:	  if (!Node->elementType)

;
	T170.A =   T169.A
	T171.A =   *T170.A.A
	CONDGO	L_60:PC ; T171.A != #0.A
	BLOCK	8
;
; Line 153:	    return FALSE ;

;
	RV.T172.I =   #0.I
	GOTO	L_56:PC
	BLOCK	9
L_60:
;
; Line 154:	

;;
; Line 155:	   
;;
; Line 156:	
;;
; Line 157:	
;;
; Line 158:	

;;
; Line 159:	  if (!skipspace(s))

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_skipspace:PC.A
	PARMADJ	#4.N
	T173.I =   RV.T16.I
	GOSUB	POSTLUDE
	CONDGO	L_61:PC ; T173.I != #0.I
	BLOCK	10
;
; Line 160:	    return FALSE ;

;
	RV.T174.I =   #0.I
	GOTO	L_56:PC
	BLOCK	11
L_61:
;
; Line 161:	

;;
; Line 162:	  if (**s == '/') {

;
	T175.A =   *_s:LINK(12).A.A
	T176.I =   *T175.A.C
	CONDGO	L_62:PC ; T176.I != #2F.I
	BLOCK	12
;
; Line 163:	    (*s)++ ;

;
	T177.A =   *_s:LINK(12).A.A
	T178.A = T177.A + #1.UI
;
; Line 164:	    if (!skipspace(s))

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_skipspace:PC.A
	PARMADJ	#4.N
	T179.I =   RV.T22.I
	GOSUB	POSTLUDE
	CONDGO	L_63:PC ; T179.I != #0.I
	BLOCK	13
;
; Line 165:	        return FALSE ;

;
	RV.T180.I =   #0.I
	GOTO	L_56:PC
	BLOCK	14
L_63:
;
; Line 166:	

;;
; Line 167:	     

;;
; Line 168:	    Node->textData = strdup("") ;

;
	GOSUB	PRELUDE
	PARM	#L_64:PC.A
	GOSUB	#_strdup:PC.A
	PARMADJ	#4.N
	T181.A =   RV.T25.A
	GOSUB	POSTLUDE
	T182.A =  STRUCT _Node:LINK(8).A,#8.I
	*T182.A.A =   T181.A
;
; Line 169:	    if (!Node->textData)

;
	T183.A =   T182.A
	T184.A =   *T183.A.A
	CONDGO	L_65:PC ; T184.A != #0.A
	BLOCK	15
;
; Line 170:	        return FALSE ;

;
	RV.T185.I =   #0.I
	GOTO	L_56:PC
	BLOCK	16
L_65:
;
; Line 171:	    return *(*s)++ == '>' ;

;
	T186.A =   *_s:LINK(12).A.A
	T187.A =   *_s:LINK(12).A.A
	T188.A = T187.A + #1.UI
	T189.I =   *T186.A.C
	T190.UC = T189.I == #3E.I
	T191.I =   T190.UC
	RV.T192.I =   T191.I
	GOTO	L_56:PC
;
; Line 172:	  }

;
	BLOCK	17
L_62:
;
; Line 173:	

;;
; Line 174:	   

;;
; Line 175:	  if(**s!='>')

;
	T193.A =   *_s:LINK(12).A.A
	T194.I =   *T193.A.C
	CONDGO	L_69:PC ; T194.I != #3E.I
	BLOCK	19
L_67:
;
; Line 179:	    {

;
;
; Line 180:	      char attr[MAX_XML_NAME_LEN];

;;
; Line 181:	      j = 0 ;

;
;
; Line 182:	

;;
; Line 183:	       

;;
; Line 184:	      GetName(attr, s) ;

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	PARM	#_attr:LINK(-2316).A
	GOSUB	#_GetName:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
;
; Line 185:	      if (!**s)

;
	T198.A =   *_s:LINK(12).A.A
	T199.I =   *T198.A.C
	CONDGO	L_70:PC ; T199.I != #0.I
	BLOCK	20
;
; Line 186:	        return FALSE ;

;
	RV.T200.I =   #0.I
	GOTO	L_56:PC
	BLOCK	21
L_70:
;
; Line 187:	

;;
; Line 188:	      if (!skipspace(s))

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_skipspace:PC.A
	PARMADJ	#4.N
	T201.I =   RV.T42.I
	GOSUB	POSTLUDE
	CONDGO	L_71:PC ; T201.I != #0.I
	BLOCK	22
;
; Line 189:	         return FALSE ;

;
	RV.T202.I =   #0.I
	GOTO	L_56:PC
	BLOCK	23
L_71:
;
; Line 190:	

;;
; Line 191:	       

;;
; Line 192:	      if (**s != '=')

;
	T203.A =   *_s:LINK(12).A.A
	T204.I =   *T203.A.C
	CONDGO	L_72:PC ; T204.I == #3D.I
	BLOCK	24
;
; Line 193:	        return FALSE ;

;
	RV.T205.I =   #0.I
	GOTO	L_56:PC
	BLOCK	25
L_72:
;
; Line 194:	      (*s)++ ;

;
	T206.A =   *_s:LINK(12).A.A
	T207.A = T206.A + #1.UI
;
; Line 195:	

;;
; Line 196:	      if (!skipspace(s))

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_skipspace:PC.A
	PARMADJ	#4.N
	T208.I =   RV.T49.I
	GOSUB	POSTLUDE
	CONDGO	L_73:PC ; T208.I != #0.I
	BLOCK	26
;
; Line 197:	         return FALSE ;

;
	RV.T209.I =   #0.I
	GOTO	L_56:PC
	BLOCK	27
L_73:
;
; Line 198:	

;;
; Line 199:	       

;;
; Line 200:	      if (**s != '"')

;
	T210.A =   *_s:LINK(12).A.A
	T211.I =   *T210.A.C
	CONDGO	L_74:PC ; T211.I == #22.I
	BLOCK	28
;
; Line 201:	        return FALSE ;

;
	RV.T212.I =   #0.I
	GOTO	L_56:PC
	BLOCK	29
L_74:
;
; Line 202:	      (*s)++ ;

;
	T213.A =   *_s:LINK(12).A.A
	T214.A = T213.A + #1.UI
	GOTO	L_77:PC
	BLOCK	30
L_75:
;
; Line 205:	      while(**s && **s!='"'&&j<MAX_XML_TEXT_LEN) {

;
;
; Line 206:	        szText[j] = convertchar(s);

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_convertchar:PC.A
	PARMADJ	#4.N
	T219.I =   RV.T56.I
	GOSUB	POSTLUDE
	T220.C =   T219.I
	T221.A =  ARRIND #_szText:LINK(-2048).A,#0.I
	*T221.A.C =   T220.C
;
; Line 207:	        if (szText[j++] == 0)

;
	T222.I =   #0.I
	T224.A =  ARRIND #_szText:LINK(-2048).A,T222.I
	T225.I =   *T224.A.C
	CONDGO	L_78:PC ; T225.I != #0.I
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	31
;
; Line 208:	            return FALSE ;

;
	RV.T226.I =   #0.I
	GOTO	L_56:PC
	BLOCK	32
L_78:
;
; Line 209:	      }

;
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	33
L_77:
;
; Line 203:	

;;
; Line 204:	       

;
	T215.A =   *_s:LINK(12).A.A
	T216.C =   *T215.A.C
	CONDGO	L_107:PC ; T216.C == #0.C
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	34
	T217.A =   *_s:LINK(12).A.A
	T218.I =   *T217.A.C
	CONDGO	L_107:PC ; T218.I == #22.I
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	35
	GOTO	L_75:PC
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	36
L_107:
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	37
L_76:
;
; Line 210:	      szText[j] = '\0';

;
	T227.A =  ARRIND #_szText:LINK(-2048).A,#0.I
	*T227.A.C =   #0.C
;
; Line 211:	      if (**s)

;
	T228.A =   *_s:LINK(12).A.A
	T229.C =   *T228.A.C
	CONDGO	L_79:PC ; T229.C == #0.C
	BLOCK	38
;
; Line 212:	        (*s)++;

;
	T230.A =   *_s:LINK(12).A.A
	T231.A = T230.A + #1.UI
	BLOCK	39
L_79:
;
; Line 213:	

;;
; Line 214:	       

;;
; Line 215:	      if (!InsertAttr(Node,attr,szText))

;
	GOSUB	PRELUDE
	PARM	#_szText:LINK(-2048).A
	PARM	#_attr:LINK(-2316).A
	PARM	_Node:LINK(8).A
	GOSUB	#_InsertAttr:PC.A
	PARMADJ	#C.N
	T232.I =   RV.T72.I
	GOSUB	POSTLUDE
	CONDGO	L_80:PC ; T232.I != #0.I
	BLOCK	40
;
; Line 216:	        return FALSE ;

;
	RV.T233.I =   #0.I
	GOTO	L_56:PC
	BLOCK	41
L_80:
;
; Line 217:	

;;
; Line 218:	      if (!skipspace(s))

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_skipspace:PC.A
	PARMADJ	#4.N
	T234.I =   RV.T75.I
	GOSUB	POSTLUDE
	CONDGO	L_81:PC ; T234.I != #0.I
	BLOCK	42
;
; Line 219:	         return FALSE ;

;
	RV.T235.I =   #0.I
	GOTO	L_56:PC
	BLOCK	43
L_81:
;
; Line 220:	

;;
; Line 221:	       

;;
; Line 222:	      if(**s=='/')

;
	T236.A =   *_s:LINK(12).A.A
	T237.I =   *T236.A.C
	CONDGO	L_82:PC ; T237.I != #2F.I
	BLOCK	44
;
; Line 223:	      {

;
;
; Line 224:	        

;;
; Line 225:	        (*s)++ ;

;
	T238.A =   *_s:LINK(12).A.A
	T239.A = T238.A + #1.UI
;
; Line 226:	        if (!skipspace(s))

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_skipspace:PC.A
	PARMADJ	#4.N
	T240.I =   RV.T81.I
	GOSUB	POSTLUDE
	CONDGO	L_83:PC ; T240.I != #0.I
	BLOCK	45
;
; Line 227:	           return FALSE ;

;
	RV.T241.I =   #0.I
	GOTO	L_56:PC
	BLOCK	46
L_83:
;
; Line 228:	    

;;
; Line 229:	         

;;
; Line 230:	

;;
; Line 231:	        Node->textData = strdup("") ;

;
	GOSUB	PRELUDE
	PARM	#L_64:PC.A
	GOSUB	#_strdup:PC.A
	PARMADJ	#4.N
	T242.A =   RV.T84.A
	GOSUB	POSTLUDE
	T243.A =  STRUCT _Node:LINK(8).A,#8.I
	*T243.A.A =   T242.A
;
; Line 232:	        if (!Node->textData)

;
	T244.A =   T243.A
	T245.A =   *T244.A.A
	CONDGO	L_84:PC ; T245.A != #0.A
	BLOCK	47
;
; Line 233:	            return 0 ;

;
	RV.T246.I =   #0.I
	GOTO	L_56:PC
	BLOCK	48
L_84:
;
; Line 234:	

;;
; Line 235:	         

;;
; Line 236:	        return (*(*s)++ == '>') ;

;
	T247.A =   *_s:LINK(12).A.A
	T248.A =   *_s:LINK(12).A.A
	T249.A = T248.A + #1.UI
	T250.I =   *T247.A.C
	T251.UC = T250.I == #3E.I
	T252.I =   T251.UC
	RV.T253.I =   T252.I
	GOTO	L_56:PC
;
; Line 237:	      }

;
	BLOCK	49
L_82:
;
; Line 238:	

;;
; Line 239:	       
;;
; Line 240:	
;;
; Line 241:	

;;
; Line 242:	      if(**s=='>')  {

;
	T254.A =   *_s:LINK(12).A.A
	T255.I =   *T254.A.C
	CONDGO	L_85:PC ; T255.I != #3E.I
	BLOCK	50
;
; Line 243:	        (*s)++ ;

;
	T256.A =   *_s:LINK(12).A.A
	T257.A = T256.A + #1.UI
;
; Line 244:	        break;

;
	GOTO	L_86:PC
	BLOCK	51
;
; Line 245:	      }

;
L_85:
;
; Line 246:	    }

;
	BLOCK	52
L_69:
	T195.A =   *_s:LINK(12).A.A
	T196.C =   *T195.A.C
	CONDGO	L_67:PC ; T196.C != #0.C
	BLOCK	53
L_68:
;
; Line 247:	  } else

;
	GOTO	L_89:PC
	BLOCK	54
L_66:
;
; Line 248:	    (*s)++ ;

;
	T258.A =   *_s:LINK(12).A.A
	T259.A = T258.A + #1.UI
	BLOCK	55
L_86:
;
; Line 249:	

;;
; Line 250:	  j = 0 ;

;
	GOTO	L_89:PC
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	56
L_87:
;
; Line 253:	  {

;
;
; Line 254:	    struct xmlNode *child ;

;;
; Line 255:	    struct xmlNode **link  = &Node->children;

;
	T263.A =  STRUCT _Node:LINK(8).A,#10.I
	T264[link].A =   T263.A
;
; Line 256:	  

;;
; Line 257:	     
;;
; Line 258:	

;;
; Line 259:	    while(**s && **s!='<'&&j<MAX_XML_TEXT_LEN) {

;
	GOTO	L_92:PC
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	57
L_90:
;
; Line 260:	      szText[j] = convertchar(s) ;

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_convertchar:PC.A
	PARMADJ	#4.N
	T269.I =   RV.T103.I
	GOSUB	POSTLUDE
	T270.C =   T269.I
	T271.A =  ARRIND #_szText:LINK(-2048).A,#0.I
	*T271.A.C =   T270.C
;
; Line 261:	      if (szText[j++] == 0)

;
	T272.I =   #0.I
	T274.A =  ARRIND #_szText:LINK(-2048).A,T272.I
	T275.I =   *T274.A.C
	CONDGO	L_93:PC ; T275.I != #0.I
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	58
;
; Line 262:	        return FALSE ;

;
	RV.T276.I =   T156[j].I
	GOTO	L_56:PC
	BLOCK	59
L_93:
;
; Line 263:	    }

;
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	60
L_92:
	T265.A =   *_s:LINK(12).A.A
	T266.C =   *T265.A.C
	CONDGO	L_108:PC ; T266.C == #0.C
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	61
	T267.A =   *_s:LINK(12).A.A
	T268.I =   *T267.A.C
	CONDGO	L_108:PC ; T268.I == #3C.I
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	62
	GOTO	L_90:PC
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	63
L_108:
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	64
L_91:
;
; Line 264:	    szText[j] = '\0';

;
	T277.A =  ARRIND #_szText:LINK(-2048).A,#0.I
	*T277.A.C =   #0.C
;
; Line 265:	

;;
; Line 266:	     

;;
; Line 267:	    if (**s != '<')

;
	T278.A =   *_s:LINK(12).A.A
	T279.I =   *T278.A.C
	CONDGO	L_94:PC ; T279.I == #3C.I
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	65
;
; Line 268:	        return FALSE ;

;
	RV.T280.I =   T156[j].I
	GOTO	L_56:PC
	BLOCK	66
L_94:
;
; Line 269:	    (*s)++ ;

;
	T281.A =   *_s:LINK(12).A.A
	T282.A = T281.A + #1.UI
;
; Line 270:	

;;
; Line 271:	     

;;
; Line 272:	    if(**s=='/') 

;
	T283.A =   *_s:LINK(12).A.A
	T284.I =   *T283.A.C
	CONDGO	L_101:PC ; T284.I != #2F.I
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	67
;
; Line 273:	    {

;
;
; Line 274:	       

;;
; Line 275:	      (*s)++ ;

;
	T285.A =   *_s:LINK(12).A.A
	T286.A = T285.A + #1.UI
;
; Line 276:	      GetName(attr,s) ;

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	PARM	#_attr:LINK(-2176).A
	GOSUB	#_GetName:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
;
; Line 277:	

;;
; Line 278:	      if (!skipspace(s))

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	GOSUB	#_skipspace:PC.A
	PARMADJ	#4.N
	T287.I =   RV.T123.I
	GOSUB	POSTLUDE
	CONDGO	L_96:PC ; T287.I != #0.I
	BLOCK	68
;
; Line 279:	        return FALSE ;

;
	RV.T288.I =   #0.I
	GOTO	L_56:PC
	BLOCK	69
L_96:
;
; Line 280:	

;;
; Line 281:	       

;;
; Line 282:	      if (*(*s)++ != '>')

;
	T289.A =   *_s:LINK(12).A.A
	T290.A =   *_s:LINK(12).A.A
	T291.A = T290.A + #1.UI
	T292.I =   *T289.A.C
	CONDGO	L_97:PC ; T292.I == #3E.I
	BLOCK	70
;
; Line 283:	        return FALSE ;

;
	RV.T293.I =   #0.I
	GOTO	L_56:PC
	BLOCK	71
L_97:
;
; Line 284:	

;;
; Line 285:	       

;;
; Line 286:	      Node->textData = stripdup(szText) ;

;
	GOSUB	PRELUDE
	PARM	#_szText:LINK(-2048).A
	GOSUB	#_stripdup:PC.A
	PARMADJ	#4.N
	T294.A =   RV.T130.A
	GOSUB	POSTLUDE
	T295.A =  STRUCT _Node:LINK(8).A,#8.I
	*T295.A.A =   T294.A
;
; Line 287:	      if (!Node->textData)

;
	T296.A =   T295.A
	T297.A =   *T296.A.A
	CONDGO	L_98:PC ; T297.A != #0.A
	BLOCK	72
;
; Line 288:	        return FALSE ;

;
	RV.T298.I =   #0.I
	GOTO	L_56:PC
	BLOCK	73
L_98:
;
; Line 289:	

;;
; Line 290:	       

;;
; Line 291:	      return !strcmp(Node->elementType,attr) ;

;
	GOSUB	PRELUDE
	PARM	#_attr:LINK(-2176).A
	T299.A =   T12.A
	PARM	*T299.A.A
	GOSUB	#_strcmp:PC.A
	PARMADJ	#8.N
	T300.I =   RV.T137.I
	GOSUB	POSTLUDE
	T301.UC = #0.A == T300.I
	T302.I =   T301.UC
	RV.T303.I =   T302.I
	GOTO	L_56:PC
;
; Line 292:	    }

;
	BLOCK	74
L_95:
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	75
L_99:
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	76
L_101:
;
; Line 293:	

;;
; Line 294:	     
;;
; Line 295:	

;
	T304.A =   *_s:LINK(12).A.A
	*_s:LINK(12).A.A = T304.A - #1.UI
	T305.A =   *_s:LINK(12).A.A
	T306.I =   *T305.A.C
	CONDGO	L_99:PC ; T306.I != #3C.I
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	77
L_100:
;
; Line 296:	    while (*(--*s) != '<') ;

;;
; Line 297:	

;;
; Line 298:	     

;;
; Line 299:	    child = calloc(sizeof(struct xmlNode),1) ;

;
	GOSUB	PRELUDE
	PARM	#1.I
	PARM	#18.UI
	GOSUB	#_calloc:PC.A
	PARMADJ	#8.N
	T308.A =   RV.T146.A
	GOSUB	POSTLUDE
	T309[child].A =   T308.A
;
; Line 300:	    if (!child)

;
	CONDGO	L_105:PC ; T309[child].A != #0.A
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	78
;
; Line 301:	        return FALSE ;

;
	RV.T310.I =   #0.I
	GOTO	L_56:PC
	BLOCK	79
L_102:
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	80
L_103:
;
; Line 305:	        link = &((*link)->next) ;

;
	T312[link].A =   *T264[link].A.A
	BLOCK END	1
;	Live: TEMP156, TEMP158, 
	BLOCK	81
L_105:
;
; Line 302:	

;;
; Line 303:	     

;;
; Line 304:	    while (*link)

;
	T311.A =   *T264[link].A.A
	CONDGO	L_103:PC ; T311.A != #0.A
	BLOCK END	1
;	Live: TEMP156, TEMP158, 
	BLOCK	82
L_104:
;
; Line 306:	    *link = child ;

;
	*T264[link].A.A =   T309[child].A
;
; Line 307:	

;;
; Line 308:	     

;;
; Line 309:	    if (!ParseNode(child,s))

;
	GOSUB	PRELUDE
	PARM	_s:LINK(12).A
	PARM	T309[child].A
	GOSUB	#_ParseNode:PC.A
	PARMADJ	#8.N
	T313.I =   RV.T150.I
	GOSUB	POSTLUDE
	CONDGO	L_106:PC ; T313.I != #0.I
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	83
;
; Line 310:	        return FALSE ;

;
	RV.T314.I =   #0.I
	GOTO	L_56:PC
	BLOCK	84
L_106:
;
; Line 311:	

;;
; Line 312:	  }

;
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	85
L_89:
;
; Line 251:	   

;;
; Line 252:	  while(**s)

;
	T261.A =   *_s:LINK(12).A.A
	T262.C =   *T261.A.C
	CONDGO	L_87:PC ; T262.C != #0.C
	BLOCK END	1
;	Live: TEMP156, 
	BLOCK	86
L_88:
;
; Line 313:	  return FALSE ;

;
	RV.T315.I =   #0.I
;
; Line 314:	}

;
	BLOCK	87
L_56:
	EPILOGUE	#0.N
	RET	#0.N
_WriteNode:

*************************FUNCTION WriteNode********************************
;
; Line 316:	static void WriteNode(FILE *out, struct xmlNode *node, int indent) 

;
	BLOCK	1
	PROLOGUE	#0.N,#C.N
;
; Line 317:	{

;
;
; Line 318:	  int i ;

;;
; Line 319:	  struct xmlNode *x = node->children ;

;
	T22.A =  STRUCT _node:LINK(12).A,#10.I
	T23[x].A =   *T22.A.A
;
; Line 320:	  struct xmlAttr *z = node->attribs ;

;
	T24.A =  STRUCT _node:LINK(12).A,#C.I
	T25[z].A =   *T24.A.A
;
; Line 321:	

;;
; Line 322:	   

;;
; Line 323:	  for (i=0; i < indent; i++)

;
	GOTO	L_112:PC
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	2
L_111:
;
; Line 324:	    fprintf(out,"\t") ;

;
	GOSUB	PRELUDE
	PARM	#L_115:PC.A
	PARM	_out:LINK(8).A
	GOSUB	#_fprintf:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	3
L_114:
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	4
L_112:
	CONDGO	L_111:PC ; #0.I S< _indent:LINK(16).I
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	5
L_113:
;
; Line 325:	

;;
; Line 326:	   

;;
; Line 327:	  fprintf(out,"<%s",node->elementType) ;

;
	GOSUB	PRELUDE
	T28.A =  STRUCT _node:LINK(12).A,#4.I
	PARM	*T28.A.A
	PARM	#L_116:PC.A
	PARM	_out:LINK(8).A
	GOSUB	#_fprintf:PC.A
	PARMADJ	#C.N
	GOSUB	POSTLUDE
	GOTO	L_119:PC
	BLOCK	6
L_117:
;
; Line 330:	    while (z) {

;
;
; Line 331:	        fprintf(out," %s=\"%s\"",z->name,xmlConvertString(z->value,TRUE)) ;

;
	GOSUB	PRELUDE
	GOSUB	PRELUDE
	PARM	#1.I
	T29.A =  STRUCT #0.A,#8.I
	PARM	*T29.A.A
	GOSUB	#_xmlConvertString:PC.A
	PARMADJ	#8.N
	T30.A =   RV.T4.A
	GOSUB	POSTLUDE
	PARM	T30.A
	T31.A =  STRUCT #0.A,#4.I
	PARM	*T31.A.A
	PARM	#L_120:PC.A
	PARM	_out:LINK(8).A
	GOSUB	#_fprintf:PC.A
	PARMADJ	#10.N
	GOSUB	POSTLUDE
;
; Line 332:	        z= z->next ;

;
	T32[z].A =   *T25[z].A.A
;
; Line 333:	    }

;
	BLOCK END	1
;	Live: TEMP21, 
	BLOCK	7
L_119:
;
; Line 328:	

;;
; Line 329:	   

;
	CONDGO	L_117:PC ; T25[z].A != #0.A
	BLOCK END	1
;	Live: TEMP21, 
	BLOCK	8
L_118:
;
; Line 334:	

;;
; Line 335:	  if (x || node->textData[0]) {

;
	CONDGO	L_140:PC ; T23[x].A != #0.A
	BLOCK	9
	T33.A =  STRUCT _node:LINK(12).A,#8.I
	T34.A =   *T33.A.A
	T35.C =   *T34.A.C
	CONDGO	L_121:PC ; T35.C == #0.C
	BLOCK	10
L_140:
;
; Line 336:	

;;
; Line 337:	     

;;
; Line 338:	    fprintf(out,">\n") ;

;
	GOSUB	PRELUDE
	PARM	#L_122:PC.A
	PARM	_out:LINK(8).A
	GOSUB	#_fprintf:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
;
; Line 339:	

;;
; Line 340:	#ifdef STRIPTEXT

;;
; Line 341:	     

;
	T36[i].I =   T19[i].I
	GOTO	L_124:PC
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	11
L_123:
;
; Line 343:	      fprintf(out,"\t") ;

;
	GOSUB	PRELUDE
	PARM	#L_115:PC.A
	PARM	_out:LINK(8).A
	GOSUB	#_fprintf:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	12
L_126:
	T38[i].I = T36[i].I + #1.I
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	13
L_124:
;
; Line 342:	    for (i=0; i < indent+1; i++)

;
	T37.I = _indent:LINK(16).I + #1.I
	CONDGO	L_123:PC ; T36[i].I S< T37.I
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	14
L_125:
;
; Line 344:	#endif

;;
; Line 345:	

;;
; Line 346:	     

;;
; Line 347:	    if (node->textData[0])

;
	T39.A =  STRUCT _node:LINK(12).A,#8.I
	T40.A =   *T39.A.A
	T41.C =   *T40.A.C
	CONDGO	L_127:PC ; T41.C == #0.C
	BLOCK	15
;
; Line 348:	        fprintf(out,"%s",xmlConvertString(node->textData,FALSE)) ;

;
	GOSUB	PRELUDE
	GOSUB	PRELUDE
	PARM	#0.I
	T42.A =   T11.A
	PARM	*T42.A.A
	GOSUB	#_xmlConvertString:PC.A
	PARMADJ	#8.N
	T43.A =   RV.T15.A
	GOSUB	POSTLUDE
	PARM	T43.A
	PARM	#L_128:PC.A
	PARM	_out:LINK(8).A
	GOSUB	#_fprintf:PC.A
	PARMADJ	#C.N
	GOSUB	POSTLUDE
	BLOCK	16
L_127:
;
; Line 349:	    fprintf(out,"\n") ;

;
	GOSUB	PRELUDE
	PARM	#L_129:PC.A
	PARM	_out:LINK(8).A
	GOSUB	#_fprintf:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
	GOTO	L_132:PC
	BLOCK	17
L_130:
;
; Line 352:	    while (x) {

;
;
; Line 353:	        WriteNode(out,x,indent + 1) ;

;
	GOSUB	PRELUDE
	T44.I =   T10.I
	PARM	T44.I
	PARM	#0.A
	PARM	_out:LINK(8).A
	GOSUB	#_WriteNode:PC.A
	PARMADJ	#C.N
	GOSUB	POSTLUDE
;
; Line 354:	        x = x->next ;

;
	T45[x].A =   *T23[x].A.A
;
; Line 355:	    }

;
	BLOCK END	1
;	Live: TEMP20, 
	BLOCK	18
L_132:
;
; Line 350:	

;;
; Line 351:	     

;
	CONDGO	L_130:PC ; T23[x].A != #0.A
	BLOCK END	1
;	Live: TEMP20, 
	BLOCK	19
L_131:
;
; Line 356:	

;;
; Line 357:	     

;
	T46[i].I =   T19[i].I
	GOTO	L_134:PC
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	20
L_133:
;
; Line 359:	        fprintf(out,"\t") ;

;
	GOSUB	PRELUDE
	PARM	#L_115:PC.A
	PARM	_out:LINK(8).A
	GOSUB	#_fprintf:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	21
L_136:
	T47[i].I = T46[i].I + #1.I
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	22
L_134:
;
; Line 358:	    for (i=0; i < indent; i++)

;
	CONDGO	L_133:PC ; T46[i].I S< _indent:LINK(16).I
	BLOCK END	1
;	Live: TEMP19, 
	BLOCK	23
L_135:
;
; Line 360:	    fprintf(out,"</%s>\n",node->elementType) ;

;
	GOSUB	PRELUDE
	T48.A =   T2.A
	PARM	*T48.A.A
	PARM	#L_137:PC.A
	PARM	_out:LINK(8).A
	GOSUB	#_fprintf:PC.A
	PARMADJ	#C.N
	GOSUB	POSTLUDE
;
; Line 361:	

;;
; Line 362:	  } else

;
	GOTO	L_138:PC
	BLOCK	24
L_121:
;
; Line 363:	     

;;
; Line 364:	    fprintf(out,"/>\n") ;

;
	GOSUB	PRELUDE
	PARM	#L_139:PC.A
	PARM	_out:LINK(8).A
	GOSUB	#_fprintf:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
	BLOCK	25
L_138:
;
; Line 365:	}

;
	BLOCK	26
L_110:
	EPILOGUE	#0.N
	RET	#0.N
_RemoveDocTags:

*************************FUNCTION RemoveDocTags********************************
;
; Line 367:	static void RemoveDocTags(char * s,const char * szleft,const char * szright)

;
	BLOCK	1
	PROLOGUE	#0.N,#8.N
;
; Line 368:	{

;
;
; Line 369:	  char * s1,*s2;

;;
; Line 370:	  while(1)

;
	BLOCK	2
L_143:
;
; Line 371:	  {

;
;
; Line 372:	    s1 = strstr(s,szleft);

;
	GOSUB	PRELUDE
	PARM	_szleft:LINK(12).A
	PARM	_s:LINK(8).A
	GOSUB	#_strstr:PC.A
	PARMADJ	#8.N
	T11.A =   RV.T0.A
	GOSUB	POSTLUDE
	T12[s1].A =   T11.A
;
; Line 373:	    if(s1==NULL)

;
	CONDGO	L_144:PC ; T12[s1].A == #0.I
	BLOCK	4
L_146:
;
; Line 375:	    s2 = strstr(s1,szright);

;
	GOSUB	PRELUDE
	PARM	_szright:LINK(16).A
	PARM	T12[s1].A
	GOSUB	#_strstr:PC.A
	PARMADJ	#8.N
	T13.A =   RV.T2.A
	GOSUB	POSTLUDE
	T14[s2].A =   T13.A
;
; Line 376:	    if (s2)

;
	CONDGO	L_150:PC ; T14[s2].A != #0.A
	BLOCK	6
L_148:
;
; Line 378:	            *s1++ = ' ' ;

;
	T18.A =   T12[s1].A
	T19[s1].A = T12[s1].A + #1.UI
	*T18.A.C =   #20.C
	BLOCK END	1
;	Live: TEMP9, 
	BLOCK	7
L_150:
;
; Line 377:	        while (s1 != s2 + strlen(szright))

;
	GOSUB	PRELUDE
	PARM	_szright:LINK(16).A
	GOSUB	#_strlen:PC.A
	PARMADJ	#4.N
	T15.UI =   RV.T5.UI
	GOSUB	POSTLUDE
	T16.A =   T15.UI
	T17.A = T14[s2].A + T16.A
	CONDGO	L_148:PC ; T12[s1].A != T17.A
	BLOCK END	1
;	Live: TEMP9, 
	BLOCK	8
L_149:
	BLOCK	9
L_147:
;
; Line 379:	  }

;
	BLOCK	10
L_145:
	GOTO	L_143:PC
	BLOCK	11
L_144:
;
; Line 380:	  return;

;
;
; Line 381:	}

;
	BLOCK	12
L_142:
	EPILOGUE	#0.N
	RET	#0.N

	PUBLIC	_xmlConvertString
_xmlConvertString:

*************************FUNCTION xmlConvertString********************************
	BLOCK	1
	PROLOGUE	#0.N,#8.N
;
; Line 387:	    static char buf[MAX_XML_TEXT_LEN] ;

;;
; Line 388:	    char *p = buf ;

;
;
; Line 389:	    int len = 0 ;

;
;
; Line 390:	    while (*s && len < MAX_XML_TEXT_LEN-1) {

;
	GOTO	L_156:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	2
L_154:
;
; Line 391:	

;;
; Line 392:	         

;;
; Line 393:	        while (*s && !isspecial(*s) && len < MAX_XML_TEXT_LEN-1)

;
	GOTO	L_159:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	3
L_157:
;
; Line 394:	            *p++ = *s++,len++ ;

;
	T37.A =   _s:LINK(8).A
	_s:LINK(8).A = _s:LINK(8).A + #1.UI
	T38.A =   #L_153:RAM.A
	T39[p].A = #L_153:RAM.A + #1.UI
	*T38.A.C =   *T37.A.C
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	4
L_159:
	T33.C =   *_s:LINK(8).A.C
	CONDGO	L_178:PC ; T33.C == #0.C
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	5
	GOSUB	PRELUDE
	T34.I =   *_s:LINK(8).A.C
	PARM	T34.I
	GOSUB	#_isspecial:PC.A
	PARMADJ	#4.N
	T35.I =   RV.T4.I
	GOSUB	POSTLUDE
	CONDGO	L_178:PC ; T35.I != #0.I
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	6
	T36.I =   T25.I
	CONDGO	L_157:PC ; #0.I S< T36.I
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	7
L_178:
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	8
L_158:
;
; Line 395:	

;;
; Line 396:	         

;;
; Line 397:	        if (len + 7 >= MAX_XML_TEXT_LEN) {

;
	GOTO	L_160:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	9
;
; Line 398:	            *p = 0 ;

;
;
; Line 399:	            return buf ;

;
;
; Line 400:	        }

;
	BLOCK	10
L_160:
;
; Line 401:	

;;
; Line 402:	         

;;
; Line 403:	        switch(*s) {

;
	COSWITCH(*_s:LINK(8).A.C,#5.N,#1D.N,L_176:PC)
	SWBRANCH(#22.N,L_162:PC)
	SWBRANCH(#26.N,L_170:PC)
	SWBRANCH(#27.N,L_166:PC)
	SWBRANCH(#3C.N,L_172:PC)
	SWBRANCH(#3E.N,L_174:PC)
;
; Line 404:	            case '"' :

;
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	11
L_162:
;
; Line 405:	                if (attr)

;
	CONDGO	L_163:PC ; _attr:LINK(12).I == #0.I
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	12
;
; Line 406:	                    strcpy(p,"&quot;") ;

;
	GOSUB	PRELUDE
	PARM	#L_164:PC.A
	PARM	#L_153:RAM.A
	GOSUB	#_strcpy:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
	GOTO	L_161:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	13
;
; Line 407:	                else {

;
L_163:
;
; Line 408:	                    *p++ = *s++,len++ ;

;
	T43.A =   _s:LINK(8).A
	_s:LINK(8).A = _s:LINK(8).A + #1.UI
	T44.A =   #L_153:RAM.A
	T45[p].A = #L_153:RAM.A + #1.UI
	*T44.A.C =   *T43.A.C
;
; Line 409:	                    *p = 0 ;

;
	*T45[p].A.C =   #0.C
;
; Line 410:	                }

;
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	14
L_165:
;
; Line 411:	                break ;

;
	GOTO	L_161:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	15
L_166:
;
; Line 412:	            case '\'':

;;
; Line 413:	                if (attr)

;
	CONDGO	L_167:PC ; _attr:LINK(12).I == #0.I
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	16
;
; Line 414:	                    strcpy(p,"&apos;") ;

;
	GOSUB	PRELUDE
	PARM	#L_168:PC.A
	PARM	#L_153:RAM.A
	GOSUB	#_strcpy:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
	GOTO	L_161:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	17
;
; Line 415:	                else {

;
L_167:
;
; Line 416:	                    *p++ = *s++,len++ ;

;
	T47.A =   _s:LINK(8).A
	_s:LINK(8).A = _s:LINK(8).A + #1.UI
	T48.A =   #L_153:RAM.A
	T49[p].A = #L_153:RAM.A + #1.UI
	*T48.A.C =   *T47.A.C
;
; Line 417:	                    *p = 0 ;

;
	*T49[p].A.C =   #0.C
;
; Line 418:	                }

;
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	18
L_169:
;
; Line 419:	                break ;

;
	GOTO	L_161:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	19
L_170:
;
; Line 420:	            case '&':

;;
; Line 421:	                strcpy(p,"&amp;") ;

;
	GOSUB	PRELUDE
	PARM	#L_171:PC.A
	PARM	#L_153:RAM.A
	GOSUB	#_strcpy:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
;
; Line 422:	                break ;

;
	GOTO	L_161:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	20
L_172:
;
; Line 423:	            case '<':

;;
; Line 424:	                strcpy(p,"&lt;") ;

;
	GOSUB	PRELUDE
	PARM	#L_173:PC.A
	PARM	#L_153:RAM.A
	GOSUB	#_strcpy:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
;
; Line 425:	                break ;

;
	GOTO	L_161:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	21
L_174:
;
; Line 426:	            case '>':

;;
; Line 427:	                strcpy(p,"&gt;") ;

;
	GOSUB	PRELUDE
	PARM	#L_175:PC.A
	PARM	#L_153:RAM.A
	GOSUB	#_strcpy:PC.A
	PARMADJ	#8.N
	GOSUB	POSTLUDE
;
; Line 428:	                break ;

;
	GOTO	L_161:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	22
L_176:
;
; Line 429:	            default:

;;
; Line 430:	                 

;;
; Line 431:	                *p = 0 ;

;
	*T29[p].A.C =   #0.C
;
; Line 432:	                break ;

;
	GOTO	L_161:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	23
;
; Line 433:	        }

;
L_161:
;
; Line 434:	         

;;
; Line 435:	        if (*s)

;
	T51.C =   *_s:LINK(8).A.C
	CONDGO	L_177:PC ; T51.C == #0.C
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	24
;
; Line 436:	            s++ ;

;
	_s:LINK(8).A = _s:LINK(8).A + #1.UI
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	25
L_177:
;
; Line 437:	        len += strlen(p) ;

;
	T52.UI =   #0.I
	GOSUB	PRELUDE
	PARM	#L_153:RAM.A
	GOSUB	#_strlen:PC.A
	PARMADJ	#4.N
	T53.UI =   RV.T15.UI
	GOSUB	POSTLUDE
	T54.UI = T52.UI + T53.UI
	T55.I =   T54.UI
	T56[len].I =   T55.I
;
; Line 438:	        p += strlen(p) ;

;
	GOSUB	PRELUDE
	PARM	#L_153:RAM.A
	GOSUB	#_strlen:PC.A
	PARMADJ	#4.N
	T57.UI =   RV.T19.UI
	GOSUB	POSTLUDE
	T58.US =  ARR<< T57.UI,#2.UI
	T59.A =   T58.US
	T60.A = #L_153:RAM.A + T59.A
	T61[p].A =   T60.A
;
; Line 439:	    }

;
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	26
L_156:
	T31.C =   *_s:LINK(8).A.C
	CONDGO	L_179:PC ; T31.C == #0.C
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	27
	GOTO	L_159:PC
	BLOCK END	1
;	Live: TEMP28, TEMP27, 
	BLOCK	28
L_179:
	BLOCK END	1
;	Live: TEMP27, 
	BLOCK	29
L_155:
;
; Line 440:	    *p = 0 ;

;
	*T29[p].A.C =   #0.C
;
; Line 441:	    return buf ;

;
	RV.T62.A =   T27[p].A
;
; Line 442:	

;;
; Line 443:	}

;
	BLOCK	30
L_152:
	EPILOGUE	#0.N
	RET	#0.N

	PUBLIC	_xmlFree
_xmlFree:

*************************FUNCTION xmlFree********************************
	BLOCK	1
	PROLOGUE	#0.N,#10.N
;
; Line 448:	  struct xmlAttr *z ;

;;
; Line 449:	  if (!Node)

;
	CONDGO	L_181:PC ; _Node:LINK(8).A == #0.A
	BLOCK	3
L_182:
;
; Line 451:	  x = Node->children ;

;
	T10.A =  STRUCT _Node:LINK(8).A,#10.I
	T11[x].A =   *T10.A.A
;
; Line 452:	  z = Node->attribs ;

;
	T12.A =  STRUCT _Node:LINK(8).A,#C.I
	T13[z].A =   *T12.A.A
	GOTO	L_185:PC
	BLOCK END	1
;	Live: TEMP6, 
	BLOCK	4
L_183:
;
; Line 455:	  while (x) {

;
;
; Line 456:	    struct xmlNode *y = x->next ;

;
	T14[y].A =   *T11[x].A.A
;
; Line 457:	    xmlFree(x) ;

;
	GOSUB	PRELUDE
	PARM	#0.A
	GOSUB	#_xmlFree:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 458:	    free(x) ;

;
	GOSUB	PRELUDE
	PARM	#0.A
	GOSUB	#_free:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 459:	    x = y ;

;
	T15[x].A =   T14[y].A
;
; Line 460:	  }

;
	BLOCK END	1
;	Live: TEMP6, 
	BLOCK	5
L_185:
;
; Line 453:	

;;
; Line 454:	   

;
	CONDGO	L_183:PC ; T11[x].A != #0.A
	BLOCK END	1
;	Live: TEMP6, 
	BLOCK	6
L_184:
	GOTO	L_188:PC
	BLOCK	7
L_186:
;
; Line 463:	  while (z) {

;
;
; Line 464:	    struct xmlAttr *y = z->next ;

;
	T16[y].A =   *T13[z].A.A
;
; Line 465:	    free(z->name) ;

;
	GOSUB	PRELUDE
	T17.A =  STRUCT #0.A,#4.I
	PARM	*T17.A.A
	GOSUB	#_free:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 466:	    free(z->value) ;

;
	GOSUB	PRELUDE
	T18.A =  STRUCT #0.A,#8.I
	PARM	*T18.A.A
	GOSUB	#_free:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 467:	    free(z) ;

;
	GOSUB	PRELUDE
	PARM	#0.A
	GOSUB	#_free:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 468:	    z = y ;

;
	T19[z].A =   T16[y].A
;
; Line 469:	  }

;
	BLOCK END	1
;	Live: TEMP7, 
	BLOCK	8
L_188:
;
; Line 461:	

;;
; Line 462:	   

;
	CONDGO	L_186:PC ; T13[z].A != #0.A
	BLOCK END	1
;	Live: TEMP7, 
	BLOCK	9
L_187:
;
; Line 470:	

;;
; Line 471:	   

;;
; Line 472:	  free(Node->elementType) ;

;
	GOSUB	PRELUDE
	T20.A =  STRUCT _Node:LINK(8).A,#4.I
	PARM	*T20.A.A
	GOSUB	#_free:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 473:	

;;
; Line 474:	   

;;
; Line 475:	  free(Node->textData) ;

;
	GOSUB	PRELUDE
	T21.A =  STRUCT _Node:LINK(8).A,#8.I
	PARM	*T21.A.A
	GOSUB	#_free:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 476:	}

;
	BLOCK	10
L_181:
	EPILOGUE	#0.N
	RET	#0.N

	PUBLIC	_xmlReadFile
_xmlReadFile:

*************************FUNCTION xmlReadFile********************************
	BLOCK	1
	PROLOGUE	#0.N,#10.N
;
; Line 482:	    struct xmlNode *root ;

;;
; Line 483:	

;;
; Line 484:	    if (!in)

;
	CONDGO	L_191:PC ; _in:LINK(8).A != #0.A
	BLOCK	2
;
; Line 485:	        return 0 ;

;
	RV.T28.A =   #0.I
	GOTO	L_190:PC
	BLOCK	3
L_191:
;
; Line 486:	

;;
; Line 487:	     

;;
; Line 488:	    fseek(in,0,SEEK_END) ;

;
	GOSUB	PRELUDE
	PARM	#2.I
	PARM	#0.I
	PARM	_in:LINK(8).A
	GOSUB	#_fseek:PC.A
	PARMADJ	#C.N
	GOSUB	POSTLUDE
;
; Line 489:	    size = ftell(in) ;

;
	GOSUB	PRELUDE
	PARM	_in:LINK(8).A
	GOSUB	#_ftell:PC.A
	PARMADJ	#4.N
	T30.L =   RV.T3.L
	GOSUB	POSTLUDE
	T31.I =   T30.L
	T32[size].I =   T31.I
;
; Line 490:	

;;
; Line 491:	     

;;
; Line 492:	    data = calloc(size+1,1) ;

;
	GOSUB	PRELUDE
	PARM	#1.I
	T34.I = T32[size].I + #1.I
	T35.UI =   T34.I
	PARM	T35.UI
	GOSUB	#_calloc:PC.A
	PARMADJ	#8.N
	T36.A =   RV.T9.A
	GOSUB	POSTLUDE
	T37[data].A =   T36.A
;
; Line 493:	    fseek(in,0,SEEK_SET) ;

;
	GOSUB	PRELUDE
	PARM	#0.I
	T38.L =   T2.L
	PARM	T38.L
	PARM	_in:LINK(8).A
	GOSUB	#_fseek:PC.A
	PARMADJ	#C.N
	GOSUB	POSTLUDE
;
; Line 494:	    fread(data,1,size,in) ;

;
	GOSUB	PRELUDE
	PARM	_in:LINK(8).A
	T39.UI =   T32[size].I
	PARM	T39.UI
	T40.UI =   T6.UI
	PARM	T40.UI
	PARM	T37[data].A
	GOSUB	#_fread:PC.A
	PARMADJ	#10.N
	GOSUB	POSTLUDE
;
; Line 495:	

;;
; Line 496:	     

;;
; Line 497:	    RemoveDocTags(data,"<?","?>");

;
	GOSUB	PRELUDE
	PARM	#L_193:PC.A
	PARM	#L_192:PC.A
	PARM	T37[data].A
	GOSUB	#_RemoveDocTags:PC.A
	PARMADJ	#C.N
	GOSUB	POSTLUDE
;
; Line 498:	    RemoveDocTags(data,"<!--","-->");

;
	GOSUB	PRELUDE
	PARM	#L_195:PC.A
	PARM	#L_194:PC.A
	PARM	T37[data].A
	GOSUB	#_RemoveDocTags:PC.A
	PARMADJ	#C.N
	GOSUB	POSTLUDE
;
; Line 499:	

;;
; Line 500:	     

;;
; Line 501:	    root = calloc(sizeof(struct xmlNode),1) ;

;
	GOSUB	PRELUDE
	T41.UI =   T6.UI
	PARM	T41.UI
	PARM	#18.UI
	GOSUB	#_calloc:PC.A
	PARMADJ	#8.N
	T42.A =   RV.T15.A
	GOSUB	POSTLUDE
	T43[root].A =   T42.A
;
; Line 502:	    if (!root) {

;
	CONDGO	L_196:PC ; T43[root].A != #0.A
	BLOCK	4
;
; Line 503:	        free(data) ;

;
	GOSUB	PRELUDE
	PARM	T37[data].A
	GOSUB	#_free:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 504:	        return 0 ;

;
	T44.A =   T2.L
	RV.T45.A =   T44.A
	GOTO	L_190:PC
;
; Line 505:	    }

;
	BLOCK	5
L_196:
;
; Line 506:	

;;
; Line 507:	     

;;
; Line 508:	    p = data ;

;
	_p:LINK(-12).A =   T37[data].A
;
; Line 509:	    if (!ParseNode(root,&p)) {

;
	GOSUB	PRELUDE
	PARM	#_p:LINK(-12).A
	PARM	T43[root].A
	GOSUB	#_ParseNode:PC.A
	PARMADJ	#8.N
	T46.I =   RV.T19.I
	GOSUB	POSTLUDE
	CONDGO	L_197:PC ; T46.I != #0.I
	BLOCK	6
;
; Line 510:	        free(data) ;

;
	GOSUB	PRELUDE
	PARM	T37[data].A
	GOSUB	#_free:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 511:	        xmlFree(root) ;

;
	GOSUB	PRELUDE
	PARM	T43[root].A
	GOSUB	#_xmlFree:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 512:	        return 0 ;

;
	RV.T48.A =   #0.I
	GOTO	L_190:PC
;
; Line 513:	    }

;
	BLOCK	7
L_197:
;
; Line 514:	

;;
; Line 515:	     

;;
; Line 516:	    free(data) ;

;
	GOSUB	PRELUDE
	PARM	T37[data].A
	GOSUB	#_free:PC.A
	PARMADJ	#4.N
	GOSUB	POSTLUDE
;
; Line 517:	    return root ;

;
	RV.T49.A =   T43[root].A
;
; Line 518:	

;;
; Line 519:	}

;
	BLOCK	8
L_190:
	EPILOGUE	#0.N
	RET	#0.N

	PUBLIC	_xmlWriteFile
_xmlWriteFile:

*************************FUNCTION xmlWriteFile********************************
	BLOCK	1
	PROLOGUE	#0.N,#0.N
;
; Line 525:	    WriteNode(out,root,0) ;

;
	GOSUB	PRELUDE
	PARM	#0.I
	PARM	_root:LINK(12).A
	PARM	_out:LINK(8).A
	GOSUB	#_WriteNode:PC.A
	PARMADJ	#C.N
	GOSUB	POSTLUDE
;
; Line 526:	}

;
	BLOCK	2
L_199:
	EPILOGUE	#0.N
	RET	#0.N
	SECTION	bss
L_153:
	DS.B	$800
	SECTION	string
L_195:
	DC.B	$2D,$2D,$3E,$0
L_194:
	DC.B	$3C,$21,$2D,$2D,$0
L_193:
	DC.B	$3F,$3E,$0
L_192:
	DC.B	$3C,$3F,$0
L_175:
	DC.B	$26,$67,$74,$3B,$0
L_173:
	DC.B	$26,$6C,$74,$3B,$0
L_171:
	DC.B	$26,$61,$6D,$70,$3B,$0
L_168:
	DC.B	$26,$61,$70,$6F,$73,$3B,$0
L_164:
	DC.B	$26,$71,$75,$6F,$74,$3B,$0
L_139:
	DC.B	$2F,$3E,$A,$0
L_137:
	DC.B	$3C,$2F,$25,$73,$3E,$A,$0
L_129:
	DC.B	$A,$0
L_128:
	DC.B	$25,$73,$0
L_122:
	DC.B	$3E,$A,$0
L_120:
	DC.B	$20,$25,$73,$3D,$22,$25,$73,$22,$0
L_116:
	DC.B	$3C,$25,$73,$0
L_115:
	DC.B	$9,$0
L_64:
	DC.B	$0
L_27:
	DC.B	$67,$74,$3B,$0
L_24:
	DC.B	$6C,$74,$3B,$0
L_21:
	DC.B	$61,$70,$6F,$73,$3B,$0
L_18:
	DC.B	$71,$75,$6F,$74,$3B,$0
L_15:
	DC.B	$61,$6D,$70,$3B,$0
	SECTION	code
	EXTRN	_ftell:PROC
	EXTRN	_fseek:PROC
	EXTRN	_fread:PROC
	EXTRN	_fprintf:PROC
	EXTRN	_free:PROC
	EXTRN	_calloc:PROC
	EXTRN	_strstr:PROC
	EXTRN	_strncmp:PROC
	EXTRN	_strlen:PROC
	EXTRN	_strdup:PROC
	EXTRN	_strcpy:PROC
	EXTRN	_strcmp:PROC
	EXTRN	__ctype:DATA

